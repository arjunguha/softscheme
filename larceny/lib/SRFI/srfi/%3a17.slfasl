#!fasl
(define .petit-bootstrap-id-3e81a4b1829ab6e1c24b9967a4910c84 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/%3a17.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-3e81a4b1829ab6e1c24b9967a4910c84 0
'#(#f #( #f #ex:unspecified #|\x0;getter-with-setter~1pxGHH~43779| #|\x0;setter~1pxGHH~43778| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~43769| 0 1 2 3) (|\x0;env~1pxGHH~43757| 4 1 2 3)) (4 (((dummy |\x0;c~1pxGHH~43746|) . #f) ((?i) . #f) ((?v) . #f))) (3 (((getter-with-setter) variable |\x0;getter-with-setter~1pxGHH~43779| (0) #f (srfi :17 generalized-set!)) ((setter) variable |\x0;setter~1pxGHH~43778| (0) #f (srfi :17 generalized-set!)) ((set!) macro |\x0;set!~1pxGHH~43745| (0) #f (srfi :17 generalized-set!)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0) #f (larceny PRIMITIVES)) ((div0) variable div0 (0) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0) #f (larceny PRIMITIVES)) ((mod) variable mod (0) #f (larceny PRIMITIVES)) ((div) variable div (0) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((tan) variable tan (0) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0) #f (larceny PRIMITIVES)) ((sin) variable sin (0) #f (larceny PRIMITIVES)) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0) #f (larceny PRIMITIVES)) ((log) variable log (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exp) variable exp (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((cos) variable cos (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((atan) variable atan (0) #f (larceny PRIMITIVES)) ((asin) variable asin (0) #f (larceny PRIMITIVES)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((angle) variable angle (0) #f (larceny PRIMITIVES)) ((acos) variable acos (0) #f (larceny PRIMITIVES)) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((r6rs:set!) macro set! (1 0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((cons*) variable cons* (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((assp) variable assp (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((memp) variable memp (0) #f (larceny PRIMITIVES)) ((remv) variable remv (0) #f (larceny PRIMITIVES)) ((remq) variable remq (0) #f (larceny PRIMITIVES)) ((remove) variable |\x0;remove~1pxGHH~1538| (0) #f (rnrs lists)) ((remp) variable remp (0) #f (larceny PRIMITIVES)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0) #f (rnrs lists)) ((fold-left) variable fold-left (0) #f (larceny PRIMITIVES)) ((partition) variable partition (0) #f (larceny PRIMITIVES)) ((filter) variable filter (0) #f (larceny PRIMITIVES)) ((exists) variable exists (0) #f (larceny PRIMITIVES)) ((for-all) variable for-all (0) #f (larceny PRIMITIVES)) ((find) variable find (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~43746|) variable |\x0;x~1pxGHH~43748| (0) #f (srfi :17 generalized-set!)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~43746|) . #f) ((?e0) . #f) ((?e1) . #f) ((?v) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~43748|))) (3379 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? setter (|\x0;env~1pxGHH~43769|) (srfi :17 generalized-set!) #ex:syntax-rename #append r6rs:set! (|\x0;env~1pxGHH~43757|) #ex:invalid-form)
 |\x0;set!~1pxGHH~43745| #ex:register-macro! #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;getter-with-setter~1pxGHH~43779| #|\x0;setter~1pxGHH~43778| #set-car! #car #set-cdr! #cdr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43812| |\x0;v~1pxGHH~43813|)))
 #caar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43815| |\x0;v~1pxGHH~43816|)))
 #cadr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43818| |\x0;v~1pxGHH~43819|)))
 #cdar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43821| |\x0;v~1pxGHH~43822|)))
 #cddr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43824| |\x0;v~1pxGHH~43825|)))
 #caaar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43827| |\x0;v~1pxGHH~43828|)))
 #caadr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43830| |\x0;v~1pxGHH~43831|)))
 #cadar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43833| |\x0;v~1pxGHH~43834|)))
 #caddr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43836| |\x0;v~1pxGHH~43837|)))
 #cdaar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43839| |\x0;v~1pxGHH~43840|)))
 #cdadr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43842| |\x0;v~1pxGHH~43843|)))
 #cddar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43845| |\x0;v~1pxGHH~43846|)))
 #cdddr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43848| |\x0;v~1pxGHH~43849|)) #caaar)
 #caaaar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43851| |\x0;v~1pxGHH~43852|)) #caadr)
 #caaadr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43854| |\x0;v~1pxGHH~43855|)) #cadar)
 #caadar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43857| |\x0;v~1pxGHH~43858|)))
 #caaddr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43860| |\x0;v~1pxGHH~43861|)) #cdaar)
 #cadaar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43863| |\x0;v~1pxGHH~43864|)) #cdadr)
 #cadadr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43866| |\x0;v~1pxGHH~43867|)) #cddar)
 #caddar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43869| |\x0;v~1pxGHH~43870|)))
 #cadddr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43872| |\x0;v~1pxGHH~43873|)) #caaar)
 #cdaaar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43875| |\x0;v~1pxGHH~43876|)) #caadr)
 #cdaadr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43878| |\x0;v~1pxGHH~43879|)) #cadar)
 #cdadar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43881| |\x0;v~1pxGHH~43882|)))
 #cdaddr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43884| |\x0;v~1pxGHH~43885|)) #cdaar)
 #cddaar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43887| |\x0;v~1pxGHH~43888|)) #cdadr)
 #cddadr #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43890| |\x0;v~1pxGHH~43891|)) #cddar)
 #cdddar #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~43893| |\x0;v~1pxGHH~43894|)))
 #cddddr #vector-set! #vector-ref #string-set! #string-ref #f #( #(|\x0;setter~1pxGHH~43796| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~43806|)) #assv "No setter for " #error)
 #f #( #(|\x0;set-setter!~1pxGHH~43797| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~43801| |\x0;setter~1pxGHH~43802|)))
 #f #( #(getter-with-setter #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;get~1pxGHH~43781| |\x0;set~1pxGHH~43782|)) #f #( #(#f #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~43788|) #apply)
 #|\x0;setter~1pxGHH~43778|)
 #values)
 (srfi :17 generalized-set!) ((set! macro |\x0;set!~1pxGHH~43745| (0) #f (srfi :17 generalized-set!)) (setter variable |\x0;setter~1pxGHH~43778| (0) #f (srfi :17 generalized-set!)) (getter-with-setter variable |\x0;getter-with-setter~1pxGHH~43779| (0) #f (srfi :17 generalized-set!))) (((rnrs mutable-strings) 0) ((rnrs mutable-pairs) 0) ((rnrs lists) 0) ((rnrs base) 0)) (|\x0;build~1pxGHH~4465| |\x0;build~1pxGHH~2319| |\x0;build~1pxGHH~1541| |\x0;build~1pxGHH~1533|) |\x0;build~1pxGHH~43895| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-3e81a4b1829ab6e1c24b9967a4910c84 1
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (srfi :17) ((set! macro |\x0;set!~1pxGHH~43745| (0) #f (srfi :17 generalized-set!)) (setter variable |\x0;setter~1pxGHH~43778| (0) #f (srfi :17 generalized-set!)) (getter-with-setter variable |\x0;getter-with-setter~1pxGHH~43779| (0) #f (srfi :17 generalized-set!))) (((srfi :17 generalized-set!) 0)) (|\x0;build~1pxGHH~43895|) |\x0;build~1pxGHH~43896| #ex:make-library #ex:register-library! #values)
 #f)
))
