#!fasl
(define .petit-bootstrap-id-32f9d1e553eabe8f000c2e8133575be5 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/146/rbtree.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-32f9d1e553eabe8f000c2e8133575be5 0
'#(#f #( #f #ex:unspecified #|\x0;rotate~1pxGHH~31947| #|\x0;balance~1pxGHH~31946| #|\x0;min+delete~1pxGHH~31945| #|\x0;right-tree~1pxGHH~31944| #|\x0;left-tree~1pxGHH~31943| #|\x0;black-height~1pxGHH~31942| #|\x0;catenate-right~1pxGHH~31941| #|\x0;catenate-left~1pxGHH~31940| #|\x0;tree-split~1pxGHH~31939| #|\x0;tree-catenate~1pxGHH~31938| #|\x0;tree-map~1pxGHH~31937| #|\x0;tree-key-predecessor~1pxGHH~31936| #|\x0;tree-key-successor~1pxGHH~31935| #|\x0;tree-search~1pxGHH~31934| #|\x0;identity~1pxGHH~31933| #|\x0;tree-generator~1pxGHH~31932| #|\x0;tree-for-each~1pxGHH~31931| #|\x0;tree-fold/reverse~1pxGHH~31930| #|\x0;tree-fold~1pxGHH~31929| #|\x0;make-tree~1pxGHH~31928| #|\x0;white->black~1pxGHH~31927| #|\x0;redden~1pxGHH~31926| #|\x0;blacken~1pxGHH~31925| #|\x0;white?~1pxGHH~31434| #|\x0;black?~1pxGHH~31433| #|\x0;red?~1pxGHH~31432| #|\x0;white~1pxGHH~31431| #|\x0;black~1pxGHH~31430| #|\x0;red~1pxGHH~31429| #|\x0;value~1pxGHH~31428| #|\x0;key~1pxGHH~31427| #|\x0;right~1pxGHH~31426| #|\x0;item~1pxGHH~31425| #|\x0;left~1pxGHH~31424| #|\x0;color~1pxGHH~31423| #|\x0;node~1pxGHH~31422| #|\x0;item-value~1pxGHH~31421| #|\x0;item-key~1pxGHH~31420| #|\x0;make-item~1pxGHH~31419| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~31914| 0 1 2 3) (|\x0;env~1pxGHH~31874| 4 5 6 3) (|\x0;env~1pxGHH~31842| 7 8 9 3) (|\x0;env~1pxGHH~31809| 10 11 12 3) (|\x0;env~1pxGHH~31757| 13 14 15 3) (|\x0;env~1pxGHH~31739| 16 14 15 3) (|\x0;env~1pxGHH~31721| 17 14 15 3) (|\x0;env~1pxGHH~31705| 18 14 15 3) (|\x0;env~1pxGHH~31690| 19 14 15 3) (|\x0;env~1pxGHH~31675| 20 14 15 3) (|\x0;env~1pxGHH~31651| 21 14 15 3) (|\x0;env~1pxGHH~31626| 22 14 15 3) (|\x0;env~1pxGHH~31602| 23 14 15 3) (|\x0;env~1pxGHH~31578| 24 14 15 3) (|\x0;env~1pxGHH~31568| 25 14 15 3) (|\x0;env~1pxGHH~31514| 26 27 28 3) (|\x0;env~1pxGHH~31489| 29 30 31 3) (|\x0;env~1pxGHH~31471| 32 30 31 3) (|\x0;env~1pxGHH~31447| 33 34 35 3)) (35 (((x |\x0;c~1pxGHH~31436|) variable |\x0;x~1pxGHH~31438| (0) #f (srfi 146 rbtree)))) (34 ()) (33 (((dummy |\x0;c~1pxGHH~31436|) . #f) ((tree) . #f) ((pattern) . #f) ((expression*) . #f))) (32 (((dummy |\x0;c~1pxGHH~31457|) . #f) ((e) . #f) ((tree) . #f) ((clauses*) . #f) ((pattern) . #f) ((pattern*) . #f))) (31 (((x |\x0;c~1pxGHH~31457|) variable |\x0;x~1pxGHH~31459| (0) #f (srfi 146 rbtree)))) (30 ()) (29 (((dummy |\x0;c~1pxGHH~31457|) . #f) ((expression*) . #f) ((tree) . #f) ((clauses) . #f))) (28 (((x |\x0;c~1pxGHH~31501|) variable |\x0;x~1pxGHH~31503| (0) #f (srfi 146 rbtree)))) (27 ()) (26 (((dummy |\x0;c~1pxGHH~31501|) . #f) ((e) . #f) ((tree) . #f) ((clauses) . #f) ((pattern*) . #f) ((new-clauses) . #f))) (25 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((k) . #f))) (24 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((pa) . #f) ((px) . #f) ((pb) . #f) ((k*) . #f))) (23 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((pa) . #f) ((px) . #f) ((pb) . #f) ((k*) . #f))) (22 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((pa) . #f) ((px) . #f) ((pb) . #f) ((k*) . #f))) (21 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((pc) . #f) ((pa) . #f) ((px) . #f) ((pb) . #f) ((k*) . #f))) (20 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((pt) . #f) ((k*) . #f))) (19 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((k) . #f))) (18 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((k) . #f))) (17 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((x) . #f) ((k) . #f))) (16 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((x) . #f) ((k) . #f))) (15 (((x |\x0;c~1pxGHH~31528|) variable |\x0;x~1pxGHH~31530| (0) #f (srfi 146 rbtree)))) (14 ()) (13 (((dummy |\x0;c~1pxGHH~31528|) . #f) ((tree) . #f) ((x) . #f) ((k) . #f))) (12 (((x |\x0;c~1pxGHH~31794|) variable |\x0;x~1pxGHH~31796| (0) #f (srfi 146 rbtree)))) (11 ()) (10 (((dummy |\x0;c~1pxGHH~31794|) . #f) ((tree) . #f) ((c) . #f) ((a) . #f) ((x) . #f) ((b) . #f) ((k) . #f) ((clauses) . #f))) (9 (((x |\x0;c~1pxGHH~31827|) variable |\x0;x~1pxGHH~31829| (0) #f (srfi 146 rbtree)))) (8 ()) (7 (((dummy |\x0;c~1pxGHH~31827|) . #f) ((pred?) . #f) ((tree) . #f) ((a) . #f) ((x) . #f) ((b) . #f) ((k) . #f) ((clauses) . #f))) (6 (((x |\x0;c~1pxGHH~31860|) variable |\x0;x~1pxGHH~31862| (0) #f (srfi 146 rbtree)))) (5 ()) (4 (((dummy |\x0;c~1pxGHH~31860|) . #f) ((clauses) . #f) ((tree) . #f) ((pattern) . #f) ((rest) . #f) ((k*) . #f))) (3 (((rotate) variable |\x0;rotate~1pxGHH~31947| (0) #f (srfi 146 rbtree)) ((balance) variable |\x0;balance~1pxGHH~31946| (0) #f (srfi 146 rbtree)) ((min+delete) variable |\x0;min+delete~1pxGHH~31945| (0) #f (srfi 146 rbtree)) ((right-tree) variable |\x0;right-tree~1pxGHH~31944| (0) #f (srfi 146 rbtree)) ((left-tree) variable |\x0;left-tree~1pxGHH~31943| (0) #f (srfi 146 rbtree)) ((black-height) variable |\x0;black-height~1pxGHH~31942| (0) #f (srfi 146 rbtree)) ((catenate-right) variable |\x0;catenate-right~1pxGHH~31941| (0) #f (srfi 146 rbtree)) ((catenate-left) variable |\x0;catenate-left~1pxGHH~31940| (0) #f (srfi 146 rbtree)) ((tree-split) variable |\x0;tree-split~1pxGHH~31939| (0) #f (srfi 146 rbtree)) ((tree-catenate) variable |\x0;tree-catenate~1pxGHH~31938| (0) #f (srfi 146 rbtree)) ((tree-map) variable |\x0;tree-map~1pxGHH~31937| (0) #f (srfi 146 rbtree)) ((tree-key-predecessor) variable |\x0;tree-key-predecessor~1pxGHH~31936| (0) #f (srfi 146 rbtree)) ((tree-key-successor) variable |\x0;tree-key-successor~1pxGHH~31935| (0) #f (srfi 146 rbtree)) ((tree-search) variable |\x0;tree-search~1pxGHH~31934| (0) #f (srfi 146 rbtree)) ((identity) variable |\x0;identity~1pxGHH~31933| (0) #f (srfi 146 rbtree)) ((tree-generator) variable |\x0;tree-generator~1pxGHH~31932| (0) #f (srfi 146 rbtree)) ((tree-for-each) variable |\x0;tree-for-each~1pxGHH~31931| (0) #f (srfi 146 rbtree)) ((tree-fold/reverse) variable |\x0;tree-fold/reverse~1pxGHH~31930| (0) #f (srfi 146 rbtree)) ((tree-fold) variable |\x0;tree-fold~1pxGHH~31929| (0) #f (srfi 146 rbtree)) ((make-tree) variable |\x0;make-tree~1pxGHH~31928| (0) #f (srfi 146 rbtree)) ((white->black) variable |\x0;white->black~1pxGHH~31927| (0) #f (srfi 146 rbtree)) ((redden) variable |\x0;redden~1pxGHH~31926| (0) #f (srfi 146 rbtree)) ((blacken) variable |\x0;blacken~1pxGHH~31925| (0) #f (srfi 146 rbtree)) ((add-subpattern) macro |\x0;add-subpattern~1pxGHH~31901| (0) #f (srfi 146 rbtree)) ((compile-subpatterns) macro |\x0;compile-subpatterns~1pxGHH~31859| (0) #f (srfi 146 rbtree)) ((compile-color-pattern) macro |\x0;compile-color-pattern~1pxGHH~31826| (0) #f (srfi 146 rbtree)) ((compile-node-pattern) macro |\x0;compile-node-pattern~1pxGHH~31793| (0) #f (srfi 146 rbtree)) ((compile-and-pattern) macro |\x0;compile-and-pattern~1pxGHH~31770| (0) #f (srfi 146 rbtree)) ((compile-pattern) macro |\x0;compile-pattern~1pxGHH~31527| (0) #f (srfi 146 rbtree)) ((add-pattern) macro |\x0;add-pattern~1pxGHH~31500| (0) #f (srfi 146 rbtree)) ((compile-patterns) macro |\x0;compile-patterns~1pxGHH~31456| (0) #f (srfi 146 rbtree)) ((tree-match) macro |\x0;tree-match~1pxGHH~31435| (0) #f (srfi 146 rbtree)) ((white?) variable |\x0;white?~1pxGHH~31434| (0) #f (srfi 146 rbtree)) ((black?) variable |\x0;black?~1pxGHH~31433| (0) #f (srfi 146 rbtree)) ((red?) variable |\x0;red?~1pxGHH~31432| (0) #f (srfi 146 rbtree)) ((white) variable |\x0;white~1pxGHH~31431| (0) #f (srfi 146 rbtree)) ((black) variable |\x0;black~1pxGHH~31430| (0) #f (srfi 146 rbtree)) ((red) variable |\x0;red~1pxGHH~31429| (0) #f (srfi 146 rbtree)) ((value) variable |\x0;value~1pxGHH~31428| (0) #f (srfi 146 rbtree)) ((key) variable |\x0;key~1pxGHH~31427| (0) #f (srfi 146 rbtree)) ((right) variable |\x0;right~1pxGHH~31426| (0) #f (srfi 146 rbtree)) ((item) variable |\x0;item~1pxGHH~31425| (0) #f (srfi 146 rbtree)) ((left) variable |\x0;left~1pxGHH~31424| (0) #f (srfi 146 rbtree)) ((color) variable |\x0;color~1pxGHH~31423| (0) #f (srfi 146 rbtree)) ((node) variable |\x0;node~1pxGHH~31422| (0) #f (srfi 146 rbtree)) ((item-value) variable |\x0;item-value~1pxGHH~31421| (0) #f (srfi 146 rbtree)) ((item-key) variable |\x0;item-key~1pxGHH~31420| (0) #f (srfi 146 rbtree)) ((make-item) variable |\x0;make-item~1pxGHH~31419| (0) #f (srfi 146 rbtree)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((case-lambda) macro |\x0;case-lambda~1pxGHH~3944| (0) #f (rnrs control)) ((and-let*) macro |\x0;and-let*~1pxGHH~31270| (0) #f (srfi :2 and-let*)) ((receive) macro |\x0;receive~1pxGHH~4944| (0) #f (srfi :8 receive)) ((generator-unfold) variable |\x0;generator-unfold~1pxGHH~20283| (0) #f (srfi 121)) ((generator-every) variable |\x0;generator-every~1pxGHH~20282| (0) #f (srfi 121)) ((generator-any) variable |\x0;generator-any~1pxGHH~20281| (0) #f (srfi 121)) ((generator-count) variable |\x0;generator-count~1pxGHH~20280| (0) #f (srfi 121)) ((generator-find) variable |\x0;generator-find~1pxGHH~20279| (0) #f (srfi 121)) ((generator-for-each) variable |\x0;generator-for-each~1pxGHH~20278| (0) #f (srfi 121)) ((generator-fold) variable |\x0;generator-fold~1pxGHH~20277| (0) #f (srfi 121)) ((generator->string) variable |\x0;generator->string~1pxGHH~20276| (0) #f (srfi 121)) ((generator->vector!) variable |\x0;generator->vector!~1pxGHH~20275| (0) #f (srfi 121)) ((generator->vector) variable |\x0;generator->vector~1pxGHH~20274| (0) #f (srfi 121)) ((generator->reverse-list) variable |\x0;generator->reverse-list~1pxGHH~20273| (0) #f (srfi 121)) ((generator->list) variable |\x0;generator->list~1pxGHH~20272| (0) #f (srfi 121)) ((gselect) variable |\x0;gselect~1pxGHH~20271| (0) #f (srfi 121)) ((gindex) variable |\x0;gindex~1pxGHH~20270| (0) #f (srfi 121)) ((gdelete-neighbor-dups) variable |\x0;gdelete-neighbor-dups~1pxGHH~20269| (0) #f (srfi 121)) ((gdelete) variable |\x0;gdelete~1pxGHH~20268| (0) #f (srfi 121)) ((gdrop-while) variable |\x0;gdrop-while~1pxGHH~20266| (0) #f (srfi 121)) ((gtake-while) variable |\x0;gtake-while~1pxGHH~20267| (0) #f (srfi 121)) ((gdrop) variable |\x0;gdrop~1pxGHH~20265| (0) #f (srfi 121)) ((gtake) variable |\x0;gtake~1pxGHH~20264| (0) #f (srfi 121)) ((gremove) variable |\x0;gremove~1pxGHH~20263| (0) #f (srfi 121)) ((gfilter) variable |\x0;gfilter~1pxGHH~20262| (0) #f (srfi 121)) ((gcombine) variable |\x0;gcombine~1pxGHH~20261| (0) #f (srfi 121)) ((gappend) variable |\x0;gappend~1pxGHH~20260| (0) #f (srfi 121)) ((gcons*) variable |\x0;gcons*~1pxGHH~20259| (0) #f (srfi 121)) ((make-unfold-generator) variable |\x0;make-unfold-generator~1pxGHH~20258| (0) #f (srfi 121)) ((make-for-each-generator) variable |\x0;make-for-each-generator~1pxGHH~20257| (0) #f (srfi 121)) ((bytevector->generator) variable |\x0;bytevector->generator~1pxGHH~20256| (0) #f (srfi 121)) ((string->generator) variable |\x0;string->generator~1pxGHH~20255| (0) #f (srfi 121)) ((reverse-vector->generator) variable |\x0;reverse-vector->generator~1pxGHH~20254| (0) #f (srfi 121)) ((vector->generator) variable |\x0;vector->generator~1pxGHH~20253| (0) #f (srfi 121)) ((list->generator) variable |\x0;list->generator~1pxGHH~20252| (0) #f (srfi 121)) ((make-coroutine-generator) variable |\x0;make-coroutine-generator~1pxGHH~20251| (0) #f (srfi 121)) ((make-range-generator) variable |\x0;make-range-generator~1pxGHH~20249| (0) #f (srfi 121)) ((make-iota-generator) variable |\x0;make-iota-generator~1pxGHH~20247| (0) #f (srfi 121)) ((generator) variable |\x0;generator~1pxGHH~20246| (0) #f (srfi 121)) ((comparator-if<=>) macro |\x0;comparator-if<=>~1pxGHH~11617| (0) #f (srfi 128)) ((>=?) variable |\x0;>=?~1pxGHH~11725| (0) #f (srfi 128)) ((<=?) variable |\x0;<=?~1pxGHH~11724| (0) #f (srfi 128)) ((>?) variable |\x0;>?~1pxGHH~11723| (0) #f (srfi 128)) ((<?) variable |\x0;<?~1pxGHH~11722| (0) #f (srfi 128)) ((=?) variable |\x0;=?~1pxGHH~11721| (0) #f (srfi 128)) ((hash-salt) macro |\x0;hash-salt~1pxGHH~11680| (0) #f (srfi 128)) ((hash-bound) macro |\x0;hash-bound~1pxGHH~11668| (0) #f (srfi 128)) ((comparator-hash) variable |\x0;comparator-hash~1pxGHH~11715| (0) #f (srfi 128)) ((comparator-check-type) variable |\x0;comparator-check-type~1pxGHH~11714| (0) #f (srfi 128)) ((comparator-test-type) variable |\x0;comparator-test-type~1pxGHH~11713| (0) #f (srfi 128)) ((comparator-hash-function) variable |\x0;comparator-hash-function~1pxGHH~11485| (0) #f (srfi 128 kernel)) ((comparator-ordering-predicate) variable |\x0;comparator-ordering-predicate~1pxGHH~11483| (0) #f (srfi 128 kernel)) ((comparator-equality-predicate) variable |\x0;comparator-equality-predicate~1pxGHH~11482| (0) #f (srfi 128 kernel)) ((comparator-type-test-predicate) variable |\x0;comparator-type-test-predicate~1pxGHH~11481| (0) #f (srfi 128 kernel)) ((comparator-register-default!) variable |\x0;comparator-register-default!~1pxGHH~11757| (0) #f (srfi 128)) ((default-hash) variable |\x0;default-hash~1pxGHH~11763| (0) #f (srfi 128)) ((make-default-comparator) variable |\x0;make-default-comparator~1pxGHH~11766| (0) #f (srfi 128)) ((number-hash) variable |\x0;number-hash~1pxGHH~11730| (0) #f (srfi 128)) ((symbol-hash) variable symbol-hash (0) #f (larceny PRIMITIVES)) ((string-ci-hash) variable string-ci-hash (0) #f (larceny PRIMITIVES)) ((string-hash) variable string-hash (0) #f (larceny PRIMITIVES)) ((char-ci-hash) variable |\x0;char-ci-hash~1pxGHH~11729| (0) #f (srfi 128)) ((char-hash) variable |\x0;char-hash~1pxGHH~11728| (0) #f (srfi 128)) ((boolean-hash) variable |\x0;boolean-hash~1pxGHH~11727| (0) #f (srfi 128)) ((make-equal-comparator) variable |\x0;make-equal-comparator~1pxGHH~11735| (0) #f (srfi 128)) ((make-eqv-comparator) variable |\x0;make-eqv-comparator~1pxGHH~11734| (0) #f (srfi 128)) ((make-eq-comparator) variable |\x0;make-eq-comparator~1pxGHH~11733| (0) #f (srfi 128)) ((make-vector-comparator) variable |\x0;make-vector-comparator~1pxGHH~11748| (0) #f (srfi 128)) ((make-list-comparator) variable |\x0;make-list-comparator~1pxGHH~11743| (0) #f (srfi 128)) ((make-pair-comparator) variable |\x0;make-pair-comparator~1pxGHH~11737| (0) #f (srfi 128)) ((make-comparator) variable |\x0;make-comparator~1pxGHH~11489| (0) #f (srfi 128 kernel)) ((comparator-hashable?) variable |\x0;comparator-hashable?~1pxGHH~11488| (0) #f (srfi 128 kernel)) ((comparator-ordered?) variable |\x0;comparator-ordered?~1pxGHH~11486| (0) #f (srfi 128 kernel)) ((comparator?) variable |\x0;comparator?~1pxGHH~11480| (0) #f (srfi 128 kernel)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~31902|) variable |\x0;x~1pxGHH~31904| (0) #f (srfi 146 rbtree)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~31902|) . #f) ((clause) . #f) ((rest) . #f) ((k*) . #f) ((clauses) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31438|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~31449|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~31451| |\x0;rest~1pxGHH~31450|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pattern~1pxGHH~31444| |\x0;expression*~1pxGHH~31445|)) compile-patterns (|\x0;env~1pxGHH~31447|) (srfi 146 rbtree) #ex:syntax-rename)
 (() ()) #map #list #apply #ex:invalid-form)
 #ex:map-while #ex:invalid-form)
 |\x0;tree-match~1pxGHH~31435| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31459|))) (8544 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|195\|197| |.y1\|195\|196| |.results\|195\|200|))) (13959 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? call-with-current-continuation (|\x0;env~1pxGHH~31489|) (srfi 146 rbtree) #ex:syntax-rename lambda return or #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((and-let* clauses (call-with-values (lambda () . expression*) return)) ... (error "tree does not match any pattern" tree)) #ex:syntax-violation "tree does not match any pattern" error #append #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;clauses~1pxGHH~31487| |\x0;expression*~1pxGHH~31485|)) and-let* (|\x0;env~1pxGHH~31489|) (srfi 146 rbtree) #ex:syntax-rename call-with-values lambda return)
 #larceny:map #reverse and-let* call-with-values compile-pattern (|\x0;env~1pxGHH~31471|) add-pattern #ex:invalid-form)
 |\x0;compile-patterns~1pxGHH~31456| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31503|)) #list? compile-patterns (|\x0;env~1pxGHH~31514|) (srfi 146 rbtree) #ex:syntax-rename #append #ex:invalid-form)
 |\x0;add-pattern~1pxGHH~31500| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31530|))) (5931 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (8659 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (12324 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (23503 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (34682 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (45860 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1599\|1600| |.results\|1599\|1603|))) (47308 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (59716 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (66064 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (72710 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (79356 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (85196 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #ex:identifier? red? (|\x0;env~1pxGHH~31757|) (srfi 146 rbtree) #ex:syntax-rename #ex:free-identifier=? #list? #append #ex:invalid-form _ (|\x0;env~1pxGHH~31568|) white (|\x0;env~1pxGHH~31578|) compile-subpatterns a x b compile-color-pattern white? black (|\x0;env~1pxGHH~31602|) black? red (|\x0;env~1pxGHH~31626|) #reverse t (|\x0;env~1pxGHH~31675|) node (|\x0;env~1pxGHH~31651|) c compile-node-pattern and compile-and-pattern (|\x0;env~1pxGHH~31690|) not item (|\x0;env~1pxGHH~31705|) (|\x0;env~1pxGHH~31721|) (|\x0;env~1pxGHH~31739|))
 |\x0;compile-pattern~1pxGHH~31527| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31773|)) #list? #append #ex:invalid-form)
 |\x0;compile-and-pattern~1pxGHH~31770| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31796|)) #list? item (|\x0;env~1pxGHH~31809|) (srfi 146 rbtree) #ex:syntax-rename color left right #append #ex:invalid-form)
 |\x0;compile-node-pattern~1pxGHH~31793| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31829|)) #list? item (|\x0;env~1pxGHH~31842|) (srfi 146 rbtree) #ex:syntax-rename left right #append #ex:invalid-form)
 |\x0;compile-color-pattern~1pxGHH~31826| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31862|))) (2553 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? #append compile-pattern (|\x0;env~1pxGHH~31874|) (srfi 146 rbtree) #ex:syntax-rename add-subpattern #ex:invalid-form)
 |\x0;compile-subpatterns~1pxGHH~31859| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~31904|)) #list? compile-subpatterns (|\x0;env~1pxGHH~31914|) (srfi 146 rbtree) #ex:syntax-rename #append #ex:invalid-form)
 |\x0;add-subpattern~1pxGHH~31901| #values)
 #f #( ((0 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (16129 . #(|\x0;right~1pxGHH~31426| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;node~1pxGHH~35221|))) (16558 . #(|\x0;item~1pxGHH~31425| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;node~1pxGHH~35223|))) (16987 . #(|\x0;left~1pxGHH~31424| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;node~1pxGHH~35225|))) (17416 . #(|\x0;color~1pxGHH~31423| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;node~1pxGHH~35227|))) (17845 . #(|\x0;node~1pxGHH~31422| #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;color~1pxGHH~35229| |\x0;left~1pxGHH~35230| |\x0;item~1pxGHH~35231| |\x0;right~1pxGHH~35232|))) (18411 . #(|\x0;item-value~1pxGHH~31421| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;item~1pxGHH~35234|))) (18840 . #(|\x0;item-key~1pxGHH~31420| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;item~1pxGHH~35236|)))) #ex:undefined #|\x0;rotate~1pxGHH~31947| #|\x0;balance~1pxGHH~31946| #|\x0;min+delete~1pxGHH~31945| #|\x0;right-tree~1pxGHH~31944| #|\x0;left-tree~1pxGHH~31943| #|\x0;black-height~1pxGHH~31942| #|\x0;catenate-right~1pxGHH~31941| #|\x0;catenate-left~1pxGHH~31940| #|\x0;tree-split~1pxGHH~31939| #|\x0;tree-catenate~1pxGHH~31938| #|\x0;tree-map~1pxGHH~31937| #|\x0;tree-key-predecessor~1pxGHH~31936| #|\x0;tree-key-successor~1pxGHH~31935| #|\x0;tree-search~1pxGHH~31934| #|\x0;identity~1pxGHH~31933| #|\x0;tree-generator~1pxGHH~31932| #|\x0;tree-for-each~1pxGHH~31931| #|\x0;tree-fold/reverse~1pxGHH~31930| #|\x0;tree-fold~1pxGHH~31929| #|\x0;make-tree~1pxGHH~31928| #|\x0;white->black~1pxGHH~31927| #|\x0;redden~1pxGHH~31926| #|\x0;blacken~1pxGHH~31925| #|\x0;white?~1pxGHH~31434| #|\x0;black?~1pxGHH~31433| #|\x0;red?~1pxGHH~31432| #|\x0;white~1pxGHH~31431| #|\x0;black~1pxGHH~31430| #|\x0;red~1pxGHH~31429| #|\x0;value~1pxGHH~31428| #|\x0;key~1pxGHH~31427| #|\x0;right~1pxGHH~31426| #|\x0;item~1pxGHH~31425| #|\x0;left~1pxGHH~31424| #|\x0;color~1pxGHH~31423| #|\x0;node~1pxGHH~31422| #|\x0;item-value~1pxGHH~31421| #|\x0;item-key~1pxGHH~31420| #|\x0;make-item~1pxGHH~31419| #f #( #(#f #f 11 src/Build/compile-standard-libraries.sch #(20 1 0) (t0f0010 t0f0020 t0f0030 t0f0040 t0f0050 t0f0060 t0f0070 t0f0080 t0f0090 t0f00a0 t0f00b0)) #|\x0;make-tree~1pxGHH~31928| #|\x0;tree-fold~1pxGHH~31929| #|\x0;tree-fold/reverse~1pxGHH~31930| #|\x0;tree-for-each~1pxGHH~31931| #|\x0;tree-generator~1pxGHH~31932| #|\x0;tree-search~1pxGHH~31934| #|\x0;tree-key-successor~1pxGHH~31935| #|\x0;tree-key-predecessor~1pxGHH~31936| #|\x0;tree-map~1pxGHH~31937| #|\x0;tree-catenate~1pxGHH~31938| #|\x0;tree-split~1pxGHH~31939| #values)
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~35194| |\x0;x2~1pxGHH~35195| |\x0;x3~1pxGHH~35196| |\x0;n~1pxGHH~35197|)) black "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~35172| |\x0;x2~1pxGHH~35173| |\x0;x3~1pxGHH~35174| |\x0;n~1pxGHH~35175|)) white "unexpected number of arguments" #assertion-violation)
 #f #( #(|\x0;red?~1pxGHH~31432| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;node~1pxGHH~35165|)) red)
 #f #( #(|\x0;black?~1pxGHH~31433| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;node~1pxGHH~35162|)) black)
 #f #( #(|\x0;white?~1pxGHH~31434| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;node~1pxGHH~35159|)) white)
 #f #( #(|\x0;blacken~1pxGHH~31925| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~35088|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~35109|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( #(|\x0;redden~1pxGHH~31926| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~35013|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~35034|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( #(|\x0;white->black~1pxGHH~31927| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~34943|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34964|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( #(|\x0;make-tree~1pxGHH~31928| #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( ((0 . #(|\x0;tree-fold~1pxGHH~31929| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~34840| |\x0;seed~1pxGHH~34841| |\x0;tree~1pxGHH~34842|))) (141 . #(|\x0;loop~1pxGHH~34848| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;acc~1pxGHH~34855| |\x0;tree~1pxGHH~34856|)))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34880|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( ((0 . #(|\x0;tree-fold/reverse~1pxGHH~31930| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~34738| |\x0;seed~1pxGHH~34739| |\x0;tree~1pxGHH~34740|))) (141 . #(|\x0;loop~1pxGHH~34746| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;acc~1pxGHH~34753| |\x0;tree~1pxGHH~34754|)))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34778|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( #(|\x0;tree-for-each~1pxGHH~31931| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~34731| |\x0;tree~1pxGHH~34732|)) #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~34734| |\x0;value~1pxGHH~34735| |\x0;acc~1pxGHH~34736|)))
)
 #f #( #(|\x0;tree-generator~1pxGHH~31932| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~34725|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;yield~1pxGHH~34727|)) #f #( #(#f #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;item~1pxGHH~34729|))
)
 #|\x0;make-coroutine-generator~1pxGHH~20251|)
 #f #( #(|\x0;identity~1pxGHH~31933| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~34723|)))
 #f #( #(|\x0;tree-search~1pxGHH~31934| #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~34370| |\x0;tree~1pxGHH~34371| |\x0;obj~1pxGHH~34372| |\x0;failure~1pxGHH~34373| |\x0;success~1pxGHH~34374|)) #f #( ((0 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (517 . #(|\x0;search~1pxGHH~34382| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~34388|)))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34420|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;new-key~1pxGHH~34430| |\x0;new-value~1pxGHH~34431| |\x0;ret~1pxGHH~34432|)) red #values)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;ret~1pxGHH~34434|)) #values)
)
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;=?~1pxGHH~11721| #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;new-key~1pxGHH~34499| |\x0;new-value~1pxGHH~34500| |\x0;ret~1pxGHH~34501|)) #values)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;ret~1pxGHH~34503|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34563|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~34699| |\x0;b~1pxGHH~34700|)))
 #call-with-values)
 "tree does not match any pattern" #error)
 #call-with-current-continuation #values)
 #|\x0;<?~1pxGHH~11722| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~34707| |\x0;ret~1pxGHH~34708| |\x0;op~1pxGHH~34709|)) #values)
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;b~1pxGHH~34714| |\x0;ret~1pxGHH~34715| |\x0;op~1pxGHH~34716|)) #values)
)
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~34719| |\x0;ret~1pxGHH~34720| |\x0;op~1pxGHH~34721|)) #values)
 #call-with-values)
 #f #( ((0 . #(|\x0;tree-key-successor~1pxGHH~31935| #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~34266| |\x0;tree~1pxGHH~34267| |\x0;obj~1pxGHH~34268| |\x0;failure~1pxGHH~34269|))) (303 . #(|\x0;loop~1pxGHH~34275| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34282| |\x0;tree~1pxGHH~34283|)))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34307|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;=?~1pxGHH~11721| #|\x0;<?~1pxGHH~11722| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
)
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( ((0 . #(|\x0;tree-key-predecessor~1pxGHH~31936| #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~34162| |\x0;tree~1pxGHH~34163| |\x0;obj~1pxGHH~34164| |\x0;failure~1pxGHH~34165|))) (303 . #(|\x0;loop~1pxGHH~34171| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34178| |\x0;tree~1pxGHH~34179|)))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34203|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;=?~1pxGHH~11721| #|\x0;<?~1pxGHH~11722| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
)
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( ((0 . #(|\x0;tree-map~1pxGHH~31937| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~34063| |\x0;tree~1pxGHH~34064|))) (141 . #(|\x0;loop~1pxGHH~34070| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~34076|)))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~34100|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~34158| |\x0;value~1pxGHH~34159|)))
 #call-with-values)
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( ((0 . #(|\x0;tree-catenate~1pxGHH~31938| #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree1~1pxGHH~34017| |\x0;pivot-key~1pxGHH~34018| |\x0;pivot-value~1pxGHH~34019| |\x0;tree2~1pxGHH~34020|))) (2727 . #(|\x0;loop~1pxGHH~34052| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~34059| |\x0;depth~1pxGHH~34060|))) (5320 . #(|\x0;loop~1pxGHH~34036| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~34043| |\x0;depth~1pxGHH~34044|)))) red)
 #f #( ((0 . #(|\x0;tree-split~1pxGHH~31939| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~33895| |\x0;tree~1pxGHH~33896| |\x0;obj~1pxGHH~33897|))) (1117 . #(|\x0;loop~1pxGHH~33903| #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree1~1pxGHH~33913| |\x0;tree2~1pxGHH~33914| |\x0;pivot1~1pxGHH~33915| |\x0;pivot2~1pxGHH~33916| |\x0;tree~1pxGHH~33917|)))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~33941|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;=?~1pxGHH~11721| #values #|\x0;<?~1pxGHH~11722|)
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( #(|\x0;catenate-left~1pxGHH~31940| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree1~1pxGHH~33890| |\x0;item~1pxGHH~33891| |\x0;tree2~1pxGHH~33892|)))
 #f #( #(|\x0;catenate-right~1pxGHH~31941| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree1~1pxGHH~33885| |\x0;item~1pxGHH~33886| |\x0;tree2~1pxGHH~33887|)))
 #f #( ((0 . #(|\x0;black-height~1pxGHH~31942| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~33729|))) (141 . #(|\x0;loop~1pxGHH~33735| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~33741|)))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~33782|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( ((0 . #(|\x0;left-tree~1pxGHH~31943| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~33709| |\x0;depth~1pxGHH~33710|))) (343 . #(|\x0;loop~1pxGHH~33716| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;parent~1pxGHH~33724| |\x0;tree~1pxGHH~33725| |\x0;depth~1pxGHH~33726|)))) #values)
 #f #( ((0 . #(|\x0;right-tree~1pxGHH~31944| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~33689| |\x0;depth~1pxGHH~33690|))) (343 . #(|\x0;loop~1pxGHH~33696| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;parent~1pxGHH~33704| |\x0;tree~1pxGHH~33705| |\x0;depth~1pxGHH~33706|)))) #values)
 #f #( #(|\x0;min+delete~1pxGHH~31945| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~33423|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~33497|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;v~1pxGHH~33685| |\x0;a~1pxGHH~33686|)) #values)
 #call-with-values)
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( #(|\x0;balance~1pxGHH~31946| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~32612|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~32835|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #f #( #(|\x0;rotate~1pxGHH~31947| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~31949|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~32128|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) red)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 "tree does not match any pattern" #error)
 #call-with-current-continuation)
 #values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~34840| |\x0;seed~1pxGHH~34841| |\x0;tree~1pxGHH~34842|)))
 #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~34738| |\x0;seed~1pxGHH~34739| |\x0;tree~1pxGHH~34740|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~34731| |\x0;tree~1pxGHH~34732|)))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree~1pxGHH~34725|)))
 #f #( #(#f #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~34370| |\x0;tree~1pxGHH~34371| |\x0;obj~1pxGHH~34372| |\x0;failure~1pxGHH~34373| |\x0;success~1pxGHH~34374|)))
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~34266| |\x0;tree~1pxGHH~34267| |\x0;obj~1pxGHH~34268| |\x0;failure~1pxGHH~34269|)))
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~34162| |\x0;tree~1pxGHH~34163| |\x0;obj~1pxGHH~34164| |\x0;failure~1pxGHH~34165|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;proc~1pxGHH~34063| |\x0;tree~1pxGHH~34064|)))
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tree1~1pxGHH~34017| |\x0;pivot-key~1pxGHH~34018| |\x0;pivot-value~1pxGHH~34019| |\x0;tree2~1pxGHH~34020|)))
 #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~33895| |\x0;tree~1pxGHH~33896| |\x0;obj~1pxGHH~33897|)))
 #apply)
 (srfi 146 rbtree) ((make-tree variable |\x0;make-tree~1pxGHH~31928| (0) #f (srfi 146 rbtree)) (tree-search variable |\x0;tree-search~1pxGHH~31934| (0) #f (srfi 146 rbtree)) (tree-for-each variable |\x0;tree-for-each~1pxGHH~31931| (0) #f (srfi 146 rbtree)) (tree-fold variable |\x0;tree-fold~1pxGHH~31929| (0) #f (srfi 146 rbtree)) (tree-fold/reverse variable |\x0;tree-fold/reverse~1pxGHH~31930| (0) #f (srfi 146 rbtree)) (tree-generator variable |\x0;tree-generator~1pxGHH~31932| (0) #f (srfi 146 rbtree)) (tree-key-predecessor variable |\x0;tree-key-predecessor~1pxGHH~31936| (0) #f (srfi 146 rbtree)) (tree-key-successor variable |\x0;tree-key-successor~1pxGHH~31935| (0) #f (srfi 146 rbtree)) (tree-map variable |\x0;tree-map~1pxGHH~31937| (0) #f (srfi 146 rbtree)) (tree-catenate variable |\x0;tree-catenate~1pxGHH~31938| (0) #f (srfi 146 rbtree)) (tree-split variable |\x0;tree-split~1pxGHH~31939| (0) #f (srfi 146 rbtree))) (((srfi 128) 0) ((srfi 121) 0) ((srfi 8) 0) ((srfi 2) 0) ((scheme case-lambda) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~12507| |\x0;build~1pxGHH~21140| |\x0;build~1pxGHH~31412| |\x0;build~1pxGHH~31403| |\x0;build~1pxGHH~7216| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~35240| #ex:make-library #ex:register-library! #values)
 #f)
))
