#!fasl
(define .petit-bootstrap-id-b042d64be852b2ca08caef2428d39c2b (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/136.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-b042d64be852b2ca08caef2428d39c2b 0
'#(#f #( #f #ex:unspecified #|\x0;make-record~1pxGHH~49146| #|\x0;make-record-type-descriptor~1pxGHH~49145| #|\x0;record-type-fields~1pxGHH~49144| #|\x0;record-type-parent~1pxGHH~49143| #|\x0;record-type-name~1pxGHH~49142| #|\x0;record-type-predicate~1pxGHH~49141| #|\x0;record-type-descriptor~1pxGHH~49140| #|\x0;make-mutator~1pxGHH~49139| #|\x0;make-accessor~1pxGHH~49138| #|\x0;make-constructor~1pxGHH~49137| #|\x0;record-fields~1pxGHH~49136| #|\x0;record-rtd~1pxGHH~49135| #|\x0;%record?~1pxGHH~49134| #|\x0;%make-record~1pxGHH~49133| #|\x0;<record>~1pxGHH~49132| #|\x0;make-subtype~1pxGHH~49127| #|\x0;make-type-subtype~1pxGHH~49126| #|\x0;type-ref~1pxGHH~49125| #|\x0;record?~1pxGHH~49124| #|\x0;%make-type~1pxGHH~49123| #|\x0;type-metadata~1pxGHH~49122| #|\x0;rtd-parent~1pxGHH~49120| #|\x0;rtd-subtyper~1pxGHH~49119| #|\x0;rtd-ref~1pxGHH~49118| #|\x0;rtd-predicate~1pxGHH~49117| #|\x0;rtd-constructor~1pxGHH~49116| #|\x0;rtd-mutators~1pxGHH~49115| #|\x0;rtd-accessors~1pxGHH~49114| #|\x0;rtd-fieldspecs~1pxGHH~49113| #|\x0;rtd-name~1pxGHH~49112| #|\x0;record-type-descriptor?~1pxGHH~49111| #|\x0;make-rtd~1pxGHH~49110| #|\x0;<record-type-descriptor>~1pxGHH~49109| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~49078| 0 1 2 3) (|\x0;env~1pxGHH~49047| 4 1 2 3) (|\x0;env~1pxGHH~48989| 5 6 7 3) (|\x0;env~1pxGHH~48936| 8 6 7 3) (|\x0;env~1pxGHH~48888| 9 10 11 3) (|\x0;env~1pxGHH~48857| 12 10 11 3) (|\x0;env~1pxGHH~48826| 13 10 11 3) (|\x0;env~1pxGHH~48811| 14 10 11 3) (|\x0;env~1pxGHH~48778| 15 16 17 3) (|\x0;env~1pxGHH~48750| 18 19 20 3) (|\x0;env~1pxGHH~48729| 21 19 20 3) (|\x0;env~1pxGHH~48703| 22 23 24 3) (|\x0;env~1pxGHH~48677| 25 23 24 3) (|\x0;env~1pxGHH~48641| 26 23 24 3) (|\x0;env~1pxGHH~48605| 27 23 24 3) (|\x0;env~1pxGHH~48574| 28 29 30 3) (|\x0;env~1pxGHH~48561| 31 29 30 3) (|\x0;env~1pxGHH~48551| 32 29 30 3) (|\x0;env~1pxGHH~48526| 33 34 35 3) (|\x0;env~1pxGHH~48510| 36 34 35 3) (|\x0;env~1pxGHH~48480| 37 38 39 3) (|\x0;env~1pxGHH~48458| 40 38 39 3) (|\x0;env~1pxGHH~48439| 41 42 43 3)) (43 (((x |\x0;c~1pxGHH~48428|) variable |\x0;x~1pxGHH~48430| (0) #f (srfi 136)))) (42 ()) (41 (((dummy |\x0;c~1pxGHH~48428|) . #f))) (40 (((dummy |\x0;c~1pxGHH~48443|) . #f) ((type-name) . #f) ((rtd) . #f) ((size) . #f) ((indices) . #f) ((parent) . #f) ((field-spec) . #f))) (39 (((x |\x0;c~1pxGHH~48443|) variable |\x0;x~1pxGHH~48445| (0) #f (srfi 136)))) (38 ()) (37 (((dummy |\x0;c~1pxGHH~48443|) . #f) ((type-name) . #f) ((rtd) . #f) ((size) . #f) ((indices) . #f) ((field-spec) . #f))) (36 (((dummy |\x0;c~1pxGHH~48497|) . #f))) (35 (((x |\x0;c~1pxGHH~48497|) variable |\x0;x~1pxGHH~48499| (0) #f (srfi 136)))) (34 ()) (33 (((dummy |\x0;c~1pxGHH~48497|) . #f) ((k |\x0;c~1pxGHH~48495|) . #f))) (32 (((dummy |\x0;c~1pxGHH~48539|) . #f) ((type-name) . #f) ((rest) . #f))) (31 (((dummy |\x0;c~1pxGHH~48539|) . #f) ((type-name) . #f) ((parent) . #f) ((spec) . #f))) (30 (((x |\x0;c~1pxGHH~48539|) variable |\x0;x~1pxGHH~48541| (0) #f (srfi 136)))) (29 ()) (28 (((dummy |\x0;c~1pxGHH~48539|) . #f) ((type-name) . #f) ((rest) . #f))) (27 (((dummy |\x0;c~1pxGHH~48584|) . #f) ((type-name) . #f) ((constructor-name) . #f) ((predicate-name) . #f) ((field-name) . #f) ((accessor) . #f) ((mutator*) . #f) ((parent) . #f) ((parent-rtd) . #f) ((parent-size) . #f) ((parent-indices) . #f))) (26 (((dummy |\x0;c~1pxGHH~48584|) . #f) ((type-name) . #f) ((predicate-name) . #f) ((field-name) . #f) ((accessor) . #f) ((mutator*) . #f) ((parent) . #f) ((parent-rtd) . #f) ((parent-size) . #f) ((parent-indices) . #f))) (25 (((dummy |\x0;c~1pxGHH~48584|) . #f) ((type-name) . #f) ((constructor-name) . #f) ((args) . #f) ((predicate-name) . #f) ((field-spec) . #f) ((parent) . #f) ((parent-rtd) . #f) ((parent-size) . #f) ((parent-indices) . #f))) (24 (((x |\x0;c~1pxGHH~48584|) variable |\x0;x~1pxGHH~48586| (0) #f (srfi 136)))) (23 ()) (22 (((dummy |\x0;c~1pxGHH~48584|) . #f) ((type-name) . #f) ((constructor) . #f) ((rest) . #f))) (21 (((dummy |\x0;c~1pxGHH~48713|) . #f) ((index) . #f) ((index*) . #f) ((type-name) . #f) ((constructor-name) . #f) ((arg) . #f) ((args) . #f) ((rest) . #f))) (20 (((x |\x0;c~1pxGHH~48713|) variable |\x0;x~1pxGHH~48715| (0) #f (srfi 136)))) (19 ()) (18 (((dummy |\x0;c~1pxGHH~48713|) . #f) ((type-name) . #f) ((constructor-name) . #f) ((args) . #f) ((rest) . #f))) (17 (((x |\x0;c~1pxGHH~48762|) variable |\x0;x~1pxGHH~48764| (0) #f (srfi 136)))) (16 ()) (15 (((dummy |\x0;c~1pxGHH~48762|) . #f) ((type-name) . #f) ((constructor) . #f) ((predicate-name) . #f) ((field-spec) . #f) ((parent) . #f) ((parent-rtd) . #f) ((parent-size) . #f) ((parent-indices) . #f))) (14 (((dummy |\x0;c~1pxGHH~48798|) . #f))) (13 (((dummy |\x0;c~1pxGHH~48798|) . #f) ((field) . #f) ((index) . #f) ((type-name) . #f) ((constructor) . #f) ((predicate-name) . #f) ((field-name) . #f) ((accessor-name) . #f) ((mutator-name) . #f) ((rest) . #f))) (12 (((dummy |\x0;c~1pxGHH~48798|) . #f) ((field) . #f) ((index) . #f) ((type-name) . #f) ((constructor) . #f) ((predicate-name) . #f) ((field-name) . #f) ((accessor-name) . #f) ((rest) . #f))) (11 (((x |\x0;c~1pxGHH~48798|) variable |\x0;x~1pxGHH~48800| (0) #f (srfi 136)))) (10 ()) (9 (((dummy |\x0;c~1pxGHH~48798|) . #f) ((field) . #f) ((index) . #f) ((type-name) . #f) ((constructor) . #f) ((predicate-name) . #f) ((parent) . #f) ((parent-rtd) . #f) ((parent-size) . #f) ((parent-indices) . #f) ((original-fields) . #f))) (8 (((dummy |\x0;c~1pxGHH~48912|) . #f) ((indices) . #f) ((type-name) . #f) ((size) . #f) ((constructor-name) . #f) ((args) . #f) ((predicate-name) . #f) ((field-name) . #f) ((accessor-name) . #f) ((mutator-name) . #f) ((index) . #f) ((parent) . #f) ((parent-rtd) . #f) ((parent-size) . #f) ((parent-indices) . #f) ((original-fields) . #f))) (7 (((x |\x0;c~1pxGHH~48912|) variable |\x0;x~1pxGHH~48914| (0) #f (srfi 136)))) (6 ()) (5 (((dummy |\x0;c~1pxGHH~48912|) . #f) ((indices) . #f) ((type-name) . #f) ((size) . #f) ((constructor-name) . #f) ((predicate-name) . #f) ((field-name) . #f) ((accessor) . #f) ((mutator) . #f) ((index) . #f) ((parent) . #f) ((parent-rtd) . #f) ((parent-size) . #f) ((parent-index) . #f) ((original-fields) . #f))) (4 (((dummy |\x0;c~1pxGHH~49027|) . #f) ((fields) . #f) ((indices) . #f) ((type-name) . #f) ((size) . #f) ((constructor-name) . #f) ((arg) . #f) ((args) . #f) ((rest) . #f))) (3 (((make-record) variable |\x0;make-record~1pxGHH~49146| (0) #f (srfi 136)) ((make-record-type-descriptor) variable |\x0;make-record-type-descriptor~1pxGHH~49145| (0) #f (srfi 136)) ((record-type-fields) variable |\x0;record-type-fields~1pxGHH~49144| (0) #f (srfi 136)) ((record-type-parent) variable |\x0;record-type-parent~1pxGHH~49143| (0) #f (srfi 136)) ((record-type-name) variable |\x0;record-type-name~1pxGHH~49142| (0) #f (srfi 136)) ((record-type-predicate) variable |\x0;record-type-predicate~1pxGHH~49141| (0) #f (srfi 136)) ((record-type-descriptor) variable |\x0;record-type-descriptor~1pxGHH~49140| (0) #f (srfi 136)) ((make-mutator) variable |\x0;make-mutator~1pxGHH~49139| (0) #f (srfi 136)) ((make-accessor) variable |\x0;make-accessor~1pxGHH~49138| (0) #f (srfi 136)) ((make-constructor) variable |\x0;make-constructor~1pxGHH~49137| (0) #f (srfi 136)) ((record-fields) variable |\x0;record-fields~1pxGHH~49136| (0) #f (srfi 136)) ((record-rtd) variable |\x0;record-rtd~1pxGHH~49135| (0) #f (srfi 136)) ((%record?) variable |\x0;%record?~1pxGHH~49134| (0) #f (srfi 136)) ((%make-record) variable |\x0;%make-record~1pxGHH~49133| (0) #f (srfi 136)) ((<record>) variable |\x0;<record>~1pxGHH~49132| (0) #f (srfi 136)) ((make-subtype) variable |\x0;make-subtype~1pxGHH~49127| (0) #f (srfi 136)) ((make-type-subtype) variable |\x0;make-type-subtype~1pxGHH~49126| (0) #f (srfi 136)) ((type-ref) variable |\x0;type-ref~1pxGHH~49125| (0) #f (srfi 136)) ((record?) variable |\x0;record?~1pxGHH~49124| (0) #f (srfi 136)) ((%make-type) variable |\x0;%make-type~1pxGHH~49123| (0) #f (srfi 136)) ((type-metadata) variable |\x0;type-metadata~1pxGHH~49122| (0) #t (srfi 136)) ((rtd-parent) variable |\x0;rtd-parent~1pxGHH~49120| (0) #f (srfi 136)) ((rtd-subtyper) variable |\x0;rtd-subtyper~1pxGHH~49119| (0) #f (srfi 136)) ((rtd-ref) variable |\x0;rtd-ref~1pxGHH~49118| (0) #f (srfi 136)) ((rtd-predicate) variable |\x0;rtd-predicate~1pxGHH~49117| (0) #f (srfi 136)) ((rtd-constructor) variable |\x0;rtd-constructor~1pxGHH~49116| (0) #f (srfi 136)) ((rtd-mutators) variable |\x0;rtd-mutators~1pxGHH~49115| (0) #f (srfi 136)) ((rtd-accessors) variable |\x0;rtd-accessors~1pxGHH~49114| (0) #f (srfi 136)) ((rtd-fieldspecs) variable |\x0;rtd-fieldspecs~1pxGHH~49113| (0) #f (srfi 136)) ((rtd-name) variable |\x0;rtd-name~1pxGHH~49112| (0) #f (srfi 136)) ((record-type-descriptor?) variable |\x0;record-type-descriptor?~1pxGHH~49111| (0) #f (srfi 136)) ((make-rtd) variable |\x0;make-rtd~1pxGHH~49110| (0) #f (srfi 136)) ((<record-type-descriptor>) variable |\x0;<record-type-descriptor>~1pxGHH~49109| (0) #f (srfi 136)) ((define-record-type-helper6) macro |\x0;define-record-type-helper6~1pxGHH~49026| (0) #f (srfi 136)) ((define-record-type-helper5) macro |\x0;define-record-type-helper5~1pxGHH~48911| (0) #f (srfi 136)) ((define-record-type-helper4) macro |\x0;define-record-type-helper4~1pxGHH~48797| (0) #f (srfi 136)) ((define-record-type-helper3) macro |\x0;define-record-type-helper3~1pxGHH~48761| (0) #f (srfi 136)) ((define-record-type-helper2) macro |\x0;define-record-type-helper2~1pxGHH~48712| (0) #f (srfi 136)) ((define-record-type-helper1) macro |\x0;define-record-type-helper1~1pxGHH~48583| (0) #f (srfi 136)) ((define-record-type) macro |\x0;define-record-type~1pxGHH~48538| (0) #f (srfi 136)) ((root) macro |\x0;root~1pxGHH~48496| (0) #f (srfi 136)) ((define-record-type-descriptor) macro |\x0;define-record-type-descriptor~1pxGHH~48442| (0) #f (srfi 136)) ((<secret>) macro |\x0;<secret>~1pxGHH~48427| (0) #f (srfi 136)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((scheme-define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((make-type) variable |\x0;make-type~1pxGHH~48387| (0) #f (srfi 137)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~49027|) variable |\x0;x~1pxGHH~49029| (0) #f (srfi 136)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~49027|) . #f) ((field-name) . #f) ((accessor) . #f) ((mutator) . #f) ((field-index) . #f) ((fields) . #f) ((index) . #f) ((type-name) . #f) ((size) . #f) ((constructor-name) . #f) ((arg) . #f) ((args) . #f) ((rest) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48430|)) irritants: (|\x0;c~1pxGHH~48428|) (|\x0;env~1pxGHH~48439| |\x0;env~1pxGHH~128|) (core syntax-rules) #ex:syntax-rename <secret> (|\x0;env~1pxGHH~48439|) (srfi 136) syntax-error "invalid use of auxiliary syntax" #ex:syntax-violation #ex:invalid-form)
 |\x0;<secret>~1pxGHH~48427| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48445|))) (5786 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #ex:identifier? root (|\x0;env~1pxGHH~48480|) (srfi 136) #ex:syntax-rename #ex:free-identifier=? #list? define-record-type-descriptor define-syntax (|\x0;env~1pxGHH~48458|) syntax-rules <secret> _ keyword datum ... k "invalid use of record type descriptor" syntax-error #ex:invalid-form)
 |\x0;define-record-type-descriptor~1pxGHH~48442| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48499|))) (2325 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (4627 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (5172 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? #append _ (|\x0;c~1pxGHH~48495|) (|\x0;env~1pxGHH~48510| |\x0;env~1pxGHH~48458|) (srfi 136) #ex:syntax-rename irritants: (|\x0;c~1pxGHH~48497|) (|\x0;env~1pxGHH~48510| |\x0;env~1pxGHH~128|) (core syntax-rules) root (|\x0;env~1pxGHH~48510|) syntax-error "invalid use of record type descriptor" #ex:syntax-violation #ex:invalid-form #ex:identifier? <secret> (|\x0;env~1pxGHH~48526| |\x0;env~1pxGHH~48458|) #ex:free-identifier=?)
 |\x0;root~1pxGHH~48496| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48541|))) (3528 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (5590 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #equal? define-record-type (|\x0;env~1pxGHH~48574|) (srfi 136) #ex:syntax-rename root (|\x0;env~1pxGHH~48551|) #ex:invalid-form #list? <secret> (|\x0;env~1pxGHH~48561|) define-record-type-helper1 #append)
 |\x0;define-record-type~1pxGHH~48538| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48586|))) (3316 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (6106 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (9247 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #equal? define-record-type-helper1 (|\x0;env~1pxGHH~48703|) (srfi 136) #ex:syntax-rename predicate-name #ex:dotted-length #ex:dotted-butlast #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~48621| |\x0;rest~1pxGHH~48620|)) #f #( ((0 . #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~48597| |\x0;accessor~1pxGHH~48598| |\x0;mutator*~1pxGHH~48599|))) (6534 . #(loop #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2061\|2064| |.y1\|2061\|2063| |.y1\|2061\|2062| |.results\|2061\|2067|)))) #ex:dotted-last define-record-type-helper3 (|\x0;env~1pxGHH~48605|) (srfi 136) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((field-name accessor . mutator*) ... parent parent-rtd parent-size parent-indices) #ex:syntax-violation #append #ex:invalid-form #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~48597| |\x0;accessor~1pxGHH~48598| |\x0;mutator*~1pxGHH~48599|)))
 #larceny:map #reverse)
 (() () ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~48619|)))
 #ex:map-while #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~48657| |\x0;rest~1pxGHH~48656|)) #f #( ((0 . #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~48633| |\x0;accessor~1pxGHH~48634| |\x0;mutator*~1pxGHH~48635|))) (6886 . #(loop #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1613\|1616| |.y1\|1613\|1615| |.y1\|1613\|1614| |.results\|1613\|1619|)))) #ex:dotted-last define-record-type-helper3 (|\x0;env~1pxGHH~48641|) (srfi 136) #ex:syntax-rename constructor-name #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((field-name accessor . mutator*) ... parent parent-rtd parent-size parent-indices) #ex:syntax-violation #append #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~48633| |\x0;accessor~1pxGHH~48634| |\x0;mutator*~1pxGHH~48635|)))
 #larceny:map #reverse)
 (() () ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~48655|)))
 #list? #ex:dotted-last define-record-type-helper2 (|\x0;env~1pxGHH~48677|) #append)
 |\x0;define-record-type-helper1~1pxGHH~48583| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48715|))) (2720 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) define-record-type-helper3 (|\x0;env~1pxGHH~48750|) (srfi 136) #ex:syntax-rename define-record-type-helper2 (|\x0;env~1pxGHH~48729|) #ex:invalid-form)
 |\x0;define-record-type-helper2~1pxGHH~48712| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48764|)) #ex:dotted-length #ex:dotted-butlast #list? #ex:dotted-last define-record-type-helper4 (|\x0;env~1pxGHH~48778|) (srfi 136) #ex:syntax-rename #append #ex:invalid-form)
 |\x0;define-record-type-helper3~1pxGHH~48761| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48800|))) (7065 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (8824 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (16171 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? define-record-type-helper5 (|\x0;env~1pxGHH~48888|) (srfi 136) #ex:syntax-rename #append _ (|\x0;env~1pxGHH~48811|) irritants: (|\x0;c~1pxGHH~48798|) (|\x0;env~1pxGHH~48811| |\x0;env~1pxGHH~128|) (core syntax-rules) syntax-error "bad field specs" #ex:syntax-violation #ex:invalid-form define-record-type-helper4 (|\x0;env~1pxGHH~48826|) + (|\x0;env~1pxGHH~48857|) mutator-name)
 |\x0;define-record-type-helper4~1pxGHH~48797| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~48914|))) (4102 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #ex:dotted-length #ex:dotted-butlast #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~49007|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~49009| |\x0;rest~1pxGHH~49008|)) #f #( ((0 . #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~48979| |\x0;accessor~1pxGHH~48980| |\x0;mutator~1pxGHH~48981| |\x0;index~1pxGHH~48982|))) (25359 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|4144\|4146| |.y1\|4144\|4145| |.results\|4144\|4149|))) (30134 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|4043\|4045| |.y1\|4043\|4044| |.results\|4043\|4048|)))) #ex:dotted-last #list? begin (|\x0;env~1pxGHH~48989|) (srfi 136) #ex:syntax-rename define-values type-metadata make-type type? type-ref make-type-subtype make-subtype #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((define accessor (make-accessor type-ref index)) ... (define mutator (make-mutator type-ref index)) ... (define rtd (make-rtd 'type-name 'original-fields make-type type? type-ref (list accessor ...) (list mutator ...) make-type-subtype parent-rtd)) (define predicate-name type?) (define constructor-name (make-constructor rtd size (list parent-index ... . indices))) (define-record-type-descriptor type-name rtd size (parent-index ... . indices) parent original-fields)) #ex:syntax-violation ((define mutator (make-mutator type-ref index)) ... (define rtd (make-rtd 'type-name 'original-fields make-type type? type-ref (list accessor ...) (list mutator ...) make-type-subtype parent-rtd)) (define predicate-name type?) (define constructor-name (make-constructor rtd size (list parent-index ... . indices))) (define-record-type-descriptor type-name rtd size (parent-index ... . indices) parent original-fields)) define rtd make-rtd quote list make-constructor #append define-record-type-descriptor #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~48981| |\x0;index~1pxGHH~48982|)) define (|\x0;env~1pxGHH~48989|) (srfi 136) #ex:syntax-rename make-mutator type-ref)
 #larceny:map #reverse make-mutator #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~48980| |\x0;index~1pxGHH~48982|)) define (|\x0;env~1pxGHH~48989|) (srfi 136) #ex:syntax-rename make-accessor type-ref)
 make-accessor)
 (() () () ()) #map #list #apply)
 #ex:map-while #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~48956| |\x0;rest~1pxGHH~48955|)) #f #( ((0 . #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~48926| |\x0;accessor-name~1pxGHH~48927| |\x0;mutator-name~1pxGHH~48928| |\x0;index~1pxGHH~48929|))) (14406 . #(loop #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|5183\|5187| |.y1\|5183\|5186| |.y1\|5183\|5185| |.y1\|5183\|5184| |.results\|5183\|5190|))) (18876 . #(loop #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|4988\|4992| |.y1\|4988\|4991| |.y1\|4988\|4990| |.y1\|4988\|4989| |.results\|4988\|4995|))) (23346 . #(loop #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|4800\|4804| |.y1\|4800\|4803| |.y1\|4800\|4802| |.y1\|4800\|4801| |.results\|4800\|4807|)))) #ex:dotted-last define-record-type-helper6 (|\x0;env~1pxGHH~48936|) (srfi 136) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((field-name accessor-name mutator-name index) ... (accessor-name field-name mutator-name index) ...) #ex:syntax-violation ((accessor-name field-name mutator-name index) ...) #append ((field-name accessor-name mutator-name index) ... parent parent-rtd parent-size parent-indices original-fields) #ex:invalid-form #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~48926| |\x0;accessor-name~1pxGHH~48927| |\x0;mutator-name~1pxGHH~48928| |\x0;index~1pxGHH~48929|)))
 #larceny:map #reverse #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor-name~1pxGHH~48927| |\x0;field-name~1pxGHH~48926| |\x0;mutator-name~1pxGHH~48928| |\x0;index~1pxGHH~48929|)))
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~48926| |\x0;accessor-name~1pxGHH~48927| |\x0;mutator-name~1pxGHH~48928| |\x0;index~1pxGHH~48929|)))
)
 (() () () ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~48954|)))
 #ex:invalid-form)
 |\x0;define-record-type-helper5~1pxGHH~48911| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49029|))) (43903 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? begin (|\x0;env~1pxGHH~49078|) (srfi 136) #ex:syntax-rename define-syntax m syntax-rules params *... _ *field-index *fields *index *type-name *size *constructor-name *args *rest define-record-type-helper6 ok *arg define-record-type-helper5 test c irritants: (|\x0;c~1pxGHH~49027|) (|\x0;env~1pxGHH~49047| |\x0;env~1pxGHH~128|) (core syntax-rules) syntax-error "invalid field name in constructor" #ex:syntax-violation #ex:invalid-form)
 |\x0;define-record-type-helper6~1pxGHH~49026| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;make-record~1pxGHH~49146| #|\x0;make-record-type-descriptor~1pxGHH~49145| #|\x0;record-type-fields~1pxGHH~49144| #|\x0;record-type-parent~1pxGHH~49143| #|\x0;record-type-name~1pxGHH~49142| #|\x0;record-type-predicate~1pxGHH~49141| #|\x0;record-type-descriptor~1pxGHH~49140| #|\x0;make-mutator~1pxGHH~49139| #|\x0;make-accessor~1pxGHH~49138| #|\x0;make-constructor~1pxGHH~49137| #|\x0;record-fields~1pxGHH~49136| #|\x0;record-rtd~1pxGHH~49135| #|\x0;%record?~1pxGHH~49134| #|\x0;%make-record~1pxGHH~49133| #|\x0;<record>~1pxGHH~49132| #|\x0;make-subtype~1pxGHH~49127| #|\x0;make-type-subtype~1pxGHH~49126| #|\x0;type-ref~1pxGHH~49125| #|\x0;record?~1pxGHH~49124| #|\x0;%make-type~1pxGHH~49123| #|\x0;type-metadata~1pxGHH~49122| #|\x0;rtd-parent~1pxGHH~49120| #|\x0;rtd-subtyper~1pxGHH~49119| #|\x0;rtd-ref~1pxGHH~49118| #|\x0;rtd-predicate~1pxGHH~49117| #|\x0;rtd-constructor~1pxGHH~49116| #|\x0;rtd-mutators~1pxGHH~49115| #|\x0;rtd-accessors~1pxGHH~49114| #|\x0;rtd-fieldspecs~1pxGHH~49113| #|\x0;rtd-name~1pxGHH~49112| #|\x0;record-type-descriptor?~1pxGHH~49111| #|\x0;make-rtd~1pxGHH~49110| #|\x0;<record-type-descriptor>~1pxGHH~49109| <record-type-descriptor> #((immutable name) (immutable fieldspecs) (immutable accessors) (immutable mutators) (immutable constructor) (immutable predicate) (immutable ref) (immutable subtyper) (immutable parent)) #make-rtd #(name fieldspecs constructor predicate ref accessors mutators subtyper parent) #rtd-constructor #rtd-predicate name #rtd-accessor fieldspecs accessors mutators constructor predicate ref subtyper parent #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;make-type~1pxGHH~48387|)
 #list #call-with-values #f #( #(make-subtype #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~49312| |\x0;payload~1pxGHH~49313|)) #|\x0;rtd-subtyper~1pxGHH~49119| #|\x0;make-type-subtype~1pxGHH~49126|)
 <record> #((immutable rtd) (immutable fields)) #(rtd fields) rtd fields #f #( #(make-constructor #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~49287| |\x0;size~1pxGHH~49288| |\x0;indices~1pxGHH~49289|)) #|\x0;rtd-constructor~1pxGHH~49116| #f #( #(#f #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~49292|) #length "unsupported number of arguments in constructor call" #error #|\x0;%make-record~1pxGHH~49133| #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;index~1pxGHH~49302| |\x0;arg~1pxGHH~49303|)))
 #|\x0;for-each~1pxGHH~1464|)
)
 #f #( #(make-accessor #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;ref~1pxGHH~49282| |\x0;index~1pxGHH~49283|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;record~1pxGHH~49285|)) #|\x0;record-fields~1pxGHH~49136|)
)
 #f #( #(make-mutator #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;ref~1pxGHH~49276| |\x0;index~1pxGHH~49277|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;record~1pxGHH~49279| |\x0;value~1pxGHH~49280|)) #|\x0;record-fields~1pxGHH~49136|)
)
 #f #( #(record-type-descriptor #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;record~1pxGHH~49274|)) #|\x0;type-ref~1pxGHH~49125| #|\x0;record-rtd~1pxGHH~49135|)
 #f #( #(record-type-predicate #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~49272|)) #|\x0;rtd-predicate~1pxGHH~49117|)
 #f #( #(record-type-name #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~49270|)) #|\x0;rtd-name~1pxGHH~49112|)
 #f #( #(record-type-parent #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~49268|)) #|\x0;rtd-parent~1pxGHH~49120|)
 #f #( ((0 . #(record-type-fields #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~49243|))) (1022 . #(|\x0;loop~1pxGHH~49249| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fieldspecs~1pxGHH~49257| |\x0;accessors~1pxGHH~49258| |\x0;mutators~1pxGHH~49259|)))) #|\x0;rtd-mutators~1pxGHH~49115| #|\x0;rtd-accessors~1pxGHH~49114| #|\x0;rtd-fieldspecs~1pxGHH~49113| #length)
 #f #( #(make-record-type-descriptor #f #       @ src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;name~1pxGHH~49151| |\x0;fieldspecs~1pxGHH~49152| . |\x0;parent*~1pxGHH~49153|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fieldspec~1pxGHH~49225|)) #list? #length immutable mutable "make-record-type-descriptor: invalid fieldspec" #error)
 #|\x0;map~1pxGHH~1463| #f #( ((0 . #(#f #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49168| |\x0;x~1pxGHH~49169| |\x0;x~1pxGHH~49170| |\x0;x~1pxGHH~49171| |\x0;x~1pxGHH~49172|))) (2173 . #(|\x0;loop~1pxGHH~49196| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fieldspecs~1pxGHH~49203| |\x0;index~1pxGHH~49204|))) (3469 . #(|\x0;loop~1pxGHH~49212| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fieldspecs~1pxGHH~49219| |\x0;index~1pxGHH~49220|)))) #|\x0;rtd-fieldspecs~1pxGHH~49113| #length #|\x0;make-rtd~1pxGHH~49110| #|\x0;make-accessor~1pxGHH~49138|)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;make-subtype~1pxGHH~49127|)
 #call-with-values)
 #f #( #(make-record #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~49148| |\x0;field-vector~1pxGHH~49149|)) #|\x0;%make-record~1pxGHH~49133| #|\x0;rtd-constructor~1pxGHH~49116|)
 #values)
 (srfi 136) ((define-record-type macro |\x0;define-record-type~1pxGHH~48538| (0) #f (srfi 136)) (record-type-descriptor? variable |\x0;record-type-descriptor?~1pxGHH~49111| (0) #f (srfi 136)) (record? variable |\x0;record?~1pxGHH~49124| (0) #f (srfi 136)) (record-type-descriptor variable |\x0;record-type-descriptor~1pxGHH~49140| (0) #f (srfi 136)) (record-type-predicate variable |\x0;record-type-predicate~1pxGHH~49141| (0) #f (srfi 136)) (record-type-name variable |\x0;record-type-name~1pxGHH~49142| (0) #f (srfi 136)) (record-type-parent variable |\x0;record-type-parent~1pxGHH~49143| (0) #f (srfi 136)) (record-type-fields variable |\x0;record-type-fields~1pxGHH~49144| (0) #f (srfi 136)) (make-record-type-descriptor variable |\x0;make-record-type-descriptor~1pxGHH~49145| (0) #f (srfi 136)) (make-record variable |\x0;make-record~1pxGHH~49146| (0) #f (srfi 136))) (((srfi 137) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~48422| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~49341| #ex:make-library #ex:register-library! #values)
 #f)
))
