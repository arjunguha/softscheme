#!fasl
(define .petit-bootstrap-id-a0c10a42f803fd7b4ce38dac1f87f151 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/123.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-a0c10a42f803fd7b4ce38dac1f87f151 0
'#(#f #( #f #ex:unspecified #|\x0;register-getter-with-setter!~1pxGHH~44047| #|\x0;type-list~1pxGHH~44046| #|\x0;sparse-types~1pxGHH~44045| #|\x0;setter-table~1pxGHH~44044| #|\x0;getter-table~1pxGHH~44043| #|\x0;type-of~1pxGHH~44042| #|\x0;sparse-type?~1pxGHH~44041| #|\x0;lookup-setter~1pxGHH~44040| #|\x0;lookup-getter~1pxGHH~44039| #|\x0;$bracket-apply$~1pxGHH~44038| #|\x0;~~1pxGHH~44037| #|\x0;ref*~1pxGHH~44036| #|\x0;ref~1pxGHH~44035| #|\x0;%set!~1pxGHH~44034| #|\x0;%ref*~1pxGHH~44033| #|\x0;%ref~1pxGHH~44032| #|\x0;box-type~1pxGHH~44031| #|\x0;box-setter~1pxGHH~44030| #|\x0;box-getter~1pxGHH~44029| #|\x0;box-set!~1pxGHH~44028| #|\x0;box-ref~1pxGHH~44027| #|\x0;bytevector-set!~1pxGHH~44026| #|\x0;bytevector-ref~1pxGHH~44025| #|\x0;srfi-4-types~1pxGHH~44024| #|\x0;srfi-4-setters~1pxGHH~44023| #|\x0;srfi-4-getters~1pxGHH~44022| #|\x0;record-type~1pxGHH~44021| #|\x0;record-setter~1pxGHH~44020| #|\x0;record-getter~1pxGHH~44019| #|\x0;record-set!~1pxGHH~44018| #|\x0;record-ref~1pxGHH~44017| #|\x0;pair-set!~1pxGHH~44016| #|\x0;pair-ref~1pxGHH~44015| #|\x0;alist->hashtable~1pxGHH~44014| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~44007| 0 1 2 3)) (3 (((register-getter-with-setter!) variable |\x0;register-getter-with-setter!~1pxGHH~44047| (0) #f (srfi 123)) ((type-list) variable |\x0;type-list~1pxGHH~44046| (0) #t (srfi 123)) ((sparse-types) variable |\x0;sparse-types~1pxGHH~44045| (0) #t (srfi 123)) ((setter-table) variable |\x0;setter-table~1pxGHH~44044| (0) #f (srfi 123)) ((getter-table) variable |\x0;getter-table~1pxGHH~44043| (0) #f (srfi 123)) ((type-of) variable |\x0;type-of~1pxGHH~44042| (0) #f (srfi 123)) ((sparse-type?) variable |\x0;sparse-type?~1pxGHH~44041| (0) #f (srfi 123)) ((lookup-setter) variable |\x0;lookup-setter~1pxGHH~44040| (0) #f (srfi 123)) ((lookup-getter) variable |\x0;lookup-getter~1pxGHH~44039| (0) #f (srfi 123)) (($bracket-apply$) variable |\x0;$bracket-apply$~1pxGHH~44038| (0) #f (srfi 123)) ((~) variable |\x0;~~1pxGHH~44037| (0) #f (srfi 123)) ((ref*) variable |\x0;ref*~1pxGHH~44036| (0) #f (srfi 123)) ((ref) variable |\x0;ref~1pxGHH~44035| (0) #f (srfi 123)) ((%set!) variable |\x0;%set!~1pxGHH~44034| (0) #f (srfi 123)) ((%ref*) variable |\x0;%ref*~1pxGHH~44033| (0) #f (srfi 123)) ((%ref) variable |\x0;%ref~1pxGHH~44032| (0) #f (srfi 123)) ((box-type) variable |\x0;box-type~1pxGHH~44031| (0) #f (srfi 123)) ((box-setter) variable |\x0;box-setter~1pxGHH~44030| (0) #f (srfi 123)) ((box-getter) variable |\x0;box-getter~1pxGHH~44029| (0) #f (srfi 123)) ((box-set!) variable |\x0;box-set!~1pxGHH~44028| (0) #f (srfi 123)) ((box-ref) variable |\x0;box-ref~1pxGHH~44027| (0) #f (srfi 123)) ((bytevector-set!) variable |\x0;bytevector-set!~1pxGHH~44026| (0) #f (srfi 123)) ((bytevector-ref) variable |\x0;bytevector-ref~1pxGHH~44025| (0) #f (srfi 123)) ((srfi-4-types) variable |\x0;srfi-4-types~1pxGHH~44024| (0) #f (srfi 123)) ((srfi-4-setters) variable |\x0;srfi-4-setters~1pxGHH~44023| (0) #f (srfi 123)) ((srfi-4-getters) variable |\x0;srfi-4-getters~1pxGHH~44022| (0) #f (srfi 123)) ((record-type) variable |\x0;record-type~1pxGHH~44021| (0) #f (srfi 123)) ((record-setter) variable |\x0;record-setter~1pxGHH~44020| (0) #f (srfi 123)) ((record-getter) variable |\x0;record-getter~1pxGHH~44019| (0) #f (srfi 123)) ((record-set!) variable |\x0;record-set!~1pxGHH~44018| (0) #f (srfi 123)) ((record-ref) variable |\x0;record-ref~1pxGHH~44017| (0) #f (srfi 123)) ((pair-set!) variable |\x0;pair-set!~1pxGHH~44016| (0) #f (srfi 123)) ((pair-ref) variable |\x0;pair-ref~1pxGHH~44015| (0) #f (srfi 123)) ((alist->hashtable) variable |\x0;alist->hashtable~1pxGHH~44014| (0) #f (srfi 123)) ((push!) macro |\x0;push!~1pxGHH~43996| (0) #f (srfi 123)) ((set-box!) variable |\x0;set-box!~1pxGHH~23564| (0) #f (srfi 111)) ((unbox) variable |\x0;unbox~1pxGHH~23563| (0) #f (srfi 111)) ((box?) variable |\x0;box?~1pxGHH~23562| (0) #f (srfi 111)) ((box) variable |\x0;box~1pxGHH~23561| (0) #f (srfi 111)) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((rtd-field-mutable?) variable rtd-field-mutable? (0) #f (larceny PRIMITIVES)) ((rtd-all-field-names) variable rtd-all-field-names (0) #f (larceny PRIMITIVES)) ((rtd-field-names) variable rtd-field-names (0) #f (larceny PRIMITIVES)) ((rtd-parent) variable rtd-parent (0) #f (larceny PRIMITIVES)) ((rtd-name) variable rtd-name (0) #f (larceny PRIMITIVES)) ((record-rtd) variable record-rtd (0) #f (larceny PRIMITIVES)) ((record?) variable record? (0) #f (larceny PRIMITIVES)) ((rtd-mutator) variable rtd-mutator (0) #f (larceny PRIMITIVES)) ((rtd-accessor) variable rtd-accessor (0) #f (larceny PRIMITIVES)) ((rtd-predicate) variable rtd-predicate (0) #f (larceny PRIMITIVES)) ((rtd-constructor) variable rtd-constructor (0) #f (larceny PRIMITIVES)) ((rtd?) variable rtd? (0) #f (larceny PRIMITIVES)) ((make-rtd) variable make-rtd (0) #f (larceny PRIMITIVES)) ((symbol-hash) variable symbol-hash (0) #f (larceny PRIMITIVES)) ((string-ci-hash) variable string-ci-hash (0) #f (larceny PRIMITIVES)) ((string-hash) variable string-hash (0) #f (larceny PRIMITIVES)) ((equal-hash) variable equal-hash (0) #f (larceny PRIMITIVES)) ((hashtable-mutable?) variable hashtable-mutable? (0) #f (larceny PRIMITIVES)) ((hashtable-hash-function) variable hashtable-hash-function (0) #f (larceny PRIMITIVES)) ((hashtable-equivalence-function) variable hashtable-equivalence-function (0) #f (larceny PRIMITIVES)) ((hashtable-entries) variable hashtable-entries (0) #f (larceny PRIMITIVES)) ((hashtable-keys) variable hashtable-keys (0) #f (larceny PRIMITIVES)) ((hashtable-clear!) variable hashtable-clear! (0) #f (larceny PRIMITIVES)) ((hashtable-copy) variable hashtable-copy (0) #f (larceny PRIMITIVES)) ((hashtable-update!) variable hashtable-update! (0) #f (larceny PRIMITIVES)) ((hashtable-contains?) variable hashtable-contains? (0) #f (larceny PRIMITIVES)) ((hashtable-delete!) variable hashtable-delete! (0) #f (larceny PRIMITIVES)) ((hashtable-set!) variable hashtable-set! (0) #f (larceny PRIMITIVES)) ((hashtable-ref) variable hashtable-ref (0) #f (larceny PRIMITIVES)) ((hashtable-size) variable hashtable-size (0) #f (larceny PRIMITIVES)) ((hashtable?) variable hashtable? (0) #f (larceny PRIMITIVES)) ((make-hashtable) variable |\x0;make-hashtable~1pxGHH~7276| (0) #f (rnrs hashtables)) ((make-eqv-hashtable) variable make-eqv-hashtable (0) #f (larceny PRIMITIVES)) ((make-eq-hashtable) variable make-eq-hashtable (0) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((round) variable round (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((case-lambda) macro |\x0;case-lambda~1pxGHH~3944| (0) #f (rnrs control)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((lset-diff+intersection!) variable |\x0;lset-diff+intersection!~1pxGHH~5105| (0) #f (srfi :1 lists)) ((lset-diff+intersection) variable |\x0;lset-diff+intersection~1pxGHH~5104| (0) #f (srfi :1 lists)) ((lset-xor!) variable |\x0;lset-xor!~1pxGHH~5103| (0) #f (srfi :1 lists)) ((lset-xor) variable |\x0;lset-xor~1pxGHH~5102| (0) #f (srfi :1 lists)) ((lset-difference!) variable |\x0;lset-difference!~1pxGHH~5101| (0) #f (srfi :1 lists)) ((lset-difference) variable |\x0;lset-difference~1pxGHH~5100| (0) #f (srfi :1 lists)) ((lset-intersection!) variable |\x0;lset-intersection!~1pxGHH~5099| (0) #f (srfi :1 lists)) ((lset-intersection) variable |\x0;lset-intersection~1pxGHH~5098| (0) #f (srfi :1 lists)) ((lset-union!) variable |\x0;lset-union!~1pxGHH~5097| (0) #f (srfi :1 lists)) ((lset-union) variable |\x0;lset-union~1pxGHH~5096| (0) #f (srfi :1 lists)) ((lset-adjoin) variable |\x0;lset-adjoin~1pxGHH~5095| (0) #f (srfi :1 lists)) ((lset=) variable |\x0;lset=~1pxGHH~5094| (0) #f (srfi :1 lists)) ((lset<=) variable |\x0;lset<=~1pxGHH~5093| (0) #f (srfi :1 lists)) ((alist-delete!) variable |\x0;alist-delete!~1pxGHH~5079| (0) #f (srfi :1 lists)) ((alist-delete) variable |\x0;alist-delete~1pxGHH~5078| (0) #f (srfi :1 lists)) ((alist-copy) variable |\x0;alist-copy~1pxGHH~5077| (0) #f (srfi :1 lists)) ((alist-cons) variable |\x0;alist-cons~1pxGHH~5076| (0) #f (srfi :1 lists)) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((delete-duplicates!) variable |\x0;delete-duplicates!~1pxGHH~5075| (0) #f (srfi :1 lists)) ((delete!) variable |\x0;delete!~1pxGHH~5073| (0) #f (srfi :1 lists)) ((delete-duplicates) variable |\x0;delete-duplicates~1pxGHH~5074| (0) #f (srfi :1 lists)) ((delete) variable |\x0;delete~1pxGHH~5072| (0) #f (srfi :1 lists)) ((break!) variable |\x0;break!~1pxGHH~5087| (0) #f (srfi :1 lists)) ((span!) variable |\x0;span!~1pxGHH~5085| (0) #f (srfi :1 lists)) ((break) variable |\x0;break~1pxGHH~5086| (0) #f (srfi :1 lists)) ((span) variable |\x0;span~1pxGHH~5084| (0) #f (srfi :1 lists)) ((take-while!) variable |\x0;take-while!~1pxGHH~5083| (0) #f (srfi :1 lists)) ((drop-while) variable |\x0;drop-while~1pxGHH~5082| (0) #f (srfi :1 lists)) ((take-while) variable |\x0;take-while~1pxGHH~5081| (0) #f (srfi :1 lists)) ((list-index) variable |\x0;list-index~1pxGHH~5090| (0) #f (srfi :1 lists)) ((every) variable |\x0;every~1pxGHH~5089| (0) #f (srfi :1 lists)) ((any) variable |\x0;any~1pxGHH~5088| (0) #f (srfi :1 lists)) ((find-tail) variable |\x0;find-tail~1pxGHH~5080| (0) #f (srfi :1 lists)) ((find) variable find (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((remove!) variable |\x0;remove!~1pxGHH~5071| (0) #f (srfi :1 lists)) ((partition!) variable |\x0;partition!~1pxGHH~5069| (0) #f (srfi :1 lists)) ((filter!) variable |\x0;filter!~1pxGHH~5068| (0) #f (srfi :1 lists)) ((remove) variable |\x0;remove~1pxGHH~5070| (0) #f (srfi :1 lists)) ((partition) variable partition (0) #f (larceny PRIMITIVES)) ((filter) variable filter (0) #f (larceny PRIMITIVES)) ((map-in-order) variable |\x0;map-in-order~1pxGHH~5067| (0) #f (srfi :1 lists)) ((filter-map) variable |\x0;filter-map~1pxGHH~5066| (0) #f (srfi :1 lists)) ((pair-for-each) variable |\x0;pair-for-each~1pxGHH~5064| (0) #f (srfi :1 lists)) ((map!) variable |\x0;map!~1pxGHH~5065| (0) #f (srfi :1 lists)) ((append-map!) variable |\x0;append-map!~1pxGHH~5062| (0) #f (srfi :1 lists)) ((append-map) variable |\x0;append-map~1pxGHH~5061| (0) #f (srfi :1 lists)) ((reduce-right) variable |\x0;reduce-right~1pxGHH~5060| (0) #f (srfi :1 lists)) ((pair-fold-right) variable |\x0;pair-fold-right~1pxGHH~5057| (0) #f (srfi :1 lists)) ((unfold-right) variable |\x0;unfold-right~1pxGHH~5054| (0) #f (srfi :1 lists)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0) #f (rnrs lists)) ((reduce) variable |\x0;reduce~1pxGHH~5059| (0) #f (srfi :1 lists)) ((pair-fold) variable |\x0;pair-fold~1pxGHH~5058| (0) #f (srfi :1 lists)) ((unfold) variable |\x0;unfold~1pxGHH~5055| (0) #f (srfi :1 lists)) ((fold) variable |\x0;fold~1pxGHH~5056| (0) #f (srfi :1 lists)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((count) variable |\x0;count~1pxGHH~5053| (0) #f (srfi :1 lists)) ((unzip5) variable |\x0;unzip5~1pxGHH~5042| (0) #f (srfi :1 lists)) ((unzip4) variable |\x0;unzip4~1pxGHH~5041| (0) #f (srfi :1 lists)) ((unzip3) variable |\x0;unzip3~1pxGHH~5040| (0) #f (srfi :1 lists)) ((unzip2) variable |\x0;unzip2~1pxGHH~5039| (0) #f (srfi :1 lists)) ((unzip1) variable |\x0;unzip1~1pxGHH~5038| (0) #f (srfi :1 lists)) ((zip) variable |\x0;zip~1pxGHH~5016| (0) #f (srfi :1 lists)) ((append-reverse!) variable |\x0;append-reverse!~1pxGHH~5045| (0) #f (srfi :1 lists)) ((append-reverse) variable |\x0;append-reverse~1pxGHH~5044| (0) #f (srfi :1 lists)) ((reverse!) variable |\x0;reverse!~1pxGHH~5091| (0) #f (srfi :1 lists)) ((concatenate!) variable |\x0;concatenate!~1pxGHH~5047| (0) #f (srfi :1 lists)) ((append!) variable |\x0;append!~1pxGHH~5043| (0) #f (srfi :1 lists)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((concatenate) variable |\x0;concatenate~1pxGHH~5046| (0) #f (srfi :1 lists)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((length+) variable |\x0;length+~1pxGHH~5015| (0) #f (srfi :1 lists)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((last-pair) variable |\x0;last-pair~1pxGHH~5037| (0) #f (srfi :1 lists)) ((last) variable |\x0;last~1pxGHH~5036| (0) #f (srfi :1 lists)) ((split-at!) variable |\x0;split-at!~1pxGHH~5035| (0) #f (srfi :1 lists)) ((split-at) variable |\x0;split-at~1pxGHH~5034| (0) #f (srfi :1 lists)) ((drop-right!) variable |\x0;drop-right!~1pxGHH~5033| (0) #f (srfi :1 lists)) ((take!) variable |\x0;take!~1pxGHH~5030| (0) #f (srfi :1 lists)) ((drop-right) variable |\x0;drop-right~1pxGHH~5032| (0) #f (srfi :1 lists)) ((take-right) variable |\x0;take-right~1pxGHH~5031| (0) #f (srfi :1 lists)) ((drop) variable |\x0;drop~1pxGHH~5029| (0) #f (srfi :1 lists)) ((take) variable |\x0;take~1pxGHH~5028| (0) #f (srfi :1 lists)) ((car+cdr) variable |\x0;car+cdr~1pxGHH~5027| (0) #f (srfi :1 lists)) ((tenth) variable |\x0;tenth~1pxGHH~5026| (0) #f (srfi :1 lists)) ((ninth) variable |\x0;ninth~1pxGHH~5025| (0) #f (srfi :1 lists)) ((eighth) variable |\x0;eighth~1pxGHH~5024| (0) #f (srfi :1 lists)) ((seventh) variable |\x0;seventh~1pxGHH~5023| (0) #f (srfi :1 lists)) ((sixth) variable |\x0;sixth~1pxGHH~5022| (0) #f (srfi :1 lists)) ((fifth) variable |\x0;fifth~1pxGHH~5021| (0) #f (srfi :1 lists)) ((fourth) variable |\x0;fourth~1pxGHH~5020| (0) #f (srfi :1 lists)) ((third) variable |\x0;third~1pxGHH~5019| (0) #f (srfi :1 lists)) ((second) variable |\x0;second~1pxGHH~5018| (0) #f (srfi :1 lists)) ((first) variable |\x0;first~1pxGHH~5017| (0) #f (srfi :1 lists)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((list=) variable |\x0;list=~1pxGHH~5014| (0) #f (srfi :1 lists)) ((null-list?) variable |\x0;null-list?~1pxGHH~5013| (0) #f (srfi :1 lists)) ((not-pair?) variable |\x0;not-pair?~1pxGHH~5012| (0) #f (srfi :1 lists)) ((dotted-list?) variable |\x0;dotted-list?~1pxGHH~5010| (0) #f (srfi :1 lists)) ((circular-list?) variable |\x0;circular-list?~1pxGHH~5011| (0) #f (srfi :1 lists)) ((proper-list?) variable |\x0;proper-list?~1pxGHH~5009| (0) #f (srfi :1 lists)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((iota) variable |\x0;iota~1pxGHH~5007| (0) #f (srfi :1 lists)) ((circular-list) variable |\x0;circular-list~1pxGHH~5008| (0) #f (srfi :1 lists)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list-tabulate) variable |\x0;list-tabulate~1pxGHH~5006| (0) #f (srfi :1 lists)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((cons*) variable cons* (0) #f (larceny PRIMITIVES)) ((xcons) variable |\x0;xcons~1pxGHH~5005| (0) #f (srfi :1 lists)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((getter-with-setter) variable |\x0;getter-with-setter~1pxGHH~43779| (0) #f (srfi :17 generalized-set!)) ((setter) variable |\x0;setter~1pxGHH~43778| (0) #f (srfi :17 generalized-set!)) ((set!) macro |\x0;set!~1pxGHH~43745| (0) #f (srfi :17 generalized-set!)) ((rec) macro |\x0;rec~1pxGHH~43913| (0) #f (srfi :31 rec)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~43997|) variable |\x0;x~1pxGHH~43999| (0) #f (srfi 123)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~43997|) . #f) ((<list-var>) . #f) ((<x>) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~43999|)) set! (|\x0;env~1pxGHH~44007|) (srfi 123) #ex:syntax-rename cons #ex:invalid-form)
 |\x0;push!~1pxGHH~43996| #ex:register-macro! #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;register-getter-with-setter!~1pxGHH~44047| #|\x0;type-list~1pxGHH~44046| #|\x0;sparse-types~1pxGHH~44045| #|\x0;setter-table~1pxGHH~44044| #|\x0;getter-table~1pxGHH~44043| #|\x0;type-of~1pxGHH~44042| #|\x0;sparse-type?~1pxGHH~44041| #|\x0;lookup-setter~1pxGHH~44040| #|\x0;lookup-getter~1pxGHH~44039| #|\x0;$bracket-apply$~1pxGHH~44038| #|\x0;~~1pxGHH~44037| #|\x0;ref*~1pxGHH~44036| #|\x0;ref~1pxGHH~44035| #|\x0;%set!~1pxGHH~44034| #|\x0;%ref*~1pxGHH~44033| #|\x0;%ref~1pxGHH~44032| #|\x0;box-type~1pxGHH~44031| #|\x0;box-setter~1pxGHH~44030| #|\x0;box-getter~1pxGHH~44029| #|\x0;box-set!~1pxGHH~44028| #|\x0;box-ref~1pxGHH~44027| #|\x0;bytevector-set!~1pxGHH~44026| #|\x0;bytevector-ref~1pxGHH~44025| #|\x0;srfi-4-types~1pxGHH~44024| #|\x0;srfi-4-setters~1pxGHH~44023| #|\x0;srfi-4-getters~1pxGHH~44022| #|\x0;record-type~1pxGHH~44021| #|\x0;record-setter~1pxGHH~44020| #|\x0;record-getter~1pxGHH~44019| #|\x0;record-set!~1pxGHH~44018| #|\x0;record-ref~1pxGHH~44017| #|\x0;pair-set!~1pxGHH~44016| #|\x0;pair-ref~1pxGHH~44015| #|\x0;alist->hashtable~1pxGHH~44014| #f #( #(alist->hashtable #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;alist~1pxGHH~44201|)) #make-eqv-hashtable #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;entry~1pxGHH~44206|)) #hashtable-set!)
 #|\x0;for-each~1pxGHH~1464|)
 #f #( #(pair-ref #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pair~1pxGHH~44190| |\x0;key~1pxGHH~44191|)) car cdr #list-ref)
 #f #( #(pair-set! #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pair~1pxGHH~44178| |\x0;key~1pxGHH~44179| |\x0;value~1pxGHH~44180|)) car cdr #list-set!)
 #f #( #(record-ref #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;record~1pxGHH~44168| |\x0;field~1pxGHH~44169|)) #record-rtd #rtd-accessor)
 #f #( #(record-set! #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;record~1pxGHH~44157| |\x0;field~1pxGHH~44158| |\x0;value~1pxGHH~44159|)) #record-rtd #rtd-mutator)
 #record? #bytevector-u8-ref #bytevector-u8-set! #f #( #(box-ref #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;box~1pxGHH~44151| |\x0;_field~1pxGHH~44152|)) #|\x0;unbox~1pxGHH~23563|)
 #f #( #(box-set! #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;box~1pxGHH~44147| |\x0;_field~1pxGHH~44148| |\x0;value~1pxGHH~44149|)) #|\x0;set-box!~1pxGHH~23564|)
 #|\x0;box?~1pxGHH~23562| #|\x0;box?~1pxGHH~23562| #|\x0;box?~1pxGHH~23562| #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~44112| |\x0;x2~1pxGHH~44113| |\x0;x3~1pxGHH~44114| |\x0;n~1pxGHH~44115|)) #|\x0;sparse-type?~1pxGHH~44041| #|\x0;lookup-getter~1pxGHH~44039| "Object has no entry for field." #error "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #f #( #(%ref* #f #       @ src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;object~1pxGHH~44103| |\x0;field~1pxGHH~44104| . |\x0;fields~1pxGHH~44105|)) #|\x0;%ref~1pxGHH~44032| #|\x0;%ref*~1pxGHH~44033| #apply)
 #f #( #(%set! #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;object~1pxGHH~44096| |\x0;field~1pxGHH~44097| |\x0;value~1pxGHH~44098|)) #|\x0;lookup-setter~1pxGHH~44040|)
 #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;object~1pxGHH~44092| |\x0;field~1pxGHH~44093| |\x0;value~1pxGHH~44094|)) #|\x0;%set!~1pxGHH~44034|)
 #|\x0;getter-with-setter~1pxGHH~43779| #f #( #(|\x0;set!*~1pxGHH~44082| #f #      @ src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;object~1pxGHH~44086| |\x0;field~1pxGHH~44087| |\x0;rest0~1pxGHH~44088| . |\x0;rest~1pxGHH~44089|)) #|\x0;%set!~1pxGHH~44034| #|\x0;ref~1pxGHH~44035| #apply)
 #|\x0;getter-with-setter~1pxGHH~43779| #f #( #(lookup-getter #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;object~1pxGHH~44074|)) #|\x0;type-of~1pxGHH~44042| #|\x0;getter-table~1pxGHH~44043| #hashtable-ref "No generic getter for object's type." #error)
 #f #( #(lookup-setter #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;object~1pxGHH~44070|)) #|\x0;type-of~1pxGHH~44042| #|\x0;setter-table~1pxGHH~44044| #hashtable-ref "No generic setter for object's type." #error)
 #f #( #(sparse-type? #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;object~1pxGHH~44068|)) #|\x0;type-of~1pxGHH~44042| #|\x0;sparse-types~1pxGHH~44045| #memv)
 #f #( #(type-of #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;object~1pxGHH~44064|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pred~1pxGHH~44066|)))
 #|\x0;type-list~1pxGHH~44046| #find)
 #bytevector? #hashtable? #hashtable-ref #pair? #string-ref #string? #vector-ref #vector? #append #bytevector? #hashtable? #hashtable-set! #pair? #string-set! #string? #vector-set! #vector? #append #hashtable? #hashtable? #vector? #bytevector? #string? #pair? #boolean? #char? #eof-object? #number? #port? #procedure? #symbol? #null? #append #f #( #(register-getter-with-setter! #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;type~1pxGHH~44049| |\x0;getter~1pxGHH~44050| |\x0;sparse?~1pxGHH~44051|)) #|\x0;type-list~1pxGHH~44046| #|\x0;getter-table~1pxGHH~44043| #|\x0;~~1pxGHH~44037| #|\x0;setter~1pxGHH~43778| #|\x0;setter-table~1pxGHH~44044| #|\x0;sparse-types~1pxGHH~44045|)
 #values)
 (srfi 123) ((ref variable |\x0;ref~1pxGHH~44035| (0) #f (srfi 123)) (ref* variable |\x0;ref*~1pxGHH~44036| (0) #f (srfi 123)) (~ variable |\x0;~~1pxGHH~44037| (0) #f (srfi 123)) (register-getter-with-setter! variable |\x0;register-getter-with-setter!~1pxGHH~44047| (0) #f (srfi 123)) ($bracket-apply$ variable |\x0;$bracket-apply$~1pxGHH~44038| (0) #f (srfi 123)) (set! macro |\x0;set!~1pxGHH~43745| (0) #f (srfi :17 generalized-set!)) (setter variable |\x0;setter~1pxGHH~43778| (0) #f (srfi :17 generalized-set!)) (getter-with-setter variable |\x0;getter-with-setter~1pxGHH~43779| (0) #f (srfi :17 generalized-set!))) (((srfi 111) 0) ((srfi 99) 0) ((rnrs hashtables) 0) ((srfi 31) 0) ((srfi 17) 0) ((srfi 1) 0) ((scheme case-lambda) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~23570| |\x0;build~1pxGHH~43983| |\x0;build~1pxGHH~7277| |\x0;build~1pxGHH~43953| |\x0;build~1pxGHH~43904| |\x0;build~1pxGHH~7190| |\x0;build~1pxGHH~7216| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~44207| #ex:make-library #ex:register-library! #values)
 #f)
))
