#!fasl
(define .petit-bootstrap-id-c1c4aba62cdaa16155fc58909cc20456 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/128/reference.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-c1c4aba62cdaa16155fc58909cc20456 0
'#(#f #( #f #ex:unspecified #|\x0;make-default-comparator~1pxGHH~26586| #|\x0;default-equality~1pxGHH~26585| #|\x0;default-ordering~1pxGHH~26584| #|\x0;default-hash~1pxGHH~26583| #|\x0;dispatch-ordering~1pxGHH~26582| #|\x0;dispatch-equality~1pxGHH~26581| #|\x0;registered-comparator~1pxGHH~26580| #|\x0;registered-index~1pxGHH~26579| #|\x0;object-type~1pxGHH~26578| #|\x0;comparator-register-default!~1pxGHH~26577| #|\x0;*registered-comparators*~1pxGHH~26576| #|\x0;*next-comparator-index*~1pxGHH~26575| #|\x0;first-comparator-index~1pxGHH~26574| #|\x0;unknown-object-comparator~1pxGHH~26573| #|\x0;string-hash~1pxGHH~26572| #|\x0;make-vector-hash~1pxGHH~26571| #|\x0;make-vector<?~1pxGHH~26570| #|\x0;make-vector=?~1pxGHH~26569| #|\x0;make-vector-type-test~1pxGHH~26568| #|\x0;make-vector-comparator~1pxGHH~26567| #|\x0;make-list-hash~1pxGHH~26566| #|\x0;make-list<?~1pxGHH~26565| #|\x0;make-list=?~1pxGHH~26564| #|\x0;make-list-type-test~1pxGHH~26563| #|\x0;make-list-comparator~1pxGHH~26562| #|\x0;norp?~1pxGHH~26561| #|\x0;make-pair-hash~1pxGHH~26560| #|\x0;make-pair<?~1pxGHH~26559| #|\x0;make-pair=?~1pxGHH~26558| #|\x0;make-pair-type-test~1pxGHH~26557| #|\x0;make-pair-comparator~1pxGHH~26556| #|\x0;make-hasher~1pxGHH~26555| #|\x0;make-equal-comparator~1pxGHH~26554| #|\x0;make-eqv-comparator~1pxGHH~26553| #|\x0;make-eq-comparator~1pxGHH~26552| #|\x0;symbol-hash~1pxGHH~26551| #|\x0;symbol<?~1pxGHH~26550| #|\x0;string-ci-hash~1pxGHH~26549| #|\x0;complex<?~1pxGHH~26548| #|\x0;number-hash~1pxGHH~26547| #|\x0;char-ci-hash~1pxGHH~26546| #|\x0;char-hash~1pxGHH~26545| #|\x0;boolean-hash~1pxGHH~26544| #|\x0;boolean<?~1pxGHH~26543| #|\x0;>=?~1pxGHH~26542| #|\x0;<=?~1pxGHH~26541| #|\x0;>?~1pxGHH~26540| #|\x0;<?~1pxGHH~26539| #|\x0;=?~1pxGHH~26538| #|\x0;binary>=?~1pxGHH~26537| #|\x0;binary<=?~1pxGHH~26536| #|\x0;binary>?~1pxGHH~26535| #|\x0;binary<?~1pxGHH~26534| #|\x0;binary=?~1pxGHH~26533| #|\x0;comparator-hash~1pxGHH~26532| #|\x0;comparator-check-type~1pxGHH~26531| #|\x0;comparator-test-type~1pxGHH~26530| #|\x0;make-comparator~1pxGHH~26529| #|\x0;comparator-hashable?~1pxGHH~26528| #|\x0;comparator-ordered?~1pxGHH~26527| #|\x0;comparator-hash-function~1pxGHH~26526| #|\x0;comparator-ordering-predicate~1pxGHH~26525| #|\x0;comparator-equality-predicate~1pxGHH~26524| #|\x0;comparator-type-test-predicate~1pxGHH~26523| #|\x0;comparator?~1pxGHH~26522| #|\x0;make-raw-comparator~1pxGHH~26521| #|\x0;comparator~1pxGHH~26520| #|\x0;%salt%~1pxGHH~26482| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~26507| 0 1 2 3) (|\x0;env~1pxGHH~26492| 4 5 6 3) (|\x0;env~1pxGHH~26458| 7 8 9 3) (|\x0;env~1pxGHH~26436| 10 8 9 3)) (10 (((dummy |\x0;c~1pxGHH~26421|) . #f) ((comparator) . #f) ((a) . #f) ((b) . #f) ((less) . #f) ((equal) . #f) ((greater) . #f))) (9 (((x |\x0;c~1pxGHH~26421|) variable |\x0;x~1pxGHH~26423| (0) #f (srfi 128 reference)))) (8 ()) (7 (((dummy |\x0;c~1pxGHH~26421|) . #f) ((a) . #f) ((b) . #f) ((less) . #f) ((equal) . #f) ((greater) . #f))) (6 (((x |\x0;c~1pxGHH~26484|) variable |\x0;x~1pxGHH~26486| (0) #f (srfi 128 reference)))) (5 ()) (4 (((dummy |\x0;c~1pxGHH~26484|) . #f))) (3 (((make-default-comparator) variable |\x0;make-default-comparator~1pxGHH~26586| (0) #f (srfi 128 reference)) ((default-equality) variable |\x0;default-equality~1pxGHH~26585| (0) #f (srfi 128 reference)) ((default-ordering) variable |\x0;default-ordering~1pxGHH~26584| (0) #f (srfi 128 reference)) ((default-hash) variable |\x0;default-hash~1pxGHH~26583| (0) #f (srfi 128 reference)) ((dispatch-ordering) variable |\x0;dispatch-ordering~1pxGHH~26582| (0) #f (srfi 128 reference)) ((dispatch-equality) variable |\x0;dispatch-equality~1pxGHH~26581| (0) #f (srfi 128 reference)) ((registered-comparator) variable |\x0;registered-comparator~1pxGHH~26580| (0) #f (srfi 128 reference)) ((registered-index) variable |\x0;registered-index~1pxGHH~26579| (0) #f (srfi 128 reference)) ((object-type) variable |\x0;object-type~1pxGHH~26578| (0) #f (srfi 128 reference)) ((comparator-register-default!) variable |\x0;comparator-register-default!~1pxGHH~26577| (0) #f (srfi 128 reference)) ((*registered-comparators*) variable |\x0;*registered-comparators*~1pxGHH~26576| (0) #t (srfi 128 reference)) ((*next-comparator-index*) variable |\x0;*next-comparator-index*~1pxGHH~26575| (0) #t (srfi 128 reference)) ((first-comparator-index) variable |\x0;first-comparator-index~1pxGHH~26574| (0) #f (srfi 128 reference)) ((unknown-object-comparator) variable |\x0;unknown-object-comparator~1pxGHH~26573| (0) #f (srfi 128 reference)) ((string-hash) variable |\x0;string-hash~1pxGHH~26572| (0) #f (srfi 128 reference)) ((make-vector-hash) variable |\x0;make-vector-hash~1pxGHH~26571| (0) #f (srfi 128 reference)) ((make-vector<?) variable |\x0;make-vector<?~1pxGHH~26570| (0) #f (srfi 128 reference)) ((make-vector=?) variable |\x0;make-vector=?~1pxGHH~26569| (0) #f (srfi 128 reference)) ((make-vector-type-test) variable |\x0;make-vector-type-test~1pxGHH~26568| (0) #f (srfi 128 reference)) ((make-vector-comparator) variable |\x0;make-vector-comparator~1pxGHH~26567| (0) #f (srfi 128 reference)) ((make-list-hash) variable |\x0;make-list-hash~1pxGHH~26566| (0) #f (srfi 128 reference)) ((make-list<?) variable |\x0;make-list<?~1pxGHH~26565| (0) #f (srfi 128 reference)) ((make-list=?) variable |\x0;make-list=?~1pxGHH~26564| (0) #f (srfi 128 reference)) ((make-list-type-test) variable |\x0;make-list-type-test~1pxGHH~26563| (0) #f (srfi 128 reference)) ((make-list-comparator) variable |\x0;make-list-comparator~1pxGHH~26562| (0) #f (srfi 128 reference)) ((norp?) variable |\x0;norp?~1pxGHH~26561| (0) #f (srfi 128 reference)) ((make-pair-hash) variable |\x0;make-pair-hash~1pxGHH~26560| (0) #f (srfi 128 reference)) ((make-pair<?) variable |\x0;make-pair<?~1pxGHH~26559| (0) #f (srfi 128 reference)) ((make-pair=?) variable |\x0;make-pair=?~1pxGHH~26558| (0) #f (srfi 128 reference)) ((make-pair-type-test) variable |\x0;make-pair-type-test~1pxGHH~26557| (0) #f (srfi 128 reference)) ((make-pair-comparator) variable |\x0;make-pair-comparator~1pxGHH~26556| (0) #f (srfi 128 reference)) ((make-hasher) variable |\x0;make-hasher~1pxGHH~26555| (0) #f (srfi 128 reference)) ((make-equal-comparator) variable |\x0;make-equal-comparator~1pxGHH~26554| (0) #f (srfi 128 reference)) ((make-eqv-comparator) variable |\x0;make-eqv-comparator~1pxGHH~26553| (0) #f (srfi 128 reference)) ((make-eq-comparator) variable |\x0;make-eq-comparator~1pxGHH~26552| (0) #f (srfi 128 reference)) ((symbol-hash) variable |\x0;symbol-hash~1pxGHH~26551| (0) #f (srfi 128 reference)) ((symbol<?) variable |\x0;symbol<?~1pxGHH~26550| (0) #f (srfi 128 reference)) ((string-ci-hash) variable |\x0;string-ci-hash~1pxGHH~26549| (0) #f (srfi 128 reference)) ((complex<?) variable |\x0;complex<?~1pxGHH~26548| (0) #f (srfi 128 reference)) ((number-hash) variable |\x0;number-hash~1pxGHH~26547| (0) #f (srfi 128 reference)) ((char-ci-hash) variable |\x0;char-ci-hash~1pxGHH~26546| (0) #f (srfi 128 reference)) ((char-hash) variable |\x0;char-hash~1pxGHH~26545| (0) #f (srfi 128 reference)) ((boolean-hash) variable |\x0;boolean-hash~1pxGHH~26544| (0) #f (srfi 128 reference)) ((boolean<?) variable |\x0;boolean<?~1pxGHH~26543| (0) #f (srfi 128 reference)) ((>=?) variable |\x0;>=?~1pxGHH~26542| (0) #f (srfi 128 reference)) ((<=?) variable |\x0;<=?~1pxGHH~26541| (0) #f (srfi 128 reference)) ((>?) variable |\x0;>?~1pxGHH~26540| (0) #f (srfi 128 reference)) ((<?) variable |\x0;<?~1pxGHH~26539| (0) #f (srfi 128 reference)) ((=?) variable |\x0;=?~1pxGHH~26538| (0) #f (srfi 128 reference)) ((binary>=?) variable |\x0;binary>=?~1pxGHH~26537| (0) #f (srfi 128 reference)) ((binary<=?) variable |\x0;binary<=?~1pxGHH~26536| (0) #f (srfi 128 reference)) ((binary>?) variable |\x0;binary>?~1pxGHH~26535| (0) #f (srfi 128 reference)) ((binary<?) variable |\x0;binary<?~1pxGHH~26534| (0) #f (srfi 128 reference)) ((binary=?) variable |\x0;binary=?~1pxGHH~26533| (0) #f (srfi 128 reference)) ((comparator-hash) variable |\x0;comparator-hash~1pxGHH~26532| (0) #f (srfi 128 reference)) ((comparator-check-type) variable |\x0;comparator-check-type~1pxGHH~26531| (0) #f (srfi 128 reference)) ((comparator-test-type) variable |\x0;comparator-test-type~1pxGHH~26530| (0) #f (srfi 128 reference)) ((make-comparator) variable |\x0;make-comparator~1pxGHH~26529| (0) #f (srfi 128 reference)) ((comparator-hashable?) variable |\x0;comparator-hashable?~1pxGHH~26528| (0) #f (srfi 128 reference)) ((comparator-ordered?) variable |\x0;comparator-ordered?~1pxGHH~26527| (0) #f (srfi 128 reference)) ((comparator-hash-function) variable |\x0;comparator-hash-function~1pxGHH~26526| (0) #f (srfi 128 reference)) ((comparator-ordering-predicate) variable |\x0;comparator-ordering-predicate~1pxGHH~26525| (0) #f (srfi 128 reference)) ((comparator-equality-predicate) variable |\x0;comparator-equality-predicate~1pxGHH~26524| (0) #f (srfi 128 reference)) ((comparator-type-test-predicate) variable |\x0;comparator-type-test-predicate~1pxGHH~26523| (0) #f (srfi 128 reference)) ((comparator?) variable |\x0;comparator?~1pxGHH~26522| (0) #f (srfi 128 reference)) ((make-raw-comparator) variable |\x0;make-raw-comparator~1pxGHH~26521| (0) #f (srfi 128 reference)) ((comparator) variable |\x0;comparator~1pxGHH~26520| (0) #f (srfi 128 reference)) ((with-hash-salt) macro |\x0;with-hash-salt~1pxGHH~26495| (0) #f (srfi 128 reference)) ((hash-salt) macro |\x0;hash-salt~1pxGHH~26483| (0) #f (srfi 128 reference)) ((%salt%) variable |\x0;%salt%~1pxGHH~26482| (0) #f (srfi 128 reference)) ((hash-bound) macro |\x0;hash-bound~1pxGHH~26471| (0) #f (srfi 128 reference)) ((comparator-if<=>) macro |\x0;comparator-if<=>~1pxGHH~26420| (0) #f (srfi 128 reference)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((case-lambda) macro |\x0;case-lambda~1pxGHH~3944| (0) #f (rnrs control)) ((string-upcase) variable string-upcase (0) #f (larceny PRIMITIVES)) ((string-foldcase) variable string-foldcase (0) #f (larceny PRIMITIVES)) ((string-downcase) variable string-downcase (0) #f (larceny PRIMITIVES)) ((string-ci>?) variable string-ci>? (0) #f (larceny PRIMITIVES)) ((string-ci>=?) variable string-ci>=? (0) #f (larceny PRIMITIVES)) ((string-ci=?) variable string-ci=? (0) #f (larceny PRIMITIVES)) ((string-ci<?) variable string-ci<? (0) #f (larceny PRIMITIVES)) ((string-ci<=?) variable string-ci<=? (0) #f (larceny PRIMITIVES)) ((digit-value) variable |\x0;digit-value~1pxGHH~8989| (0) #f (scheme char)) ((char-whitespace?) variable char-whitespace? (0) #f (larceny PRIMITIVES)) ((char-upper-case?) variable char-upper-case? (0) #f (larceny PRIMITIVES)) ((char-upcase) variable char-upcase (0) #f (larceny PRIMITIVES)) ((char-numeric?) variable char-numeric? (0) #f (larceny PRIMITIVES)) ((char-lower-case?) variable char-lower-case? (0) #f (larceny PRIMITIVES)) ((char-foldcase) variable char-foldcase (0) #f (larceny PRIMITIVES)) ((char-downcase) variable char-downcase (0) #f (larceny PRIMITIVES)) ((char-ci>?) variable char-ci>? (0) #f (larceny PRIMITIVES)) ((char-ci>=?) variable char-ci>=? (0) #f (larceny PRIMITIVES)) ((char-ci=?) variable char-ci=? (0) #f (larceny PRIMITIVES)) ((char-ci<?) variable char-ci<? (0) #f (larceny PRIMITIVES)) ((char-ci<=?) variable char-ci<=? (0) #f (larceny PRIMITIVES)) ((char-alphabetic?) variable char-alphabetic? (0) #f (larceny PRIMITIVES)) ((tan) variable tan (0) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0) #f (larceny PRIMITIVES)) ((sin) variable sin (0) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0) #f (larceny PRIMITIVES)) ((log) variable log (0) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0) #f (larceny PRIMITIVES)) ((exp) variable exp (0) #f (larceny PRIMITIVES)) ((cos) variable cos (0) #f (larceny PRIMITIVES)) ((atan) variable atan (0) #f (larceny PRIMITIVES)) ((asin) variable asin (0) #f (larceny PRIMITIVES)) ((acos) variable acos (0) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0) #f (larceny PRIMITIVES)) ((angle) variable angle (0) #f (larceny PRIMITIVES)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~26496|) variable |\x0;x~1pxGHH~26498| (0) #f (srfi 128 reference)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~26496|) . #f) ((new-salt) . #f) ((hash-func) . #f) ((obj) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~26423|))) (4110 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) comparator-if<=> (|\x0;env~1pxGHH~26458|) (srfi 128 reference) #ex:syntax-rename make-default-comparator cond (|\x0;env~1pxGHH~26436|) =? <? else #ex:invalid-form)
 |\x0;comparator-if<=>~1pxGHH~26420| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~26474|)) #ex:invalid-form)
 |\x0;hash-bound~1pxGHH~26471| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~26486|)) %salt% (|\x0;env~1pxGHH~26492|) (srfi 128 reference) #ex:syntax-rename #ex:invalid-form)
 |\x0;hash-salt~1pxGHH~26483| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~26498|)) parameterize (|\x0;env~1pxGHH~26507|) (srfi 128 reference) #ex:syntax-rename %salt% #ex:invalid-form)
 |\x0;with-hash-salt~1pxGHH~26495| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;make-default-comparator~1pxGHH~26586| #|\x0;default-equality~1pxGHH~26585| #|\x0;default-ordering~1pxGHH~26584| #|\x0;default-hash~1pxGHH~26583| #|\x0;dispatch-ordering~1pxGHH~26582| #|\x0;dispatch-equality~1pxGHH~26581| #|\x0;registered-comparator~1pxGHH~26580| #|\x0;registered-index~1pxGHH~26579| #|\x0;object-type~1pxGHH~26578| #|\x0;comparator-register-default!~1pxGHH~26577| #|\x0;*registered-comparators*~1pxGHH~26576| #|\x0;*next-comparator-index*~1pxGHH~26575| #|\x0;first-comparator-index~1pxGHH~26574| #|\x0;unknown-object-comparator~1pxGHH~26573| #|\x0;string-hash~1pxGHH~26572| #|\x0;make-vector-hash~1pxGHH~26571| #|\x0;make-vector<?~1pxGHH~26570| #|\x0;make-vector=?~1pxGHH~26569| #|\x0;make-vector-type-test~1pxGHH~26568| #|\x0;make-vector-comparator~1pxGHH~26567| #|\x0;make-list-hash~1pxGHH~26566| #|\x0;make-list<?~1pxGHH~26565| #|\x0;make-list=?~1pxGHH~26564| #|\x0;make-list-type-test~1pxGHH~26563| #|\x0;make-list-comparator~1pxGHH~26562| #|\x0;norp?~1pxGHH~26561| #|\x0;make-pair-hash~1pxGHH~26560| #|\x0;make-pair<?~1pxGHH~26559| #|\x0;make-pair=?~1pxGHH~26558| #|\x0;make-pair-type-test~1pxGHH~26557| #|\x0;make-pair-comparator~1pxGHH~26556| #|\x0;make-hasher~1pxGHH~26555| #|\x0;make-equal-comparator~1pxGHH~26554| #|\x0;make-eqv-comparator~1pxGHH~26553| #|\x0;make-eq-comparator~1pxGHH~26552| #|\x0;symbol-hash~1pxGHH~26551| #|\x0;symbol<?~1pxGHH~26550| #|\x0;string-ci-hash~1pxGHH~26549| #|\x0;complex<?~1pxGHH~26548| #|\x0;number-hash~1pxGHH~26547| #|\x0;char-ci-hash~1pxGHH~26546| #|\x0;char-hash~1pxGHH~26545| #|\x0;boolean-hash~1pxGHH~26544| #|\x0;boolean<?~1pxGHH~26543| #|\x0;>=?~1pxGHH~26542| #|\x0;<=?~1pxGHH~26541| #|\x0;>?~1pxGHH~26540| #|\x0;<?~1pxGHH~26539| #|\x0;=?~1pxGHH~26538| #|\x0;binary>=?~1pxGHH~26537| #|\x0;binary<=?~1pxGHH~26536| #|\x0;binary>?~1pxGHH~26535| #|\x0;binary<?~1pxGHH~26534| #|\x0;binary=?~1pxGHH~26533| #|\x0;comparator-hash~1pxGHH~26532| #|\x0;comparator-check-type~1pxGHH~26531| #|\x0;comparator-test-type~1pxGHH~26530| #|\x0;make-comparator~1pxGHH~26529| #|\x0;comparator-hashable?~1pxGHH~26528| #|\x0;comparator-ordered?~1pxGHH~26527| #|\x0;comparator-hash-function~1pxGHH~26526| #|\x0;comparator-ordering-predicate~1pxGHH~26525| #|\x0;comparator-equality-predicate~1pxGHH~26524| #|\x0;comparator-type-test-predicate~1pxGHH~26523| #|\x0;comparator?~1pxGHH~26522| #|\x0;make-raw-comparator~1pxGHH~26521| #|\x0;comparator~1pxGHH~26520| #|\x0;%salt%~1pxGHH~26482| #make-parameter #|\x0;%salt%~1pxGHH~26482| comparator #((immutable type-test) (immutable equality) (immutable ordering) (immutable hash) (immutable ordering?) (immutable hash?)) #make-rtd #|\x0;comparator~1pxGHH~26520| #|\x0;comparator~1pxGHH~26520| #(type-test equality ordering hash ordering? hash?) #rtd-constructor #|\x0;make-raw-comparator~1pxGHH~26521| #|\x0;comparator~1pxGHH~26520| #rtd-predicate #|\x0;comparator?~1pxGHH~26522| #|\x0;comparator~1pxGHH~26520| type-test #rtd-accessor #|\x0;comparator-type-test-predicate~1pxGHH~26523| #|\x0;comparator~1pxGHH~26520| equality #rtd-accessor #|\x0;comparator-equality-predicate~1pxGHH~26524| #|\x0;comparator~1pxGHH~26520| ordering #rtd-accessor #|\x0;comparator-ordering-predicate~1pxGHH~26525| #|\x0;comparator~1pxGHH~26520| hash #rtd-accessor #|\x0;comparator-hash-function~1pxGHH~26526| #|\x0;comparator~1pxGHH~26520| ordering? #rtd-accessor #|\x0;comparator-ordered?~1pxGHH~26527| #|\x0;comparator~1pxGHH~26520| hash? #rtd-accessor #|\x0;comparator-hashable?~1pxGHH~26528| #f #( #(make-comparator #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;type-test~1pxGHH~27362| |\x0;equality~1pxGHH~27363| |\x0;ordering~1pxGHH~27364| |\x0;hash~1pxGHH~27365|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~27368|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~27371| |\x0;y~1pxGHH~27372|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~27375| |\x0;y~1pxGHH~27376|)) "ordering not supported" #error)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~27379| |\x0;y~1pxGHH~27380|)) "hashing not supported" #error)
 #|\x0;make-raw-comparator~1pxGHH~26521|)
 #|\x0;make-comparator~1pxGHH~26529| #f #( #(comparator-test-type #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27359| |\x0;obj~1pxGHH~27360|)) #|\x0;comparator-type-test-predicate~1pxGHH~26523|)
 #|\x0;comparator-test-type~1pxGHH~26530| #f #( #(comparator-check-type #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27355| |\x0;obj~1pxGHH~27356|)) #|\x0;comparator-test-type~1pxGHH~26530| "comparator type check failed" #error)
 #|\x0;comparator-check-type~1pxGHH~26531| #f #( #(comparator-hash #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27352| |\x0;obj~1pxGHH~27353|)) #|\x0;comparator-hash-function~1pxGHH~26526|)
 #|\x0;comparator-hash~1pxGHH~26532| #f #( #(binary=? #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27348| |\x0;a~1pxGHH~27349| |\x0;b~1pxGHH~27350|)) #|\x0;comparator-equality-predicate~1pxGHH~26524|)
 #|\x0;binary=?~1pxGHH~26533| #f #( #(binary<? #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27344| |\x0;a~1pxGHH~27345| |\x0;b~1pxGHH~27346|)) #|\x0;comparator-ordering-predicate~1pxGHH~26525|)
 #|\x0;binary<?~1pxGHH~26534| #f #( #(binary>? #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27340| |\x0;a~1pxGHH~27341| |\x0;b~1pxGHH~27342|)) #|\x0;binary<?~1pxGHH~26534|)
 #|\x0;binary>?~1pxGHH~26535| #f #( #(binary<=? #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27336| |\x0;a~1pxGHH~27337| |\x0;b~1pxGHH~27338|)) #|\x0;binary>?~1pxGHH~26535|)
 #|\x0;binary<=?~1pxGHH~26536| #f #( #(binary>=? #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27332| |\x0;a~1pxGHH~27333| |\x0;b~1pxGHH~27334|)) #|\x0;binary<?~1pxGHH~26534|)
 #|\x0;binary>=?~1pxGHH~26537| #f #( ((0 . #(=? #f #      @ src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27308| |\x0;a~1pxGHH~27309| |\x0;b~1pxGHH~27310| . |\x0;objs~1pxGHH~27311|))) (141 . #(|\x0;loop~1pxGHH~27317| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27325| |\x0;b~1pxGHH~27326| |\x0;objs~1pxGHH~27327|)))) #|\x0;binary=?~1pxGHH~26533|)
 #|\x0;=?~1pxGHH~26538| #f #( ((0 . #(<? #f #      @ src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27284| |\x0;a~1pxGHH~27285| |\x0;b~1pxGHH~27286| . |\x0;objs~1pxGHH~27287|))) (141 . #(|\x0;loop~1pxGHH~27293| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27301| |\x0;b~1pxGHH~27302| |\x0;objs~1pxGHH~27303|)))) #|\x0;binary<?~1pxGHH~26534|)
 #f #( ((0 . #(>? #f #      @ src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27260| |\x0;a~1pxGHH~27261| |\x0;b~1pxGHH~27262| . |\x0;objs~1pxGHH~27263|))) (141 . #(|\x0;loop~1pxGHH~27269| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27277| |\x0;b~1pxGHH~27278| |\x0;objs~1pxGHH~27279|)))) #|\x0;binary>?~1pxGHH~26535|)
 #f #( ((0 . #(<=? #f #      @ src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27236| |\x0;a~1pxGHH~27237| |\x0;b~1pxGHH~27238| . |\x0;objs~1pxGHH~27239|))) (141 . #(|\x0;loop~1pxGHH~27245| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27253| |\x0;b~1pxGHH~27254| |\x0;objs~1pxGHH~27255|)))) #|\x0;binary<=?~1pxGHH~26536|)
 #f #( ((0 . #(>=? #f #      @ src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~27212| |\x0;a~1pxGHH~27213| |\x0;b~1pxGHH~27214| . |\x0;objs~1pxGHH~27215|))) (141 . #(|\x0;loop~1pxGHH~27221| #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27229| |\x0;b~1pxGHH~27230| |\x0;objs~1pxGHH~27231|)))) #|\x0;binary>=?~1pxGHH~26537|)
 #f #( #(boolean<? #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27207| |\x0;b~1pxGHH~27208|)))
 #f #( #(boolean-hash #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27204|)) #|\x0;%salt%~1pxGHH~26482|)
 #f #( #(char-hash #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27201|)) #|\x0;%salt%~1pxGHH~26482| #modulo)
 #f #( #(char-ci-hash #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27198|)) #|\x0;%salt%~1pxGHH~26482| #char-foldcase #modulo)
 #f #( #(number-hash #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27184|)) #|\x0;%salt%~1pxGHH~26482| #infinite? #         #|\x0;number-hash~1pxGHH~26547|)
 #f #( #(complex<? #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27180| |\x0;b~1pxGHH~27181|)))
 #f #( #(string-ci-hash #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27178|)) #string-foldcase #|\x0;string-hash~1pxGHH~26572|)
 #f #( #(symbol<? #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27175| |\x0;b~1pxGHH~27176|)) #symbol->string #string<?)
 #f #( #(symbol-hash #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27173|)) #symbol->string #|\x0;string-hash~1pxGHH~26572|)
 #f #( #(make-eq-comparator #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #eq? #|\x0;default-hash~1pxGHH~26583| #|\x0;make-comparator~1pxGHH~26529|)
 #f #( #(make-eqv-comparator #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #eqv? #|\x0;default-hash~1pxGHH~26583| #|\x0;make-comparator~1pxGHH~26529|)
 #f #( #(make-equal-comparator #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #equal? #|\x0;default-hash~1pxGHH~26583| #|\x0;make-comparator~1pxGHH~26529|)
 #f #( #(make-hasher #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;%salt%~1pxGHH~26482| #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~27153| |\x0;x2~1pxGHH~27154| |\x0;x3~1pxGHH~27155| |\x0;n~1pxGHH~27156|)) #modulo "unexpected number of arguments" #assertion-violation)
 #make-case-lambda)
 #f #( #(make-pair-comparator #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;car-comparator~1pxGHH~27142| |\x0;cdr-comparator~1pxGHH~27143|)) #|\x0;make-pair-type-test~1pxGHH~26557| #|\x0;make-pair=?~1pxGHH~26558| #|\x0;make-pair<?~1pxGHH~26559| #|\x0;make-pair-hash~1pxGHH~26560| #|\x0;make-comparator~1pxGHH~26529|)
 #f #( #(make-pair-type-test #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;car-comparator~1pxGHH~27134| |\x0;cdr-comparator~1pxGHH~27135|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27137|)) #|\x0;comparator-test-type~1pxGHH~26530|)
)
 #f #( #(make-pair=? #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;car-comparator~1pxGHH~27126| |\x0;cdr-comparator~1pxGHH~27127|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27129| |\x0;b~1pxGHH~27130|)) #|\x0;comparator-equality-predicate~1pxGHH~26524|)
)
 #f #( #(make-pair<? #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;car-comparator~1pxGHH~27119| |\x0;cdr-comparator~1pxGHH~27120|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27122| |\x0;b~1pxGHH~27123|)) #|\x0;=?~1pxGHH~26538| #|\x0;<?~1pxGHH~26539|)
)
 #f #( #(make-pair-hash #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;car-comparator~1pxGHH~27111| |\x0;cdr-comparator~1pxGHH~27112|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27114|)) #|\x0;make-hasher~1pxGHH~26555| #|\x0;comparator-hash~1pxGHH~26532|)
)
 #f #( #(norp? #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27107|)))
 #f #( #(make-list-comparator #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~27101| |\x0;type-test~1pxGHH~27102| |\x0;empty?~1pxGHH~27103| |\x0;head~1pxGHH~27104| |\x0;tail~1pxGHH~27105|)) #|\x0;make-list-type-test~1pxGHH~26563| #|\x0;make-list=?~1pxGHH~26564| #|\x0;make-list<?~1pxGHH~26565| #|\x0;make-list-hash~1pxGHH~26566| #|\x0;make-comparator~1pxGHH~26529|)
 #f #( #(make-list-type-test #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~27070| |\x0;type-test~1pxGHH~27071| |\x0;empty?~1pxGHH~27072| |\x0;head~1pxGHH~27073| |\x0;tail~1pxGHH~27074|)) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27076|))) (926 . #(|\x0;loop~1pxGHH~27087| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~27093|)))) #|\x0;comparator-type-test-predicate~1pxGHH~26523|)
)
 #f #( #(make-list=? #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~27029| |\x0;type-test~1pxGHH~27030| |\x0;empty?~1pxGHH~27031| |\x0;head~1pxGHH~27032| |\x0;tail~1pxGHH~27033|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27035| |\x0;b~1pxGHH~27036|))) (580 . #(|\x0;loop~1pxGHH~27045| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27052| |\x0;b~1pxGHH~27053|)))) #|\x0;comparator-equality-predicate~1pxGHH~26524|)
)
 #f #( #(make-list<? #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~26985| |\x0;type-test~1pxGHH~26986| |\x0;empty?~1pxGHH~26987| |\x0;head~1pxGHH~26988| |\x0;tail~1pxGHH~26989|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~26991| |\x0;b~1pxGHH~26992|))) (909 . #(|\x0;loop~1pxGHH~27002| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~27009| |\x0;b~1pxGHH~27010|)))) #|\x0;comparator-ordering-predicate~1pxGHH~26525| #|\x0;comparator-equality-predicate~1pxGHH~26524|)
)
 #f #( #(make-list-hash #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~26957| |\x0;type-test~1pxGHH~26958| |\x0;empty?~1pxGHH~26959| |\x0;head~1pxGHH~26960| |\x0;tail~1pxGHH~26961|)) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26963|))) (791 . #(|\x0;loop~1pxGHH~26973| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26979|)))) #|\x0;make-hasher~1pxGHH~26555| #|\x0;comparator-hash-function~1pxGHH~26526|)
)
 #f #( #(make-vector-comparator #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~26952| |\x0;type-test~1pxGHH~26953| |\x0;length~1pxGHH~26954| |\x0;ref~1pxGHH~26955|)) #|\x0;make-vector-type-test~1pxGHH~26568| #|\x0;make-vector=?~1pxGHH~26569| #|\x0;make-vector<?~1pxGHH~26570| #|\x0;make-vector-hash~1pxGHH~26571| #|\x0;make-comparator~1pxGHH~26529|)
 #f #( #(make-vector-type-test #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~26921| |\x0;type-test~1pxGHH~26922| |\x0;length~1pxGHH~26923| |\x0;ref~1pxGHH~26924|)) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26926|))) (1247 . #(|\x0;loop~1pxGHH~26938| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~26944|)))) #|\x0;comparator-type-test-predicate~1pxGHH~26523|)
)
 #f #( #(make-vector=? #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~26889| |\x0;type-test~1pxGHH~26890| |\x0;length~1pxGHH~26891| |\x0;ref~1pxGHH~26892|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~26894| |\x0;b~1pxGHH~26895|))) (1631 . #(|\x0;loop~1pxGHH~26907| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~26913|)))) #|\x0;comparator-equality-predicate~1pxGHH~26524|)
)
 #f #( #(make-vector<? #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~26850| |\x0;type-test~1pxGHH~26851| |\x0;length~1pxGHH~26852| |\x0;ref~1pxGHH~26853|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~26855| |\x0;b~1pxGHH~26856|))) (2683 . #(|\x0;loop~1pxGHH~26873| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~26879|)))) #|\x0;comparator-ordering-predicate~1pxGHH~26525| #|\x0;comparator-equality-predicate~1pxGHH~26524|)
)
 #f #( #(make-vector-hash #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;element-comparator~1pxGHH~26822| |\x0;type-test~1pxGHH~26823| |\x0;length~1pxGHH~26824| |\x0;ref~1pxGHH~26825|)) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26827|))) (1089 . #(|\x0;loop~1pxGHH~26838| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~26844|)))) #|\x0;make-hasher~1pxGHH~26555| #|\x0;comparator-hash-function~1pxGHH~26526|)
)
 #f #( ((0 . #(string-hash #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26800|))) (753 . #(|\x0;loop~1pxGHH~26810| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~26816|)))) #|\x0;make-hasher~1pxGHH~26555|)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26790|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~26792| |\x0;b~1pxGHH~26793|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~26795| |\x0;b~1pxGHH~26796|)))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26798|)))
 #|\x0;make-comparator~1pxGHH~26529| #f #( #(comparator-register-default! #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;comparator~1pxGHH~26786|)) #|\x0;*registered-comparators*~1pxGHH~26576| #|\x0;*next-comparator-index*~1pxGHH~26575|)
 #f #( #(object-type #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26764|)) #|\x0;registered-index~1pxGHH~26579|)
 #f #( ((0 . #(registered-index #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26742|))) (293 . #(|\x0;loop~1pxGHH~26748| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;i~1pxGHH~26755| |\x0;registry~1pxGHH~26756|)))) #|\x0;*registered-comparators*~1pxGHH~26576| #|\x0;first-comparator-index~1pxGHH~26574| #|\x0;comparator-test-type~1pxGHH~26530|)
 #f #( #(registered-comparator #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;i~1pxGHH~26740|)) #|\x0;first-comparator-index~1pxGHH~26574| #|\x0;*registered-comparators*~1pxGHH~26576| #list-ref)
 #f #( #(dispatch-equality #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;type~1pxGHH~26698| |\x0;a~1pxGHH~26699| |\x0;b~1pxGHH~26700|)) #|\x0;make-default-comparator~1pxGHH~26586| #|\x0;make-pair=?~1pxGHH~26558| #boolean=? #string=? #symbol=? #vector? #vector-length #vector-ref #|\x0;make-vector=?~1pxGHH~26569| #exact-integer? #= #< #|\x0;default-hash~1pxGHH~26583| #|\x0;make-comparator~1pxGHH~26529| #bytevector? #bytevector-length #bytevector-u8-ref #|\x0;registered-comparator~1pxGHH~26580| #|\x0;binary=?~1pxGHH~26533|)
 #f #( #(dispatch-ordering #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;type~1pxGHH~26656| |\x0;a~1pxGHH~26657| |\x0;b~1pxGHH~26658|)) #|\x0;make-default-comparator~1pxGHH~26586| #|\x0;make-pair<?~1pxGHH~26559| #|\x0;boolean<?~1pxGHH~26543| #string<? #|\x0;symbol<?~1pxGHH~26550| #|\x0;complex<?~1pxGHH~26548| #vector? #vector-length #vector-ref #|\x0;make-vector<?~1pxGHH~26570| #exact-integer? #= #< #|\x0;default-hash~1pxGHH~26583| #|\x0;make-comparator~1pxGHH~26529| #bytevector? #bytevector-length #bytevector-u8-ref #|\x0;registered-comparator~1pxGHH~26580| #|\x0;binary<?~1pxGHH~26534|)
 #f #( #(default-hash #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26612|)) #|\x0;object-type~1pxGHH~26578| #|\x0;make-default-comparator~1pxGHH~26586| #|\x0;make-pair-hash~1pxGHH~26560| #|\x0;boolean-hash~1pxGHH~26544| #|\x0;char-hash~1pxGHH~26545| #|\x0;string-hash~1pxGHH~26572| #|\x0;symbol-hash~1pxGHH~26551| #|\x0;number-hash~1pxGHH~26547| #vector? #vector-length #vector-ref #|\x0;make-vector-hash~1pxGHH~26571| #bytevector? #bytevector-length #bytevector-u8-ref #|\x0;registered-comparator~1pxGHH~26580| #|\x0;comparator-hash~1pxGHH~26532|)
 #f #( #(default-ordering #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~26599| |\x0;b~1pxGHH~26600|)) #|\x0;object-type~1pxGHH~26578| #|\x0;dispatch-ordering~1pxGHH~26582|)
 #f #( #(default-equality #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~26591| |\x0;b~1pxGHH~26592|)) #|\x0;object-type~1pxGHH~26578| #|\x0;dispatch-equality~1pxGHH~26581|)
 #f #( #(make-default-comparator #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~26589|)))
 #|\x0;default-equality~1pxGHH~26585| #|\x0;default-ordering~1pxGHH~26584| #|\x0;default-hash~1pxGHH~26583| #|\x0;make-comparator~1pxGHH~26529|)
 #values)
 (srfi 128 reference) ((comparator? variable |\x0;comparator?~1pxGHH~26522| (0) #f (srfi 128 reference)) (comparator-ordered? variable |\x0;comparator-ordered?~1pxGHH~26527| (0) #f (srfi 128 reference)) (comparator-hashable? variable |\x0;comparator-hashable?~1pxGHH~26528| (0) #f (srfi 128 reference)) (make-comparator variable |\x0;make-comparator~1pxGHH~26529| (0) #f (srfi 128 reference)) (make-pair-comparator variable |\x0;make-pair-comparator~1pxGHH~26556| (0) #f (srfi 128 reference)) (make-list-comparator variable |\x0;make-list-comparator~1pxGHH~26562| (0) #f (srfi 128 reference)) (make-vector-comparator variable |\x0;make-vector-comparator~1pxGHH~26567| (0) #f (srfi 128 reference)) (make-eq-comparator variable |\x0;make-eq-comparator~1pxGHH~26552| (0) #f (srfi 128 reference)) (make-eqv-comparator variable |\x0;make-eqv-comparator~1pxGHH~26553| (0) #f (srfi 128 reference)) (make-equal-comparator variable |\x0;make-equal-comparator~1pxGHH~26554| (0) #f (srfi 128 reference)) (boolean-hash variable |\x0;boolean-hash~1pxGHH~26544| (0) #f (srfi 128 reference)) (char-hash variable |\x0;char-hash~1pxGHH~26545| (0) #f (srfi 128 reference)) (char-ci-hash variable |\x0;char-ci-hash~1pxGHH~26546| (0) #f (srfi 128 reference)) (string-hash variable |\x0;string-hash~1pxGHH~26572| (0) #f (srfi 128 reference)) (string-ci-hash variable |\x0;string-ci-hash~1pxGHH~26549| (0) #f (srfi 128 reference)) (symbol-hash variable |\x0;symbol-hash~1pxGHH~26551| (0) #f (srfi 128 reference)) (number-hash variable |\x0;number-hash~1pxGHH~26547| (0) #f (srfi 128 reference)) (make-default-comparator variable |\x0;make-default-comparator~1pxGHH~26586| (0) #f (srfi 128 reference)) (default-hash variable |\x0;default-hash~1pxGHH~26583| (0) #f (srfi 128 reference)) (comparator-register-default! variable |\x0;comparator-register-default!~1pxGHH~26577| (0) #f (srfi 128 reference)) (comparator-type-test-predicate variable |\x0;comparator-type-test-predicate~1pxGHH~26523| (0) #f (srfi 128 reference)) (comparator-equality-predicate variable |\x0;comparator-equality-predicate~1pxGHH~26524| (0) #f (srfi 128 reference)) (comparator-ordering-predicate variable |\x0;comparator-ordering-predicate~1pxGHH~26525| (0) #f (srfi 128 reference)) (comparator-hash-function variable |\x0;comparator-hash-function~1pxGHH~26526| (0) #f (srfi 128 reference)) (comparator-test-type variable |\x0;comparator-test-type~1pxGHH~26530| (0) #f (srfi 128 reference)) (comparator-check-type variable |\x0;comparator-check-type~1pxGHH~26531| (0) #f (srfi 128 reference)) (comparator-hash variable |\x0;comparator-hash~1pxGHH~26532| (0) #f (srfi 128 reference)) (hash-bound macro |\x0;hash-bound~1pxGHH~26471| (0) #f (srfi 128 reference)) (hash-salt macro |\x0;hash-salt~1pxGHH~26483| (0) #f (srfi 128 reference)) (=? variable |\x0;=?~1pxGHH~26538| (0) #f (srfi 128 reference)) (<? variable |\x0;<?~1pxGHH~26539| (0) #f (srfi 128 reference)) (>? variable |\x0;>?~1pxGHH~26540| (0) #f (srfi 128 reference)) (<=? variable |\x0;<=?~1pxGHH~26541| (0) #f (srfi 128 reference)) (>=? variable |\x0;>=?~1pxGHH~26542| (0) #f (srfi 128 reference)) (comparator-if<=> macro |\x0;comparator-if<=>~1pxGHH~26420| (0) #f (srfi 128 reference))) (((scheme complex) 0) ((scheme inexact) 0) ((scheme char) 0) ((scheme case-lambda) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~4505| |\x0;build~1pxGHH~4499| |\x0;build~1pxGHH~9016| |\x0;build~1pxGHH~7216| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~27392| #ex:make-library #ex:register-library! #values)
 #f)
))
