#!fasl
(define .petit-bootstrap-id-651999e901cd6d61d52613a71f8fe746 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/135/texts.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-651999e901cd6d61d52613a71f8fe746 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #values #apply)
 (srfi 135 texts) ((text? variable text? (0) #f (larceny PRIMITIVES)) (textual? variable textual? (0) #f (larceny PRIMITIVES)) (textual-null? variable textual-null? (0) #f (larceny PRIMITIVES)) (textual-every variable textual-every (0) #f (larceny PRIMITIVES)) (textual-any variable textual-any (0) #f (larceny PRIMITIVES)) (make-text variable make-text (0) #f (larceny PRIMITIVES)) (text variable text (0) #f (larceny PRIMITIVES)) (text-tabulate variable text-tabulate (0) #f (larceny PRIMITIVES)) (text-unfold variable text-unfold (0) #f (larceny PRIMITIVES)) (text-unfold-right variable text-unfold-right (0) #f (larceny PRIMITIVES)) (textual->text variable textual->text (0) #f (larceny PRIMITIVES)) (textual->string variable textual->string (0) #f (larceny PRIMITIVES)) (textual->vector variable textual->vector (0) #f (larceny PRIMITIVES)) (textual->list variable textual->list (0) #f (larceny PRIMITIVES)) (string->text variable string->text (0) #f (larceny PRIMITIVES)) (vector->text variable vector->text (0) #f (larceny PRIMITIVES)) (list->text variable list->text (0) #f (larceny PRIMITIVES)) (reverse-list->text variable reverse-list->text (0) #f (larceny PRIMITIVES)) (textual->utf8 variable textual->utf8 (0) #f (larceny PRIMITIVES)) (textual->utf16be variable textual->utf16be (0) #f (larceny PRIMITIVES)) (textual->utf16 variable textual->utf16 (0) #f (larceny PRIMITIVES)) (textual->utf16le variable textual->utf16le (0) #f (larceny PRIMITIVES)) (utf8->text variable utf8->text (0) #f (larceny PRIMITIVES)) (utf16be->text variable utf16be->text (0) #f (larceny PRIMITIVES)) (utf16->text variable utf16->text (0) #f (larceny PRIMITIVES)) (utf16le->text variable utf16le->text (0) #f (larceny PRIMITIVES)) (text-length variable text-length (0) #f (larceny PRIMITIVES)) (textual-length variable textual-length (0) #f (larceny PRIMITIVES)) (text-ref variable text-ref (0) #f (larceny PRIMITIVES)) (textual-ref variable textual-ref (0) #f (larceny PRIMITIVES)) (subtext variable subtext (0) #f (larceny PRIMITIVES)) (subtextual variable subtextual (0) #f (larceny PRIMITIVES)) (textual-copy variable textual-copy (0) #f (larceny PRIMITIVES)) (textual-take variable textual-take (0) #f (larceny PRIMITIVES)) (textual-take-right variable textual-take-right (0) #f (larceny PRIMITIVES)) (textual-drop variable textual-drop (0) #f (larceny PRIMITIVES)) (textual-drop-right variable textual-drop-right (0) #f (larceny PRIMITIVES)) (textual-pad variable textual-pad (0) #f (larceny PRIMITIVES)) (textual-pad-right variable textual-pad-right (0) #f (larceny PRIMITIVES)) (textual-trim variable textual-trim (0) #f (larceny PRIMITIVES)) (textual-trim-right variable textual-trim-right (0) #f (larceny PRIMITIVES)) (textual-trim-both variable textual-trim-both (0) #f (larceny PRIMITIVES)) (textual-replace variable textual-replace (0) #f (larceny PRIMITIVES)) (textual=? variable textual=? (0) #f (larceny PRIMITIVES)) (textual-ci=? variable textual-ci=? (0) #f (larceny PRIMITIVES)) (textual<? variable textual<? (0) #f (larceny PRIMITIVES)) (textual-ci<? variable textual-ci<? (0) #f (larceny PRIMITIVES)) (textual>? variable textual>? (0) #f (larceny PRIMITIVES)) (textual-ci>? variable textual-ci>? (0) #f (larceny PRIMITIVES)) (textual<=? variable textual<=? (0) #f (larceny PRIMITIVES)) (textual-ci<=? variable textual-ci<=? (0) #f (larceny PRIMITIVES)) (textual>=? variable textual>=? (0) #f (larceny PRIMITIVES)) (textual-ci>=? variable textual-ci>=? (0) #f (larceny PRIMITIVES)) (textual-prefix-length variable textual-prefix-length (0) #f (larceny PRIMITIVES)) (textual-suffix-length variable textual-suffix-length (0) #f (larceny PRIMITIVES)) (textual-prefix? variable textual-prefix? (0) #f (larceny PRIMITIVES)) (textual-suffix? variable textual-suffix? (0) #f (larceny PRIMITIVES)) (textual-index variable textual-index (0) #f (larceny PRIMITIVES)) (textual-index-right variable textual-index-right (0) #f (larceny PRIMITIVES)) (textual-skip variable textual-skip (0) #f (larceny PRIMITIVES)) (textual-skip-right variable textual-skip-right (0) #f (larceny PRIMITIVES)) (textual-contains variable textual-contains (0) #f (larceny PRIMITIVES)) (textual-contains-right variable textual-contains-right (0) #f (larceny PRIMITIVES)) (textual-upcase variable textual-upcase (0) #f (larceny PRIMITIVES)) (textual-downcase variable textual-downcase (0) #f (larceny PRIMITIVES)) (textual-foldcase variable textual-foldcase (0) #f (larceny PRIMITIVES)) (textual-titlecase variable textual-titlecase (0) #f (larceny PRIMITIVES)) (textual-append variable textual-append (0) #f (larceny PRIMITIVES)) (textual-concatenate variable textual-concatenate (0) #f (larceny PRIMITIVES)) (textual-concatenate-reverse variable textual-concatenate-reverse (0) #f (larceny PRIMITIVES)) (textual-join variable textual-join (0) #f (larceny PRIMITIVES)) (textual-fold variable textual-fold (0) #f (larceny PRIMITIVES)) (textual-fold-right variable textual-fold-right (0) #f (larceny PRIMITIVES)) (textual-map variable textual-map (0) #f (larceny PRIMITIVES)) (textual-for-each variable textual-for-each (0) #f (larceny PRIMITIVES)) (textual-map-index variable textual-map-index (0) #f (larceny PRIMITIVES)) (textual-for-each-index variable textual-for-each-index (0) #f (larceny PRIMITIVES)) (textual-count variable textual-count (0) #f (larceny PRIMITIVES)) (textual-filter variable textual-filter (0) #f (larceny PRIMITIVES)) (textual-remove variable textual-remove (0) #f (larceny PRIMITIVES)) (textual-replicate variable textual-replicate (0) #f (larceny PRIMITIVES)) (textual-split variable textual-split (0) #f (larceny PRIMITIVES))) (((srfi 135) 0)) (|\x0;build~1pxGHH~28769|) |\x0;build~1pxGHH~28774| #ex:make-library #ex:register-library! #values)
 #f)
))
