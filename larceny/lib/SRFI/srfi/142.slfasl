#!fasl
(define .petit-bootstrap-id-e16327dd41e1aa931f42a8b320cd28e3 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/142.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-e16327dd41e1aa931f42a8b320cd28e3 0
'#(#f #( #f #ex:unspecified #|\x0;bitwise-if~1pxGHH~50222| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;bitwise-if~1pxGHH~50222| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (t0f0010)) #|\x0;bitwise-if~1pxGHH~50222| #values)
 #values #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mask~1pxGHH~50224| |\x0;i~1pxGHH~50225| |\x0;j~1pxGHH~50226|)) srfi-142:bitwise-if #issue-warning-deprecated #bitwise-if)
 #apply)
 (srfi 142) ((bitwise-not variable bitwise-not (0) #f (larceny PRIMITIVES)) (bitwise-and variable bitwise-and (0) #f (larceny PRIMITIVES)) (bitwise-ior variable bitwise-ior (0) #f (larceny PRIMITIVES)) (bitwise-xor variable bitwise-xor (0) #f (larceny PRIMITIVES)) (bitwise-eqv variable |\x0;bitwise-eqv~1pxGHH~50013| (0) #f (srfi 151)) (bitwise-nand variable |\x0;bitwise-nand~1pxGHH~50014| (0) #f (srfi 151)) (bitwise-nor variable |\x0;bitwise-nor~1pxGHH~50015| (0) #f (srfi 151)) (bitwise-andc1 variable |\x0;bitwise-andc1~1pxGHH~50016| (0) #f (srfi 151)) (bitwise-andc2 variable |\x0;bitwise-andc2~1pxGHH~50017| (0) #f (srfi 151)) (bitwise-orc1 variable |\x0;bitwise-orc1~1pxGHH~50018| (0) #f (srfi 151)) (bitwise-orc2 variable |\x0;bitwise-orc2~1pxGHH~50019| (0) #f (srfi 151)) (arithmetic-shift variable bitwise-arithmetic-shift (0) #f (larceny PRIMITIVES)) (bit-count variable bitwise-bit-count (0) #f (larceny PRIMITIVES)) (integer-length variable bitwise-length (0) #f (larceny PRIMITIVES)) (bitwise-if variable |\x0;bitwise-if~1pxGHH~50222| (0) #f (srfi 142)) (bit-set? variable |\x0;bit-set?~1pxGHH~50020| (0) #f (srfi 151)) (copy-bit variable |\x0;copy-bit~1pxGHH~50021| (0) #f (srfi 151)) (bit-swap variable |\x0;bit-swap~1pxGHH~50022| (0) #f (srfi 151)) (any-bit-set? variable |\x0;any-bit-set?~1pxGHH~50023| (0) #f (srfi 151)) (every-bit-set? variable |\x0;every-bit-set?~1pxGHH~50024| (0) #f (srfi 151)) (first-set-bit variable bitwise-first-bit-set (0) #f (larceny PRIMITIVES)) (bit-field variable bitwise-bit-field (0) #f (larceny PRIMITIVES)) (bit-field-any? variable |\x0;bit-field-any?~1pxGHH~50025| (0) #f (srfi 151)) (bit-field-every? variable |\x0;bit-field-every?~1pxGHH~50026| (0) #f (srfi 151)) (bit-field-clear variable |\x0;bit-field-clear~1pxGHH~50027| (0) #f (srfi 151)) (bit-field-set variable |\x0;bit-field-set~1pxGHH~50028| (0) #f (srfi 151)) (bit-field-replace variable |\x0;bit-field-replace~1pxGHH~50029| (0) #f (srfi 151)) (bit-field-replace-same variable |\x0;bit-field-replace-same~1pxGHH~50030| (0) #f (srfi 151)) (bit-field-rotate variable |\x0;bit-field-rotate~1pxGHH~50031| (0) #f (srfi 151)) (bit-field-reverse variable bitwise-reverse-bit-field (0) #f (larceny PRIMITIVES)) (bits->list variable |\x0;bits->list~1pxGHH~50032| (0) #f (srfi 151)) (list->bits variable |\x0;list->bits~1pxGHH~50034| (0) #f (srfi 151)) (bits->vector variable |\x0;bits->vector~1pxGHH~50033| (0) #f (srfi 151)) (vector->bits variable |\x0;vector->bits~1pxGHH~50035| (0) #f (srfi 151)) (bits variable |\x0;bits~1pxGHH~50036| (0) #f (srfi 151)) (bitwise-fold variable |\x0;bitwise-fold~1pxGHH~50037| (0) #f (srfi 151)) (bitwise-for-each variable |\x0;bitwise-for-each~1pxGHH~50038| (0) #f (srfi 151)) (bitwise-unfold variable |\x0;bitwise-unfold~1pxGHH~50039| (0) #f (srfi 151)) (make-bitwise-generator variable |\x0;make-bitwise-generator~1pxGHH~50040| (0) #f (srfi 151))) (((larceny deprecated) 0) ((srfi 151) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~3819| |\x0;build~1pxGHH~50217| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~50228| #ex:make-library #ex:register-library! #values)
 #f)
))
