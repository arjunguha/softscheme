#!fasl
(define .petit-bootstrap-id-6b5e8785ea4741a93bd2faf89bcef8ed (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/147.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-6b5e8785ea4741a93bd2faf89bcef8ed 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~53566| 0 1 2 3) (|\x0;env~1pxGHH~53550| 4 1 2 3) (|\x0;env~1pxGHH~53527| 5 1 2 3) (|\x0;env~1pxGHH~53495| 6 1 2 3) (|\x0;env~1pxGHH~53481| 7 1 2 3) (|\x0;env~1pxGHH~53459| 8 9 10 3) (|\x0;env~1pxGHH~53451| 11 9 10 3) (|\x0;env~1pxGHH~53428| 12 13 14 3) (|\x0;env~1pxGHH~53410| 15 13 14 3) (|\x0;env~1pxGHH~53390| 16 13 14 3) (|\x0;env~1pxGHH~53361| 17 18 19 3) (|\x0;env~1pxGHH~53351| 20 18 19 3) (|\x0;env~1pxGHH~53328| 21 22 23 3) (|\x0;env~1pxGHH~53310| 24 22 23 3) (|\x0;env~1pxGHH~53290| 25 22 23 3) (|\x0;env~1pxGHH~53261| 26 27 28 3) (|\x0;env~1pxGHH~53251| 29 27 28 3) (|\x0;env~1pxGHH~53232| 30 31 32 3) (|\x0;env~1pxGHH~53224| 33 31 32 3) (|\x0;env~1pxGHH~53203| 34 35 36 3) (|\x0;env~1pxGHH~53190| 37 35 36 3) (|\x0;env~1pxGHH~53173| 38 35 36 3) (|\x0;env~1pxGHH~53159| 39 35 36 3) (|\x0;env~1pxGHH~53147| 40 35 36 3) (|\x0;env~1pxGHH~53127| 41 42 43 3) (|\x0;env~1pxGHH~53111| 44 45 46 3)) (46 (((x |\x0;c~1pxGHH~53101|) variable |\x0;x~1pxGHH~53103| (0) #f (srfi 147)))) (45 ()) (44 (((dummy |\x0;c~1pxGHH~53101|) . #f) ((bindings) . #f) ((body) . #f))) (43 (((x |\x0;c~1pxGHH~53117|) variable |\x0;x~1pxGHH~53119| (0) #f (srfi 147)))) (42 ()) (41 (((dummy |\x0;c~1pxGHH~53117|) . #f) ((bindings) . #f) ((body) . #f))) (40 (((dummy |\x0;c~1pxGHH~53133|) . #f) ((k) . #f) ((keyword) . #f))) (39 (((dummy |\x0;c~1pxGHH~53133|) . #f) ((k) . #f) ((keyword) . #f) ((args) . #f))) (38 (((dummy |\x0;c~1pxGHH~53133|) . #f) ((k) . #f) ((definition) . #f) ((transformer-spec) . #f))) (37 (((dummy |\x0;c~1pxGHH~53133|) . #f) ((k) . #f) ((args) . #f))) (36 (((x |\x0;c~1pxGHH~53133|) variable |\x0;x~1pxGHH~53135| (0) #f (srfi 147)))) (35 ()) (34 (((dummy |\x0;c~1pxGHH~53133|) . #f) ((k) . #f) ((args) . #f))) (33 (((dummy |\x0;c~1pxGHH~53213|) . #f))) (32 (((x |\x0;c~1pxGHH~53213|) variable |\x0;x~1pxGHH~53215| (0) #f (srfi 147)))) (31 ()) (30 (((dummy |\x0;c~1pxGHH~53213|) . #f) ((name) . #f) ((transformer-spec) . #f))) (29 (((dummy |\x0;c~1pxGHH~53240|) . #f))) (28 (((x |\x0;c~1pxGHH~53240|) variable |\x0;x~1pxGHH~53242| (0) #f (srfi 147)))) (27 ()) (26 (((dummy |\x0;c~1pxGHH~53240|) . #f) ((keyword) . #f) ((transformer-spec) . #f) ((body1) . #f) ((body2) . #f))) (25 (((dummy |\x0;c~1pxGHH~53275|) . #f) ((keyword*) . #f) ((transformer-spec2) . #f) ((transformer-spec) . #f) ((body*) . #f) ((transformer-spec1) . #f))) (24 (((dummy |\x0;c~1pxGHH~53275|) . #f) ((keyword*) . #f) ((transformer-spec1) . #f) ((transformer-spec2) . #f) ((transformer-spec*) . #f) ((body*) . #f))) (23 (((x |\x0;c~1pxGHH~53275|) variable |\x0;x~1pxGHH~53277| (0) #f (srfi 147)))) (22 ()) (21 (((dummy |\x0;c~1pxGHH~53275|) . #f) ((keyword) . #f) ((transformer-spec) . #f) ((body*) . #f))) (20 (((dummy |\x0;c~1pxGHH~53340|) . #f))) (19 (((x |\x0;c~1pxGHH~53340|) variable |\x0;x~1pxGHH~53342| (0) #f (srfi 147)))) (18 ()) (17 (((dummy |\x0;c~1pxGHH~53340|) . #f) ((keyword) . #f) ((transformer-spec) . #f) ((body1) . #f) ((body2) . #f))) (16 (((dummy |\x0;c~1pxGHH~53375|) . #f) ((keyword*) . #f) ((transformer-spec2) . #f) ((transformer-spec) . #f) ((body*) . #f) ((transformer-spec1) . #f))) (15 (((dummy |\x0;c~1pxGHH~53375|) . #f) ((keyword*) . #f) ((transformer-spec1) . #f) ((transformer-spec2) . #f) ((transformer-spec*) . #f) ((body*) . #f))) (14 (((x |\x0;c~1pxGHH~53375|) variable |\x0;x~1pxGHH~53377| (0) #f (srfi 147)))) (13 ()) (12 (((dummy |\x0;c~1pxGHH~53375|) . #f) ((keyword) . #f) ((transformer-spec) . #f) ((body*) . #f))) (11 (((dummy |\x0;c~1pxGHH~53440|) . #f))) (10 (((x |\x0;c~1pxGHH~53440|) variable |\x0;x~1pxGHH~53442| (0) #f (srfi 147)))) (9 ()) (8 (((dummy |\x0;c~1pxGHH~53440|) . #f) ((k) . #f) ((args) . #f))) (7 (((dummy |\x0;c~1pxGHH~53467|) . #f))) (6 (((dummy |\x0;c~1pxGHH~53467|) . #f) ((k*) . #f) ((:::) . #f) ((l*) . #f) ((pattern) . #f) ((template) . #f) ((rule1*) . #f) ((rule2) . #f) ((rule3*) . #f))) (5 (((dummy |\x0;c~1pxGHH~53467|) . #f) ((k) . #f) ((e) . #f) ((l) . #f) ((rule1*) . #f) ((rule2*) . #f))) (4 (((dummy |\x0;c~1pxGHH~53467|) . #f) ((k*) . #f) ((ellipsis) . #f) ((literal*) . #f) ((rule*) . #f))) (3 (((syntax-rules-aux) macro |\x0;syntax-rules-aux~1pxGHH~53466| (0) #f (srfi 147)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~53439| (0) #f (srfi 147)) ((letrec-syntax-aux) macro |\x0;letrec-syntax-aux~1pxGHH~53374| (0) #f (srfi 147)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~53339| (0) #f (srfi 147)) ((let-syntax-aux) macro |\x0;let-syntax-aux~1pxGHH~53274| (0) #f (srfi 147)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~53239| (0) #f (srfi 147)) ((define-syntax) macro |\x0;define-syntax~1pxGHH~53212| (0) #f (srfi 147)) ((expand-transformer) macro |\x0;expand-transformer~1pxGHH~53132| (0) #f (srfi 147)) ((scheme-letrec-syntax) macro |\x0;scheme-letrec-syntax~1pxGHH~53116| (0) #f (srfi 147)) ((scheme-let-syntax) macro |\x0;scheme-let-syntax~1pxGHH~53100| (0) #f (srfi 147)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((scheme-syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((larceny:letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((larceny:let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((scheme-define-syntax) macro define-syntax (0) #f ()) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~53467|) variable |\x0;x~1pxGHH~53469| (0) #f (srfi 147)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~53467|) . #f) ((k*) . #f) ((literal*) . #f) ((rule*) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53103|)) let (|\x0;env~1pxGHH~53111|) (srfi 147) #ex:syntax-rename larceny:let-syntax #ex:invalid-form)
 |\x0;scheme-let-syntax~1pxGHH~53100| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53119|)) let (|\x0;env~1pxGHH~53127|) (srfi 147) #ex:syntax-rename larceny:letrec-syntax #ex:invalid-form)
 |\x0;scheme-letrec-syntax~1pxGHH~53116| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53135|))) (4367 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (8942 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (12068 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (19378 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? #ex:identifier? scheme-syntax-rules (|\x0;env~1pxGHH~53203|) (srfi 147) #ex:syntax-rename #ex:free-identifier=? #append (|\x0;env~1pxGHH~53147|) _ args #ex:invalid-form expand-transformer (|\x0;env~1pxGHH~53159|) ":continuation" begin (|\x0;env~1pxGHH~53173|) #ex:dotted-length #ex:dotted-butlast #ex:dotted-last syntax-error (|\x0;env~1pxGHH~53190|))
 |\x0;expand-transformer~1pxGHH~53132| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53215|))) (2805 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) expand-transformer (|\x0;env~1pxGHH~53232|) (srfi 147) #ex:syntax-rename scheme-define-syntax _ (|\x0;env~1pxGHH~53224|) irritants: (|\x0;c~1pxGHH~53213|) (|\x0;env~1pxGHH~53224| |\x0;env~1pxGHH~128|) (core syntax-rules) syntax-error "invalid define-syntax syntax" #ex:syntax-violation #ex:invalid-form)
 |\x0;define-syntax~1pxGHH~53212| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53242|))) (1026 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~53266|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~53268| |\x0;rest~1pxGHH~53267|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;keyword~1pxGHH~53256| |\x0;transformer-spec~1pxGHH~53257|)) #list? let (|\x0;env~1pxGHH~53261|) (srfi 147) #ex:syntax-rename let-syntax-aux)
 (() ()) #map #list #apply)
 #ex:map-while _ (|\x0;env~1pxGHH~53251|) (srfi 147) #ex:syntax-rename irritants: (|\x0;c~1pxGHH~53240|) (|\x0;env~1pxGHH~53251| |\x0;env~1pxGHH~128|) (core syntax-rules) syntax-error "invalid let-syntax syntax" #ex:syntax-violation #ex:invalid-form)
 |\x0;let-syntax~1pxGHH~53239| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53277|))) (5517 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (10424 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1145\|1147| |.y1\|1145\|1146| |.results\|1145\|1150|))) (13147 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? scheme-let-syntax (|\x0;env~1pxGHH~53328|) (srfi 147) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((keyword transformer-spec) ...) #ex:syntax-violation let-syntax-aux (|\x0;env~1pxGHH~53290|) #append #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;keyword~1pxGHH~53324| |\x0;transformer-spec~1pxGHH~53325|)))
 #larceny:map #reverse expand-transformer (|\x0;env~1pxGHH~53310|))
 |\x0;let-syntax-aux~1pxGHH~53274| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53342|))) (1027 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~53366|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~53368| |\x0;rest~1pxGHH~53367|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;keyword~1pxGHH~53356| |\x0;transformer-spec~1pxGHH~53357|)) #list? let (|\x0;env~1pxGHH~53361|) (srfi 147) #ex:syntax-rename letrec-syntax-aux)
 (() ()) #map #list #apply)
 #ex:map-while _ (|\x0;env~1pxGHH~53351|) (srfi 147) #ex:syntax-rename irritants: (|\x0;c~1pxGHH~53340|) (|\x0;env~1pxGHH~53351| |\x0;env~1pxGHH~128|) (core syntax-rules) syntax-error "invalid letrec-syntax syntax" #ex:syntax-violation #ex:invalid-form)
 |\x0;letrec-syntax~1pxGHH~53339| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53377|))) (6497 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (11404 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1913\|1915| |.y1\|1913\|1914| |.results\|1913\|1918|))) (14916 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? begin (|\x0;env~1pxGHH~53428|) (srfi 147) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((define-syntax keyword transformer-spec) ... (let () . body*)) #ex:syntax-violation let #append letrec-syntax-aux (|\x0;env~1pxGHH~53390|) #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;keyword~1pxGHH~53424| |\x0;transformer-spec~1pxGHH~53425|)) define-syntax (|\x0;env~1pxGHH~53428|) (srfi 147) #ex:syntax-rename)
 #larceny:map #reverse define-syntax expand-transformer (|\x0;env~1pxGHH~53410|))
 |\x0;letrec-syntax-aux~1pxGHH~53374| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53442|))) (2718 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) ":continuation" #equal? #list? "state0" syntax-rules-aux (|\x0;env~1pxGHH~53459|) (srfi 147) #ex:syntax-rename _ (|\x0;env~1pxGHH~53451|) irritants: (|\x0;c~1pxGHH~53440|) (|\x0;env~1pxGHH~53451| |\x0;env~1pxGHH~128|) (core syntax-rules) syntax-error "invalid syntax-rules syntax" #ex:syntax-violation #ex:invalid-form)
 |\x0;syntax-rules~1pxGHH~53439| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~53469|))) (4299 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (6061 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (16058 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (22468 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) "state0" #equal? #list? syntax-rules-aux (|\x0;env~1pxGHH~53566|) (srfi 147) #ex:syntax-rename ... "state1" _ (|\x0;env~1pxGHH~53481|) irritants: (|\x0;c~1pxGHH~53467|) (|\x0;env~1pxGHH~53481| |\x0;env~1pxGHH~128|) (core syntax-rules) syntax-error "invalid syntax-rules syntax" #ex:syntax-violation #ex:invalid-form (|\x0;env~1pxGHH~53495|) c ":continuation" #append scheme-syntax-rules (|\x0;env~1pxGHH~53527|) (|\x0;env~1pxGHH~53550|))
 |\x0;syntax-rules-aux~1pxGHH~53466| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (srfi 147) ((define-syntax macro |\x0;define-syntax~1pxGHH~53212| (0) #f (srfi 147)) (let-syntax macro |\x0;let-syntax~1pxGHH~53239| (0) #f (srfi 147)) (letrec-syntax macro |\x0;letrec-syntax~1pxGHH~53339| (0) #f (srfi 147)) (syntax-rules macro |\x0;syntax-rules~1pxGHH~53439| (0) #f (srfi 147))) (((scheme base) 0)) (|\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~53575| #ex:make-library #ex:register-library! #values)
 #f)
))
