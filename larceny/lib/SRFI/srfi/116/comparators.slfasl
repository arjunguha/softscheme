#!fasl
(define .petit-bootstrap-id-944d74c5ed458314e6c98fa584f33c9b (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/116/comparators.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-944d74c5ed458314e6c98fa584f33c9b 0
'#(#f #( #f #ex:unspecified #|\x0;make-improper-ilist-hash~1pxGHH~19253| #|\x0;real-comparison~1pxGHH~19252| #|\x0;improper-list-type~1pxGHH~19251| #|\x0;make-improper-ilist-comparison~1pxGHH~19250| #|\x0;make-improper-ilist-comparator~1pxGHH~19249| #|\x0;make-icdr-comparator~1pxGHH~19248| #|\x0;make-icar-comparator~1pxGHH~19247| #|\x0;ilist-comparator~1pxGHH~19246| #|\x0;make-ilist-comparator~1pxGHH~19245| #|\x0;ipair-comparator~1pxGHH~19244| #|\x0;make-ipair-hash~1pxGHH~19243| #|\x0;make-ipair-comparator~1pxGHH~19242| #|\x0;make-ipair-comparison~1pxGHH~19241| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~19234| 0 1 2 3)) (3 (((make-improper-ilist-hash) variable |\x0;make-improper-ilist-hash~1pxGHH~19253| (0) #f (srfi 116 comparators)) ((real-comparison) variable |\x0;real-comparison~1pxGHH~19252| (0) #f (srfi 116 comparators)) ((improper-list-type) variable |\x0;improper-list-type~1pxGHH~19251| (0) #f (srfi 116 comparators)) ((make-improper-ilist-comparison) variable |\x0;make-improper-ilist-comparison~1pxGHH~19250| (0) #f (srfi 116 comparators)) ((make-improper-ilist-comparator) variable |\x0;make-improper-ilist-comparator~1pxGHH~19249| (0) #f (srfi 116 comparators)) ((make-icdr-comparator) variable |\x0;make-icdr-comparator~1pxGHH~19248| (0) #f (srfi 116 comparators)) ((make-icar-comparator) variable |\x0;make-icar-comparator~1pxGHH~19247| (0) #f (srfi 116 comparators)) ((ilist-comparator) variable |\x0;ilist-comparator~1pxGHH~19246| (0) #f (srfi 116 comparators)) ((make-ilist-comparator) variable |\x0;make-ilist-comparator~1pxGHH~19245| (0) #f (srfi 116 comparators)) ((ipair-comparator) variable |\x0;ipair-comparator~1pxGHH~19244| (0) #f (srfi 116 comparators)) ((make-ipair-hash) variable |\x0;make-ipair-hash~1pxGHH~19243| (0) #f (srfi 116 comparators)) ((make-ipair-comparator) variable |\x0;make-ipair-comparator~1pxGHH~19242| (0) #f (srfi 116 comparators)) ((make-ipair-comparison) variable |\x0;make-ipair-comparison~1pxGHH~19241| (0) #f (srfi 116 comparators)) ((define-predefined-comparator) macro |\x0;define-predefined-comparator~1pxGHH~19223| (0) #f (srfi 116 comparators)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((iapply) variable |\x0;iapply~1pxGHH~16060| (0) #f (srfi 116 ilists)) ((gtree->tree) variable |\x0;gtree->tree~1pxGHH~16056| (0) #f (srfi 116 ilists)) ((gtree->itree) variable |\x0;gtree->itree~1pxGHH~16055| (0) #f (srfi 116 ilists)) ((itree->tree) variable |\x0;itree->tree~1pxGHH~16054| (0) #f (srfi 116 ilists)) ((tree->itree) variable |\x0;tree->itree~1pxGHH~16053| (0) #f (srfi 116 ilists)) ((ilist->list) variable |\x0;ilist->list~1pxGHH~16052| (0) #f (srfi 116 ilists)) ((list->ilist) variable |\x0;list->ilist~1pxGHH~16050| (0) #f (srfi 116 ilists)) ((ipair->pair) variable |\x0;ipair->pair~1pxGHH~16049| (0) #f (srfi 116 ilists)) ((pair->ipair) variable |\x0;pair->ipair~1pxGHH~16048| (0) #f (srfi 116 ilists)) ((replace-icdr) variable |\x0;replace-icdr~1pxGHH~16047| (0) #f (srfi 116 ilists)) ((replace-icar) variable |\x0;replace-icar~1pxGHH~16046| (0) #f (srfi 116 ilists)) ((ialist-delete) variable |\x0;ialist-delete~1pxGHH~16185| (0) #f (srfi 116 ilists)) ((ialist-cons) variable |\x0;ialist-cons~1pxGHH~16183| (0) #f (srfi 116 ilists)) ((iassv) variable |\x0;iassv~1pxGHH~16081| (0) #f (srfi 116 ilists)) ((iassq) variable |\x0;iassq~1pxGHH~16080| (0) #f (srfi 116 ilists)) ((iassoc) variable |\x0;iassoc~1pxGHH~16182| (0) #f (srfi 116 ilists)) ((idelete-duplicates) variable |\x0;idelete-duplicates~1pxGHH~16181| (0) #f (srfi 116 ilists)) ((idelete) variable |\x0;idelete~1pxGHH~16177| (0) #f (srfi 116 ilists)) ((ibreak) variable |\x0;ibreak~1pxGHH~16191| (0) #f (srfi 116 ilists)) ((ispan) variable |\x0;ispan~1pxGHH~16190| (0) #f (srfi 116 ilists)) ((idrop-while) variable |\x0;idrop-while~1pxGHH~16189| (0) #f (srfi 116 ilists)) ((itake-while) variable |\x0;itake-while~1pxGHH~16188| (0) #f (srfi 116 ilists)) ((ilist-index) variable |\x0;ilist-index~1pxGHH~16194| (0) #f (srfi 116 ilists)) ((ievery) variable |\x0;ievery~1pxGHH~16192| (0) #f (srfi 116 ilists)) ((iany) variable |\x0;iany~1pxGHH~16193| (0) #f (srfi 116 ilists)) ((ifind-tail) variable |\x0;ifind-tail~1pxGHH~16187| (0) #f (srfi 116 ilists)) ((ifind) variable |\x0;ifind~1pxGHH~16186| (0) #f (srfi 116 ilists)) ((imemv) variable |\x0;imemv~1pxGHH~16180| (0) #f (srfi 116 ilists)) ((imemq) variable |\x0;imemq~1pxGHH~16179| (0) #f (srfi 116 ilists)) ((imember) variable |\x0;imember~1pxGHH~16178| (0) #f (srfi 116 ilists)) ((iremove) variable |\x0;iremove~1pxGHH~16176| (0) #f (srfi 116 ilists)) ((ipartition) variable |\x0;ipartition~1pxGHH~16175| (0) #f (srfi 116 ilists)) ((ifilter) variable |\x0;ifilter~1pxGHH~16174| (0) #f (srfi 116 ilists)) ((imap-in-order) variable |\x0;imap-in-order~1pxGHH~16172| (0) #f (srfi 116 ilists)) ((ifilter-map) variable |\x0;ifilter-map~1pxGHH~16171| (0) #f (srfi 116 ilists)) ((ipair-for-each) variable |\x0;ipair-for-each~1pxGHH~16170| (0) #f (srfi 116 ilists)) ((iappend-map) variable |\x0;iappend-map~1pxGHH~16168| (0) #f (srfi 116 ilists)) ((ireduce-right) variable |\x0;ireduce-right~1pxGHH~16167| (0) #f (srfi 116 ilists)) ((ipair-fold-right) variable |\x0;ipair-fold-right~1pxGHH~16164| (0) #f (srfi 116 ilists)) ((iunfold-right) variable |\x0;iunfold-right~1pxGHH~16160| (0) #f (srfi 116 ilists)) ((ifold-right) variable |\x0;ifold-right~1pxGHH~16163| (0) #f (srfi 116 ilists)) ((ireduce) variable |\x0;ireduce~1pxGHH~16166| (0) #f (srfi 116 ilists)) ((ipair-fold) variable |\x0;ipair-fold~1pxGHH~16165| (0) #f (srfi 116 ilists)) ((iunfold) variable |\x0;iunfold~1pxGHH~16161| (0) #f (srfi 116 ilists)) ((ifold) variable |\x0;ifold~1pxGHH~16162| (0) #f (srfi 116 ilists)) ((ifor-each) variable |\x0;ifor-each~1pxGHH~16082| (0) #f (srfi 116 ilists)) ((imap) variable |\x0;imap~1pxGHH~16173| (0) #f (srfi 116 ilists)) ((icount) variable |\x0;icount~1pxGHH~16159| (0) #f (srfi 116 ilists)) ((iunzip5) variable |\x0;iunzip5~1pxGHH~16150| (0) #f (srfi 116 ilists)) ((iunzip4) variable |\x0;iunzip4~1pxGHH~16149| (0) #f (srfi 116 ilists)) ((iunzip3) variable |\x0;iunzip3~1pxGHH~16148| (0) #f (srfi 116 ilists)) ((iunzip2) variable |\x0;iunzip2~1pxGHH~16147| (0) #f (srfi 116 ilists)) ((iunzip1) variable |\x0;iunzip1~1pxGHH~16146| (0) #f (srfi 116 ilists)) ((izip) variable |\x0;izip~1pxGHH~16097| (0) #f (srfi 116 ilists)) ((iappend-reverse) variable |\x0;iappend-reverse~1pxGHH~16152| (0) #f (srfi 116 ilists)) ((ireverse) variable |\x0;ireverse~1pxGHH~16195| (0) #f (srfi 116 ilists)) ((iconcatenate) variable |\x0;iconcatenate~1pxGHH~16153| (0) #f (srfi 116 ilists)) ((iappend) variable |\x0;iappend~1pxGHH~16151| (0) #f (srfi 116 ilists)) ((ilength) variable |\x0;ilength~1pxGHH~16096| (0) #f (srfi 116 ilists)) ((last-ipair) variable |\x0;last-ipair~1pxGHH~16145| (0) #f (srfi 116 ilists)) ((ilast) variable |\x0;ilast~1pxGHH~16144| (0) #f (srfi 116 ilists)) ((isplit-at) variable |\x0;isplit-at~1pxGHH~16143| (0) #f (srfi 116 ilists)) ((idrop-right) variable |\x0;idrop-right~1pxGHH~16141| (0) #f (srfi 116 ilists)) ((itake-right) variable |\x0;itake-right~1pxGHH~16140| (0) #f (srfi 116 ilists)) ((ilist-tail) variable |\x0;ilist-tail~1pxGHH~16138| (0) #f (srfi 116 ilists)) ((idrop) variable |\x0;idrop~1pxGHH~16139| (0) #f (srfi 116 ilists)) ((itake) variable |\x0;itake~1pxGHH~16137| (0) #f (srfi 116 ilists)) ((icar+icdr) variable |\x0;icar+icdr~1pxGHH~16136| (0) #f (srfi 116 ilists)) ((icddddr) variable |\x0;icddddr~1pxGHH~16125| (0) #f (srfi 116 ilists)) ((icdddar) variable |\x0;icdddar~1pxGHH~16124| (0) #f (srfi 116 ilists)) ((icddadr) variable |\x0;icddadr~1pxGHH~16123| (0) #f (srfi 116 ilists)) ((icddaar) variable |\x0;icddaar~1pxGHH~16122| (0) #f (srfi 116 ilists)) ((icdaddr) variable |\x0;icdaddr~1pxGHH~16121| (0) #f (srfi 116 ilists)) ((icdadar) variable |\x0;icdadar~1pxGHH~16120| (0) #f (srfi 116 ilists)) ((icdaadr) variable |\x0;icdaadr~1pxGHH~16119| (0) #f (srfi 116 ilists)) ((icdaaar) variable |\x0;icdaaar~1pxGHH~16118| (0) #f (srfi 116 ilists)) ((icadddr) variable |\x0;icadddr~1pxGHH~16117| (0) #f (srfi 116 ilists)) ((icaddar) variable |\x0;icaddar~1pxGHH~16116| (0) #f (srfi 116 ilists)) ((icadadr) variable |\x0;icadadr~1pxGHH~16115| (0) #f (srfi 116 ilists)) ((icadaar) variable |\x0;icadaar~1pxGHH~16114| (0) #f (srfi 116 ilists)) ((icaaddr) variable |\x0;icaaddr~1pxGHH~16113| (0) #f (srfi 116 ilists)) ((icaadar) variable |\x0;icaadar~1pxGHH~16112| (0) #f (srfi 116 ilists)) ((icaaadr) variable |\x0;icaaadr~1pxGHH~16111| (0) #f (srfi 116 ilists)) ((icaaaar) variable |\x0;icaaaar~1pxGHH~16110| (0) #f (srfi 116 ilists)) ((icdddr) variable |\x0;icdddr~1pxGHH~16109| (0) #f (srfi 116 ilists)) ((icddar) variable |\x0;icddar~1pxGHH~16108| (0) #f (srfi 116 ilists)) ((icdadr) variable |\x0;icdadr~1pxGHH~16107| (0) #f (srfi 116 ilists)) ((icdaar) variable |\x0;icdaar~1pxGHH~16106| (0) #f (srfi 116 ilists)) ((icaddr) variable |\x0;icaddr~1pxGHH~16105| (0) #f (srfi 116 ilists)) ((icadar) variable |\x0;icadar~1pxGHH~16104| (0) #f (srfi 116 ilists)) ((icaadr) variable |\x0;icaadr~1pxGHH~16103| (0) #f (srfi 116 ilists)) ((icaaar) variable |\x0;icaaar~1pxGHH~16102| (0) #f (srfi 116 ilists)) ((icddr) variable |\x0;icddr~1pxGHH~16101| (0) #f (srfi 116 ilists)) ((icdar) variable |\x0;icdar~1pxGHH~16100| (0) #f (srfi 116 ilists)) ((icadr) variable |\x0;icadr~1pxGHH~16099| (0) #f (srfi 116 ilists)) ((icaar) variable |\x0;icaar~1pxGHH~16098| (0) #f (srfi 116 ilists)) ((itenth) variable |\x0;itenth~1pxGHH~16135| (0) #f (srfi 116 ilists)) ((ininth) variable |\x0;ininth~1pxGHH~16134| (0) #f (srfi 116 ilists)) ((ieighth) variable |\x0;ieighth~1pxGHH~16133| (0) #f (srfi 116 ilists)) ((iseventh) variable |\x0;iseventh~1pxGHH~16132| (0) #f (srfi 116 ilists)) ((isixth) variable |\x0;isixth~1pxGHH~16131| (0) #f (srfi 116 ilists)) ((ififth) variable |\x0;ififth~1pxGHH~16130| (0) #f (srfi 116 ilists)) ((ifourth) variable |\x0;ifourth~1pxGHH~16129| (0) #f (srfi 116 ilists)) ((ithird) variable |\x0;ithird~1pxGHH~16128| (0) #f (srfi 116 ilists)) ((isecond) variable |\x0;isecond~1pxGHH~16127| (0) #f (srfi 116 ilists)) ((ifirst) variable |\x0;ifirst~1pxGHH~16126| (0) #f (srfi 116 ilists)) ((ilist-ref) variable |\x0;ilist-ref~1pxGHH~16142| (0) #f (srfi 116 ilists)) ((icdr) variable |\x0;icdr~1pxGHH~16013| (0) #f (srfi 116 ilists)) ((icar) variable |\x0;icar~1pxGHH~16012| (0) #f (srfi 116 ilists)) ((ilist=) variable |\x0;ilist=~1pxGHH~16095| (0) #f (srfi 116 ilists)) ((null-ilist?) variable |\x0;null-ilist?~1pxGHH~16094| (0) #f (srfi 116 ilists)) ((not-ipair?) variable |\x0;not-ipair?~1pxGHH~16093| (0) #f (srfi 116 ilists)) ((dotted-ilist?) variable |\x0;dotted-ilist?~1pxGHH~16092| (0) #f (srfi 116 ilists)) ((ilist?) variable |\x0;ilist?~1pxGHH~16090| (0) #f (srfi 116 ilists)) ((proper-ilist?) variable |\x0;proper-ilist?~1pxGHH~16091| (0) #f (srfi 116 ilists)) ((ipair?) variable |\x0;ipair?~1pxGHH~16011| (0) #f (srfi 116 ilists)) ((iiota) variable |\x0;iiota~1pxGHH~16089| (0) #f (srfi 116 ilists)) ((ilist-tabulate) variable |\x0;ilist-tabulate~1pxGHH~16086| (0) #f (srfi 116 ilists)) ((make-ilist) variable |\x0;make-ilist~1pxGHH~16085| (0) #f (srfi 116 ilists)) ((ipair*) variable |\x0;ipair*~1pxGHH~16087| (0) #f (srfi 116 ilists)) ((xipair) variable |\x0;xipair~1pxGHH~16084| (0) #f (srfi 116 ilists)) ((ilist) variable |\x0;ilist~1pxGHH~16051| (0) #f (srfi 116 ilists)) ((ipair) variable |\x0;ipair~1pxGHH~16010| (0) #f (srfi 116 ilists)) ((iq) macro |\x0;iq~1pxGHH~16033| (0) #f (srfi 116 ilists)) ((comparator-register-default!) variable |\x0;comparator-register-default!~1pxGHH~11757| (0) #f (srfi 128)) ((comparator-max) variable |\x0;comparator-max~1pxGHH~18276| (0) #f (srfi 114 comparators)) ((comparator-min) variable |\x0;comparator-min~1pxGHH~18275| (0) #f (srfi 114 comparators)) ((in-closed-open-interval?) variable |\x0;in-closed-open-interval?~1pxGHH~18274| (0) #f (srfi 114 comparators)) ((in-open-closed-interval?) variable |\x0;in-open-closed-interval?~1pxGHH~18273| (0) #f (srfi 114 comparators)) ((in-closed-interval?) variable |\x0;in-closed-interval?~1pxGHH~18272| (0) #f (srfi 114 comparators)) ((in-open-interval?) variable |\x0;in-open-interval?~1pxGHH~18271| (0) #f (srfi 114 comparators)) ((make>=) variable |\x0;make>=~1pxGHH~18270| (0) #f (srfi 114 comparators)) ((make<=) variable |\x0;make<=~1pxGHH~18269| (0) #f (srfi 114 comparators)) ((make>) variable |\x0;make>~1pxGHH~18268| (0) #f (srfi 114 comparators)) ((make<) variable |\x0;make<~1pxGHH~18267| (0) #f (srfi 114 comparators)) ((make=) variable |\x0;make=~1pxGHH~18266| (0) #f (srfi 114 comparators)) ((>=?) variable |\x0;>=?~1pxGHH~11725| (0) #f (srfi 128)) ((<=?) variable |\x0;<=?~1pxGHH~11724| (0) #f (srfi 128)) ((>?) variable |\x0;>?~1pxGHH~11723| (0) #f (srfi 128)) ((<?) variable |\x0;<?~1pxGHH~11722| (0) #f (srfi 128)) ((=?) variable |\x0;=?~1pxGHH~11721| (0) #f (srfi 128)) ((if-not=?) macro |\x0;if-not=?~1pxGHH~18159| (0) #f (srfi 114 comparators)) ((if>=?) macro |\x0;if>=?~1pxGHH~18225| (0) #f (srfi 114 comparators)) ((if<=?) macro |\x0;if<=?~1pxGHH~18192| (0) #f (srfi 114 comparators)) ((if>?) macro |\x0;if>?~1pxGHH~18126| (0) #f (srfi 114 comparators)) ((if<?) macro |\x0;if<?~1pxGHH~18093| (0) #f (srfi 114 comparators)) ((if=?) macro |\x0;if=?~1pxGHH~18060| (0) #f (srfi 114 comparators)) ((if3) macro |\x0;if3~1pxGHH~18036| (0) #f (srfi 114 comparators)) ((make-comparison=/>) variable |\x0;make-comparison=/>~1pxGHH~18265| (0) #f (srfi 114 comparators)) ((make-comparison=/<) variable |\x0;make-comparison=/<~1pxGHH~18264| (0) #f (srfi 114 comparators)) ((make-comparison>=) variable |\x0;make-comparison>=~1pxGHH~18263| (0) #f (srfi 114 comparators)) ((make-comparison<=) variable |\x0;make-comparison<=~1pxGHH~18262| (0) #f (srfi 114 comparators)) ((make-comparison>) variable |\x0;make-comparison>~1pxGHH~18261| (0) #f (srfi 114 comparators)) ((make-comparison<) variable |\x0;make-comparison<~1pxGHH~18260| (0) #f (srfi 114 comparators)) ((comparator-hash) variable |\x0;comparator-hash~1pxGHH~11715| (0) #f (srfi 128)) ((comparator-compare) variable |\x0;comparator-compare~1pxGHH~18259| (0) #f (srfi 114 comparators)) ((comparator-equal?) variable |\x0;comparator-equal?~1pxGHH~18258| (0) #f (srfi 114 comparators)) ((comparator-check-type) variable |\x0;comparator-check-type~1pxGHH~11714| (0) #f (srfi 128)) ((comparator-test-type) variable |\x0;comparator-test-type~1pxGHH~11713| (0) #f (srfi 128)) ((comparator-hash-function) variable |\x0;comparator-hash-function~1pxGHH~11485| (0) #f (srfi 128 kernel)) ((comparator-comparison-procedure) variable |\x0;comparator-comparison-procedure~1pxGHH~11484| (0) #f (srfi 128 kernel)) ((comparator-equality-predicate) variable |\x0;comparator-equality-predicate~1pxGHH~11482| (0) #f (srfi 128 kernel)) ((comparator-type-test-procedure) variable |\x0;comparator-type-test-procedure~1pxGHH~11494| (0) #f (srfi 128 kernel)) ((equal-comparator) variable |\x0;equal-comparator~1pxGHH~18333| (0) #f (srfi 114 comparators)) ((eqv-comparator) variable |\x0;eqv-comparator~1pxGHH~18332| (0) #f (srfi 114 comparators)) ((eq-comparator) variable |\x0;eq-comparator~1pxGHH~18331| (0) #f (srfi 114 comparators)) ((make-debug-comparator) variable |\x0;make-debug-comparator~1pxGHH~18356| (0) #f (srfi 114 comparators)) ((make-reverse-comparator) variable |\x0;make-reverse-comparator~1pxGHH~18344| (0) #f (srfi 114 comparators)) ((make-refining-comparator) variable |\x0;make-refining-comparator~1pxGHH~18343| (0) #f (srfi 114 comparators)) ((make-selecting-comparator) variable |\x0;make-selecting-comparator~1pxGHH~18339| (0) #f (srfi 114 comparators)) ((make-improper-list-comparator) variable |\x0;make-improper-list-comparator~1pxGHH~18330| (0) #f (srfi 114 comparators)) ((make-pair-comparator) variable |\x0;make-pair-comparator~1pxGHH~11737| (0) #f (srfi 128)) ((make-cdr-comparator) variable |\x0;make-cdr-comparator~1pxGHH~18321| (0) #f (srfi 114 comparators)) ((make-car-comparator) variable |\x0;make-car-comparator~1pxGHH~18320| (0) #f (srfi 114 comparators)) ((make-listwise-comparator) variable |\x0;make-listwise-comparator~1pxGHH~18310| (0) #f (srfi 114 comparators)) ((make-vectorwise-comparator) variable |\x0;make-vectorwise-comparator~1pxGHH~18311| (0) #f (srfi 114 comparators)) ((make-list-comparator) variable |\x0;make-list-comparator~1pxGHH~11743| (0) #f (srfi 128)) ((make-bytevector-comparator) variable |\x0;make-bytevector-comparator~1pxGHH~18316| (0) #f (srfi 114 comparators)) ((make-vector-comparator) variable |\x0;make-vector-comparator~1pxGHH~11748| (0) #f (srfi 128)) ((make-inexact-real-comparator) variable |\x0;make-inexact-real-comparator~1pxGHH~18301| (0) #f (srfi 114 comparators)) ((make-comparator) variable |\x0;make-comparator~1pxGHH~11489| (0) #f (srfi 128 kernel)) ((default-comparator) variable |\x0;default-comparator~1pxGHH~18277| (0) #f (srfi 114 comparators)) ((bytevector-comparator) variable |\x0;bytevector-comparator~1pxGHH~18317| (0) #f (srfi 114 comparators)) ((vector-comparator) variable |\x0;vector-comparator~1pxGHH~18313| (0) #f (srfi 114 comparators)) ((list-comparator) variable |\x0;list-comparator~1pxGHH~18312| (0) #f (srfi 114 comparators)) ((pair-comparator) variable |\x0;pair-comparator~1pxGHH~18325| (0) #f (srfi 114 comparators)) ((number-comparator) variable |\x0;number-comparator~1pxGHH~18290| (0) #f (srfi 114 comparators)) ((complex-comparator) variable |\x0;complex-comparator~1pxGHH~18291| (0) #f (srfi 114 comparators)) ((real-comparator) variable |\x0;real-comparator~1pxGHH~18292| (0) #f (srfi 114 comparators)) ((rational-comparator) variable |\x0;rational-comparator~1pxGHH~18293| (0) #f (srfi 114 comparators)) ((integer-comparator) variable |\x0;integer-comparator~1pxGHH~18294| (0) #f (srfi 114 comparators)) ((exact-integer-comparator) variable |\x0;exact-integer-comparator~1pxGHH~18295| (0) #f (srfi 114 comparators)) ((symbol-comparator) variable |\x0;symbol-comparator~1pxGHH~18309| (0) #f (srfi 114 comparators)) ((string-ci-comparator) variable |\x0;string-ci-comparator~1pxGHH~18308| (0) #f (srfi 114 comparators)) ((string-comparator) variable |\x0;string-comparator~1pxGHH~18307| (0) #f (srfi 114 comparators)) ((char-ci-comparator) variable |\x0;char-ci-comparator~1pxGHH~18283| (0) #f (srfi 114 comparators)) ((char-comparator) variable |\x0;char-comparator~1pxGHH~18281| (0) #f (srfi 114 comparators)) ((boolean-comparator) variable |\x0;boolean-comparator~1pxGHH~18279| (0) #f (srfi 114 comparators)) ((comparator-hash-function?) variable |\x0;comparator-hash-function?~1pxGHH~11495| (0) #f (srfi 128 kernel)) ((comparator-comparison-procedure?) variable |\x0;comparator-comparison-procedure?~1pxGHH~11487| (0) #f (srfi 128 kernel)) ((comparator?) variable |\x0;comparator?~1pxGHH~11480| (0) #f (srfi 128 kernel)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~19224|) variable |\x0;x~1pxGHH~19226| (0) #f (srfi 116 comparators)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~19224|) . #f) ((?who) . #f) ((?build-form) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~19226|)) define (|\x0;env~1pxGHH~19234|) (srfi 116 comparators) #ex:syntax-rename #ex:invalid-form)
 |\x0;define-predefined-comparator~1pxGHH~19223| #ex:register-macro! #values)
 #f #( ((0 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (6720 . #(|\x0;make-ipair-comparator~1pxGHH~19242| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;car-K~1pxGHH~19369| |\x0;cdr-K~1pxGHH~19370|))) (9139 . #(|\x0;make-ipair-comparison~1pxGHH~19241| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;car-K~1pxGHH~19380| |\x0;cdr-K~1pxGHH~19381|)))) #ex:undefined #|\x0;make-improper-ilist-hash~1pxGHH~19253| #|\x0;real-comparison~1pxGHH~19252| #|\x0;improper-list-type~1pxGHH~19251| #|\x0;make-improper-ilist-comparison~1pxGHH~19250| #|\x0;make-improper-ilist-comparator~1pxGHH~19249| #|\x0;make-icdr-comparator~1pxGHH~19248| #|\x0;make-icar-comparator~1pxGHH~19247| #|\x0;ilist-comparator~1pxGHH~19246| #|\x0;make-ilist-comparator~1pxGHH~19245| #|\x0;ipair-comparator~1pxGHH~19244| #|\x0;make-ipair-hash~1pxGHH~19243| #|\x0;make-ipair-comparator~1pxGHH~19242| #|\x0;make-ipair-comparison~1pxGHH~19241| #f #( #(#f #f 7 src/Build/compile-standard-libraries.sch #(20 1 0) (t0f0010 t0f0020 t0f0030 t0f0040 t0f0050 t0f0060 t0f0070)) #|\x0;make-ipair-comparator~1pxGHH~19242| #|\x0;ipair-comparator~1pxGHH~19244| #|\x0;make-ilist-comparator~1pxGHH~19245| #|\x0;ilist-comparator~1pxGHH~19246| #|\x0;make-icar-comparator~1pxGHH~19247| #|\x0;make-icdr-comparator~1pxGHH~19248| #|\x0;make-improper-ilist-comparator~1pxGHH~19249| #values)
 #|\x0;default-comparator~1pxGHH~18277| #f #( #(|\x0;make-ilist-comparator~1pxGHH~19245| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19351|)) #ex:undefined #|\x0;comparator-type-test-procedure~1pxGHH~11494| #f #( #(|\x0;test-proc~1pxGHH~19353| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19355|)) #|\x0;ipair?~1pxGHH~16011| #|\x0;icar~1pxGHH~16012| #|\x0;icdr~1pxGHH~16013|)
 #null? #|\x0;icar~1pxGHH~16012| #|\x0;icdr~1pxGHH~16013| #|\x0;make-listwise-comparator~1pxGHH~18310|)
 #f #( #(|\x0;make-icar-comparator~1pxGHH~19247| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19332|)) #|\x0;comparator-type-test-procedure~1pxGHH~11494| #f #( #(|\x0;test-proc~1pxGHH~19334| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19347|)) #|\x0;ipair?~1pxGHH~16011| #|\x0;icar~1pxGHH~16012|)
 #|\x0;comparator-comparison-procedure~1pxGHH~11484| #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~19339| |\x0;b~1pxGHH~19340|)) #|\x0;icar~1pxGHH~16012|)
 #|\x0;comparator-hash-function~1pxGHH~11485| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19345|)) #|\x0;icar~1pxGHH~16012|)
 #|\x0;make-comparator~1pxGHH~11489|)
 #f #( #(|\x0;make-icdr-comparator~1pxGHH~19248| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19313|)) #|\x0;comparator-type-test-procedure~1pxGHH~11494| #f #( #(|\x0;test-proc~1pxGHH~19315| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19328|)) #|\x0;ipair?~1pxGHH~16011| #|\x0;icdr~1pxGHH~16013|)
 #|\x0;comparator-comparison-procedure~1pxGHH~11484| #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~19320| |\x0;b~1pxGHH~19321|)) #|\x0;icdr~1pxGHH~16013|)
 #|\x0;comparator-hash-function~1pxGHH~11485| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19326|)) #|\x0;icdr~1pxGHH~16013|)
 #|\x0;make-comparator~1pxGHH~11489|)
 #f #( #(|\x0;make-improper-ilist-comparator~1pxGHH~19249| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19311|)) #|\x0;make-comparator~1pxGHH~11489|)
 #f #( #(|\x0;make-improper-ilist-comparison~1pxGHH~19250| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19285|)) #|\x0;comparator-comparison-procedure~1pxGHH~11484| #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~19291| |\x0;b~1pxGHH~19292|)) #|\x0;ipair?~1pxGHH~16011|)
)
 #f #( #(|\x0;improper-list-type~1pxGHH~19251| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19277|)) #|\x0;ipair?~1pxGHH~16011|)
 #f #( #(|\x0;real-comparison~1pxGHH~19252| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~19268| |\x0;b~1pxGHH~19269|)))
 #f #( #(|\x0;make-improper-ilist-hash~1pxGHH~19253| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19255|)) #|\x0;comparator-hash-function~1pxGHH~11485| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19260|)) #|\x0;ipair?~1pxGHH~16011| #|\x0;icar~1pxGHH~16012| #|\x0;icdr~1pxGHH~16013|)
)
 #values #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;car-K~1pxGHH~19369| |\x0;cdr-K~1pxGHH~19370|)))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19351|)))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19332|)))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19313|)))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;K~1pxGHH~19311|)))
 #apply #|\x0;comparator-type-test-procedure~1pxGHH~11494| #f #( #(|\x0;test-proc~1pxGHH~19373| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19375|)) #|\x0;ipair?~1pxGHH~16011| #|\x0;icar~1pxGHH~16012| #|\x0;icdr~1pxGHH~16013|)
 #|\x0;comparator-hash-function~1pxGHH~11485| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~19367|)) #|\x0;icar~1pxGHH~16012| #|\x0;icdr~1pxGHH~16013|)
 #|\x0;make-comparator~1pxGHH~11489| #|\x0;comparator-comparison-procedure~1pxGHH~11484| #|\x0;comparator-comparison-procedure~1pxGHH~11484| #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;a~1pxGHH~19387| |\x0;b~1pxGHH~19388|)) #|\x0;icar~1pxGHH~16012| #|\x0;icdr~1pxGHH~16013|)
)
 (srfi 116 comparators) ((ipair-comparator variable |\x0;ipair-comparator~1pxGHH~19244| (0) #f (srfi 116 comparators)) (ilist-comparator variable |\x0;ilist-comparator~1pxGHH~19246| (0) #f (srfi 116 comparators)) (make-ipair-comparator variable |\x0;make-ipair-comparator~1pxGHH~19242| (0) #f (srfi 116 comparators)) (make-ilist-comparator variable |\x0;make-ilist-comparator~1pxGHH~19245| (0) #f (srfi 116 comparators)) (make-improper-ilist-comparator variable |\x0;make-improper-ilist-comparator~1pxGHH~19249| (0) #f (srfi 116 comparators)) (make-icar-comparator variable |\x0;make-icar-comparator~1pxGHH~19247| (0) #f (srfi 116 comparators)) (make-icdr-comparator variable |\x0;make-icdr-comparator~1pxGHH~19248| (0) #f (srfi 116 comparators))) (((srfi 114) 0) ((srfi 116 ilists) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~19216| |\x0;build~1pxGHH~18028| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~19393| #ex:make-library #ex:register-library! #values)
 #f)
))
