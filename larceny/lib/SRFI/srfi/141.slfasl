#!fasl
(define .petit-bootstrap-id-6dce79516ea594d3dd80c5deca257811 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/141.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-6dce79516ea594d3dd80c5deca257811 0
'#(#f #( #f #ex:unspecified #|\x0;balanced-remainder~1pxGHH~49696| #|\x0;balanced-quotient~1pxGHH~49695| #|\x0;balanced/~1pxGHH~49694| #|\x0;round-remainder~1pxGHH~49693| #|\x0;round-quotient~1pxGHH~49692| #|\x0;divisible?~1pxGHH~49691| #|\x0;round/~1pxGHH~49690| #|\x0;floor+/-~1pxGHH~49689| #|\x0;floor-/+~1pxGHH~49688| #|\x0;euclidean-remainder~1pxGHH~49687| #|\x0;euclidean-quotient~1pxGHH~49686| #|\x0;euclidean/~1pxGHH~49685| #|\x0;ceiling-remainder~1pxGHH~49684| #|\x0;ceiling-quotient~1pxGHH~49683| #|\x0;ceiling+/+~1pxGHH~49682| #|\x0;ceiling-/-~1pxGHH~49681| #|\x0;ceiling/~1pxGHH~49680| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~49673| 0 1 2 3)) (3 (((balanced-remainder) variable |\x0;balanced-remainder~1pxGHH~49696| (0) #f (srfi 141)) ((balanced-quotient) variable |\x0;balanced-quotient~1pxGHH~49695| (0) #f (srfi 141)) ((balanced/) variable |\x0;balanced/~1pxGHH~49694| (0) #f (srfi 141)) ((round-remainder) variable |\x0;round-remainder~1pxGHH~49693| (0) #f (srfi 141)) ((round-quotient) variable |\x0;round-quotient~1pxGHH~49692| (0) #f (srfi 141)) ((divisible?) variable |\x0;divisible?~1pxGHH~49691| (0) #f (srfi 141)) ((round/) variable |\x0;round/~1pxGHH~49690| (0) #f (srfi 141)) ((floor+/-) variable |\x0;floor+/-~1pxGHH~49689| (0) #f (srfi 141)) ((floor-/+) variable |\x0;floor-/+~1pxGHH~49688| (0) #f (srfi 141)) ((euclidean-remainder) variable |\x0;euclidean-remainder~1pxGHH~49687| (0) #f (srfi 141)) ((euclidean-quotient) variable |\x0;euclidean-quotient~1pxGHH~49686| (0) #f (srfi 141)) ((euclidean/) variable |\x0;euclidean/~1pxGHH~49685| (0) #f (srfi 141)) ((ceiling-remainder) variable |\x0;ceiling-remainder~1pxGHH~49684| (0) #f (srfi 141)) ((ceiling-quotient) variable |\x0;ceiling-quotient~1pxGHH~49683| (0) #f (srfi 141)) ((ceiling+/+) variable |\x0;ceiling+/+~1pxGHH~49682| (0) #f (srfi 141)) ((ceiling-/-) variable |\x0;ceiling-/-~1pxGHH~49681| (0) #f (srfi 141)) ((ceiling/) variable |\x0;ceiling/~1pxGHH~49680| (0) #f (srfi 141)) ((receive) macro |\x0;receive~1pxGHH~49661| (0) #f (srfi 141)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~49662|) variable |\x0;x~1pxGHH~49664| (0) #f (srfi 141)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~49662|) . #f) ((formals) . #f) ((expression) . #f) ((body) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49664|)) #list? call-with-values (|\x0;env~1pxGHH~49673|) (srfi 141) #ex:syntax-rename lambda #ex:invalid-form)
 |\x0;receive~1pxGHH~49661| #ex:register-macro! #values)
 #f #( ((0 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (4752 . #(|\x0;divide~1pxGHH~49752| #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49794| |\x0;d~1pxGHH~49795| |\x0;adjust~1pxGHH~49796| |\x0;leave~1pxGHH~49797|))) (7629 . #(|\x0;balanced-remainder~1pxGHH~49696| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49698| |\x0;y~1pxGHH~49699|))) (7882 . #(|\x0;balanced-quotient~1pxGHH~49695| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49705| |\x0;y~1pxGHH~49706|))) (8135 . #(|\x0;balanced/~1pxGHH~49694| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49712| |\x0;y~1pxGHH~49713|))) (8414 . #(|\x0;round-remainder~1pxGHH~49693| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49725| |\x0;d~1pxGHH~49726|))) (10470 . #(|\x0;round-quotient~1pxGHH~49692| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49736| |\x0;d~1pxGHH~49737|))) (12334 . #(|\x0;round/~1pxGHH~49690| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49750| |\x0;d~1pxGHH~49751|))) (16527 . #(|\x0;floor-/+~1pxGHH~49688| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49822| |\x0;d~1pxGHH~49823|))) (17610 . #(|\x0;euclidean-remainder~1pxGHH~49687| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49833| |\x0;d~1pxGHH~49834|))) (21927 . #(|\x0;euclidean-quotient~1pxGHH~49686| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49860| |\x0;d~1pxGHH~49861|))) (25838 . #(|\x0;euclidean/~1pxGHH~49685| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49887| |\x0;d~1pxGHH~49888|))) (30421 . #(|\x0;ceiling-remainder~1pxGHH~49684| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49910| |\x0;d~1pxGHH~49911|))) (34401 . #(|\x0;ceiling-quotient~1pxGHH~49683| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49936| |\x0;d~1pxGHH~49937|))) (38161 . #(|\x0;ceiling+/+~1pxGHH~49682| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49962| |\x0;d~1pxGHH~49963|))) (38970 . #(|\x0;ceiling-/-~1pxGHH~49681| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49970| |\x0;d~1pxGHH~49971|))) (39991 . #(|\x0;ceiling/~1pxGHH~49680| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49982| |\x0;d~1pxGHH~49983|)))) #ex:undefined #|\x0;balanced-remainder~1pxGHH~49696| #|\x0;balanced-quotient~1pxGHH~49695| #|\x0;balanced/~1pxGHH~49694| #|\x0;round-remainder~1pxGHH~49693| #|\x0;round-quotient~1pxGHH~49692| #|\x0;divisible?~1pxGHH~49691| #|\x0;round/~1pxGHH~49690| #|\x0;floor+/-~1pxGHH~49689| #|\x0;floor-/+~1pxGHH~49688| #|\x0;euclidean-remainder~1pxGHH~49687| #|\x0;euclidean-quotient~1pxGHH~49686| #|\x0;euclidean/~1pxGHH~49685| #|\x0;ceiling-remainder~1pxGHH~49684| #|\x0;ceiling-quotient~1pxGHH~49683| #|\x0;ceiling+/+~1pxGHH~49682| #|\x0;ceiling-/-~1pxGHH~49681| #|\x0;ceiling/~1pxGHH~49680| #f #( #(#f #f 12 src/Build/compile-standard-libraries.sch #(20 1 0) (t0f0010 t0f0020 t0f0030 t0f0040 t0f0050 t0f0060 t0f0070 t0f0080 t0f0090 t0f00a0 t0f00b0 t0f00c0)) #|\x0;ceiling/~1pxGHH~49680| #|\x0;ceiling-quotient~1pxGHH~49683| #|\x0;ceiling-remainder~1pxGHH~49684| #|\x0;euclidean/~1pxGHH~49685| #|\x0;euclidean-quotient~1pxGHH~49686| #|\x0;euclidean-remainder~1pxGHH~49687| #|\x0;round/~1pxGHH~49690| #|\x0;round-quotient~1pxGHH~49692| #|\x0;round-remainder~1pxGHH~49693| #|\x0;balanced/~1pxGHH~49694| #|\x0;balanced-quotient~1pxGHH~49695| #|\x0;balanced-remainder~1pxGHH~49696| #values)
 #values #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49982| |\x0;d~1pxGHH~49983|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49936| |\x0;d~1pxGHH~49937|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49910| |\x0;d~1pxGHH~49911|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49887| |\x0;d~1pxGHH~49888|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49860| |\x0;d~1pxGHH~49861|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49833| |\x0;d~1pxGHH~49834|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49750| |\x0;d~1pxGHH~49751|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49736| |\x0;d~1pxGHH~49737|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;n~1pxGHH~49725| |\x0;d~1pxGHH~49726|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49712| |\x0;y~1pxGHH~49713|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49705| |\x0;y~1pxGHH~49706|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~49698| |\x0;y~1pxGHH~49699|)))
 #apply #odd? #even? #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49702| |\x0;r~1pxGHH~49703|)))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49709| |\x0;r~1pxGHH~49710|)))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49716| |\x0;r~1pxGHH~49717|)) #         #values)
 #call-with-values #bignum? #bignum? #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49733| |\x0;r~1pxGHH~49734|)))
 #call-with-values #bignum? #bignum? #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49744| |\x0;r~1pxGHH~49745|)))
 #call-with-values #bignum? #bignum? #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49762| |\x0;r~1pxGHH~49763|)) #values)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49765| |\x0;r~1pxGHH~49766|)) #values)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49770| |\x0;r~1pxGHH~49771|)) #values)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49773| |\x0;r~1pxGHH~49774|)) #values)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49778| |\x0;r~1pxGHH~49779|)) #values)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49781| |\x0;r~1pxGHH~49782|)) #values)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49788| |\x0;r~1pxGHH~49789|)) #values)
 #bignum? #bignum? #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49846| |\x0;r~1pxGHH~49847|)))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49853| |\x0;r~1pxGHH~49854|)))
 #call-with-values #ceiling #floor #bignum? #bignum? #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49873| |\x0;r~1pxGHH~49874|)))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49880| |\x0;r~1pxGHH~49881|)))
 #call-with-values #ceiling #floor #bignum? #bignum? #ceiling #floor #bignum? #bignum? #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49923| |\x0;r~1pxGHH~49924|)))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49933| |\x0;r~1pxGHH~49934|)))
 #call-with-values #ceiling #bignum? #bignum? #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49949| |\x0;r~1pxGHH~49950|)))
 #call-with-values #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;q~1pxGHH~49959| |\x0;r~1pxGHH~49960|)))
 #call-with-values #ceiling #bignum? #bignum? #ceiling)
 (srfi 141) ((ceiling/ variable |\x0;ceiling/~1pxGHH~49680| (0) #f (srfi 141)) (ceiling-quotient variable |\x0;ceiling-quotient~1pxGHH~49683| (0) #f (srfi 141)) (ceiling-remainder variable |\x0;ceiling-remainder~1pxGHH~49684| (0) #f (srfi 141)) (floor/ variable floor/ (0) #f (larceny PRIMITIVES)) (floor-quotient variable floor-quotient (0) #f (larceny PRIMITIVES)) (floor-remainder variable floor-remainder (0) #f (larceny PRIMITIVES)) (truncate/ variable truncate/ (0) #f (larceny PRIMITIVES)) (truncate-quotient variable truncate-quotient (0) #f (larceny PRIMITIVES)) (truncate-remainder variable truncate-remainder (0) #f (larceny PRIMITIVES)) (round/ variable |\x0;round/~1pxGHH~49690| (0) #f (srfi 141)) (round-quotient variable |\x0;round-quotient~1pxGHH~49692| (0) #f (srfi 141)) (round-remainder variable |\x0;round-remainder~1pxGHH~49693| (0) #f (srfi 141)) (euclidean/ variable |\x0;euclidean/~1pxGHH~49685| (0) #f (srfi 141)) (euclidean-quotient variable |\x0;euclidean-quotient~1pxGHH~49686| (0) #f (srfi 141)) (euclidean-remainder variable |\x0;euclidean-remainder~1pxGHH~49687| (0) #f (srfi 141)) (balanced/ variable |\x0;balanced/~1pxGHH~49694| (0) #f (srfi 141)) (balanced-quotient variable |\x0;balanced-quotient~1pxGHH~49695| (0) #f (srfi 141)) (balanced-remainder variable |\x0;balanced-remainder~1pxGHH~49696| (0) #f (srfi 141))) (((scheme base) 0)) (|\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~50006| #ex:make-library #ex:register-library! #values)
 #f)
))
