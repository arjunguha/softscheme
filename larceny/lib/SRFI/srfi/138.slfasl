#!fasl
(define .petit-bootstrap-id-68f1c6ada0d68c77a58832e33a04f000 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/138.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-68f1c6ada0d68c77a58832e33a04f000 0
'#(#f #( #f #ex:unspecified #|\x0;write-outfile-really~1pxGHH~49356| #|\x0;write-outfile~1pxGHH~49355| #|\x0;name-of-outfile~1pxGHH~49354| #|\x0;name-of-pgmfile~1pxGHH~49353| #|\x0;file-basename~1pxGHH~49352| #|\x0;file-suffix~1pxGHH~49351| #|\x0;recognized-library-suffixes~1pxGHH~49350| #|\x0;recognized-program-suffixes~1pxGHH~49349| #|\x0;compile-r7rs-shared~1pxGHH~49348| #|\x0;compile-r7rs~1pxGHH~49347| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~49539| 0 1 2 3 4 5 6 7 8 9 10 11 12) (|\x0;env~1pxGHH~49526| 13 1 2 3 4 5 6 7 8 9 10 11 12) (|\x0;env~1pxGHH~49484| 14 15 16 7 8 9 10 11 12) (|\x0;env~1pxGHH~49459| 17 15 16 7 8 9 10 11 12)) (17 (((dummy |\x0;c~1pxGHH~49445|) . #f) ((tE |\x0;c~1pxGHH~49442|) . #f) ((tP |\x0;c~1pxGHH~49442|) . #f) ((first-time? |\x0;c~1pxGHH~49442|) . #f) ((body1 |\x0;c~1pxGHH~49442|) . #f) ((body2 |\x0;c~1pxGHH~49442|) . #f))) (16 (((x |\x0;c~1pxGHH~49445|) variable |\x0;x~1pxGHH~49447| (0) #f (srfi 138)))) (15 ()) (14 (((dummy |\x0;c~1pxGHH~49445|) . #f) ((t |\x0;c~1pxGHH~49442|) . #f) ((p0 |\x0;c~1pxGHH~49442|) . #f) ((e0 |\x0;c~1pxGHH~49442|) . #f) ((x |\x0;c~1pxGHH~49442|) . #f) ((body1 |\x0;c~1pxGHH~49442|) . #f) ((body2 |\x0;c~1pxGHH~49442|) . #f))) (13 (((dummy |\x0;c~1pxGHH~49514|) . #f) ((var |\x0;c~1pxGHH~49511| |\x0;c~1pxGHH~49442|) . #f) ((param |\x0;c~1pxGHH~49511| |\x0;c~1pxGHH~49442|) . #f) ((flag |\x0;c~1pxGHH~49511| |\x0;c~1pxGHH~49442|) . #f))) (12 (((write-outfile-really) variable |\x0;write-outfile-really~1pxGHH~49356| (0) #f (srfi 138)) ((write-outfile) variable |\x0;write-outfile~1pxGHH~49355| (0) #f (srfi 138)) ((name-of-outfile) variable |\x0;name-of-outfile~1pxGHH~49354| (0) #f (srfi 138)) ((name-of-pgmfile) variable |\x0;name-of-pgmfile~1pxGHH~49353| (0) #f (srfi 138)) ((file-basename) variable |\x0;file-basename~1pxGHH~49352| (0) #f (srfi 138)) ((file-suffix) variable |\x0;file-suffix~1pxGHH~49351| (0) #f (srfi 138)) ((recognized-library-suffixes) variable |\x0;recognized-library-suffixes~1pxGHH~49350| (0) #f (srfi 138)) ((recognized-program-suffixes) variable |\x0;recognized-program-suffixes~1pxGHH~49349| (0) #f (srfi 138)) ((compile-r7rs-shared) variable |\x0;compile-r7rs-shared~1pxGHH~49348| (0) #f (srfi 138)) ((compile-r7rs) variable |\x0;compile-r7rs~1pxGHH~49347| (0) #f (srfi 138)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((case-lambda) macro |\x0;case-lambda~1pxGHH~3944| (0) #f (rnrs control)) ((write-simple) variable write-simple (0) #f (larceny PRIMITIVES)) ((write-shared) variable write-shared (0) #f (larceny PRIMITIVES)) ((write) variable write (0) #f (larceny PRIMITIVES)) ((display) variable display (0) #f (larceny PRIMITIVES)) ((with-output-to-file) variable with-output-to-file (0) #f (larceny PRIMITIVES)) ((with-input-from-file) variable with-input-from-file (0) #f (larceny PRIMITIVES)) ((open-output-file) variable open-output-file (0) #f (larceny PRIMITIVES)) ((open-input-file) variable open-input-file (0) #f (larceny PRIMITIVES)) ((open-binary-output-file) variable open-file-output-port (0) #f (larceny PRIMITIVES)) ((open-binary-input-file) variable open-file-input-port (0) #f (larceny PRIMITIVES)) ((file-exists?) variable file-exists? (0) #f (larceny PRIMITIVES)) ((delete-file) variable delete-file (0) #f (larceny PRIMITIVES)) ((call-with-output-file) variable call-with-output-file (0) #f (larceny PRIMITIVES)) ((call-with-input-file) variable call-with-input-file (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((lset-diff+intersection!) variable |\x0;lset-diff+intersection!~1pxGHH~5105| (0) #f (srfi :1 lists)) ((lset-diff+intersection) variable |\x0;lset-diff+intersection~1pxGHH~5104| (0) #f (srfi :1 lists)) ((lset-xor!) variable |\x0;lset-xor!~1pxGHH~5103| (0) #f (srfi :1 lists)) ((lset-xor) variable |\x0;lset-xor~1pxGHH~5102| (0) #f (srfi :1 lists)) ((lset-difference!) variable |\x0;lset-difference!~1pxGHH~5101| (0) #f (srfi :1 lists)) ((lset-difference) variable |\x0;lset-difference~1pxGHH~5100| (0) #f (srfi :1 lists)) ((lset-intersection!) variable |\x0;lset-intersection!~1pxGHH~5099| (0) #f (srfi :1 lists)) ((lset-intersection) variable |\x0;lset-intersection~1pxGHH~5098| (0) #f (srfi :1 lists)) ((lset-union!) variable |\x0;lset-union!~1pxGHH~5097| (0) #f (srfi :1 lists)) ((lset-union) variable |\x0;lset-union~1pxGHH~5096| (0) #f (srfi :1 lists)) ((lset-adjoin) variable |\x0;lset-adjoin~1pxGHH~5095| (0) #f (srfi :1 lists)) ((lset=) variable |\x0;lset=~1pxGHH~5094| (0) #f (srfi :1 lists)) ((lset<=) variable |\x0;lset<=~1pxGHH~5093| (0) #f (srfi :1 lists)) ((alist-delete!) variable |\x0;alist-delete!~1pxGHH~5079| (0) #f (srfi :1 lists)) ((alist-delete) variable |\x0;alist-delete~1pxGHH~5078| (0) #f (srfi :1 lists)) ((alist-copy) variable |\x0;alist-copy~1pxGHH~5077| (0) #f (srfi :1 lists)) ((alist-cons) variable |\x0;alist-cons~1pxGHH~5076| (0) #f (srfi :1 lists)) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((delete-duplicates!) variable |\x0;delete-duplicates!~1pxGHH~5075| (0) #f (srfi :1 lists)) ((delete!) variable |\x0;delete!~1pxGHH~5073| (0) #f (srfi :1 lists)) ((delete-duplicates) variable |\x0;delete-duplicates~1pxGHH~5074| (0) #f (srfi :1 lists)) ((delete) variable |\x0;delete~1pxGHH~5072| (0) #f (srfi :1 lists)) ((break!) variable |\x0;break!~1pxGHH~5087| (0) #f (srfi :1 lists)) ((span!) variable |\x0;span!~1pxGHH~5085| (0) #f (srfi :1 lists)) ((break) variable |\x0;break~1pxGHH~5086| (0) #f (srfi :1 lists)) ((span) variable |\x0;span~1pxGHH~5084| (0) #f (srfi :1 lists)) ((take-while!) variable |\x0;take-while!~1pxGHH~5083| (0) #f (srfi :1 lists)) ((drop-while) variable |\x0;drop-while~1pxGHH~5082| (0) #f (srfi :1 lists)) ((take-while) variable |\x0;take-while~1pxGHH~5081| (0) #f (srfi :1 lists)) ((list-index) variable |\x0;list-index~1pxGHH~5090| (0) #f (srfi :1 lists)) ((every) variable |\x0;every~1pxGHH~5089| (0) #f (srfi :1 lists)) ((any) variable |\x0;any~1pxGHH~5088| (0) #f (srfi :1 lists)) ((find-tail) variable |\x0;find-tail~1pxGHH~5080| (0) #f (srfi :1 lists)) ((find) variable find (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((remove!) variable |\x0;remove!~1pxGHH~5071| (0) #f (srfi :1 lists)) ((partition!) variable |\x0;partition!~1pxGHH~5069| (0) #f (srfi :1 lists)) ((filter!) variable |\x0;filter!~1pxGHH~5068| (0) #f (srfi :1 lists)) ((remove) variable |\x0;remove~1pxGHH~5070| (0) #f (srfi :1 lists)) ((partition) variable partition (0) #f (larceny PRIMITIVES)) ((filter) variable filter (0) #f (larceny PRIMITIVES)) ((map-in-order) variable |\x0;map-in-order~1pxGHH~5067| (0) #f (srfi :1 lists)) ((filter-map) variable |\x0;filter-map~1pxGHH~5066| (0) #f (srfi :1 lists)) ((pair-for-each) variable |\x0;pair-for-each~1pxGHH~5064| (0) #f (srfi :1 lists)) ((map!) variable |\x0;map!~1pxGHH~5065| (0) #f (srfi :1 lists)) ((append-map!) variable |\x0;append-map!~1pxGHH~5062| (0) #f (srfi :1 lists)) ((append-map) variable |\x0;append-map~1pxGHH~5061| (0) #f (srfi :1 lists)) ((reduce-right) variable |\x0;reduce-right~1pxGHH~5060| (0) #f (srfi :1 lists)) ((pair-fold-right) variable |\x0;pair-fold-right~1pxGHH~5057| (0) #f (srfi :1 lists)) ((unfold-right) variable |\x0;unfold-right~1pxGHH~5054| (0) #f (srfi :1 lists)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0) #f (rnrs lists)) ((reduce) variable |\x0;reduce~1pxGHH~5059| (0) #f (srfi :1 lists)) ((pair-fold) variable |\x0;pair-fold~1pxGHH~5058| (0) #f (srfi :1 lists)) ((unfold) variable |\x0;unfold~1pxGHH~5055| (0) #f (srfi :1 lists)) ((fold) variable |\x0;fold~1pxGHH~5056| (0) #f (srfi :1 lists)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((count) variable |\x0;count~1pxGHH~5053| (0) #f (srfi :1 lists)) ((unzip5) variable |\x0;unzip5~1pxGHH~5042| (0) #f (srfi :1 lists)) ((unzip4) variable |\x0;unzip4~1pxGHH~5041| (0) #f (srfi :1 lists)) ((unzip3) variable |\x0;unzip3~1pxGHH~5040| (0) #f (srfi :1 lists)) ((unzip2) variable |\x0;unzip2~1pxGHH~5039| (0) #f (srfi :1 lists)) ((unzip1) variable |\x0;unzip1~1pxGHH~5038| (0) #f (srfi :1 lists)) ((zip) variable |\x0;zip~1pxGHH~5016| (0) #f (srfi :1 lists)) ((append-reverse!) variable |\x0;append-reverse!~1pxGHH~5045| (0) #f (srfi :1 lists)) ((append-reverse) variable |\x0;append-reverse~1pxGHH~5044| (0) #f (srfi :1 lists)) ((reverse!) variable |\x0;reverse!~1pxGHH~5091| (0) #f (srfi :1 lists)) ((concatenate!) variable |\x0;concatenate!~1pxGHH~5047| (0) #f (srfi :1 lists)) ((append!) variable |\x0;append!~1pxGHH~5043| (0) #f (srfi :1 lists)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((concatenate) variable |\x0;concatenate~1pxGHH~5046| (0) #f (srfi :1 lists)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((length+) variable |\x0;length+~1pxGHH~5015| (0) #f (srfi :1 lists)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((last-pair) variable |\x0;last-pair~1pxGHH~5037| (0) #f (srfi :1 lists)) ((last) variable |\x0;last~1pxGHH~5036| (0) #f (srfi :1 lists)) ((split-at!) variable |\x0;split-at!~1pxGHH~5035| (0) #f (srfi :1 lists)) ((split-at) variable |\x0;split-at~1pxGHH~5034| (0) #f (srfi :1 lists)) ((drop-right!) variable |\x0;drop-right!~1pxGHH~5033| (0) #f (srfi :1 lists)) ((take!) variable |\x0;take!~1pxGHH~5030| (0) #f (srfi :1 lists)) ((drop-right) variable |\x0;drop-right~1pxGHH~5032| (0) #f (srfi :1 lists)) ((take-right) variable |\x0;take-right~1pxGHH~5031| (0) #f (srfi :1 lists)) ((drop) variable |\x0;drop~1pxGHH~5029| (0) #f (srfi :1 lists)) ((take) variable |\x0;take~1pxGHH~5028| (0) #f (srfi :1 lists)) ((car+cdr) variable |\x0;car+cdr~1pxGHH~5027| (0) #f (srfi :1 lists)) ((tenth) variable |\x0;tenth~1pxGHH~5026| (0) #f (srfi :1 lists)) ((ninth) variable |\x0;ninth~1pxGHH~5025| (0) #f (srfi :1 lists)) ((eighth) variable |\x0;eighth~1pxGHH~5024| (0) #f (srfi :1 lists)) ((seventh) variable |\x0;seventh~1pxGHH~5023| (0) #f (srfi :1 lists)) ((sixth) variable |\x0;sixth~1pxGHH~5022| (0) #f (srfi :1 lists)) ((fifth) variable |\x0;fifth~1pxGHH~5021| (0) #f (srfi :1 lists)) ((fourth) variable |\x0;fourth~1pxGHH~5020| (0) #f (srfi :1 lists)) ((third) variable |\x0;third~1pxGHH~5019| (0) #f (srfi :1 lists)) ((second) variable |\x0;second~1pxGHH~5018| (0) #f (srfi :1 lists)) ((first) variable |\x0;first~1pxGHH~5017| (0) #f (srfi :1 lists)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((list=) variable |\x0;list=~1pxGHH~5014| (0) #f (srfi :1 lists)) ((null-list?) variable |\x0;null-list?~1pxGHH~5013| (0) #f (srfi :1 lists)) ((not-pair?) variable |\x0;not-pair?~1pxGHH~5012| (0) #f (srfi :1 lists)) ((dotted-list?) variable |\x0;dotted-list?~1pxGHH~5010| (0) #f (srfi :1 lists)) ((circular-list?) variable |\x0;circular-list?~1pxGHH~5011| (0) #f (srfi :1 lists)) ((proper-list?) variable |\x0;proper-list?~1pxGHH~5009| (0) #f (srfi :1 lists)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((iota) variable |\x0;iota~1pxGHH~5007| (0) #f (srfi :1 lists)) ((circular-list) variable |\x0;circular-list~1pxGHH~5008| (0) #f (srfi :1 lists)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list-tabulate) variable |\x0;list-tabulate~1pxGHH~5006| (0) #f (srfi :1 lists)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((cons*) variable cons* (0) #f (larceny PRIMITIVES)) ((xcons) variable |\x0;xcons~1pxGHH~5005| (0) #f (srfi :1 lists)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((textual-split) variable textual-split (0) #f (larceny PRIMITIVES)) ((textual-replicate) variable textual-replicate (0) #f (larceny PRIMITIVES)) ((textual-remove) variable textual-remove (0) #f (larceny PRIMITIVES)) ((textual-filter) variable textual-filter (0) #f (larceny PRIMITIVES)) ((textual-count) variable textual-count (0) #f (larceny PRIMITIVES)) ((textual-for-each-index) variable textual-for-each-index (0) #f (larceny PRIMITIVES)) ((textual-map-index) variable textual-map-index (0) #f (larceny PRIMITIVES)) ((textual-for-each) variable textual-for-each (0) #f (larceny PRIMITIVES)) ((textual-map) variable textual-map (0) #f (larceny PRIMITIVES)) ((textual-fold-right) variable textual-fold-right (0) #f (larceny PRIMITIVES)) ((textual-fold) variable textual-fold (0) #f (larceny PRIMITIVES)) ((textual-join) variable textual-join (0) #f (larceny PRIMITIVES)) ((textual-concatenate-reverse) variable textual-concatenate-reverse (0) #f (larceny PRIMITIVES)) ((textual-concatenate) variable textual-concatenate (0) #f (larceny PRIMITIVES)) ((textual-append) variable textual-append (0) #f (larceny PRIMITIVES)) ((textual-titlecase) variable textual-titlecase (0) #f (larceny PRIMITIVES)) ((textual-foldcase) variable textual-foldcase (0) #f (larceny PRIMITIVES)) ((textual-downcase) variable textual-downcase (0) #f (larceny PRIMITIVES)) ((textual-upcase) variable textual-upcase (0) #f (larceny PRIMITIVES)) ((textual-contains-right) variable textual-contains-right (0) #f (larceny PRIMITIVES)) ((textual-contains) variable textual-contains (0) #f (larceny PRIMITIVES)) ((textual-skip-right) variable textual-skip-right (0) #f (larceny PRIMITIVES)) ((textual-skip) variable textual-skip (0) #f (larceny PRIMITIVES)) ((textual-index-right) variable textual-index-right (0) #f (larceny PRIMITIVES)) ((textual-index) variable textual-index (0) #f (larceny PRIMITIVES)) ((textual-suffix?) variable textual-suffix? (0) #f (larceny PRIMITIVES)) ((textual-prefix?) variable textual-prefix? (0) #f (larceny PRIMITIVES)) ((textual-suffix-length) variable textual-suffix-length (0) #f (larceny PRIMITIVES)) ((textual-prefix-length) variable textual-prefix-length (0) #f (larceny PRIMITIVES)) ((textual-ci>=?) variable textual-ci>=? (0) #f (larceny PRIMITIVES)) ((textual>=?) variable textual>=? (0) #f (larceny PRIMITIVES)) ((textual-ci<=?) variable textual-ci<=? (0) #f (larceny PRIMITIVES)) ((textual<=?) variable textual<=? (0) #f (larceny PRIMITIVES)) ((textual-ci>?) variable textual-ci>? (0) #f (larceny PRIMITIVES)) ((textual>?) variable textual>? (0) #f (larceny PRIMITIVES)) ((textual-ci<?) variable textual-ci<? (0) #f (larceny PRIMITIVES)) ((textual<?) variable textual<? (0) #f (larceny PRIMITIVES)) ((textual-ci=?) variable textual-ci=? (0) #f (larceny PRIMITIVES)) ((textual=?) variable textual=? (0) #f (larceny PRIMITIVES)) ((textual-replace) variable textual-replace (0) #f (larceny PRIMITIVES)) ((textual-trim-both) variable textual-trim-both (0) #f (larceny PRIMITIVES)) ((textual-trim-right) variable textual-trim-right (0) #f (larceny PRIMITIVES)) ((textual-trim) variable textual-trim (0) #f (larceny PRIMITIVES)) ((textual-pad-right) variable textual-pad-right (0) #f (larceny PRIMITIVES)) ((textual-pad) variable textual-pad (0) #f (larceny PRIMITIVES)) ((textual-drop-right) variable textual-drop-right (0) #f (larceny PRIMITIVES)) ((textual-drop) variable textual-drop (0) #f (larceny PRIMITIVES)) ((textual-take-right) variable textual-take-right (0) #f (larceny PRIMITIVES)) ((textual-take) variable textual-take (0) #f (larceny PRIMITIVES)) ((textual-copy) variable textual-copy (0) #f (larceny PRIMITIVES)) ((subtextual) variable subtextual (0) #f (larceny PRIMITIVES)) ((subtext) variable subtext (0) #f (larceny PRIMITIVES)) ((textual-ref) variable textual-ref (0) #f (larceny PRIMITIVES)) ((text-ref) variable text-ref (0) #f (larceny PRIMITIVES)) ((textual-length) variable textual-length (0) #f (larceny PRIMITIVES)) ((text-length) variable text-length (0) #f (larceny PRIMITIVES)) ((utf16le->text) variable utf16le->text (0) #f (larceny PRIMITIVES)) ((utf16->text) variable utf16->text (0) #f (larceny PRIMITIVES)) ((utf16be->text) variable utf16be->text (0) #f (larceny PRIMITIVES)) ((utf8->text) variable utf8->text (0) #f (larceny PRIMITIVES)) ((textual->utf16le) variable textual->utf16le (0) #f (larceny PRIMITIVES)) ((textual->utf16) variable textual->utf16 (0) #f (larceny PRIMITIVES)) ((textual->utf16be) variable textual->utf16be (0) #f (larceny PRIMITIVES)) ((textual->utf8) variable textual->utf8 (0) #f (larceny PRIMITIVES)) ((reverse-list->text) variable reverse-list->text (0) #f (larceny PRIMITIVES)) ((list->text) variable list->text (0) #f (larceny PRIMITIVES)) ((vector->text) variable vector->text (0) #f (larceny PRIMITIVES)) ((string->text) variable string->text (0) #f (larceny PRIMITIVES)) ((textual->list) variable textual->list (0) #f (larceny PRIMITIVES)) ((textual->vector) variable textual->vector (0) #f (larceny PRIMITIVES)) ((textual->string) variable textual->string (0) #f (larceny PRIMITIVES)) ((textual->text) variable textual->text (0) #f (larceny PRIMITIVES)) ((text-unfold-right) variable text-unfold-right (0) #f (larceny PRIMITIVES)) ((text-unfold) variable text-unfold (0) #f (larceny PRIMITIVES)) ((text-tabulate) variable text-tabulate (0) #f (larceny PRIMITIVES)) ((text) variable text (0) #f (larceny PRIMITIVES)) ((make-text) variable make-text (0) #f (larceny PRIMITIVES)) ((textual-any) variable textual-any (0) #f (larceny PRIMITIVES)) ((textual-every) variable textual-every (0) #f (larceny PRIMITIVES)) ((textual-null?) variable textual-null? (0) #f (larceny PRIMITIVES)) ((textual?) variable textual? (0) #f (larceny PRIMITIVES)) ((text?) variable text? (0) #f (larceny PRIMITIVES)) ((assert) macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) ((optimize-c-code) variable optimize-c-code (0) #f (larceny PRIMITIVES)) ((inline-assignment) variable inline-assignment (0) #f (larceny PRIMITIVES)) ((inline-allocation) variable inline-allocation (0) #f (larceny PRIMITIVES)) ((peephole-optimization) variable peephole-optimization (0) #f (larceny PRIMITIVES)) ((local-optimization) variable local-optimization (0) #f (larceny PRIMITIVES)) ((representation-inference) variable representation-inference (0) #f (larceny PRIMITIVES)) ((common-subexpression-elimination) variable common-subexpression-elimination (0) #f (larceny PRIMITIVES)) ((interprocedural-constant-propagation) variable interprocedural-constant-propagation (0) #f (larceny PRIMITIVES)) ((interprocedural-inlining) variable interprocedural-inlining (0) #f (larceny PRIMITIVES)) ((global-optimization) variable global-optimization (0) #f (larceny PRIMITIVES)) ((benchmark-mode) variable benchmark-mode (0) #f (larceny PRIMITIVES)) ((lambda-optimization) variable lambda-optimization (0) #f (larceny PRIMITIVES)) ((parallel-assignment-optimization) variable parallel-assignment-optimization (0) #f (larceny PRIMITIVES)) ((control-optimization) variable control-optimization (0) #f (larceny PRIMITIVES)) ((faster-arithmetic) variable faster-arithmetic (0) #f (larceny PRIMITIVES)) ((integrate-procedures) variable integrate-procedures (0) #f (larceny PRIMITIVES)) ((catch-undefined-globals) variable catch-undefined-globals (0) #f (larceny PRIMITIVES)) ((runtime-safety-checking) variable runtime-safety-checking (0) #f (larceny PRIMITIVES)) ((avoid-space-leaks) variable avoid-space-leaks (0) #f (larceny PRIMITIVES)) ((hygienic-literals) variable hygienic-literals (0) #f (larceny PRIMITIVES)) ((include-source-code) variable include-source-code (0) #f (larceny PRIMITIVES)) ((include-variable-names) variable include-variable-names (0) #f (larceny PRIMITIVES)) ((include-procedure-names) variable include-procedure-names (0) #f (larceny PRIMITIVES)) ((issue-warnings) variable issue-warnings (0) #f (larceny PRIMITIVES)) ((compile-despite-errors) variable compile-despite-errors (0) #f (larceny PRIMITIVES)) ((compiler-switches) variable compiler-switches (0) #f (larceny PRIMITIVES)) ((compile-stale-recklessly) variable |\x0;compile-stale-recklessly~1pxGHH~8305| (0) #f (larceny compile-stale)) ((compile-stale-regardless) variable |\x0;compile-stale-regardless~1pxGHH~8304| (0) #f (larceny compile-stale)) ((compile-stale-cautiously) variable |\x0;compile-stale-cautiously~1pxGHH~8303| (0) #f (larceny compile-stale)) ((compile-stale) variable |\x0;compile-stale~1pxGHH~8302| (0) #f (larceny compile-stale)) ((compile-stale-libraries) variable compile-stale-libraries (0) #f (larceny PRIMITIVES)) ((compile-library) variable |\x0;compile-library~1pxGHH~8300| (0) #f (larceny compile-stale)) ((compile-file) variable |\x0;compile-file~1pxGHH~8299| (0) #f (larceny compile-stale)) ((larceny:current-declared-features) variable larceny:current-declared-features (0) #f (larceny PRIMITIVES)) ((current-directory) variable current-directory (0) #f (larceny PRIMITIVES)) ((current-require-path) variable current-require-path (0) #f (larceny PRIMITIVES)) ((r5rs:require) variable r5rs:require (0) #f (larceny PRIMITIVES)) ((require) variable require (0) #f (larceny PRIMITIVES)) ((load) variable load-r6rs-library-or-program (0) #f (larceny PRIMITIVES)) ((system) variable system (0) #f (larceny PRIMITIVES)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (11 (((pgm) variable |\x0;pgm~1pxGHH~49431| (0) #f (srfi 138)) ((outfile) variable |\x0;outfile~1pxGHH~49432| (0) #f (srfi 138)) ((dirs) variable |\x0;dirs~1pxGHH~49433| (0) #f (srfi 138)) ((dirs2) variable |\x0;dirs2~1pxGHH~49434| (0) #f (srfi 138)) ((features) variable |\x0;features~1pxGHH~49435| (0) #f (srfi 138)))) (10 ()) (9 (((pgmfile) variable |\x0;pgmfile~1pxGHH~49438| (0) #f (srfi 138)) ((outfile) variable |\x0;outfile~1pxGHH~49439| (0) #f (srfi 138)))) (8 ()) (7 (((parameterize-aux |\x0;c~1pxGHH~49442|) macro |\x0;parameterize-aux~1pxGHH~49444| (0) #f (srfi 138)))) (6 (((tempE |\x0;c~1pxGHH~49499| |\x0;c~1pxGHH~49442|) variable |\x0;tempE~1pxGHH~49502| (0) #t (srfi 138)) ((tempP |\x0;c~1pxGHH~49499| |\x0;c~1pxGHH~49442|) variable |\x0;tempP~1pxGHH~49503| (0) #f (srfi 138)) ((first-time? |\x0;c~1pxGHH~49499| |\x0;c~1pxGHH~49442|) variable |\x0;first-time?~1pxGHH~49504| (0) #t (srfi 138)))) (5 ()) (4 (((tempE |\x0;c~1pxGHH~49505| |\x0;c~1pxGHH~49442|) variable |\x0;tempE~1pxGHH~49508| (0) #t (srfi 138)) ((tempP |\x0;c~1pxGHH~49505| |\x0;c~1pxGHH~49442|) variable |\x0;tempP~1pxGHH~49509| (0) #f (srfi 138)) ((first-time? |\x0;c~1pxGHH~49505| |\x0;c~1pxGHH~49442|) variable |\x0;first-time?~1pxGHH~49510| (0) #t (srfi 138)))) (3 ()) (2 (((x |\x0;c~1pxGHH~49514|) variable |\x0;x~1pxGHH~49516| (0) #f (srfi 138)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~49514|) . #f) ((var |\x0;c~1pxGHH~49511| |\x0;c~1pxGHH~49442|) . #f) ((param |\x0;c~1pxGHH~49511| |\x0;c~1pxGHH~49442|) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( ((0 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (4411 . #(|\x0;compile-r7rs-shared~1pxGHH~49348| #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pgm~1pxGHH~49431| |\x0;outfile~1pxGHH~49432| |\x0;dirs~1pxGHH~49433| |\x0;dirs2~1pxGHH~49434| |\x0;features~1pxGHH~49435|)))) #ex:undefined #|\x0;write-outfile-really~1pxGHH~49356| #|\x0;write-outfile~1pxGHH~49355| #|\x0;name-of-outfile~1pxGHH~49354| #|\x0;name-of-pgmfile~1pxGHH~49353| #|\x0;file-basename~1pxGHH~49352| #|\x0;file-suffix~1pxGHH~49351| #|\x0;recognized-library-suffixes~1pxGHH~49350| #|\x0;recognized-program-suffixes~1pxGHH~49349| #|\x0;compile-r7rs-shared~1pxGHH~49348| #|\x0;compile-r7rs~1pxGHH~49347| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (t0f0010)) #|\x0;compile-r7rs~1pxGHH~49347| #values)
 #f #( #(|\x0;compile-r7rs~1pxGHH~49347| #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~49606|) #length #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pgm~1pxGHH~49614|)))
 #apply #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pgm~1pxGHH~49622| |\x0;outfile~1pxGHH~49623|)))
 #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pgm~1pxGHH~49631| |\x0;outfile~1pxGHH~49632| |\x0;dirs~1pxGHH~49633|)))
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pgm~1pxGHH~49640| |\x0;outfile~1pxGHH~49641| |\x0;dirs~1pxGHH~49642| |\x0;dirs2~1pxGHH~49643|)))
 #f #( #(#f #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pgm~1pxGHH~49649| |\x0;outfile~1pxGHH~49650| |\x0;dirs~1pxGHH~49651| |\x0;dirs2~1pxGHH~49652| |\x0;features~1pxGHH~49653|)))
 "unexpected number of arguments" #assertion-violation)
 (".scm" ".sps") (".sld" ".sls") #f #( #(|\x0;file-suffix~1pxGHH~49351| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;filename~1pxGHH~49417|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;suffix~1pxGHH~49427|)) #textual-suffix?)
 #append #filter)
 #f #( #(|\x0;file-basename~1pxGHH~49352| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;filename~1pxGHH~49407|)) #substring)
 #f #( #(|\x0;name-of-pgmfile~1pxGHH~49353| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pathname~1pxGHH~49395|)) #|\x0;member~1pxGHH~1539| ".slfasl" #string-append)
 #f #( #(|\x0;name-of-outfile~1pxGHH~49354| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;pgm~1pxGHH~49379| |\x0;outfile~1pxGHH~49380|)) #|\x0;member~1pxGHH~1539| "a.out")
 #f #( #(|\x0;write-outfile~1pxGHH~49355| #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;outfile~1pxGHH~49372| |\x0;pgmfile~1pxGHH~49373| |\x0;dirs~1pxGHH~49374| |\x0;dirs2~1pxGHH~49375| |\x0;features~1pxGHH~49376|)))
 #f #( #(|\x0;write-outfile-really~1pxGHH~49356| #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;outfile~1pxGHH~49358| |\x0;pgmfile~1pxGHH~49359| |\x0;dirs~1pxGHH~49360| |\x0;dirs2~1pxGHH~49361| |\x0;features~1pxGHH~49362|)) #delete-file #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~49364|)) "#!/bin/sh\n\n" #display "LARCENY=${LARCENY:-\"larceny\"}\n\n" "${LARCENY} --r7rs " #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;thing~1pxGHH~49370|)) "-I" #display " ")
 #|\x0;for-each~1pxGHH~1464| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;thing~1pxGHH~49370|)) "-A" #display " ")
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;thing~1pxGHH~49370|)) "-D" #display " ")
 "--program " " -- $@ \n")
 #call-with-output-file "chmod 775 " #string-append #system)
 #values #apply "" #string=? "assertion failed" (not (string=? pgmfile "")) #assertion-violation (or (not outfile) (not (string=? pgmfile outfile))) #current-require-path #append #larceny:current-declared-features #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #parameter? no-conversion)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;compile-file~1pxGHH~8299|)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #parameter? no-conversion)
 #dynamic-wind)
 (srfi 138) ((compile-r7rs variable |\x0;compile-r7rs~1pxGHH~49347| (0) #f (srfi 138))) (((larceny compiler) 0) ((rnrs base) 0) ((scheme text) 0) ((scheme list) 0) ((scheme file) 0) ((scheme write) 0) ((scheme case-lambda) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~8879| |\x0;build~1pxGHH~1533| |\x0;build~1pxGHH~7209| |\x0;build~1pxGHH~7197| |\x0;build~1pxGHH~4517| |\x0;build~1pxGHH~4493| |\x0;build~1pxGHH~7216| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~49655| #ex:make-library #ex:register-library! #values)
 #f)
))
