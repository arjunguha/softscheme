#!fasl
(define .petit-bootstrap-id-b96eff9cbf3118ba01844f8c9f872c0b (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/145.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-b96eff9cbf3118ba01844f8c9f872c0b 0
'#(#f #( #f #ex:unspecified #|\x0;assumption-failed~1pxGHH~50250| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~50245| 0 1 2 3)) (3 (((assumption-failed) variable |\x0;assumption-failed~1pxGHH~50250| (0) #f (srfi 145)) ((assume) macro |\x0;assume~1pxGHH~50234| (0) #f (srfi 145)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((assert) macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~50235|) variable |\x0;x~1pxGHH~50237| (0) #f (srfi 145)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~50235|) . #f) ((expr) . #f) ((msg1) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~50237|)) #list? let (|\x0;env~1pxGHH~50245|) (srfi 145) #ex:syntax-rename x if not assumption-failed quote lambda list assert #ex:invalid-form)
 |\x0;assume~1pxGHH~50234| #ex:register-macro! #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;assumption-failed~1pxGHH~50250| #f #( #(assumption-failed #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;expr~1pxGHH~50252| |\x0;thunk~1pxGHH~50253|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;guard-k~1pxGHH~50261|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~50277|) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values #apply)
)
 #call-with-values)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;condition~1pxGHH~50263|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;handler-k~1pxGHH~50265|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
)
 #call-with-current-continuation)
 #with-exception-handler)
 #call-with-current-continuation #error-object? #error-object-message #error-object-irritants #error "assumption failed, and then raised an exception: " #apply "assumption failed: ")
 #values)
 (srfi 145) ((assume macro |\x0;assume~1pxGHH~50234| (0) #f (srfi 145))) (((rnrs base) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~1533| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~50279| #ex:make-library #ex:register-library! #values)
 #f)
))
