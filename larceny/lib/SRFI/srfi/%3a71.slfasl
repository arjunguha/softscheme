#!fasl
(define .petit-bootstrap-id-08aefee79d02d45b3d45ede7180f976d (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/%3a71.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-08aefee79d02d45b3d45ede7180f976d 0
'#(#f #( #f #ex:unspecified #|\x0;unvector~1pxGHH~78064| #|\x0;unlist~1pxGHH~78063| #|\x0;uncons-cons~1pxGHH~78062| #|\x0;uncons-4~1pxGHH~78061| #|\x0;uncons-3~1pxGHH~78060| #|\x0;uncons-2~1pxGHH~78059| #|\x0;uncons~1pxGHH~78058| #|\x0;i:undefined~1pxGHH~77188| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) (((|\x0;env~1pxGHH~78161| 0 1 2 3) (|\x0;env~1pxGHH~78142| 4 5 6 3) (|\x0;env~1pxGHH~78123| 7 8 9 3) (|\x0;env~1pxGHH~78109| 10 8 9 3) (|\x0;env~1pxGHH~78090| 11 12 13 3) (|\x0;env~1pxGHH~78075| 14 15 16 3) (|\x0;env~1pxGHH~78047| 17 18 19 3) (|\x0;env~1pxGHH~78021| 20 18 19 3) (|\x0;env~1pxGHH~77996| 21 18 19 3) (|\x0;env~1pxGHH~77964| 22 23 24 3) (|\x0;env~1pxGHH~77935| 25 23 24 3) (|\x0;env~1pxGHH~77902| 26 23 24 3) (|\x0;env~1pxGHH~77870| 27 23 24 3) (|\x0;env~1pxGHH~77838| 28 23 24 3) (|\x0;env~1pxGHH~77808| 29 23 24 3) (|\x0;env~1pxGHH~77776| 30 23 24 3) (|\x0;env~1pxGHH~77740| 31 23 24 3) (|\x0;env~1pxGHH~77704| 32 23 24 3) (|\x0;env~1pxGHH~77664| 33 23 24 3) (|\x0;env~1pxGHH~77625| 34 23 24 3) (|\x0;env~1pxGHH~77589| 35 23 24 3) (|\x0;env~1pxGHH~77559| 36 23 24 3) (|\x0;env~1pxGHH~77527| 37 23 24 3) (|\x0;env~1pxGHH~77505| 38 23 24 3) (|\x0;env~1pxGHH~77484| 39 23 24 3) (|\x0;env~1pxGHH~77466| 40 23 24 3) (|\x0;env~1pxGHH~77445| 41 23 24 3) (|\x0;env~1pxGHH~77424| 42 23 24 3) (|\x0;env~1pxGHH~77404| 43 23 24 3) (|\x0;env~1pxGHH~77358| 44 45 46 3) (|\x0;env~1pxGHH~77336| 47 45 46 3) (|\x0;env~1pxGHH~77313| 48 49 50 3) (|\x0;env~1pxGHH~77300| 51 49 50 3) (|\x0;env~1pxGHH~77284| 52 49 50 3) (|\x0;env~1pxGHH~77255| 53 54 55 3) (|\x0;env~1pxGHH~77234| 56 57 58 3) (|\x0;env~1pxGHH~77221| 59 57 58 3) (|\x0;env~1pxGHH~77205| 60 57 58 3) (|\x0;env~1pxGHH~77177| 61 62 63 3) (|\x0;env~1pxGHH~77155| 64 62 63 3) (|\x0;env~1pxGHH~77130| 65 62 63 3) (|\x0;env~1pxGHH~77106| 66 67 68 3) (|\x0;env~1pxGHH~77083| 69 67 68 3) (|\x0;env~1pxGHH~77054| 70 71 72 3) (|\x0;env~1pxGHH~77033| 73 71 72 3)) (73 (((dummy |\x0;c~1pxGHH~77019|) . #f) ((tag) . #f) ((name) . #f) ((val) . #f) ((body1) . #f) ((body2) . #f))) (72 (((x |\x0;c~1pxGHH~77019|) variable |\x0;x~1pxGHH~77021| (0) #f (srfi :71 let)))) (71 ()) (70 (((dummy |\x0;c~1pxGHH~77019|) . #f) ((name) . #f) ((val) . #f) ((body1) . #f) ((body2) . #f))) (69 (((dummy |\x0;c~1pxGHH~77068|) . #f) ((name1) . #f) ((val1) . #f) ((name2) . #f) ((val2) . #f) ((body1) . #f) ((body2) . #f))) (68 (((x |\x0;c~1pxGHH~77068|) variable |\x0;x~1pxGHH~77070| (0) #f (srfi :71 let)))) (67 ()) (66 (((dummy |\x0;c~1pxGHH~77068|) . #f) ((body1) . #f) ((body2) . #f))) (65 (((dummy |\x0;c~1pxGHH~77114|) . #f) ((x) . #f) ((y) . #f) ((temp) . #f) ((var1) . #f) ((init1) . #f) ((body) . #f))) (64 (((dummy |\x0;c~1pxGHH~77114|) . #f) ((temp1) . #f) ((var1) . #f) ((init1) . #f) ((body) . #f))) (63 (((x |\x0;c~1pxGHH~77114|) variable |\x0;x~1pxGHH~77116| (0) #f (srfi :71 let)))) (62 ()) (61 (((dummy |\x0;c~1pxGHH~77114|) . #f) ((var1) . #f) ((init1) . #f) ((body) . #f))) (60 (((dummy |\x0;c~1pxGHH~77190|) . #f) ((bs1) . #f) ((bs2) . #f) ((bs) . #f) ((body1) . #f) ((body) . #f))) (59 (((dummy |\x0;c~1pxGHH~77190|) . #f) ((bs) . #f) ((body1) . #f) ((body) . #f))) (58 (((x |\x0;c~1pxGHH~77190|) variable |\x0;x~1pxGHH~77192| (0) #f (srfi :71 let)))) (57 ()) (56 (((dummy |\x0;c~1pxGHH~77190|) . #f) ((body1) . #f) ((body) . #f))) (55 (((x |\x0;c~1pxGHH~77242|) variable |\x0;x~1pxGHH~77244| (0) #f (srfi :71 let)))) (54 ()) (53 (((dummy |\x0;c~1pxGHH~77242|) . #f) ((b1) . #f) ((b2) . #f) ((b) . #f) ((body1) . #f) ((body) . #f))) (52 (((dummy |\x0;c~1pxGHH~77269|) . #f) ((bs1) . #f) ((bs2) . #f) ((bs) . #f) ((body1) . #f) ((body) . #f))) (51 (((dummy |\x0;c~1pxGHH~77269|) . #f) ((bs) . #f) ((body1) . #f) ((body) . #f))) (50 (((x |\x0;c~1pxGHH~77269|) variable |\x0;x~1pxGHH~77271| (0) #f (srfi :71 let)))) (49 ()) (48 (((dummy |\x0;c~1pxGHH~77269|) . #f) ((body1) . #f) ((body) . #f))) (47 (((dummy |\x0;c~1pxGHH~77321|) . #f) ((tag) . #f) ((b1) . #f) ((b2) . #f) ((b) . #f) ((body1) . #f) ((body) . #f))) (46 (((x |\x0;c~1pxGHH~77321|) variable |\x0;x~1pxGHH~77323| (0) #f (srfi :71 let)))) (45 ()) (44 (((dummy |\x0;c~1pxGHH~77321|) . #f) ((b1) . #f) ((b2) . #f) ((b) . #f) ((body1) . #f) ((body) . #f))) (43 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((vxs) . #f) ((body) . #f) ((x) . #f) ((formals) . #f) ((cwv) . #f))) (42 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((v) . #f) ((t) . #f) ((body) . #f))) (41 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((v) . #f) ((t) . #f) ((body) . #f) ((cwv) . #f))) (40 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((vxs) . #f) ((body) . #f))) (39 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((vxs) . #f) ((body) . #f) ((x) . #f) ((formals) . #f) ((cwv) . #f))) (38 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((vxs) . #f) ((body) . #f))) (37 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vxs) . #f) ((body) . #f) ((bss) . #f) ((v) . #f) ((b1) . #f) ((b2) . #f) ((b) . #f))) (36 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vxs) . #f) ((body) . #f) ((bs) . #f) ((v) . #f) ((x) . #f))) (35 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwv) . #f) ((vx) . #f) ((body) . #f) ((bss) . #f) ((x) . #f) ((vr) . #f))) (34 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwv) . #f) ((vx) . #f) ((body) . #f) ((bss) . #f) ((x) . #f) ((t) . #f) ((v1) . #f) ((vr) . #f))) (33 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vx) . #f) ((body) . #f) ((bss) . #f) ((x) . #f) ((t) . #f) ((v1) . #f) ((v2) . #f) ((vs) . #f))) (32 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vx) . #f) ((body) . #f) ((bss) . #f) ((x) . #f) ((t) . #f) ((v1) . #f) ((v) . #f))) (31 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwv) . #f) ((vxs) . #f) ((body) . #f) ((bss) . #f) ((x) . #f) ((ts) . #f))) (30 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vxs) . #f) ((body) . #f) ((b1) . #f) ((b2) . #f) ((b3) . #f) ((b) . #f) ((bs) . #f))) (29 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vx) . #f) ((body) . #f) ((v) . #f) ((x) . #f) ((bs) . #f))) (28 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vxs) . #f) ((body) . #f) ((vs) . #f) ((x) . #f) ((bs) . #f))) (27 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vxs) . #f) ((body) . #f) ((v) . #f) ((x) . #f) ((bs) . #f))) (26 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vx) . #f) ((body) . #f) ((v) . #f) ((x) . #f) ((bs) . #f))) (25 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwvs) . #f) ((vx) . #f) ((body) . #f) ((x) . #f) ((bs) . #f))) (24 (((x |\x0;c~1pxGHH~77372|) variable |\x0;x~1pxGHH~77374| (0) #f (srfi :71 let)))) (23 ()) (22 (((dummy |\x0;c~1pxGHH~77372|) . #f) ((rec) . #f) ((cwv) . #f) ((vxs) . #f) ((body) . #f))) (21 (((dummy |\x0;c~1pxGHH~77980|) . #f) ((tag) . #f) ((vx) . #f) ((body) . #f) ((v) . #f) ((x) . #f) ((bs) . #f))) (20 (((dummy |\x0;c~1pxGHH~77980|) . #f) ((tag) . #f) ((vx) . #f) ((body) . #f) ((v) . #f) ((x) . #f) ((bs) . #f))) (19 (((x |\x0;c~1pxGHH~77980|) variable |\x0;x~1pxGHH~77982| (0) #f (srfi :71 let)))) (18 ()) (17 (((dummy |\x0;c~1pxGHH~77980|) . #f) ((tag) . #f) ((vxs) . #f) ((body) . #f))) (16 (((x |\x0;c~1pxGHH~78066|) variable |\x0;x~1pxGHH~78068| (0) #f (srfi :71 let)))) (15 ()) (14 (((dummy |\x0;c~1pxGHH~78066|) . #f) ((x) . #f))) (13 (((x |\x0;c~1pxGHH~78081|) variable |\x0;x~1pxGHH~78083| (0) #f (srfi :71 let)))) (12 ()) (11 (((dummy |\x0;c~1pxGHH~78081|) . #f) ((x) . #f))) (10 (((dummy |\x0;c~1pxGHH~78096|) . #f) ((tag) . #f) ((bs) . #f) ((body1) . #f) ((body) . #f))) (9 (((x |\x0;c~1pxGHH~78096|) variable |\x0;x~1pxGHH~78098| (0) #f (srfi :71 let)))) (8 ()) (7 (((dummy |\x0;c~1pxGHH~78096|) . #f) ((bs) . #f) ((body1) . #f) ((body) . #f))) (6 (((x |\x0;c~1pxGHH~78131|) variable |\x0;x~1pxGHH~78133| (0) #f (srfi :71 let)))) (5 ()) (4 (((dummy |\x0;c~1pxGHH~78131|) . #f) ((bs) . #f) ((body1) . #f) ((body) . #f))) (3 (((letrec) macro |\x0;letrec~1pxGHH~78149| (0) #f (srfi :71 let)) ((let*) macro |\x0;let*~1pxGHH~78130| (0) #f (srfi :71 let)) ((let) macro |\x0;let~1pxGHH~78095| (0) #f (srfi :71 let)) ((values->vector) macro |\x0;values->vector~1pxGHH~78080| (0) #f (srfi :71 let)) ((values->list) macro |\x0;values->list~1pxGHH~78065| (0) #f (srfi :71 let)) ((unvector) variable |\x0;unvector~1pxGHH~78064| (0) #f (srfi :71 let)) ((unlist) variable |\x0;unlist~1pxGHH~78063| (0) #f (srfi :71 let)) ((uncons-cons) variable |\x0;uncons-cons~1pxGHH~78062| (0) #f (srfi :71 let)) ((uncons-4) variable |\x0;uncons-4~1pxGHH~78061| (0) #f (srfi :71 let)) ((uncons-3) variable |\x0;uncons-3~1pxGHH~78060| (0) #f (srfi :71 let)) ((uncons-2) variable |\x0;uncons-2~1pxGHH~78059| (0) #f (srfi :71 let)) ((uncons) variable |\x0;uncons~1pxGHH~78058| (0) #f (srfi :71 let)) ((i:named-let) macro |\x0;i:named-let~1pxGHH~77979| (0) #f (srfi :71 let)) ((i:let) macro |\x0;i:let~1pxGHH~77371| (0) #f (srfi :71 let)) ((srfi-let) macro |\x0;srfi-let~1pxGHH~77320| (0) #f (srfi :71 let)) ((srfi-let*) macro |\x0;srfi-let*~1pxGHH~77268| (0) #f (srfi :71 let)) ((srfi-letrec) macro |\x0;srfi-letrec~1pxGHH~77241| (0) #f (srfi :71 let)) ((srfi-letrec*) macro |\x0;srfi-letrec*~1pxGHH~77189| (0) #f (srfi :71 let)) ((i:undefined) variable |\x0;i:undefined~1pxGHH~77188| (0) #f (srfi :71 let)) ((r5rs-letrec) macro |\x0;r5rs-letrec~1pxGHH~77113| (0) #f (srfi :71 let)) ((r5rs-let*) macro |\x0;r5rs-let*~1pxGHH~77067| (0) #f (srfi :71 let)) ((r5rs-let) macro |\x0;r5rs-let~1pxGHH~77018| (0) #f (srfi :71 let)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0) #f (larceny PRIMITIVES)) ((div0) variable div0 (0) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0) #f (larceny PRIMITIVES)) ((mod) variable mod (0) #f (larceny PRIMITIVES)) ((div) variable div (0) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((tan) variable tan (0) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0) #f (larceny PRIMITIVES)) ((sin) variable sin (0) #f (larceny PRIMITIVES)) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0) #f (larceny PRIMITIVES)) ((log) variable log (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exp) variable exp (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((cos) variable cos (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((atan) variable atan (0) #f (larceny PRIMITIVES)) ((asin) variable asin (0) #f (larceny PRIMITIVES)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((angle) variable angle (0) #f (larceny PRIMITIVES)) ((acos) variable acos (0) #f (larceny PRIMITIVES)) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()))) (2 (((x |\x0;c~1pxGHH~78150|) variable |\x0;x~1pxGHH~78152| (0) #f (srfi :71 let)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~78150|) . #f) ((bs) . #f) ((body1) . #f) ((body) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77021|))) (1027 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77059|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77061| |\x0;rest~1pxGHH~77060|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;name~1pxGHH~77049| |\x0;val~1pxGHH~77050|)) #list? lambda (|\x0;env~1pxGHH~77054|) (srfi :71 let) #ex:syntax-rename)
 (() ()) #map #list #apply)
 #ex:map-while #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77041| |\x0;rest~1pxGHH~77040|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;name~1pxGHH~77028| |\x0;val~1pxGHH~77029|)) #list? r5rs-letrec (|\x0;env~1pxGHH~77033|) (srfi :71 let) #ex:syntax-rename lambda #ex:invalid-form)
 (() ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77039|)))
 #ex:invalid-form)
 |\x0;r5rs-let~1pxGHH~77018| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77070|))) (2489 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #list? r5rs-let (|\x0;env~1pxGHH~77106|) (srfi :71 let) #ex:syntax-rename #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77091| |\x0;rest~1pxGHH~77090|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;name2~1pxGHH~77078| |\x0;val2~1pxGHH~77079|))) (4597 . #(loop #f 3 src/Build/compile-standard-libraries.sch #f (|.y1\|593\|595| |.y1\|593\|594| |.results\|593\|598|)))) #list? r5rs-let (|\x0;env~1pxGHH~77083|) (srfi :71 let) #ex:syntax-rename r5rs-let* #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((name2 val2) ...) #ex:syntax-violation #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;name2~1pxGHH~77078| |\x0;val2~1pxGHH~77079|)))
 #larceny:map #reverse #append)
 (() ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77089|)))
 #ex:map-while #ex:invalid-form)
 |\x0;r5rs-let*~1pxGHH~77067| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77116|))) (1075 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (5051 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77180|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77182| |\x0;rest~1pxGHH~77181|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;var1~1pxGHH~77173| |\x0;init1~1pxGHH~77174|))) (3203 . #(loop #f 3 src/Build/compile-standard-libraries.sch #f (|.y1\|880\|882| |.y1\|880\|881| |.results\|880\|885|)))) #list? r5rs-letrec (|\x0;env~1pxGHH~77177|) (srfi :71 let) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((var1 init1) ...) #ex:syntax-violation "generate_temp_names" #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;var1~1pxGHH~77173| |\x0;init1~1pxGHH~77174|)))
 #larceny:map #reverse #append)
 (() ()) #map #list #apply)
 #ex:map-while "generate_temp_names" #equal? #list? #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77138| |\x0;rest~1pxGHH~77137|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;var1~1pxGHH~77126| |\x0;init1~1pxGHH~77127|))) (3815 . #(loop #f 3 src/Build/compile-standard-libraries.sch #f (|.y1\|1581\|1583| |.y1\|1581\|1582| |.results\|1581\|1586|)))) #list? r5rs-letrec (|\x0;env~1pxGHH~77130|) (srfi :71 let) #ex:syntax-rename newtemp #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((var1 init1) ...) #ex:syntax-violation "generate_temp_names" #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;var1~1pxGHH~77126| |\x0;init1~1pxGHH~77127|)))
 #larceny:map #reverse #append)
 (() ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77136|)))
 #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77163| |\x0;rest~1pxGHH~77162|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;var1~1pxGHH~77151| |\x0;init1~1pxGHH~77152|))) (5857 . #(loop #f 3 src/Build/compile-standard-libraries.sch #f (|.y1\|1268\|1270| |.y1\|1268\|1269| |.results\|1268\|1273|))) (9369 . #(loop #f 3 src/Build/compile-standard-libraries.sch #f (|.y1\|1181\|1183| |.y1\|1181\|1182| |.results\|1181\|1186|))) (12092 . #(loop #f 2 src/Build/compile-standard-libraries.sch #f (|.y1\|1120\|1121| |.results\|1120\|1124|)))) #list? r5rs-let (|\x0;env~1pxGHH~77155|) (srfi :71 let) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((temp1 init1) ...) #ex:syntax-violation ((set! var1 temp1) ... body ...) #append #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;var1~1pxGHH~77151| |\x0;temp1~1pxGHH~77150|)) set! (|\x0;env~1pxGHH~77155|) (srfi :71 let) #ex:syntax-rename)
 #larceny:map #reverse set! #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;temp1~1pxGHH~77150| |\x0;init1~1pxGHH~77152|)))
 quote undefined)
 (() ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77161|)))
)
 |\x0;r5rs-letrec~1pxGHH~77113| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77192|))) (2537 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (7102 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #list? srfi-letrec (|\x0;env~1pxGHH~77234|) (srfi :71 let) #ex:syntax-rename (|\x0;env~1pxGHH~77205|) srfi-letrec* #ex:invalid-form (|\x0;env~1pxGHH~77221|))
 |\x0;srfi-letrec*~1pxGHH~77189| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77244|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77260|)) #list?)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77262| |\x0;rest~1pxGHH~77261|)) #f #( ((0 . #(#f #f 3 src/Build/compile-standard-libraries.sch #f (|\x0;b1~1pxGHH~77249| |\x0;b2~1pxGHH~77250| |\x0;b~1pxGHH~77251|))) (4752 . #(loop #f 4 src/Build/compile-standard-libraries.sch #f (|.y1\|2263\|2266| |.y1\|2263\|2265| |.y1\|2263\|2264| |.results\|2263\|2269|)))) #list? i:let (|\x0;env~1pxGHH~77255|) (srfi :71 let) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((b1 b2 b ...) ...) #ex:syntax-violation "bs" #ex:invalid-form #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #f (|\x0;b1~1pxGHH~77249| |\x0;b2~1pxGHH~77250| |\x0;b~1pxGHH~77251|)))
 #larceny:map #reverse #append)
 (() () ()) #map #list #apply #ex:invalid-form)
 #ex:map-while #ex:invalid-form)
 |\x0;srfi-letrec~1pxGHH~77241| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77271|))) (2537 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (7102 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #list? srfi-let (|\x0;env~1pxGHH~77313|) (srfi :71 let) #ex:syntax-rename (|\x0;env~1pxGHH~77284|) srfi-let* #ex:invalid-form (|\x0;env~1pxGHH~77300|))
 |\x0;srfi-let*~1pxGHH~77268| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77323|))) (1027 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77363|)) #list?)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77365| |\x0;rest~1pxGHH~77364|)) #f #( ((0 . #(#f #f 3 src/Build/compile-standard-libraries.sch #f (|\x0;b1~1pxGHH~77352| |\x0;b2~1pxGHH~77353| |\x0;b~1pxGHH~77354|))) (4717 . #(loop #f 4 src/Build/compile-standard-libraries.sch #f (|.y1\|2931\|2934| |.y1\|2931\|2933| |.y1\|2931\|2932| |.results\|2931\|2937|)))) #list? i:let (|\x0;env~1pxGHH~77358|) (srfi :71 let) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((b1 b2 b ...) ...) #ex:syntax-violation "bs" #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #f (|\x0;b1~1pxGHH~77352| |\x0;b2~1pxGHH~77353| |\x0;b~1pxGHH~77354|)))
 #larceny:map #reverse #append)
 (() () ()) #map #list #apply)
 #ex:map-while #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77344| |\x0;rest~1pxGHH~77343|)) #f #( ((0 . #(#f #f 3 src/Build/compile-standard-libraries.sch #f (|\x0;b1~1pxGHH~77330| |\x0;b2~1pxGHH~77331| |\x0;b~1pxGHH~77332|))) (4561 . #(loop #f 4 src/Build/compile-standard-libraries.sch #f (|.y1\|3249\|3252| |.y1\|3249\|3251| |.y1\|3249\|3250| |.results\|3249\|3255|)))) #list? i:named-let (|\x0;env~1pxGHH~77336|) (srfi :71 let) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((b1 b2 b ...) ...) #ex:syntax-violation #ex:invalid-form #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #f (|\x0;b1~1pxGHH~77330| |\x0;b2~1pxGHH~77331| |\x0;b~1pxGHH~77332|)))
 #larceny:map #reverse #append)
 (() () ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77342|)) #list?)
 #ex:invalid-form)
 |\x0;srfi-let~1pxGHH~77320| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77374|))) (4981 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (12090 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (13898 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (16552 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (20195 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (28060 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (31704 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (39410 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (46998 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (58145 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (71463 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (84011 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (96402 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (105823 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (113370 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (120689 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (129836 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (139371 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (149125 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) "bs" #equal? #list? "wrap" i:let (|\x0;env~1pxGHH~77964|) (srfi :71 let) #ex:syntax-rename "wraprec" call-with-values (|\x0;env~1pxGHH~77404|) lambda #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77432| |\x0;rest~1pxGHH~77431|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;v~1pxGHH~77420| |\x0;t~1pxGHH~77421|))) (4586 . #(loop #f 3 src/Build/compile-standard-libraries.sch #f (|.y1\|8681\|8683| |.y1\|8681\|8682| |.results\|8681\|8686|)))) #list? begin (|\x0;env~1pxGHH~77424|) (srfi :71 let) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((set! v t) ... (r5rs-let () body ...)) #ex:syntax-violation r5rs-let #append #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;v~1pxGHH~77420| |\x0;t~1pxGHH~77421|)) set! (|\x0;env~1pxGHH~77424|) (srfi :71 let) #ex:syntax-rename)
 #larceny:map #reverse set!)
 (() ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77430|)))
 #ex:map-while #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;cols~1pxGHH~77454| |\x0;rest~1pxGHH~77453|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;v~1pxGHH~77440| |\x0;t~1pxGHH~77441|))) (4602 . #(loop #f 3 src/Build/compile-standard-libraries.sch #f (|.y1\|8401\|8403| |.y1\|8401\|8402| |.results\|8401\|8406|))) (7325 . #(loop #f 2 src/Build/compile-standard-libraries.sch #f (|.y1\|8345\|8346| |.results\|8345\|8349|)))) #list? r5rs-let (|\x0;env~1pxGHH~77445|) (srfi :71 let) #ex:syntax-rename i:let #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((v t) ...) #ex:syntax-violation "wraprec" #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #f (|\x0;v~1pxGHH~77440| |\x0;t~1pxGHH~77441|)))
 #larceny:map #reverse #append i:undefined)
 (() ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;temp~1pxGHH~77452|)))
 r5rs-letrec (|\x0;env~1pxGHH~77466|) (|\x0;env~1pxGHH~77484|) r5rs-let (|\x0;env~1pxGHH~77505|) "form2" (|\x0;env~1pxGHH~77527|) #append (|\x0;env~1pxGHH~77559|) values "form1+" #ex:identifier? (|\x0;env~1pxGHH~77589|) #ex:free-identifier=? tr (|\x0;env~1pxGHH~77625|) t1 (|\x0;env~1pxGHH~77664|) "form1" (|\x0;env~1pxGHH~77704|) (|\x0;env~1pxGHH~77740|) (|\x0;env~1pxGHH~77776|) (|\x0;env~1pxGHH~77808|) (|\x0;env~1pxGHH~77838|) (|\x0;env~1pxGHH~77870|) (|\x0;env~1pxGHH~77902|) (|\x0;env~1pxGHH~77935|) dummy begin)
 |\x0;i:let~1pxGHH~77371| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~77982|))) (2896 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (9019 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) r5rs-let (|\x0;env~1pxGHH~78047|) (srfi :71 let) #ex:syntax-rename #list? i:named-let (|\x0;env~1pxGHH~77996|) #append #ex:invalid-form #ex:identifier? values (|\x0;env~1pxGHH~78021|) #ex:free-identifier=?)
 |\x0;i:named-let~1pxGHH~77979| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~78068|)) call-with-values (|\x0;env~1pxGHH~78075|) (srfi :71 let) #ex:syntax-rename lambda list #ex:invalid-form)
 |\x0;values->list~1pxGHH~78065| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~78083|)) call-with-values (|\x0;env~1pxGHH~78090|) (srfi :71 let) #ex:syntax-rename lambda vector #ex:invalid-form)
 |\x0;values->vector~1pxGHH~78080| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~78098|))) (2787 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #list? srfi-let (|\x0;env~1pxGHH~78123|) (srfi :71 let) #ex:syntax-rename (|\x0;env~1pxGHH~78109|) #ex:invalid-form)
 |\x0;let~1pxGHH~78095| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~78133|)) #list? srfi-let* (|\x0;env~1pxGHH~78142|) (srfi :71 let) #ex:syntax-rename #ex:invalid-form)
 |\x0;let*~1pxGHH~78130| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~78152|)) #list? srfi-letrec (|\x0;env~1pxGHH~78161|) (srfi :71 let) #ex:syntax-rename #ex:invalid-form)
 |\x0;letrec~1pxGHH~78149| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #ex:undefined #|\x0;unvector~1pxGHH~78064| #|\x0;unlist~1pxGHH~78063| #|\x0;uncons-cons~1pxGHH~78062| #|\x0;uncons-4~1pxGHH~78061| #|\x0;uncons-3~1pxGHH~78060| #|\x0;uncons-2~1pxGHH~78059| #|\x0;uncons~1pxGHH~78058| #|\x0;i:undefined~1pxGHH~77188| undefined #f #( #(uncons #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;pair~1pxGHH~78181|)) #values)
 #f #( #(uncons-2 #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;list~1pxGHH~78179|)) #values)
 #f #( #(uncons-3 #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;list~1pxGHH~78177|)) #values)
 #f #( #(uncons-4 #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;list~1pxGHH~78175|)) #values)
 #f #( #(uncons-cons #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;alist~1pxGHH~78173|)) #values)
 #f #( #(unlist #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;list~1pxGHH~78171|)) #values #apply)
 #f #( #(unvector #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;vector~1pxGHH~78169|)) #vector->list #values #apply)
 #values)
 (srfi :71 let) ((let macro |\x0;let~1pxGHH~78095| (0) #f (srfi :71 let)) (let* macro |\x0;let*~1pxGHH~78130| (0) #f (srfi :71 let)) (letrec macro |\x0;letrec~1pxGHH~78149| (0) #f (srfi :71 let)) (uncons variable |\x0;uncons~1pxGHH~78058| (0) #f (srfi :71 let)) (uncons-2 variable |\x0;uncons-2~1pxGHH~78059| (0) #f (srfi :71 let)) (uncons-3 variable |\x0;uncons-3~1pxGHH~78060| (0) #f (srfi :71 let)) (uncons-4 variable |\x0;uncons-4~1pxGHH~78061| (0) #f (srfi :71 let)) (uncons-cons variable |\x0;uncons-cons~1pxGHH~78062| (0) #f (srfi :71 let)) (unlist variable |\x0;unlist~1pxGHH~78063| (0) #f (srfi :71 let)) (unvector variable |\x0;unvector~1pxGHH~78064| (0) #f (srfi :71 let)) (values->list macro |\x0;values->list~1pxGHH~78065| (0) #f (srfi :71 let)) (values->vector macro |\x0;values->vector~1pxGHH~78080| (0) #f (srfi :71 let))) (((rnrs base) 0)) (|\x0;build~1pxGHH~1533|) |\x0;build~1pxGHH~78183| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-08aefee79d02d45b3d45ede7180f976d 1
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #values)
 (srfi :71) ((let macro |\x0;let~1pxGHH~78095| (0) #f (srfi :71 let)) (let* macro |\x0;let*~1pxGHH~78130| (0) #f (srfi :71 let)) (letrec macro |\x0;letrec~1pxGHH~78149| (0) #f (srfi :71 let)) (uncons variable |\x0;uncons~1pxGHH~78058| (0) #f (srfi :71 let)) (uncons-2 variable |\x0;uncons-2~1pxGHH~78059| (0) #f (srfi :71 let)) (uncons-3 variable |\x0;uncons-3~1pxGHH~78060| (0) #f (srfi :71 let)) (uncons-4 variable |\x0;uncons-4~1pxGHH~78061| (0) #f (srfi :71 let)) (uncons-cons variable |\x0;uncons-cons~1pxGHH~78062| (0) #f (srfi :71 let)) (unlist variable |\x0;unlist~1pxGHH~78063| (0) #f (srfi :71 let)) (unvector variable |\x0;unvector~1pxGHH~78064| (0) #f (srfi :71 let)) (values->list macro |\x0;values->list~1pxGHH~78065| (0) #f (srfi :71 let)) (values->vector macro |\x0;values->vector~1pxGHH~78080| (0) #f (srfi :71 let))) (((srfi :71 let) 0)) (|\x0;build~1pxGHH~78183|) |\x0;build~1pxGHH~78184| #ex:make-library #ex:register-library! #values)
 #f)
))
