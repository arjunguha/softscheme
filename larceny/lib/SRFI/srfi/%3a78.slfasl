#!fasl
(define .petit-bootstrap-id-cf66e1ed92806946a613e7c57a53f1dc (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/%3a78.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-cf66e1ed92806946a613e7c57a53f1dc 0
'#(#f #( #f #ex:unspecified #|\x0;check:proc-ec~1pxGHH~78657| #|\x0;check:proc~1pxGHH~78617| #|\x0;check-passed?~1pxGHH~78616| #|\x0;check-report~1pxGHH~78615| #|\x0;check:report-failed~1pxGHH~78614| #|\x0;check:report-correct~1pxGHH~78613| #|\x0;check:report-actual-result~1pxGHH~78612| #|\x0;check:report-expression~1pxGHH~78611| #|\x0;ignored2~1pxGHH~78610| #|\x0;check:add-failed!~1pxGHH~78609| #|\x0;check:add-correct!~1pxGHH~78608| #|\x0;check-reset!~1pxGHH~78607| #|\x0;check:failed~1pxGHH~78606| #|\x0;check:correct~1pxGHH~78605| #|\x0;ignored1~1pxGHH~78604| #|\x0;check-set-mode!~1pxGHH~78603| #|\x0;check:mode~1pxGHH~78602| #|\x0;check:mode:state~1pxGHH~78601| #|\x0;check:write~1pxGHH~78600| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) (((|\x0;env~1pxGHH~78870| 0 1 2 3) (|\x0;env~1pxGHH~78853| 4 1 2 3) (|\x0;env~1pxGHH~78837| 5 1 2 3) (|\x0;env~1pxGHH~78817| 6 1 2 3) (|\x0;env~1pxGHH~78800| 7 1 2 3) (|\x0;env~1pxGHH~78780| 8 1 2 3) (|\x0;env~1pxGHH~78761| 9 1 2 3) (|\x0;env~1pxGHH~78738| 10 1 2 3) (|\x0;env~1pxGHH~78722| 11 1 2 3) (|\x0;env~1pxGHH~78710| 12 1 2 3) (|\x0;env~1pxGHH~78672| 13 14 15 3) (|\x0;env~1pxGHH~78648| 16 17 18 3) (|\x0;env~1pxGHH~78631| 19 17 18 3)) (19 (((dummy |\x0;c~1pxGHH~78619|) . #f) ((expr) . #f) ((equal) . #f) ((expected) . #f))) (18 (((x |\x0;c~1pxGHH~78619|) variable |\x0;x~1pxGHH~78621| (0) #f (srfi :78 lightweight-testing)))) (17 ()) (16 (((dummy |\x0;c~1pxGHH~78619|) . #f) ((expr) . #f) ((expected) . #f))) (15 (((x |\x0;c~1pxGHH~78659|) variable |\x0;x~1pxGHH~78661| (0) #f (srfi :78 lightweight-testing)))) (14 ()) (13 (((dummy |\x0;c~1pxGHH~78659|) . #f) ((qualifiers) . #f) ((expr) . #f) ((equal) . #f) ((expected) . #f) ((arg) . #f))) (12 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((q1) . #f) ((q2) . #f) ((etc) . #f))) (11 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((q1) . #f) ((q) . #f) ((etc) . #f))) (10 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((qualifiers) . #f) ((expr) . #f) ((equal) . #f) ((expected) . #f) ((arg) . #f))) (9 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((qualifiers) . #f) ((expr) . #f) ((expected) . #f) ((arg) . #f))) (8 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((qualifiers) . #f) ((expr) . #f) ((equal) . #f) ((expected) . #f))) (7 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((qualifiers) . #f) ((expr) . #f) ((expected) . #f))) (6 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((expr) . #f) ((equal) . #f) ((expected) . #f) ((arg) . #f))) (5 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((expr) . #f) ((expected) . #f) ((arg) . #f))) (4 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((expr) . #f) ((equal) . #f) ((expected) . #f))) (3 (((check-ec) macro |\x0;check-ec~1pxGHH~78689| (0) #f (srfi :78 lightweight-testing)) ((check-ec:make) macro |\x0;check-ec:make~1pxGHH~78658| (0) #f (srfi :78 lightweight-testing)) ((check:proc-ec) variable |\x0;check:proc-ec~1pxGHH~78657| (0) #f (srfi :78 lightweight-testing)) ((check) macro |\x0;check~1pxGHH~78618| (0) #f (srfi :78 lightweight-testing)) ((check:proc) variable |\x0;check:proc~1pxGHH~78617| (0) #f (srfi :78 lightweight-testing)) ((check-passed?) variable |\x0;check-passed?~1pxGHH~78616| (0) #f (srfi :78 lightweight-testing)) ((check-report) variable |\x0;check-report~1pxGHH~78615| (0) #f (srfi :78 lightweight-testing)) ((check:report-failed) variable |\x0;check:report-failed~1pxGHH~78614| (0) #f (srfi :78 lightweight-testing)) ((check:report-correct) variable |\x0;check:report-correct~1pxGHH~78613| (0) #f (srfi :78 lightweight-testing)) ((check:report-actual-result) variable |\x0;check:report-actual-result~1pxGHH~78612| (0) #f (srfi :78 lightweight-testing)) ((check:report-expression) variable |\x0;check:report-expression~1pxGHH~78611| (0) #f (srfi :78 lightweight-testing)) ((ignored2) variable |\x0;ignored2~1pxGHH~78610| (0) #f (srfi :78 lightweight-testing)) ((check:add-failed!) variable |\x0;check:add-failed!~1pxGHH~78609| (0) #f (srfi :78 lightweight-testing)) ((check:add-correct!) variable |\x0;check:add-correct!~1pxGHH~78608| (0) #f (srfi :78 lightweight-testing)) ((check-reset!) variable |\x0;check-reset!~1pxGHH~78607| (0) #f (srfi :78 lightweight-testing)) ((check:failed) variable |\x0;check:failed~1pxGHH~78606| (0) #t (srfi :78 lightweight-testing)) ((check:correct) variable |\x0;check:correct~1pxGHH~78605| (0) #t (srfi :78 lightweight-testing)) ((ignored1) variable |\x0;ignored1~1pxGHH~78604| (0) #f (srfi :78 lightweight-testing)) ((check-set-mode!) variable |\x0;check-set-mode!~1pxGHH~78603| (0) #f (srfi :78 lightweight-testing)) ((check:mode) variable |\x0;check:mode~1pxGHH~78602| (0) #f (srfi :78 lightweight-testing)) ((check:mode:state) variable |\x0;check:mode:state~1pxGHH~78601| (0) #t (srfi :78 lightweight-testing)) ((check:write) variable |\x0;check:write~1pxGHH~78600| (0) #f (srfi :78 lightweight-testing)) ((define-enumeration) macro |\x0;define-enumeration~1pxGHH~7237| (0 1) #f (rnrs enums)) ((enum-set-projection) variable enum-set-projection (0 1) #f (larceny PRIMITIVES)) ((enum-set-complement) variable enum-set-complement (0 1) #f (larceny PRIMITIVES)) ((enum-set-difference) variable enum-set-difference (0 1) #f (larceny PRIMITIVES)) ((enum-set-intersection) variable enum-set-intersection (0 1) #f (larceny PRIMITIVES)) ((enum-set-union) variable enum-set-union (0 1) #f (larceny PRIMITIVES)) ((enum-set=?) variable enum-set=? (0 1) #f (larceny PRIMITIVES)) ((enum-set-subset?) variable enum-set-subset? (0 1) #f (larceny PRIMITIVES)) ((enum-set-member?) variable enum-set-member? (0 1) #f (larceny PRIMITIVES)) ((enum-set->list) variable enum-set->list (0 1) #f (larceny PRIMITIVES)) ((enum-set-constructor) variable enum-set-constructor (0 1) #f (larceny PRIMITIVES)) ((enum-set-indexer) variable enum-set-indexer (0 1) #f (larceny PRIMITIVES)) ((enum-set-universe) variable enum-set-universe (0 1) #f (larceny PRIMITIVES)) ((make-enumeration) variable make-enumeration (0 1) #f (larceny PRIMITIVES)) ((symbol-hash) variable symbol-hash (0 1) #f (larceny PRIMITIVES)) ((string-ci-hash) variable string-ci-hash (0 1) #f (larceny PRIMITIVES)) ((string-hash) variable string-hash (0 1) #f (larceny PRIMITIVES)) ((equal-hash) variable equal-hash (0 1) #f (larceny PRIMITIVES)) ((hashtable-mutable?) variable hashtable-mutable? (0 1) #f (larceny PRIMITIVES)) ((hashtable-hash-function) variable hashtable-hash-function (0 1) #f (larceny PRIMITIVES)) ((hashtable-equivalence-function) variable hashtable-equivalence-function (0 1) #f (larceny PRIMITIVES)) ((hashtable-entries) variable hashtable-entries (0 1) #f (larceny PRIMITIVES)) ((hashtable-keys) variable hashtable-keys (0 1) #f (larceny PRIMITIVES)) ((hashtable-clear!) variable hashtable-clear! (0 1) #f (larceny PRIMITIVES)) ((hashtable-copy) variable hashtable-copy (0 1) #f (larceny PRIMITIVES)) ((hashtable-update!) variable hashtable-update! (0 1) #f (larceny PRIMITIVES)) ((hashtable-contains?) variable hashtable-contains? (0 1) #f (larceny PRIMITIVES)) ((hashtable-delete!) variable hashtable-delete! (0 1) #f (larceny PRIMITIVES)) ((hashtable-set!) variable hashtable-set! (0 1) #f (larceny PRIMITIVES)) ((hashtable-ref) variable hashtable-ref (0 1) #f (larceny PRIMITIVES)) ((hashtable-size) variable hashtable-size (0 1) #f (larceny PRIMITIVES)) ((hashtable?) variable hashtable? (0 1) #f (larceny PRIMITIVES)) ((make-hashtable) variable |\x0;make-hashtable~1pxGHH~7276| (0 1) #f (rnrs hashtables)) ((make-eqv-hashtable) variable make-eqv-hashtable (0 1) #f (larceny PRIMITIVES)) ((make-eq-hashtable) variable make-eq-hashtable (0 1) #f (larceny PRIMITIVES)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (0 1) #f (core with-syntax)) ((unsyntax-splicing) macro |\x0;unsyntax-splicing~1pxGHH~845| (0 1) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (0 1) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (0 1) #f (core quasisyntax)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((syntax-violation) variable |\x0;syntax-violation~1pxGHH~1758| (0 1) #f (rnrs syntax-case)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((bitwise-arithmetic-shift-right) variable bitwise-arithmetic-shift-right (0 1) #f (larceny PRIMITIVES)) ((bitwise-arithmetic-shift-left) variable bitwise-arithmetic-shift-left (0 1) #f (larceny PRIMITIVES)) ((bitwise-arithmetic-shift) variable bitwise-arithmetic-shift (0 1) #f (larceny PRIMITIVES)) ((bitwise-reverse-bit-field) variable bitwise-reverse-bit-field (0 1) #f (larceny PRIMITIVES)) ((bitwise-rotate-bit-field) variable bitwise-rotate-bit-field (0 1) #f (larceny PRIMITIVES)) ((bitwise-copy-bit-field) variable bitwise-copy-bit-field (0 1) #f (larceny PRIMITIVES)) ((bitwise-bit-field) variable bitwise-bit-field (0 1) #f (larceny PRIMITIVES)) ((bitwise-copy-bit) variable bitwise-copy-bit (0 1) #f (larceny PRIMITIVES)) ((bitwise-bit-set?) variable bitwise-bit-set? (0 1) #f (larceny PRIMITIVES)) ((bitwise-first-bit-set) variable bitwise-first-bit-set (0 1) #f (larceny PRIMITIVES)) ((bitwise-length) variable bitwise-length (0 1) #f (larceny PRIMITIVES)) ((bitwise-bit-count) variable bitwise-bit-count (0 1) #f (larceny PRIMITIVES)) ((bitwise-if) variable bitwise-if (0 1) #f (larceny PRIMITIVES)) ((bitwise-xor) variable bitwise-xor (0 1) #f (larceny PRIMITIVES)) ((bitwise-ior) variable bitwise-ior (0 1) #f (larceny PRIMITIVES)) ((bitwise-and) variable bitwise-and (0 1) #f (larceny PRIMITIVES)) ((bitwise-not) variable bitwise-not (0 1) #f (larceny PRIMITIVES)) ((no-nans-violation?) variable no-nans-violation? (0 1) #f (larceny PRIMITIVES)) ((make-no-nans-violation) variable make-no-nans-violation (0 1) #f (larceny PRIMITIVES)) ((&no-nans) variable &no-nans (0 1) #f (larceny PRIMITIVES)) ((no-infinities-violation?) variable no-infinities-violation? (0 1) #f (larceny PRIMITIVES)) ((make-no-infinities-violation) variable make-no-infinities-violation (0 1) #f (larceny PRIMITIVES)) ((&no-infinities) variable &no-infinities (0 1) #f (larceny PRIMITIVES)) ((fixnum->flonum) variable fixnum->flonum (0 1) #f (larceny PRIMITIVES)) ((flexpt) variable flexpt (0 1) #f (larceny PRIMITIVES)) ((flsqrt) variable flsqrt (0 1) #f (larceny PRIMITIVES)) ((flatan) variable flatan (0 1) #f (larceny PRIMITIVES)) ((flacos) variable flacos (0 1) #f (larceny PRIMITIVES)) ((flasin) variable flasin (0 1) #f (larceny PRIMITIVES)) ((fltan) variable fltan (0 1) #f (larceny PRIMITIVES)) ((flcos) variable flcos (0 1) #f (larceny PRIMITIVES)) ((flsin) variable flsin (0 1) #f (larceny PRIMITIVES)) ((fllog) variable fllog (0 1) #f (larceny PRIMITIVES)) ((flexp) variable flexp (0 1) #f (larceny PRIMITIVES)) ((flround) variable flround (0 1) #f (larceny PRIMITIVES)) ((fltruncate) variable fltruncate (0 1) #f (larceny PRIMITIVES)) ((flceiling) variable flceiling (0 1) #f (larceny PRIMITIVES)) ((flfloor) variable flfloor (0 1) #f (larceny PRIMITIVES)) ((fldenominator) variable fldenominator (0 1) #f (larceny PRIMITIVES)) ((flnumerator) variable flnumerator (0 1) #f (larceny PRIMITIVES)) ((flmod0) variable flmod0 (0 1) #f (larceny PRIMITIVES)) ((fldiv0) variable fldiv0 (0 1) #f (larceny PRIMITIVES)) ((fldiv0-and-mod0) variable fldiv0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((flmod) variable flmod (0 1) #f (larceny PRIMITIVES)) ((fldiv) variable fldiv (0 1) #f (larceny PRIMITIVES)) ((fldiv-and-mod) variable fldiv-and-mod (0 1) #f (larceny PRIMITIVES)) ((flabs) variable flabs (0 1) #f (larceny PRIMITIVES)) ((fl/) variable fl/ (0 1) #f (larceny PRIMITIVES)) ((fl-) variable fl- (0 1) #f (larceny PRIMITIVES)) ((fl*) variable fl* (0 1) #f (larceny PRIMITIVES)) ((fl+) variable fl+ (0 1) #f (larceny PRIMITIVES)) ((flmin) variable flmin (0 1) #f (larceny PRIMITIVES)) ((flmax) variable flmax (0 1) #f (larceny PRIMITIVES)) ((flnan?) variable flnan? (0 1) #f (larceny PRIMITIVES)) ((flinfinite?) variable flinfinite? (0 1) #f (larceny PRIMITIVES)) ((flfinite?) variable flfinite? (0 1) #f (larceny PRIMITIVES)) ((fleven?) variable fleven? (0 1) #f (larceny PRIMITIVES)) ((flodd?) variable flodd? (0 1) #f (larceny PRIMITIVES)) ((flnegative?) variable flnegative? (0 1) #f (larceny PRIMITIVES)) ((flpositive?) variable flpositive? (0 1) #f (larceny PRIMITIVES)) ((flzero?) variable flzero? (0 1) #f (larceny PRIMITIVES)) ((flinteger?) variable flinteger? (0 1) #f (larceny PRIMITIVES)) ((fl>=?) variable fl>=? (0 1) #f (larceny PRIMITIVES)) ((fl<=?) variable fl<=? (0 1) #f (larceny PRIMITIVES)) ((fl>?) variable fl>? (0 1) #f (larceny PRIMITIVES)) ((fl<?) variable fl<? (0 1) #f (larceny PRIMITIVES)) ((fl=?) variable fl=? (0 1) #f (larceny PRIMITIVES)) ((real->flonum) variable real->flonum (0 1) #f (larceny PRIMITIVES)) ((flonum?) variable flonum? (0 1) #f (larceny PRIMITIVES)) ((fxarithmetic-shift-right) variable fxarithmetic-shift-right (0 1) #f (larceny PRIMITIVES)) ((fxarithmetic-shift-left) variable fxarithmetic-shift-left (0 1) #f (larceny PRIMITIVES)) ((fxarithmetic-shift) variable fxarithmetic-shift (0 1) #f (larceny PRIMITIVES)) ((fxreverse-bit-field) variable fxreverse-bit-field (0 1) #f (larceny PRIMITIVES)) ((fxrotate-bit-field) variable fxrotate-bit-field (0 1) #f (larceny PRIMITIVES)) ((fxcopy-bit-field) variable fxcopy-bit-field (0 1) #f (larceny PRIMITIVES)) ((fxbit-field) variable fxbit-field (0 1) #f (larceny PRIMITIVES)) ((fxcopy-bit) variable fxcopy-bit (0 1) #f (larceny PRIMITIVES)) ((fxbit-set?) variable fxbit-set? (0 1) #f (larceny PRIMITIVES)) ((fxfirst-bit-set) variable fxfirst-bit-set (0 1) #f (larceny PRIMITIVES)) ((fxlength) variable fxlength (0 1) #f (larceny PRIMITIVES)) ((fxbit-count) variable fxbit-count (0 1) #f (larceny PRIMITIVES)) ((fxif) variable fxif (0 1) #f (larceny PRIMITIVES)) ((fxxor) variable fxxor (0 1) #f (larceny PRIMITIVES)) ((fxior) variable fxior (0 1) #f (larceny PRIMITIVES)) ((fxand) variable fxand (0 1) #f (larceny PRIMITIVES)) ((fxnot) variable fxnot (0 1) #f (larceny PRIMITIVES)) ((fx*/carry) variable fx*/carry (0 1) #f (larceny PRIMITIVES)) ((fx-/carry) variable fx-/carry (0 1) #f (larceny PRIMITIVES)) ((fx+/carry) variable fx+/carry (0 1) #f (larceny PRIMITIVES)) ((fxmod0) variable fxmod0 (0 1) #f (larceny PRIMITIVES)) ((fxdiv0) variable fxdiv0 (0 1) #f (larceny PRIMITIVES)) ((fxdiv0-and-mod0) variable fxdiv0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((fxmod) variable fxmod (0 1) #f (larceny PRIMITIVES)) ((fxdiv) variable fxdiv (0 1) #f (larceny PRIMITIVES)) ((fxdiv-and-mod) variable fxdiv-and-mod (0 1) #f (larceny PRIMITIVES)) ((fx*) variable fx* (0 1) #f (larceny PRIMITIVES)) ((fx-) variable fx- (0 1) #f (larceny PRIMITIVES)) ((fx+) variable fx+ (0 1) #f (larceny PRIMITIVES)) ((fxmin) variable fxmin (0 1) #f (larceny PRIMITIVES)) ((fxmax) variable fxmax (0 1) #f (larceny PRIMITIVES)) ((fxeven?) variable fxeven? (0 1) #f (larceny PRIMITIVES)) ((fxodd?) variable fxodd? (0 1) #f (larceny PRIMITIVES)) ((fxnegative?) variable fxnegative? (0 1) #f (larceny PRIMITIVES)) ((fxpositive?) variable fxpositive? (0 1) #f (larceny PRIMITIVES)) ((fxzero?) variable fxzero? (0 1) #f (larceny PRIMITIVES)) ((fx<=?) variable fx<=? (0 1) #f (larceny PRIMITIVES)) ((fx>=?) variable fx>=? (0 1) #f (larceny PRIMITIVES)) ((fx<?) variable fx<? (0 1) #f (larceny PRIMITIVES)) ((fx>?) variable fx>? (0 1) #f (larceny PRIMITIVES)) ((fx=?) variable fx=? (0 1) #f (larceny PRIMITIVES)) ((greatest-fixnum) variable greatest-fixnum (0 1) #f (larceny PRIMITIVES)) ((least-fixnum) variable least-fixnum (0 1) #f (larceny PRIMITIVES)) ((fixnum-width) variable fixnum-width (0 1) #f (larceny PRIMITIVES)) ((fixnum?) variable fixnum? (0 1) #f (larceny PRIMITIVES)) ((exit) variable exit (0 1) #f (larceny PRIMITIVES)) ((command-line) variable |\x0;command-line~1pxGHH~7223| (0 1) #f (rnrs programs)) ((delete-file) variable delete-file (0 1) #f (larceny PRIMITIVES)) ((file-exists?) variable file-exists? (0 1) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0 1) #f (larceny PRIMITIVES)) ((write) variable write (0 1) #f (larceny PRIMITIVES)) ((with-output-to-file) variable with-output-to-file (0 1) #f (larceny PRIMITIVES)) ((with-input-from-file) variable with-input-from-file (0 1) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0 1) #f (larceny PRIMITIVES)) ((read) variable read (0 1) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0 1) #f (larceny PRIMITIVES)) ((open-output-file) variable open-output-file (0 1) #f (larceny PRIMITIVES)) ((open-input-file) variable open-input-file (0 1) #f (larceny PRIMITIVES)) ((newline) variable newline (0 1) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0 1) #f (larceny PRIMITIVES)) ((display) variable display (0 1) #f (larceny PRIMITIVES)) ((current-output-port) variable current-output-port (0 1) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0 1) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0 1) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0 1) #f (larceny PRIMITIVES)) ((call-with-output-file) variable call-with-output-file (0 1) #f (larceny PRIMITIVES)) ((call-with-input-file) variable call-with-input-file (0 1) #f (larceny PRIMITIVES)) ((make-custom-textual-input/output-port) variable make-custom-textual-input/output-port (0 1) #f (larceny PRIMITIVES)) ((make-custom-binary-input/output-port) variable make-custom-binary-input/output-port (0 1) #f (larceny PRIMITIVES)) ((open-file-input/output-port) variable open-file-input/output-port (0 1) #f (larceny PRIMITIVES)) ((put-datum) variable put-datum (0 1) #f (larceny PRIMITIVES)) ((put-string) variable put-string (0 1) #f (larceny PRIMITIVES)) ((put-char) variable put-char (0 1) #f (larceny PRIMITIVES)) ((put-bytevector) variable put-bytevector (0 1) #f (larceny PRIMITIVES)) ((put-u8) variable put-u8 (0 1) #f (larceny PRIMITIVES)) ((make-custom-textual-output-port) variable make-custom-textual-output-port (0 1) #f (larceny PRIMITIVES)) ((make-custom-binary-output-port) variable make-custom-binary-output-port (0 1) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0 1) #f (larceny PRIMITIVES)) ((standard-error-port) variable standard-error-port (0 1) #f (larceny PRIMITIVES)) ((standard-output-port) variable standard-output-port (0 1) #f (larceny PRIMITIVES)) ((call-with-string-output-port) variable call-with-string-output-port (0 1) #f (larceny PRIMITIVES)) ((call-with-bytevector-output-port) variable call-with-bytevector-output-port (0 1) #f (larceny PRIMITIVES)) ((open-string-output-port) variable open-string-output-port (0 1) #f (larceny PRIMITIVES)) ((open-bytevector-output-port) variable open-bytevector-output-port (0 1) #f (larceny PRIMITIVES)) ((open-file-output-port) variable open-file-output-port (0 1) #f (larceny PRIMITIVES)) ((output-port-buffer-mode) variable output-port-buffer-mode (0 1) #f (larceny PRIMITIVES)) ((flush-output-port) variable flush-output-port (0 1) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0 1) #f (larceny PRIMITIVES)) ((get-datum) variable get-datum (0 1) #f (larceny PRIMITIVES)) ((get-line) variable get-line (0 1) #f (larceny PRIMITIVES)) ((get-string-all) variable get-string-all (0 1) #f (larceny PRIMITIVES)) ((get-string-n!) variable get-string-n! (0 1) #f (larceny PRIMITIVES)) ((get-string-n) variable get-string-n (0 1) #f (larceny PRIMITIVES)) ((lookahead-char) variable lookahead-char (0 1) #f (larceny PRIMITIVES)) ((get-char) variable get-char (0 1) #f (larceny PRIMITIVES)) ((get-bytevector-all) variable get-bytevector-all (0 1) #f (larceny PRIMITIVES)) ((get-bytevector-some) variable get-bytevector-some (0 1) #f (larceny PRIMITIVES)) ((get-bytevector-n!) variable get-bytevector-n! (0 1) #f (larceny PRIMITIVES)) ((get-bytevector-n) variable get-bytevector-n (0 1) #f (larceny PRIMITIVES)) ((lookahead-u8) variable lookahead-u8 (0 1) #f (larceny PRIMITIVES)) ((get-u8) variable get-u8 (0 1) #f (larceny PRIMITIVES)) ((make-custom-textual-input-port) variable make-custom-textual-input-port (0 1) #f (larceny PRIMITIVES)) ((make-custom-binary-input-port) variable make-custom-binary-input-port (0 1) #f (larceny PRIMITIVES)) ((standard-input-port) variable standard-input-port (0 1) #f (larceny PRIMITIVES)) ((open-string-input-port) variable open-string-input-port (0 1) #f (larceny PRIMITIVES)) ((open-bytevector-input-port) variable open-bytevector-input-port (0 1) #f (larceny PRIMITIVES)) ((open-file-input-port) variable open-file-input-port (0 1) #f (larceny PRIMITIVES)) ((port-eof?) variable port-eof? (0 1) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0 1) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0 1) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0 1) #f (larceny PRIMITIVES)) ((set-port-position!) variable set-port-position! (0 1) #f (larceny PRIMITIVES)) ((port-has-set-port-position!?) variable port-has-set-port-position!? (0 1) #f (larceny PRIMITIVES)) ((port-position) variable port-position (0 1) #f (larceny PRIMITIVES)) ((port-has-port-position?) variable port-has-port-position? (0 1) #f (larceny PRIMITIVES)) ((transcoded-port) variable transcoded-port (0 1) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0 1) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0 1) #f (larceny PRIMITIVES)) ((port-transcoder) variable port-transcoder (0 1) #f (larceny PRIMITIVES)) ((port?) variable port? (0 1) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0 1) #f (larceny PRIMITIVES)) ((string->bytevector) variable string->bytevector (0 1) #f (larceny PRIMITIVES)) ((bytevector->string) variable bytevector->string (0 1) #f (larceny PRIMITIVES)) ((transcoder-error-handling-mode) variable transcoder-error-handling-mode (0 1) #f (larceny PRIMITIVES)) ((transcoder-eol-style) variable transcoder-eol-style (0 1) #f (larceny PRIMITIVES)) ((transcoder-codec) variable transcoder-codec (0 1) #f (larceny PRIMITIVES)) ((native-transcoder) variable native-transcoder (0 1) #f (larceny PRIMITIVES)) ((make-transcoder) variable make-transcoder (0 1) #f (larceny PRIMITIVES)) ((error-handling-mode) macro |\x0;error-handling-mode~1pxGHH~4409| (0 1) #f (rnrs io ports)) ((i/o-encoding-error-char) variable i/o-encoding-error-char (0 1) #f (larceny PRIMITIVES)) ((i/o-encoding-error?) variable i/o-encoding-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-encoding-error) variable make-i/o-encoding-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-encoding) variable &i/o-encoding (0 1) #f (larceny PRIMITIVES)) ((i/o-decoding-error?) variable i/o-decoding-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-decoding-error) variable make-i/o-decoding-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-decoding) variable &i/o-decoding (0 1) #f (larceny PRIMITIVES)) ((native-eol-style) variable native-eol-style (0 1) #f (larceny PRIMITIVES)) ((eol-style) macro |\x0;eol-style~1pxGHH~4394| (0 1) #f (rnrs io ports)) ((utf-16-codec) variable utf-16-codec (0 1) #f (larceny PRIMITIVES)) ((utf-8-codec) variable utf-8-codec (0 1) #f (larceny PRIMITIVES)) ((latin-1-codec) variable latin-1-codec (0 1) #f (larceny PRIMITIVES)) ((buffer-mode?) variable buffer-mode? (0 1) #f (larceny PRIMITIVES)) ((buffer-mode) macro |\x0;buffer-mode~1pxGHH~4379| (0 1) #f (rnrs io ports)) ((no-truncate) variable no-truncate (0 1) #f (larceny PRIMITIVES)) ((no-fail) variable no-fail (0 1) #f (larceny PRIMITIVES)) ((no-create) variable no-create (0 1) #f (larceny PRIMITIVES)) ((file-options) variable file-options (0 1) #f (larceny PRIMITIVES)) ((i/o-error-port) variable i/o-error-port (0 1) #f (larceny PRIMITIVES)) ((i/o-port-error?) variable i/o-port-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-port-error) variable make-i/o-port-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-port) variable &i/o-port (0 1) #f (larceny PRIMITIVES)) ((i/o-file-does-not-exist-error?) variable i/o-file-does-not-exist-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-file-does-not-exist-error) variable make-i/o-file-does-not-exist-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-file-does-not-exist) variable &i/o-file-does-not-exist (0 1) #f (larceny PRIMITIVES)) ((i/o-file-already-exists-error?) variable i/o-file-already-exists-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-file-already-exists-error) variable make-i/o-file-already-exists-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-file-already-exists) variable &i/o-file-already-exists (0 1) #f (larceny PRIMITIVES)) ((i/o-file-is-read-only-error?) variable i/o-file-is-read-only-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-file-is-read-only-error) variable make-i/o-file-is-read-only-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-file-is-read-only) variable &i/o-file-is-read-only (0 1) #f (larceny PRIMITIVES)) ((i/o-file-protection-error?) variable i/o-file-protection-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-file-protection-error) variable make-i/o-file-protection-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-file-protection) variable &i/o-file-protection (0 1) #f (larceny PRIMITIVES)) ((i/o-error-filename) variable i/o-error-filename (0 1) #f (larceny PRIMITIVES)) ((i/o-filename-error?) variable i/o-filename-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-filename-error) variable make-i/o-filename-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-filename) variable &i/o-filename (0 1) #f (larceny PRIMITIVES)) ((i/o-error-position) variable i/o-error-position (0 1) #f (larceny PRIMITIVES)) ((i/o-invalid-position-error?) variable i/o-invalid-position-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-invalid-position-error) variable make-i/o-invalid-position-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-invalid-position) variable &i/o-invalid-position (0 1) #f (larceny PRIMITIVES)) ((i/o-write-error?) variable i/o-write-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-write-error) variable make-i/o-write-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-write) variable &i/o-write (0 1) #f (larceny PRIMITIVES)) ((i/o-read-error?) variable i/o-read-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-read-error) variable make-i/o-read-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-read) variable &i/o-read (0 1) #f (larceny PRIMITIVES)) ((i/o-error?) variable i/o-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-error) variable make-i/o-error (0 1) #f (larceny PRIMITIVES)) ((&i/o) variable &i/o (0 1) #f (larceny PRIMITIVES)) ((undefined-violation?) variable undefined-violation? (0 1) #f (larceny PRIMITIVES)) ((make-undefined-violation) variable make-undefined-violation (0 1) #f (larceny PRIMITIVES)) ((&undefined) variable &undefined (0 1) #f (larceny PRIMITIVES)) ((syntax-violation-subform) variable syntax-violation-subform (0 1) #f (larceny PRIMITIVES)) ((syntax-violation-form) variable syntax-violation-form (0 1) #f (larceny PRIMITIVES)) ((syntax-violation?) variable syntax-violation? (0 1) #f (larceny PRIMITIVES)) ((make-syntax-violation) variable make-syntax-violation (0 1) #f (larceny PRIMITIVES)) ((&syntax) variable &syntax (0 1) #f (larceny PRIMITIVES)) ((lexical-violation?) variable lexical-violation? (0 1) #f (larceny PRIMITIVES)) ((make-lexical-violation) variable make-lexical-violation (0 1) #f (larceny PRIMITIVES)) ((&lexical) variable &lexical (0 1) #f (larceny PRIMITIVES)) ((implementation-restriction-violation?) variable implementation-restriction-violation? (0 1) #f (larceny PRIMITIVES)) ((make-implementation-restriction-violation) variable make-implementation-restriction-violation (0 1) #f (larceny PRIMITIVES)) ((&implementation-restriction) variable &implementation-restriction (0 1) #f (larceny PRIMITIVES)) ((non-continuable-violation?) variable non-continuable-violation? (0 1) #f (larceny PRIMITIVES)) ((make-non-continuable-violation) variable make-non-continuable-violation (0 1) #f (larceny PRIMITIVES)) ((&non-continuable) variable &non-continuable (0 1) #f (larceny PRIMITIVES)) ((condition-who) variable condition-who (0 1) #f (larceny PRIMITIVES)) ((who-condition?) variable who-condition? (0 1) #f (larceny PRIMITIVES)) ((make-who-condition) variable make-who-condition (0 1) #f (larceny PRIMITIVES)) ((&who) variable &who (0 1) #f (larceny PRIMITIVES)) ((condition-irritants) variable condition-irritants (0 1) #f (larceny PRIMITIVES)) ((irritants-condition?) variable irritants-condition? (0 1) #f (larceny PRIMITIVES)) ((make-irritants-condition) variable make-irritants-condition (0 1) #f (larceny PRIMITIVES)) ((&irritants) variable &irritants (0 1) #f (larceny PRIMITIVES)) ((assertion-violation?) variable assertion-violation? (0 1) #f (larceny PRIMITIVES)) ((make-assertion-violation) variable make-assertion-violation (0 1) #f (larceny PRIMITIVES)) ((&assertion) variable &assertion (0 1) #f (larceny PRIMITIVES)) ((violation?) variable violation? (0 1) #f (larceny PRIMITIVES)) ((make-violation) variable make-violation (0 1) #f (larceny PRIMITIVES)) ((&violation) variable &violation (0 1) #f (larceny PRIMITIVES)) ((error?) variable error? (0 1) #f (larceny PRIMITIVES)) ((make-error) variable make-error (0 1) #f (larceny PRIMITIVES)) ((&error) variable &error (0 1) #f (larceny PRIMITIVES)) ((serious-condition?) variable serious-condition? (0 1) #f (larceny PRIMITIVES)) ((make-serious-condition) variable make-serious-condition (0 1) #f (larceny PRIMITIVES)) ((&serious) variable &serious (0 1) #f (larceny PRIMITIVES)) ((warning?) variable warning? (0 1) #f (larceny PRIMITIVES)) ((make-warning) variable make-warning (0 1) #f (larceny PRIMITIVES)) ((&warning) variable &warning (0 1) #f (larceny PRIMITIVES)) ((condition-message) variable condition-message (0 1) #f (larceny PRIMITIVES)) ((message-condition?) variable message-condition? (0 1) #f (larceny PRIMITIVES)) ((make-message-condition) variable make-message-condition (0 1) #f (larceny PRIMITIVES)) ((&message) variable &message (0 1) #f (larceny PRIMITIVES)) ((define-condition-type) macro |\x0;define-condition-type~1pxGHH~1721| (0 1) #f (rnrs conditions)) ((condition-accessor) variable condition-accessor (0 1) #f (larceny PRIMITIVES)) ((condition-predicate) variable condition-predicate (0 1) #f (larceny PRIMITIVES)) ((condition?) variable condition? (0 1) #f (larceny PRIMITIVES)) ((simple-conditions) variable simple-conditions (0 1) #f (larceny PRIMITIVES)) ((condition) variable condition (0 1) #f (larceny PRIMITIVES)) ((&condition) variable &condition (0 1) #f (larceny PRIMITIVES)) ((guard) macro |\x0;guard~1pxGHH~1548| (0 1) #f (rnrs exceptions)) ((raise-continuable) variable raise-continuable (0 1) #f (larceny PRIMITIVES)) ((raise) variable raise (0 1) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0 1) #f (larceny PRIMITIVES)) ((record-constructor-descriptor) variable |\x0;record-constructor-descriptor~1pxGHH~3324| (0 1) #f (rnrs records syntactic original)) ((record-type-descriptor) variable |\x0;record-type-descriptor~1pxGHH~3323| (0 1) #f (rnrs records syntactic original)) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0 1) #f (larceny r7rs macros)) ((record-field-mutable?) variable record-field-mutable? (0 1) #f (larceny PRIMITIVES)) ((record-type-field-names) variable record-type-field-names (0 1) #f (larceny PRIMITIVES)) ((record-type-opaque?) variable record-type-opaque? (0 1) #f (larceny PRIMITIVES)) ((record-type-sealed?) variable record-type-sealed? (0 1) #f (larceny PRIMITIVES)) ((record-type-generative?) variable record-type-generative? (0 1) #f (larceny PRIMITIVES)) ((record-type-uid) variable record-type-uid (0 1) #f (larceny PRIMITIVES)) ((record-type-parent) variable record-type-parent (0 1) #f (larceny PRIMITIVES)) ((record-type-name) variable record-type-name (0 1) #f (larceny PRIMITIVES)) ((record-rtd) variable record-rtd (0 1) #f (larceny PRIMITIVES)) ((record?) variable record? (0 1) #f (larceny PRIMITIVES)) ((record-mutator) variable record-mutator (0 1) #f (larceny PRIMITIVES)) ((record-accessor) variable record-accessor (0 1) #f (larceny PRIMITIVES)) ((record-predicate) variable record-predicate (0 1) #f (larceny PRIMITIVES)) ((record-constructor) variable record-constructor (0 1) #f (larceny PRIMITIVES)) ((make-record-constructor-descriptor) variable make-record-constructor-descriptor (0 1) #f (larceny PRIMITIVES)) ((record-type-descriptor?) variable record-type-descriptor? (0 1) #f (larceny PRIMITIVES)) ((make-record-type-descriptor) variable make-record-type-descriptor (0 1) #f (larceny PRIMITIVES)) ((case-lambda) macro |\x0;case-lambda~1pxGHH~3944| (0 1) #f (rnrs control)) ((do) macro |\x0;do~1pxGHH~3884| (0 1) #f (rnrs control)) ((unless) macro |\x0;unless~1pxGHH~3865| (0 1) #f (rnrs control)) ((when) macro |\x0;when~1pxGHH~3846| (0 1) #f (rnrs control)) ((vector-sort!) variable vector-sort! (0 1) #f (larceny PRIMITIVES)) ((vector-sort) variable vector-sort (0 1) #f (larceny PRIMITIVES)) ((list-sort) variable list-sort (0 1) #f (larceny PRIMITIVES)) ((cons*) variable cons* (0 1) #f (larceny PRIMITIVES)) ((assq) variable assq (0 1) #f (larceny PRIMITIVES)) ((assv) variable assv (0 1) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0 1) #f (rnrs lists)) ((assp) variable assp (0 1) #f (larceny PRIMITIVES)) ((memq) variable memq (0 1) #f (larceny PRIMITIVES)) ((memv) variable memv (0 1) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0 1) #f (rnrs lists)) ((memp) variable memp (0 1) #f (larceny PRIMITIVES)) ((remv) variable remv (0 1) #f (larceny PRIMITIVES)) ((remq) variable remq (0 1) #f (larceny PRIMITIVES)) ((remove) variable |\x0;remove~1pxGHH~1538| (0 1) #f (rnrs lists)) ((remp) variable remp (0 1) #f (larceny PRIMITIVES)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0 1) #f (rnrs lists)) ((fold-left) variable fold-left (0 1) #f (larceny PRIMITIVES)) ((partition) variable partition (0 1) #f (larceny PRIMITIVES)) ((filter) variable filter (0 1) #f (larceny PRIMITIVES)) ((exists) variable exists (0 1) #f (larceny PRIMITIVES)) ((for-all) variable for-all (0 1) #f (larceny PRIMITIVES)) ((find) variable find (0 1) #f (larceny PRIMITIVES)) ((utf32->string) variable utf32->string (0 1) #f (larceny PRIMITIVES)) ((utf16->string) variable utf16->string (0 1) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0 1) #f (larceny PRIMITIVES)) ((string->utf32) variable string->utf32 (0 1) #f (larceny PRIMITIVES)) ((string->utf16) variable string->utf16 (0 1) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-set!) variable bytevector-ieee-double-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-native-set!) variable bytevector-ieee-double-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-set!) variable bytevector-ieee-single-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-native-set!) variable bytevector-ieee-single-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-ref) variable bytevector-ieee-double-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-native-ref) variable bytevector-ieee-double-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-ref) variable bytevector-ieee-single-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-native-ref) variable bytevector-ieee-single-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s64-native-set!) variable bytevector-s64-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u64-native-set!) variable bytevector-u64-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s64-set!) variable bytevector-s64-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u64-set!) variable bytevector-u64-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s64-native-ref) variable bytevector-s64-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u64-native-ref) variable bytevector-u64-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s64-ref) variable bytevector-s64-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u64-ref) variable bytevector-u64-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s32-native-set!) variable bytevector-s32-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u32-native-set!) variable bytevector-u32-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s32-set!) variable bytevector-s32-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u32-set!) variable bytevector-u32-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s32-native-ref) variable bytevector-s32-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u32-native-ref) variable bytevector-u32-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s32-ref) variable bytevector-s32-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u32-ref) variable bytevector-u32-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s16-native-set!) variable bytevector-s16-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u16-native-set!) variable bytevector-u16-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s16-set!) variable bytevector-s16-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u16-set!) variable bytevector-u16-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s16-native-ref) variable bytevector-s16-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u16-native-ref) variable bytevector-u16-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s16-ref) variable bytevector-s16-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u16-ref) variable bytevector-u16-ref (0 1) #f (larceny PRIMITIVES)) ((sint-list->bytevector) variable sint-list->bytevector (0 1) #f (larceny PRIMITIVES)) ((uint-list->bytevector) variable uint-list->bytevector (0 1) #f (larceny PRIMITIVES)) ((bytevector->sint-list) variable bytevector->sint-list (0 1) #f (larceny PRIMITIVES)) ((bytevector->uint-list) variable bytevector->uint-list (0 1) #f (larceny PRIMITIVES)) ((bytevector-sint-set!) variable bytevector-sint-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-uint-set!) variable bytevector-uint-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-sint-ref) variable bytevector-sint-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-uint-ref) variable bytevector-uint-ref (0 1) #f (larceny PRIMITIVES)) ((u8-list->bytevector) variable u8-list->bytevector (0 1) #f (larceny PRIMITIVES)) ((bytevector->u8-list) variable bytevector->u8-list (0 1) #f (larceny PRIMITIVES)) ((bytevector-s8-set!) variable bytevector-s8-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s8-ref) variable bytevector-s8-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-copy) variable bytevector-copy (0 1) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~3824| (0 1) #f (rnrs bytevectors)) ((bytevector-fill!) variable bytevector-fill! (0 1) #f (larceny PRIMITIVES)) ((bytevector=?) variable bytevector=? (0 1) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0 1) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0 1) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0 1) #f (larceny PRIMITIVES)) ((native-endianness) variable native-endianness (0 1) #f (larceny PRIMITIVES)) ((endianness) macro |\x0;endianness~1pxGHH~3825| (0 1) #f (rnrs bytevectors)) ((string-normalize-nfkc) variable string-normalize-nfkc (0 1) #f (larceny PRIMITIVES)) ((string-normalize-nfc) variable string-normalize-nfc (0 1) #f (larceny PRIMITIVES)) ((string-normalize-nfkd) variable string-normalize-nfkd (0 1) #f (larceny PRIMITIVES)) ((string-normalize-nfd) variable string-normalize-nfd (0 1) #f (larceny PRIMITIVES)) ((string-ci>=?) variable string-ci>=? (0 1) #f (larceny PRIMITIVES)) ((string-ci<=?) variable string-ci<=? (0 1) #f (larceny PRIMITIVES)) ((string-ci>?) variable string-ci>? (0 1) #f (larceny PRIMITIVES)) ((string-ci<?) variable string-ci<? (0 1) #f (larceny PRIMITIVES)) ((string-ci=?) variable string-ci=? (0 1) #f (larceny PRIMITIVES)) ((string-foldcase) variable string-foldcase (0 1) #f (larceny PRIMITIVES)) ((string-titlecase) variable string-titlecase (0 1) #f (larceny PRIMITIVES)) ((string-downcase) variable string-downcase (0 1) #f (larceny PRIMITIVES)) ((string-upcase) variable string-upcase (0 1) #f (larceny PRIMITIVES)) ((char-general-category) variable char-general-category (0 1) #f (larceny PRIMITIVES)) ((char-title-case?) variable char-title-case? (0 1) #f (larceny PRIMITIVES)) ((char-lower-case?) variable char-lower-case? (0 1) #f (larceny PRIMITIVES)) ((char-upper-case?) variable char-upper-case? (0 1) #f (larceny PRIMITIVES)) ((char-whitespace?) variable char-whitespace? (0 1) #f (larceny PRIMITIVES)) ((char-numeric?) variable char-numeric? (0 1) #f (larceny PRIMITIVES)) ((char-alphabetic?) variable char-alphabetic? (0 1) #f (larceny PRIMITIVES)) ((char-ci>=?) variable char-ci>=? (0 1) #f (larceny PRIMITIVES)) ((char-ci<=?) variable char-ci<=? (0 1) #f (larceny PRIMITIVES)) ((char-ci>?) variable char-ci>? (0 1) #f (larceny PRIMITIVES)) ((char-ci<?) variable char-ci<? (0 1) #f (larceny PRIMITIVES)) ((char-ci=?) variable char-ci=? (0 1) #f (larceny PRIMITIVES)) ((char-foldcase) variable char-foldcase (0 1) #f (larceny PRIMITIVES)) ((char-titlecase) variable char-titlecase (0 1) #f (larceny PRIMITIVES)) ((char-downcase) variable char-downcase (0 1) #f (larceny PRIMITIVES)) ((char-upcase) variable char-upcase (0 1) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0 1) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0 1) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0 1) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0 1) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0 1) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0 1) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0 1) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0 1) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0 1) #f (larceny PRIMITIVES)) ((div0) variable div0 (0 1) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0 1) #f (larceny PRIMITIVES)) ((mod) variable mod (0 1) #f (larceny PRIMITIVES)) ((div) variable div (0 1) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0 1) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0 1) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0 1) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0 1) #f (larceny PRIMITIVES)) ((exact) variable exact (0 1) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0 1) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0 1) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0 1) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0 1) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0 1) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0 1) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0 1) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0 1) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0 1) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0 1) #f (larceny PRIMITIVES)) ((vector) variable vector (0 1) #f (larceny PRIMITIVES)) ((values) variable values (0 1) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0 1) #f (larceny PRIMITIVES)) ((tan) variable tan (0 1) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0 1) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0 1) #f (larceny PRIMITIVES)) ((substring) variable substring (0 1) #f (larceny PRIMITIVES)) ((string?) variable string? (0 1) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0 1) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0 1) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0 1) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0 1) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0 1) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0 1) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0 1) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0 1) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0 1) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0 1) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0 1) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0 1) #f (larceny PRIMITIVES)) ((string) variable string (0 1) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0 1) #f (larceny PRIMITIVES)) ((sin) variable sin (0 1) #f (larceny PRIMITIVES)) ((round) variable round (0 1) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0 1) #f (larceny PRIMITIVES)) ((real?) variable real? (0 1) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0 1) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0 1) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0 1) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0 1) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0 1) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0 1) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0 1) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0 1) #f (larceny PRIMITIVES)) ((number?) variable number? (0 1) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0 1) #f (larceny PRIMITIVES)) ((null?) variable null? (0 1) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0 1) #f (larceny PRIMITIVES)) ((min) variable min (0 1) #f (larceny PRIMITIVES)) ((max) variable max (0 1) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0 1) #f (rnrs base)) ((make-vector) variable make-vector (0 1) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0 1) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0 1) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0 1) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0 1) #f (larceny PRIMITIVES)) ((log) variable log (0 1) #f (larceny PRIMITIVES)) ((list?) variable list? (0 1) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0 1) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0 1) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0 1) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0 1) #f (larceny PRIMITIVES)) ((list) variable list (0 1) #f (larceny PRIMITIVES)) ((length) variable length (0 1) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0 1) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0 1) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0 1) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0 1) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0 1) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0 1) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0 1) #f (rnrs base)) ((floor) variable floor (0 1) #f (larceny PRIMITIVES)) ((expt) variable expt (0 1) #f (larceny PRIMITIVES)) ((exp) variable exp (0 1) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0 1) #f (larceny PRIMITIVES)) ((even?) variable even? (0 1) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0 1) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0 1) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0 1) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0 1) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0 1) #f (larceny PRIMITIVES)) ((cos) variable cos (0 1) #f (larceny PRIMITIVES)) ((cons) variable cons (0 1) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0 1) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0 1) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0 1) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0 1) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0 1) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0 1) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0 1) #f (larceny PRIMITIVES)) ((char?) variable char? (0 1) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0 1) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0 1) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0 1) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0 1) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0 1) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0 1) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0 1) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0 1) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0 1) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0 1) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0 1) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0 1) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0 1) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0 1) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0 1) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0 1) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0 1) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0 1) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0 1) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0 1) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0 1) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0 1) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0 1) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0 1) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0 1) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0 1) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0 1) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0 1) #f (larceny PRIMITIVES)) ((caar) variable caar (0 1) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0 1) #f (larceny PRIMITIVES)) ((car) variable car (0 1) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0 1) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0 1) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0 1) #f (larceny PRIMITIVES)) ((atan) variable atan (0 1) #f (larceny PRIMITIVES)) ((asin) variable asin (0 1) #f (larceny PRIMITIVES)) ((apply) variable apply (0 1) #f (larceny PRIMITIVES)) ((append) variable append (0 1) #f (larceny PRIMITIVES)) ((angle) variable angle (0 1) #f (larceny PRIMITIVES)) ((acos) variable acos (0 1) #f (larceny PRIMITIVES)) ((abs) variable abs (0 1) #f (larceny PRIMITIVES)) ((>=) variable >= (0 1) #f (larceny PRIMITIVES)) ((>) variable > (0 1) #f (larceny PRIMITIVES)) ((=) variable = (0 1) #f (larceny PRIMITIVES)) ((<=) variable <= (0 1) #f (larceny PRIMITIVES)) ((<) variable < (0 1) #f (larceny PRIMITIVES)) ((/) variable / (0 1) #f (larceny PRIMITIVES)) ((-) variable - (0 1) #f (larceny PRIMITIVES)) ((+) variable + (0 1) #f (larceny PRIMITIVES)) ((*) variable * (0 1) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (0 1) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (0 1) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0 1) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0 1) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0 1) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0 1) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0 1) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0 1) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0 1) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0 1) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0 1) #f (core let)) ((let*) macro |\x0;let*~1pxGHH~241| (0 1) #f (core derived)) ((...) macro ... (0 2 1) #f ()) ((_) macro _ (0 2 1) #f ()) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0 1) #f (rnrs base)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0 1) #f (rnrs base)) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((set!) macro set! (0 2 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((error) variable |\x0;error~1pxGHH~53790| (0) #f (srfi :23 error)) ((index) macro |\x0;index~1pxGHH~61316| (0) #f (srfi :42 eager-comprehensions)) ((nested) macro |\x0;nested~1pxGHH~61310| (0) #f (srfi :42 eager-comprehensions)) ((not) variable not (0 1) #f (larceny PRIMITIVES)) ((let) macro |\x0;let~1pxGHH~144| (0 1) #f (core let)) ((begin) macro begin (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((if) macro if (0 1) #f ()) ((:generator-proc) macro |\x0;:generator-proc~1pxGHH~62862| (0) #f (srfi :42 eager-comprehensions)) ((dispatch-union) variable |\x0;dispatch-union~1pxGHH~62944| (0) #f (srfi :42 eager-comprehensions)) ((make-initial-:-dispatch) variable |\x0;make-initial-:-dispatch~1pxGHH~62945| (0) #f (srfi :42 eager-comprehensions)) ((:-dispatch-set!) variable |\x0;:-dispatch-set!~1pxGHH~62948| (0) #f (srfi :42 eager-comprehensions)) ((:-dispatch-ref) variable |\x0;:-dispatch-ref~1pxGHH~62947| (0) #f (srfi :42 eager-comprehensions)) ((:until) macro |\x0;:until~1pxGHH~62081| (0) #f (srfi :42 eager-comprehensions)) ((:while) macro |\x0;:while~1pxGHH~62014| (0) #f (srfi :42 eager-comprehensions)) ((:parallel) macro |\x0;:parallel~1pxGHH~61862| (0) #f (srfi :42 eager-comprehensions)) ((:let) macro |\x0;:let~1pxGHH~61819| (0) #f (srfi :42 eager-comprehensions)) ((:do) macro |\x0;:do~1pxGHH~61768| (0) #f (srfi :42 eager-comprehensions)) ((:integers) macro |\x0;:integers~1pxGHH~62367| (0) #f (srfi :42 eager-comprehensions)) ((:dispatched) macro |\x0;:dispatched~1pxGHH~62811| (0) #f (srfi :42 eager-comprehensions)) ((:port) macro |\x0;:port~1pxGHH~62749| (0) #f (srfi :42 eager-comprehensions)) ((:char-range) macro |\x0;:char-range~1pxGHH~62700| (0) #f (srfi :42 eager-comprehensions)) ((:real-range) macro |\x0;:real-range~1pxGHH~62565| (0) #f (srfi :42 eager-comprehensions)) ((:range) macro |\x0;:range~1pxGHH~62404| (0) #f (srfi :42 eager-comprehensions)) ((:vector) macro |\x0;:vector~1pxGHH~62278| (0) #f (srfi :42 eager-comprehensions)) ((:string) macro |\x0;:string~1pxGHH~62208| (0) #f (srfi :42 eager-comprehensions)) ((:list) macro |\x0;:list~1pxGHH~62148| (0) #f (srfi :42 eager-comprehensions)) ((:) macro |\x0;:~1pxGHH~62949| (0) #f (srfi :42 eager-comprehensions)) ((fold3-ec) macro |\x0;fold3-ec~1pxGHH~62994| (0) #f (srfi :42 eager-comprehensions)) ((fold-ec) macro |\x0;fold-ec~1pxGHH~63091| (0) #f (srfi :42 eager-comprehensions)) ((last-ec) macro |\x0;last-ec~1pxGHH~63393| (0) #f (srfi :42 eager-comprehensions)) ((first-ec) macro |\x0;first-ec~1pxGHH~63466| (0) #f (srfi :42 eager-comprehensions)) ((every?-ec) macro |\x0;every?-ec~1pxGHH~63778| (0) #f (srfi :42 eager-comprehensions)) ((any?-ec) macro |\x0;any?-ec~1pxGHH~63717| (0) #f (srfi :42 eager-comprehensions)) ((max-ec) macro |\x0;max-ec~1pxGHH~63377| (0) #f (srfi :42 eager-comprehensions)) ((min-ec) macro |\x0;min-ec~1pxGHH~63361| (0) #f (srfi :42 eager-comprehensions)) ((product-ec) macro |\x0;product-ec~1pxGHH~63345| (0) #f (srfi :42 eager-comprehensions)) ((sum-ec) macro |\x0;sum-ec~1pxGHH~63329| (0) #f (srfi :42 eager-comprehensions)) ((vector-of-length-ec) macro |\x0;vector-of-length-ec~1pxGHH~63256| (0) #f (srfi :42 eager-comprehensions)) ((vector-ec) macro |\x0;vector-ec~1pxGHH~63240| (0) #f (srfi :42 eager-comprehensions)) ((string-append-ec) macro |\x0;string-append-ec~1pxGHH~63224| (0) #f (srfi :42 eager-comprehensions)) ((string-ec) macro |\x0;string-ec~1pxGHH~63208| (0) #f (srfi :42 eager-comprehensions)) ((append-ec) macro |\x0;append-ec~1pxGHH~63192| (0) #f (srfi :42 eager-comprehensions)) ((list-ec) macro |\x0;list-ec~1pxGHH~63176| (0) #f (srfi :42 eager-comprehensions)) ((do-ec) macro |\x0;do-ec~1pxGHH~61322| (0) #f (srfi :42 eager-comprehensions)))) (2 (((x |\x0;c~1pxGHH~78690|) variable |\x0;x~1pxGHH~78692| (0) #f (srfi :78 lightweight-testing)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~78690|) . #f) ((expr) . #f) ((expected) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~78621|))) (5123 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #ex:identifier? => (|\x0;env~1pxGHH~78648|) (srfi :78 lightweight-testing) #ex:syntax-rename #ex:free-identifier=? check equal? (|\x0;env~1pxGHH~78631|) if >= check:mode check:proc quote lambda #ex:invalid-form)
 |\x0;check~1pxGHH~78618| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~78661|))) (37464 . #(loop #f 2 src/Build/compile-standard-libraries.sch #f (|.y1\|542\|543| |.results\|542\|546|))) (39774 . #(loop #f 2 src/Build/compile-standard-libraries.sch #f (|.y1\|454\|455| |.results\|454\|458|)))) #ex:identifier? => (|\x0;env~1pxGHH~78672|) (srfi :78 lightweight-testing) #ex:syntax-rename #ex:free-identifier=? #list? if >= check:mode check:proc-ec let cases w first-ec :let equal-pred expected-result actual-result begin set! + not list quote cons check-ec #ex:invalid-form #reverse)
 |\x0;check-ec:make~1pxGHH~78658| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;x~1pxGHH~78692|))) (5916 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (8943 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (14220 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (21209 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (27652 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (33857 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (39490 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (46672 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ())) (53309 . #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))) #ex:identifier? => (|\x0;env~1pxGHH~78870|) (srfi :78 lightweight-testing) #ex:syntax-rename #ex:free-identifier=? check-ec:make nested equal? #list? check-ec (|\x0;env~1pxGHH~78710|) #ex:invalid-form (|\x0;env~1pxGHH~78722|) #append (|\x0;env~1pxGHH~78738|) (|\x0;env~1pxGHH~78761|) (|\x0;env~1pxGHH~78780|) (|\x0;env~1pxGHH~78800|) (|\x0;env~1pxGHH~78817|) (|\x0;env~1pxGHH~78837|) (|\x0;env~1pxGHH~78853|))
 |\x0;check-ec~1pxGHH~78689| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #ex:undefined #|\x0;check:proc-ec~1pxGHH~78657| #|\x0;check:proc~1pxGHH~78617| #|\x0;check-passed?~1pxGHH~78616| #|\x0;check-report~1pxGHH~78615| #|\x0;check:report-failed~1pxGHH~78614| #|\x0;check:report-correct~1pxGHH~78613| #|\x0;check:report-actual-result~1pxGHH~78612| #|\x0;check:report-expression~1pxGHH~78611| #|\x0;ignored2~1pxGHH~78610| #|\x0;check:add-failed!~1pxGHH~78609| #|\x0;check:add-correct!~1pxGHH~78608| #|\x0;check-reset!~1pxGHH~78607| #|\x0;check:failed~1pxGHH~78606| #|\x0;check:correct~1pxGHH~78605| #|\x0;ignored1~1pxGHH~78604| #|\x0;check-set-mode!~1pxGHH~78603| #|\x0;check:mode~1pxGHH~78602| #|\x0;check:mode:state~1pxGHH~78601| #|\x0;check:write~1pxGHH~78600| #write #f #( #(check:mode #f 0 src/Build/compile-standard-libraries.sch #f ()) #|\x0;check:mode:state~1pxGHH~78601|)
 #f #( #(check-set-mode! #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;mode~1pxGHH~78984|)) off summary report-failed report "unrecognized mode" #|\x0;error~1pxGHH~53790| #|\x0;check:mode:state~1pxGHH~78601|)
 report #f #( #(check-reset! #f 0 src/Build/compile-standard-libraries.sch #f ()) #|\x0;check:correct~1pxGHH~78605| #|\x0;check:failed~1pxGHH~78606|)
 #f #( #(check:add-correct! #f 0 src/Build/compile-standard-libraries.sch #f ()) #|\x0;check:correct~1pxGHH~78605|)
 #f #( #(check:add-failed! #f 3 src/Build/compile-standard-libraries.sch #f (|\x0;expression~1pxGHH~78972| |\x0;actual-result~1pxGHH~78973| |\x0;expected-result~1pxGHH~78974|)) #|\x0;check:failed~1pxGHH~78606|)
 #f #( #(check:report-expression #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;expression~1pxGHH~78970|)) #newline #|\x0;check:write~1pxGHH~78600| " => " #display)
 #f #( #(check:report-actual-result #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;actual-result~1pxGHH~78968|)) #|\x0;check:write~1pxGHH~78600| " ; " #display)
 #f #( #(check:report-correct #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;cases~1pxGHH~78964|)) "correct" #display " (" " cases checked)" #newline)
 #f #( #(check:report-failed #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;expected-result~1pxGHH~78962|)) "*** failed ***" #display #newline " ; expected result: " #|\x0;check:write~1pxGHH~78600|)
 #f #( #(check-report #f 0 src/Build/compile-standard-libraries.sch #f ()) #|\x0;check:mode~1pxGHH~78602| #newline "; *** checks *** : " #display #|\x0;check:correct~1pxGHH~78605| " correct, " #|\x0;check:failed~1pxGHH~78606| #length " failed." #reverse " First failed example:" #|\x0;check:report-expression~1pxGHH~78611| #|\x0;check:report-actual-result~1pxGHH~78612| #|\x0;check:report-failed~1pxGHH~78614|)
 #f #( #(check-passed? #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;expected-total-count~1pxGHH~78939|)) #|\x0;check:failed~1pxGHH~78606| #length #|\x0;check:correct~1pxGHH~78605|)
 #f #( #(check:proc #f 4 src/Build/compile-standard-libraries.sch #f (|\x0;expression~1pxGHH~78896| |\x0;thunk~1pxGHH~78897| |\x0;equal~1pxGHH~78898| |\x0;expected-result~1pxGHH~78899|)) #|\x0;check:mode~1pxGHH~78602| #|\x0;check:add-correct!~1pxGHH~78608| #|\x0;check:add-failed!~1pxGHH~78609| #|\x0;check:report-expression~1pxGHH~78611| #|\x0;check:report-actual-result~1pxGHH~78612| #|\x0;check:report-failed~1pxGHH~78614| #|\x0;check:report-correct~1pxGHH~78613| "unrecognized check:mode" #|\x0;error~1pxGHH~53790|)
 #f #( #(check:proc-ec #f 1 src/Build/compile-standard-libraries.sch #f (|\x0;w~1pxGHH~78880|)) #|\x0;check:mode~1pxGHH~78602| #|\x0;check:report-expression~1pxGHH~78611| #|\x0;check:report-actual-result~1pxGHH~78612| #|\x0;check:report-correct~1pxGHH~78613| #|\x0;check:add-correct!~1pxGHH~78608| #|\x0;check:report-failed~1pxGHH~78614| #|\x0;check:add-failed!~1pxGHH~78609|)
 #values)
 (srfi :78 lightweight-testing) ((check macro |\x0;check~1pxGHH~78618| (0) #f (srfi :78 lightweight-testing)) (check-ec macro |\x0;check-ec~1pxGHH~78689| (0) #f (srfi :78 lightweight-testing)) (check-report variable |\x0;check-report~1pxGHH~78615| (0) #f (srfi :78 lightweight-testing)) (check-set-mode! variable |\x0;check-set-mode!~1pxGHH~78603| (0) #f (srfi :78 lightweight-testing)) (check-reset! variable |\x0;check-reset!~1pxGHH~78607| (0) #f (srfi :78 lightweight-testing)) (check-passed? variable |\x0;check-passed?~1pxGHH~78616| (0) #f (srfi :78 lightweight-testing))) (((srfi :42 eager-comprehensions) 0) ((srfi :23 error) 0) ((rnrs) 0)) (|\x0;build~1pxGHH~64831| |\x0;build~1pxGHH~53794| |\x0;build~1pxGHH~9116|) |\x0;build~1pxGHH~79005| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-cf66e1ed92806946a613e7c57a53f1dc 1
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #values)
 (srfi :78) ((check macro |\x0;check~1pxGHH~78618| (0) #f (srfi :78 lightweight-testing)) (check-ec macro |\x0;check-ec~1pxGHH~78689| (0) #f (srfi :78 lightweight-testing)) (check-report variable |\x0;check-report~1pxGHH~78615| (0) #f (srfi :78 lightweight-testing)) (check-set-mode! variable |\x0;check-set-mode!~1pxGHH~78603| (0) #f (srfi :78 lightweight-testing)) (check-reset! variable |\x0;check-reset!~1pxGHH~78607| (0) #f (srfi :78 lightweight-testing)) (check-passed? variable |\x0;check-passed?~1pxGHH~78616| (0) #f (srfi :78 lightweight-testing))) (((srfi :78 lightweight-testing) 0)) (|\x0;build~1pxGHH~79005|) |\x0;build~1pxGHH~79006| #ex:make-library #ex:register-library! #values)
 #f)
))
