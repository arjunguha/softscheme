#!fasl
(define .petit-bootstrap-id-8d52a69ee367b19d94a790b41007ecee (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/126.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-8d52a69ee367b19d94a790b41007ecee 0
'#(#f #( #f #ex:unspecified #|\x0;symbol-hash~1pxGHH~7758| #|\x0;string-ci-hash~1pxGHH~7757| #|\x0;string-hash~1pxGHH~7756| #|\x0;equal-hash~1pxGHH~7755| #|\x0;hash-salt~1pxGHH~7754| #|\x0;*hash-salt*~1pxGHH~7753| #|\x0;hashtable-mutable?~1pxGHH~7752| #|\x0;hashtable-weakness~1pxGHH~7751| #|\x0;hashtable-hash-function~1pxGHH~7750| #|\x0;hashtable-equivalence-function~1pxGHH~7749| #|\x0;hashtable-dec!~1pxGHH~7748| #|\x0;hashtable-inc!~1pxGHH~7747| #|\x0;hashtable-pop!~1pxGHH~7746| #|\x0;hashtable-empty?~1pxGHH~7745| #|\x0;hashtable-find~1pxGHH~7744| #|\x0;hashtable-map->lset~1pxGHH~7743| #|\x0;hashtable-sum~1pxGHH~7742| #|\x0;hashtable-merge!~1pxGHH~7741| #|\x0;hashtable-prune!~1pxGHH~7740| #|\x0;hashtable-update-all!~1pxGHH~7739| #|\x0;hashtable-walk~1pxGHH~7738| #|\x0;hashtable-entry-lists~1pxGHH~7737| #|\x0;hashtable-value-list~1pxGHH~7736| #|\x0;hashtable-key-list~1pxGHH~7735| #|\x0;hashtable-entries~1pxGHH~7734| #|\x0;hashtable-values~1pxGHH~7733| #|\x0;hashtable-keys~1pxGHH~7732| #|\x0;hashtable-empty-copy~1pxGHH~7731| #|\x0;hashtable-clear!~1pxGHH~7730| #|\x0;hashtable-copy~1pxGHH~7729| #|\x0;hashtable-intern!~1pxGHH~7728| #|\x0;hashtable-update!~1pxGHH~7727| #|\x0;hashtable-lookup~1pxGHH~7726| #|\x0;hashtable-contains?~1pxGHH~7725| #|\x0;hashtable-delete!~1pxGHH~7724| #|\x0;hashtable-set!~1pxGHH~7723| #|\x0;hashtable-ref~1pxGHH~7722| #|\x0;nil?~1pxGHH~7721| #|\x0;nil~1pxGHH~7720| #|\x0;hashtable-size~1pxGHH~7719| #|\x0;hashtable?~1pxGHH~7718| #|\x0;hidden-name~1pxGHH~7704| #|\x0;alist->hashtable~1pxGHH~7680| #|\x0;alist->eqv-hashtable~1pxGHH~7679| #|\x0;alist->eq-hashtable~1pxGHH~7678| #|\x0;make-hashtable~1pxGHH~7677| #|\x0;make-eqv-hashtable~1pxGHH~7676| #|\x0;make-eq-hashtable~1pxGHH~7675| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~7715| 0 1 2 3) (|\x0;env~1pxGHH~7696| 4 5 6 7 8 3)) (8 (((x |\x0;c~1pxGHH~7681|) variable |\x0;x~1pxGHH~7684| (1) #f (srfi 126)))) (7 (((complain |\x0;c~1pxGHH~7681|) variable |\x0;complain~1pxGHH~7685| (1) #f (srfi 126)))) (6 (((y |\x0;c~1pxGHH~7681|) . #f))) (5 (((sym1 |\x0;c~1pxGHH~7681|) variable |\x0;sym1~1pxGHH~7692| (1) #f (srfi 126)))) (4 ()) (3 (((symbol-hash) variable |\x0;symbol-hash~1pxGHH~7758| (0) #f (srfi 126)) ((string-ci-hash) variable |\x0;string-ci-hash~1pxGHH~7757| (0) #f (srfi 126)) ((string-hash) variable |\x0;string-hash~1pxGHH~7756| (0) #f (srfi 126)) ((equal-hash) variable |\x0;equal-hash~1pxGHH~7755| (0) #f (srfi 126)) ((hash-salt) variable |\x0;hash-salt~1pxGHH~7754| (0) #f (srfi 126)) ((*hash-salt*) variable |\x0;*hash-salt*~1pxGHH~7753| (0) #f (srfi 126)) ((hashtable-mutable?) variable |\x0;hashtable-mutable?~1pxGHH~7752| (0) #f (srfi 126)) ((hashtable-weakness) variable |\x0;hashtable-weakness~1pxGHH~7751| (0) #f (srfi 126)) ((hashtable-hash-function) variable |\x0;hashtable-hash-function~1pxGHH~7750| (0) #f (srfi 126)) ((hashtable-equivalence-function) variable |\x0;hashtable-equivalence-function~1pxGHH~7749| (0) #f (srfi 126)) ((hashtable-dec!) variable |\x0;hashtable-dec!~1pxGHH~7748| (0) #f (srfi 126)) ((hashtable-inc!) variable |\x0;hashtable-inc!~1pxGHH~7747| (0) #f (srfi 126)) ((hashtable-pop!) variable |\x0;hashtable-pop!~1pxGHH~7746| (0) #f (srfi 126)) ((hashtable-empty?) variable |\x0;hashtable-empty?~1pxGHH~7745| (0) #f (srfi 126)) ((hashtable-find) variable |\x0;hashtable-find~1pxGHH~7744| (0) #f (srfi 126)) ((hashtable-map->lset) variable |\x0;hashtable-map->lset~1pxGHH~7743| (0) #f (srfi 126)) ((hashtable-sum) variable |\x0;hashtable-sum~1pxGHH~7742| (0) #f (srfi 126)) ((hashtable-merge!) variable |\x0;hashtable-merge!~1pxGHH~7741| (0) #f (srfi 126)) ((hashtable-prune!) variable |\x0;hashtable-prune!~1pxGHH~7740| (0) #f (srfi 126)) ((hashtable-update-all!) variable |\x0;hashtable-update-all!~1pxGHH~7739| (0) #f (srfi 126)) ((hashtable-walk) variable |\x0;hashtable-walk~1pxGHH~7738| (0) #f (srfi 126)) ((hashtable-entry-lists) variable |\x0;hashtable-entry-lists~1pxGHH~7737| (0) #f (srfi 126)) ((hashtable-value-list) variable |\x0;hashtable-value-list~1pxGHH~7736| (0) #f (srfi 126)) ((hashtable-key-list) variable |\x0;hashtable-key-list~1pxGHH~7735| (0) #f (srfi 126)) ((hashtable-entries) variable |\x0;hashtable-entries~1pxGHH~7734| (0) #f (srfi 126)) ((hashtable-values) variable |\x0;hashtable-values~1pxGHH~7733| (0) #f (srfi 126)) ((hashtable-keys) variable |\x0;hashtable-keys~1pxGHH~7732| (0) #f (srfi 126)) ((hashtable-empty-copy) variable |\x0;hashtable-empty-copy~1pxGHH~7731| (0) #f (srfi 126)) ((hashtable-clear!) variable |\x0;hashtable-clear!~1pxGHH~7730| (0) #f (srfi 126)) ((hashtable-copy) variable |\x0;hashtable-copy~1pxGHH~7729| (0) #f (srfi 126)) ((hashtable-intern!) variable |\x0;hashtable-intern!~1pxGHH~7728| (0) #f (srfi 126)) ((hashtable-update!) variable |\x0;hashtable-update!~1pxGHH~7727| (0) #f (srfi 126)) ((hashtable-lookup) variable |\x0;hashtable-lookup~1pxGHH~7726| (0) #f (srfi 126)) ((hashtable-contains?) variable |\x0;hashtable-contains?~1pxGHH~7725| (0) #f (srfi 126)) ((hashtable-delete!) variable |\x0;hashtable-delete!~1pxGHH~7724| (0) #f (srfi 126)) ((hashtable-set!) variable |\x0;hashtable-set!~1pxGHH~7723| (0) #f (srfi 126)) ((hashtable-ref) variable |\x0;hashtable-ref~1pxGHH~7722| (0) #f (srfi 126)) ((nil?) variable |\x0;nil?~1pxGHH~7721| (0) #f (srfi 126)) ((nil) variable |\x0;nil~1pxGHH~7720| (0) #f (srfi 126)) ((hashtable-size) variable |\x0;hashtable-size~1pxGHH~7719| (0) #f (srfi 126)) ((hashtable?) variable |\x0;hashtable?~1pxGHH~7718| (0) #f (srfi 126)) ((weakness-set) macro |\x0;weakness-set~1pxGHH~7705| (0) #f (srfi 126)) ((hidden-name |\x0;c~1pxGHH~7681|) variable |\x0;hidden-name~1pxGHH~7704| (0) #f (srfi 126)) ((weakness) macro |\x0;weakness~1pxGHH~7682| (0) #f (srfi 126)) ((alist->hashtable) variable |\x0;alist->hashtable~1pxGHH~7680| (0) #f (srfi 126)) ((alist->eqv-hashtable) variable |\x0;alist->eqv-hashtable~1pxGHH~7679| (0) #f (srfi 126)) ((alist->eq-hashtable) variable |\x0;alist->eq-hashtable~1pxGHH~7678| (0) #f (srfi 126)) ((make-hashtable) variable |\x0;make-hashtable~1pxGHH~7677| (0) #f (srfi 126)) ((make-eqv-hashtable) variable |\x0;make-eqv-hashtable~1pxGHH~7676| (0) #f (srfi 126)) ((make-eq-hashtable) variable |\x0;make-eq-hashtable~1pxGHH~7675| (0) #f (srfi 126)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (0) #f (larceny PRIMITIVES)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((set!) macro set! (1 0) #f ()) ((round) variable round (0) #f (larceny PRIMITIVES)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((raise-continuable) variable raise-continuable (0) #f (larceny PRIMITIVES)) ((raise) variable raise (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((quote) macro quote (0) #f ()) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((or) macro or (0) #f ()) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((newline) variable newline (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((lambda) macro lambda (0) #f ()) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((if) macro if (0) #f ()) ((guard) macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-syntax) macro define-syntax (0) #f ()) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((define) macro define (0) #f ()) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((cond-expand) macro cond-expand (0) #f ()) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((begin) macro begin (0) #f ()) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((and) macro and (0) #f ()) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((_) macro _ (1 0) #f ()) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((...) macro ... (1 0) #f ()) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((case-lambda) macro |\x0;case-lambda~1pxGHH~3944| (0) #f (rnrs control)) ((get-environment-variables) variable get-environment-variables (0) #f (larceny PRIMITIVES)) ((get-environment-variable) variable |\x0;get-environment-variable~1pxGHH~7230| (0) #f (scheme process-context)) ((exit) variable exit (0) #f (larceny PRIMITIVES)) ((emergency-exit) variable emergency-exit (0) #f (larceny PRIMITIVES)) ((command-line) variable |\x0;command-line~1pxGHH~7223| (0) #f (rnrs programs)) ((define-enumeration) macro |\x0;define-enumeration~1pxGHH~7237| (0) #f (rnrs enums)) ((enum-set-projection) variable enum-set-projection (0) #f (larceny PRIMITIVES)) ((enum-set-complement) variable enum-set-complement (0) #f (larceny PRIMITIVES)) ((enum-set-difference) variable enum-set-difference (0) #f (larceny PRIMITIVES)) ((enum-set-intersection) variable enum-set-intersection (0) #f (larceny PRIMITIVES)) ((enum-set-union) variable enum-set-union (0) #f (larceny PRIMITIVES)) ((enum-set=?) variable enum-set=? (0) #f (larceny PRIMITIVES)) ((enum-set-subset?) variable enum-set-subset? (0) #f (larceny PRIMITIVES)) ((enum-set-member?) variable enum-set-member? (0) #f (larceny PRIMITIVES)) ((enum-set->list) variable enum-set->list (0) #f (larceny PRIMITIVES)) ((enum-set-constructor) variable enum-set-constructor (0) #f (larceny PRIMITIVES)) ((enum-set-indexer) variable enum-set-indexer (0) #f (larceny PRIMITIVES)) ((enum-set-universe) variable enum-set-universe (0) #f (larceny PRIMITIVES)) ((make-enumeration) variable make-enumeration (0) #f (larceny PRIMITIVES)) ((fxarithmetic-shift-right) variable fxarithmetic-shift-right (0) #f (larceny PRIMITIVES)) ((fxarithmetic-shift-left) variable fxarithmetic-shift-left (0) #f (larceny PRIMITIVES)) ((fxarithmetic-shift) variable fxarithmetic-shift (0) #f (larceny PRIMITIVES)) ((fxreverse-bit-field) variable fxreverse-bit-field (0) #f (larceny PRIMITIVES)) ((fxrotate-bit-field) variable fxrotate-bit-field (0) #f (larceny PRIMITIVES)) ((fxcopy-bit-field) variable fxcopy-bit-field (0) #f (larceny PRIMITIVES)) ((fxbit-field) variable fxbit-field (0) #f (larceny PRIMITIVES)) ((fxcopy-bit) variable fxcopy-bit (0) #f (larceny PRIMITIVES)) ((fxbit-set?) variable fxbit-set? (0) #f (larceny PRIMITIVES)) ((fxfirst-bit-set) variable fxfirst-bit-set (0) #f (larceny PRIMITIVES)) ((fxlength) variable fxlength (0) #f (larceny PRIMITIVES)) ((fxbit-count) variable fxbit-count (0) #f (larceny PRIMITIVES)) ((fxif) variable fxif (0) #f (larceny PRIMITIVES)) ((fxxor) variable fxxor (0) #f (larceny PRIMITIVES)) ((fxior) variable fxior (0) #f (larceny PRIMITIVES)) ((fxand) variable fxand (0) #f (larceny PRIMITIVES)) ((fxnot) variable fxnot (0) #f (larceny PRIMITIVES)) ((fx*/carry) variable fx*/carry (0) #f (larceny PRIMITIVES)) ((fx-/carry) variable fx-/carry (0) #f (larceny PRIMITIVES)) ((fx+/carry) variable fx+/carry (0) #f (larceny PRIMITIVES)) ((fxmod0) variable fxmod0 (0) #f (larceny PRIMITIVES)) ((fxdiv0) variable fxdiv0 (0) #f (larceny PRIMITIVES)) ((fxdiv0-and-mod0) variable fxdiv0-and-mod0 (0) #f (larceny PRIMITIVES)) ((fxmod) variable fxmod (0) #f (larceny PRIMITIVES)) ((fxdiv) variable fxdiv (0) #f (larceny PRIMITIVES)) ((fxdiv-and-mod) variable fxdiv-and-mod (0) #f (larceny PRIMITIVES)) ((fx*) variable fx* (0) #f (larceny PRIMITIVES)) ((fx-) variable fx- (0) #f (larceny PRIMITIVES)) ((fx+) variable fx+ (0) #f (larceny PRIMITIVES)) ((fxmin) variable fxmin (0) #f (larceny PRIMITIVES)) ((fxmax) variable fxmax (0) #f (larceny PRIMITIVES)) ((fxeven?) variable fxeven? (0) #f (larceny PRIMITIVES)) ((fxodd?) variable fxodd? (0) #f (larceny PRIMITIVES)) ((fxnegative?) variable fxnegative? (0) #f (larceny PRIMITIVES)) ((fxpositive?) variable fxpositive? (0) #f (larceny PRIMITIVES)) ((fxzero?) variable fxzero? (0) #f (larceny PRIMITIVES)) ((fx<=?) variable fx<=? (0) #f (larceny PRIMITIVES)) ((fx>=?) variable fx>=? (0) #f (larceny PRIMITIVES)) ((fx<?) variable fx<? (0) #f (larceny PRIMITIVES)) ((fx>?) variable fx>? (0) #f (larceny PRIMITIVES)) ((fx=?) variable fx=? (0) #f (larceny PRIMITIVES)) ((greatest-fixnum) variable greatest-fixnum (0) #f (larceny PRIMITIVES)) ((least-fixnum) variable least-fixnum (0) #f (larceny PRIMITIVES)) ((fixnum-width) variable fixnum-width (0) #f (larceny PRIMITIVES)) ((fixnum?) variable fixnum? (0) #f (larceny PRIMITIVES)) ((rnrs-symbol-hash) variable symbol-hash (0) #f (larceny PRIMITIVES)) ((rnrs-string-ci-hash) variable string-ci-hash (0) #f (larceny PRIMITIVES)) ((rnrs-string-hash) variable string-hash (0) #f (larceny PRIMITIVES)) ((rnrs-equal-hash) variable equal-hash (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-mutable?) variable hashtable-mutable? (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-hash-function) variable hashtable-hash-function (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-equivalence-function) variable hashtable-equivalence-function (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-entries) variable hashtable-entries (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-keys) variable hashtable-keys (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-clear!) variable hashtable-clear! (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-copy) variable hashtable-copy (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-update!) variable hashtable-update! (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-contains?) variable hashtable-contains? (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-delete!) variable hashtable-delete! (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-set!) variable hashtable-set! (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-ref) variable hashtable-ref (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable-size) variable hashtable-size (0) #f (larceny PRIMITIVES)) ((rnrs-hashtable?) variable hashtable? (0) #f (larceny PRIMITIVES)) ((rnrs-make-hashtable) variable |\x0;make-hashtable~1pxGHH~7276| (0) #f (rnrs hashtables)) ((rnrs-make-eqv-hashtable) variable make-eqv-hashtable (0) #f (larceny PRIMITIVES)) ((rnrs-make-eq-hashtable) variable make-eq-hashtable (0) #f (larceny PRIMITIVES)) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((lset-diff+intersection!) variable |\x0;lset-diff+intersection!~1pxGHH~5105| (0) #f (srfi :1 lists)) ((lset-diff+intersection) variable |\x0;lset-diff+intersection~1pxGHH~5104| (0) #f (srfi :1 lists)) ((lset-xor!) variable |\x0;lset-xor!~1pxGHH~5103| (0) #f (srfi :1 lists)) ((lset-xor) variable |\x0;lset-xor~1pxGHH~5102| (0) #f (srfi :1 lists)) ((lset-difference!) variable |\x0;lset-difference!~1pxGHH~5101| (0) #f (srfi :1 lists)) ((lset-difference) variable |\x0;lset-difference~1pxGHH~5100| (0) #f (srfi :1 lists)) ((lset-intersection!) variable |\x0;lset-intersection!~1pxGHH~5099| (0) #f (srfi :1 lists)) ((lset-intersection) variable |\x0;lset-intersection~1pxGHH~5098| (0) #f (srfi :1 lists)) ((lset-union!) variable |\x0;lset-union!~1pxGHH~5097| (0) #f (srfi :1 lists)) ((lset-union) variable |\x0;lset-union~1pxGHH~5096| (0) #f (srfi :1 lists)) ((lset-adjoin) variable |\x0;lset-adjoin~1pxGHH~5095| (0) #f (srfi :1 lists)) ((lset=) variable |\x0;lset=~1pxGHH~5094| (0) #f (srfi :1 lists)) ((lset<=) variable |\x0;lset<=~1pxGHH~5093| (0) #f (srfi :1 lists)) ((alist-delete!) variable |\x0;alist-delete!~1pxGHH~5079| (0) #f (srfi :1 lists)) ((alist-delete) variable |\x0;alist-delete~1pxGHH~5078| (0) #f (srfi :1 lists)) ((alist-copy) variable |\x0;alist-copy~1pxGHH~5077| (0) #f (srfi :1 lists)) ((alist-cons) variable |\x0;alist-cons~1pxGHH~5076| (0) #f (srfi :1 lists)) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((delete-duplicates!) variable |\x0;delete-duplicates!~1pxGHH~5075| (0) #f (srfi :1 lists)) ((delete!) variable |\x0;delete!~1pxGHH~5073| (0) #f (srfi :1 lists)) ((delete-duplicates) variable |\x0;delete-duplicates~1pxGHH~5074| (0) #f (srfi :1 lists)) ((delete) variable |\x0;delete~1pxGHH~5072| (0) #f (srfi :1 lists)) ((break!) variable |\x0;break!~1pxGHH~5087| (0) #f (srfi :1 lists)) ((span!) variable |\x0;span!~1pxGHH~5085| (0) #f (srfi :1 lists)) ((break) variable |\x0;break~1pxGHH~5086| (0) #f (srfi :1 lists)) ((span) variable |\x0;span~1pxGHH~5084| (0) #f (srfi :1 lists)) ((take-while!) variable |\x0;take-while!~1pxGHH~5083| (0) #f (srfi :1 lists)) ((drop-while) variable |\x0;drop-while~1pxGHH~5082| (0) #f (srfi :1 lists)) ((take-while) variable |\x0;take-while~1pxGHH~5081| (0) #f (srfi :1 lists)) ((list-index) variable |\x0;list-index~1pxGHH~5090| (0) #f (srfi :1 lists)) ((every) variable |\x0;every~1pxGHH~5089| (0) #f (srfi :1 lists)) ((any) variable |\x0;any~1pxGHH~5088| (0) #f (srfi :1 lists)) ((find-tail) variable |\x0;find-tail~1pxGHH~5080| (0) #f (srfi :1 lists)) ((find) variable find (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((remove!) variable |\x0;remove!~1pxGHH~5071| (0) #f (srfi :1 lists)) ((partition!) variable |\x0;partition!~1pxGHH~5069| (0) #f (srfi :1 lists)) ((filter!) variable |\x0;filter!~1pxGHH~5068| (0) #f (srfi :1 lists)) ((remove) variable |\x0;remove~1pxGHH~5070| (0) #f (srfi :1 lists)) ((partition) variable partition (0) #f (larceny PRIMITIVES)) ((filter) variable filter (0) #f (larceny PRIMITIVES)) ((map-in-order) variable |\x0;map-in-order~1pxGHH~5067| (0) #f (srfi :1 lists)) ((filter-map) variable |\x0;filter-map~1pxGHH~5066| (0) #f (srfi :1 lists)) ((pair-for-each) variable |\x0;pair-for-each~1pxGHH~5064| (0) #f (srfi :1 lists)) ((map!) variable |\x0;map!~1pxGHH~5065| (0) #f (srfi :1 lists)) ((append-map!) variable |\x0;append-map!~1pxGHH~5062| (0) #f (srfi :1 lists)) ((append-map) variable |\x0;append-map~1pxGHH~5061| (0) #f (srfi :1 lists)) ((reduce-right) variable |\x0;reduce-right~1pxGHH~5060| (0) #f (srfi :1 lists)) ((pair-fold-right) variable |\x0;pair-fold-right~1pxGHH~5057| (0) #f (srfi :1 lists)) ((unfold-right) variable |\x0;unfold-right~1pxGHH~5054| (0) #f (srfi :1 lists)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0) #f (rnrs lists)) ((reduce) variable |\x0;reduce~1pxGHH~5059| (0) #f (srfi :1 lists)) ((pair-fold) variable |\x0;pair-fold~1pxGHH~5058| (0) #f (srfi :1 lists)) ((unfold) variable |\x0;unfold~1pxGHH~5055| (0) #f (srfi :1 lists)) ((fold) variable |\x0;fold~1pxGHH~5056| (0) #f (srfi :1 lists)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((count) variable |\x0;count~1pxGHH~5053| (0) #f (srfi :1 lists)) ((unzip5) variable |\x0;unzip5~1pxGHH~5042| (0) #f (srfi :1 lists)) ((unzip4) variable |\x0;unzip4~1pxGHH~5041| (0) #f (srfi :1 lists)) ((unzip3) variable |\x0;unzip3~1pxGHH~5040| (0) #f (srfi :1 lists)) ((unzip2) variable |\x0;unzip2~1pxGHH~5039| (0) #f (srfi :1 lists)) ((unzip1) variable |\x0;unzip1~1pxGHH~5038| (0) #f (srfi :1 lists)) ((zip) variable |\x0;zip~1pxGHH~5016| (0) #f (srfi :1 lists)) ((append-reverse!) variable |\x0;append-reverse!~1pxGHH~5045| (0) #f (srfi :1 lists)) ((append-reverse) variable |\x0;append-reverse~1pxGHH~5044| (0) #f (srfi :1 lists)) ((reverse!) variable |\x0;reverse!~1pxGHH~5091| (0) #f (srfi :1 lists)) ((concatenate!) variable |\x0;concatenate!~1pxGHH~5047| (0) #f (srfi :1 lists)) ((append!) variable |\x0;append!~1pxGHH~5043| (0) #f (srfi :1 lists)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((concatenate) variable |\x0;concatenate~1pxGHH~5046| (0) #f (srfi :1 lists)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((length+) variable |\x0;length+~1pxGHH~5015| (0) #f (srfi :1 lists)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((last-pair) variable |\x0;last-pair~1pxGHH~5037| (0) #f (srfi :1 lists)) ((last) variable |\x0;last~1pxGHH~5036| (0) #f (srfi :1 lists)) ((split-at!) variable |\x0;split-at!~1pxGHH~5035| (0) #f (srfi :1 lists)) ((split-at) variable |\x0;split-at~1pxGHH~5034| (0) #f (srfi :1 lists)) ((drop-right!) variable |\x0;drop-right!~1pxGHH~5033| (0) #f (srfi :1 lists)) ((take!) variable |\x0;take!~1pxGHH~5030| (0) #f (srfi :1 lists)) ((drop-right) variable |\x0;drop-right~1pxGHH~5032| (0) #f (srfi :1 lists)) ((take-right) variable |\x0;take-right~1pxGHH~5031| (0) #f (srfi :1 lists)) ((drop) variable |\x0;drop~1pxGHH~5029| (0) #f (srfi :1 lists)) ((take) variable |\x0;take~1pxGHH~5028| (0) #f (srfi :1 lists)) ((car+cdr) variable |\x0;car+cdr~1pxGHH~5027| (0) #f (srfi :1 lists)) ((tenth) variable |\x0;tenth~1pxGHH~5026| (0) #f (srfi :1 lists)) ((ninth) variable |\x0;ninth~1pxGHH~5025| (0) #f (srfi :1 lists)) ((eighth) variable |\x0;eighth~1pxGHH~5024| (0) #f (srfi :1 lists)) ((seventh) variable |\x0;seventh~1pxGHH~5023| (0) #f (srfi :1 lists)) ((sixth) variable |\x0;sixth~1pxGHH~5022| (0) #f (srfi :1 lists)) ((fifth) variable |\x0;fifth~1pxGHH~5021| (0) #f (srfi :1 lists)) ((fourth) variable |\x0;fourth~1pxGHH~5020| (0) #f (srfi :1 lists)) ((third) variable |\x0;third~1pxGHH~5019| (0) #f (srfi :1 lists)) ((second) variable |\x0;second~1pxGHH~5018| (0) #f (srfi :1 lists)) ((first) variable |\x0;first~1pxGHH~5017| (0) #f (srfi :1 lists)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((list=) variable |\x0;list=~1pxGHH~5014| (0) #f (srfi :1 lists)) ((null-list?) variable |\x0;null-list?~1pxGHH~5013| (0) #f (srfi :1 lists)) ((not-pair?) variable |\x0;not-pair?~1pxGHH~5012| (0) #f (srfi :1 lists)) ((dotted-list?) variable |\x0;dotted-list?~1pxGHH~5010| (0) #f (srfi :1 lists)) ((circular-list?) variable |\x0;circular-list?~1pxGHH~5011| (0) #f (srfi :1 lists)) ((proper-list?) variable |\x0;proper-list?~1pxGHH~5009| (0) #f (srfi :1 lists)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((iota) variable |\x0;iota~1pxGHH~5007| (0) #f (srfi :1 lists)) ((circular-list) variable |\x0;circular-list~1pxGHH~5008| (0) #f (srfi :1 lists)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list-tabulate) variable |\x0;list-tabulate~1pxGHH~5006| (0) #f (srfi :1 lists)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((cons*) variable cons* (0) #f (larceny PRIMITIVES)) ((xcons) variable |\x0;xcons~1pxGHH~5005| (0) #f (srfi :1 lists)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((random-source-make-reals) variable |\x0;random-source-make-reals~1pxGHH~7325| (0) #f (srfi :27 random-bits)) ((random-source-make-integers) variable |\x0;random-source-make-integers~1pxGHH~7324| (0) #f (srfi :27 random-bits)) ((random-source-pseudo-randomize!) variable |\x0;random-source-pseudo-randomize!~1pxGHH~7323| (0) #f (srfi :27 random-bits)) ((random-source-randomize!) variable |\x0;random-source-randomize!~1pxGHH~7322| (0) #f (srfi :27 random-bits)) ((random-source-state-set!) variable |\x0;random-source-state-set!~1pxGHH~7321| (0) #f (srfi :27 random-bits)) ((random-source-state-ref) variable |\x0;random-source-state-ref~1pxGHH~7320| (0) #f (srfi :27 random-bits)) ((random-source?) variable |\x0;random-source?~1pxGHH~7319| (0) #f (srfi :27 random-bits)) ((make-random-source) variable |\x0;make-random-source~1pxGHH~7318| (0) #f (srfi :27 random-bits)) ((default-random-source) variable |\x0;default-random-source~1pxGHH~7326| (0) #f (srfi :27 random-bits)) ((random-real) variable |\x0;random-real~1pxGHH~7328| (0) #f (srfi :27 random-bits)) ((random-integer) variable |\x0;random-integer~1pxGHH~7327| (0) #f (srfi :27 random-bits)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~7706|) variable |\x0;x~1pxGHH~7708| (0) #f (srfi 126)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~7706|) . #f) ((sym1 |\x0;c~1pxGHH~7681|) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7684|)) #ex:syntax->datum weak-key (weak-key weak-value weak-key-and-value ephemeral-key ephemeral-value ephemeral-key-and-value) weak-value weak-key-and-value ephemeral-key ephemeral-value ephemeral-key-and-value quote (|\x0;c~1pxGHH~7681|) (|\x0;env~1pxGHH~7696| |\x0;env~1pxGHH~7249|) (rnrs enums) #ex:syntax-rename weakness "illegal symbol" #|\x0;syntax-violation~1pxGHH~1758| #ex:invalid-form)
 |\x0;weakness~1pxGHH~7682| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7708|))) (3018 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|182\|183| |.results\|182\|186|)))) #list? enum-set-constructor (|\x0;c~1pxGHH~7681|) (|\x0;env~1pxGHH~7715| |\x0;env~1pxGHH~7249|) (rnrs enums) #ex:syntax-rename hidden-name list #ex:invalid-form #reverse weakness (|\x0;env~1pxGHH~7715|) (srfi 126))
 |\x0;weakness-set~1pxGHH~7705| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;symbol-hash~1pxGHH~7758| #|\x0;string-ci-hash~1pxGHH~7757| #|\x0;string-hash~1pxGHH~7756| #|\x0;equal-hash~1pxGHH~7755| #|\x0;hash-salt~1pxGHH~7754| #|\x0;*hash-salt*~1pxGHH~7753| #|\x0;hashtable-mutable?~1pxGHH~7752| #|\x0;hashtable-weakness~1pxGHH~7751| #|\x0;hashtable-hash-function~1pxGHH~7750| #|\x0;hashtable-equivalence-function~1pxGHH~7749| #|\x0;hashtable-dec!~1pxGHH~7748| #|\x0;hashtable-inc!~1pxGHH~7747| #|\x0;hashtable-pop!~1pxGHH~7746| #|\x0;hashtable-empty?~1pxGHH~7745| #|\x0;hashtable-find~1pxGHH~7744| #|\x0;hashtable-map->lset~1pxGHH~7743| #|\x0;hashtable-sum~1pxGHH~7742| #|\x0;hashtable-merge!~1pxGHH~7741| #|\x0;hashtable-prune!~1pxGHH~7740| #|\x0;hashtable-update-all!~1pxGHH~7739| #|\x0;hashtable-walk~1pxGHH~7738| #|\x0;hashtable-entry-lists~1pxGHH~7737| #|\x0;hashtable-value-list~1pxGHH~7736| #|\x0;hashtable-key-list~1pxGHH~7735| #|\x0;hashtable-entries~1pxGHH~7734| #|\x0;hashtable-values~1pxGHH~7733| #|\x0;hashtable-keys~1pxGHH~7732| #|\x0;hashtable-empty-copy~1pxGHH~7731| #|\x0;hashtable-clear!~1pxGHH~7730| #|\x0;hashtable-copy~1pxGHH~7729| #|\x0;hashtable-intern!~1pxGHH~7728| #|\x0;hashtable-update!~1pxGHH~7727| #|\x0;hashtable-lookup~1pxGHH~7726| #|\x0;hashtable-contains?~1pxGHH~7725| #|\x0;hashtable-delete!~1pxGHH~7724| #|\x0;hashtable-set!~1pxGHH~7723| #|\x0;hashtable-ref~1pxGHH~7722| #|\x0;nil?~1pxGHH~7721| #|\x0;nil~1pxGHH~7720| #|\x0;hashtable-size~1pxGHH~7719| #|\x0;hashtable?~1pxGHH~7718| #|\x0;hidden-name~1pxGHH~7704| #|\x0;alist->hashtable~1pxGHH~7680| #|\x0;alist->eqv-hashtable~1pxGHH~7679| #|\x0;alist->eq-hashtable~1pxGHH~7678| #|\x0;make-hashtable~1pxGHH~7677| #|\x0;make-eqv-hashtable~1pxGHH~7676| #|\x0;make-eq-hashtable~1pxGHH~7675| #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~8269| |\x0;x2~1pxGHH~8270| |\x0;x3~1pxGHH~8271| |\x0;n~1pxGHH~8272|)) #|\x0;make-eq-hashtable~1pxGHH~7675| "No weak or ephemeral hashtables supported." #error #make-eq-hashtable "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~8239| |\x0;x2~1pxGHH~8240| |\x0;x3~1pxGHH~8241| |\x0;n~1pxGHH~8242|)) #|\x0;make-eqv-hashtable~1pxGHH~7676| "No weak or ephemeral hashtables supported." #error #make-eqv-hashtable "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #f #( #(make-hashtable #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~8189|) #length #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hash~1pxGHH~8197| |\x0;equiv~1pxGHH~8198|)) #|\x0;make-hashtable~1pxGHH~7677|)
 #apply #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hash~1pxGHH~8203| |\x0;equiv~1pxGHH~8204| |\x0;capacity~1pxGHH~8205|)) #|\x0;make-hashtable~1pxGHH~7677|)
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hash~1pxGHH~8210| |\x0;equiv~1pxGHH~8211| |\x0;capacity~1pxGHH~8212| |\x0;weakness~1pxGHH~8213|)) #eq? #|\x0;make-eq-hashtable~1pxGHH~7675| #eqv? #|\x0;make-eqv-hashtable~1pxGHH~7676| "No weak or ephemeral hashtables supported." #error #|\x0;make-hashtable~1pxGHH~7276|)
 "unexpected number of arguments" #assertion-violation)
 #f #( #(alist->eq-hashtable #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~8182|) #|\x0;alist->hashtable~1pxGHH~7680| #eq? #apply)
 #f #( #(alist->eqv-hashtable #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~8180|) #|\x0;alist->hashtable~1pxGHH~7680| #eqv? #apply)
 #f #( #(alist->hashtable #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~8145|) #length #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hash~1pxGHH~8153| |\x0;equiv~1pxGHH~8154| |\x0;alist~1pxGHH~8155|)) #|\x0;alist->hashtable~1pxGHH~7680|)
 #apply #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hash~1pxGHH~8160| |\x0;equiv~1pxGHH~8161| |\x0;capacity~1pxGHH~8162| |\x0;alist~1pxGHH~8163|)) #|\x0;alist->hashtable~1pxGHH~7680|)
 #f #( #(#f #f 5 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hash~1pxGHH~8168| |\x0;equiv~1pxGHH~8169| |\x0;capacity~1pxGHH~8170| |\x0;weakness~1pxGHH~8171| |\x0;alist~1pxGHH~8172|)) #|\x0;make-hashtable~1pxGHH~7677| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;entry~1pxGHH~8177|)) #|\x0;hashtable-set!~1pxGHH~7723|)
 #reverse #|\x0;for-each~1pxGHH~1464|)
 "unexpected number of arguments" #assertion-violation)
 (weak-key weak-value weak-key-and-value ephemeral-key ephemeral-value ephemeral-key-and-value) #make-enumeration #hashtable? #hashtable-size #f #( #(nil? #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;obj~1pxGHH~8138|)) #|\x0;nil~1pxGHH~7720|)
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~8115| |\x0;x2~1pxGHH~8116| |\x0;x3~1pxGHH~8117| |\x0;n~1pxGHH~8118|)) #|\x0;nil~1pxGHH~7720| #hashtable-ref #|\x0;nil?~1pxGHH~7721| "No such key in hashtable." #error "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #hashtable-set! #hashtable-delete! #hashtable-contains? #f #( #(hashtable-lookup #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~8104| |\x0;key~1pxGHH~8105|)) #|\x0;nil~1pxGHH~7720| #hashtable-ref #|\x0;nil?~1pxGHH~7721| #values)
 #f #( #(hashtable-update! #f #         src/Build/compile-standard-libraries.sch #(20 1 0) |\x0;args~1pxGHH~8080|) #length #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~8088| |\x0;key~1pxGHH~8089| |\x0;proc~1pxGHH~8090|)) #|\x0;nil~1pxGHH~7720| #|\x0;hashtable-update!~1pxGHH~7727|)
 #apply #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~8095| |\x0;key~1pxGHH~8096| |\x0;proc~1pxGHH~8097| |\x0;default~1pxGHH~8098|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;value~1pxGHH~8100|)) #|\x0;nil?~1pxGHH~7721| "No such key in hashtable." #error)
 #hashtable-update!)
 "unexpected number of arguments" #assertion-violation)
 #f #( #(hashtable-intern! #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~8065| |\x0;key~1pxGHH~8066| |\x0;default-proc~1pxGHH~8067|)) #|\x0;nil~1pxGHH~7720| #hashtable-ref #|\x0;nil?~1pxGHH~7721| #|\x0;hashtable-set!~1pxGHH~7723|)
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~8038| |\x0;x2~1pxGHH~8039| |\x0;x3~1pxGHH~8040| |\x0;n~1pxGHH~8041|)) #|\x0;hashtable-copy~1pxGHH~7729| "No weak or ephemeral tables supported." #error #hashtable-copy "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~8015| |\x0;x2~1pxGHH~8016| |\x0;x3~1pxGHH~8017| |\x0;n~1pxGHH~8018|)) #hashtable-clear! "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~7993| |\x0;x2~1pxGHH~7994| |\x0;x3~1pxGHH~7995| |\x0;n~1pxGHH~7996|)) #|\x0;hashtable-empty-copy~1pxGHH~7731| #|\x0;hashtable-hash-function~1pxGHH~7750| #|\x0;hashtable-equivalence-function~1pxGHH~7749| #|\x0;hashtable-size~1pxGHH~7719| #|\x0;hashtable-weakness~1pxGHH~7751| #|\x0;make-hashtable~1pxGHH~7677| "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #hashtable-keys #f #( #(hashtable-values #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7973|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #hashtable-entries)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7981| |\x0;x~1pxGHH~7982|)))
 #call-with-values)
 #hashtable-entries #f #( #(hashtable-key-list #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7968|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~7970| |\x0;value~1pxGHH~7971|)))
 #|\x0;hashtable-map->lset~1pxGHH~7743|)
 #f #( #(hashtable-value-list #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7963|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~7965| |\x0;value~1pxGHH~7966|)))
 #|\x0;hashtable-map->lset~1pxGHH~7743|)
 #f #( #(hashtable-entry-lists #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7950|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~7956| |\x0;val~1pxGHH~7957|)))
 #|\x0;hashtable-walk~1pxGHH~7738| #values)
 #f #( #(hashtable-walk #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7933| |\x0;proc~1pxGHH~7934|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #hashtable-entries)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7942| |\x0;x~1pxGHH~7943|)) #vector-for-each)
 #call-with-values)
 #f #( #(hashtable-update-all! #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7913| |\x0;proc~1pxGHH~7914|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7922| |\x0;x~1pxGHH~7923|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~7930| |\x0;value~1pxGHH~7931|)) #|\x0;hashtable-set!~1pxGHH~7723|)
 #vector-for-each)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;hashtable-entries~1pxGHH~7734|)
 #call-with-values)
 #f #( #(hashtable-prune! #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7890| |\x0;proc~1pxGHH~7891|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7899| |\x0;x~1pxGHH~7900|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~7907| |\x0;value~1pxGHH~7908|)) #|\x0;hashtable-delete!~1pxGHH~7724|)
 #vector-for-each)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;hashtable-entries~1pxGHH~7734|)
 #call-with-values)
 #f #( #(hashtable-merge! #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable-dest~1pxGHH~7884| |\x0;hashtable-source~1pxGHH~7885|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~7887| |\x0;value~1pxGHH~7888|)) #|\x0;hashtable-set!~1pxGHH~7723|)
 #|\x0;hashtable-walk~1pxGHH~7738|)
 #f #( #(hashtable-sum #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7866| |\x0;init~1pxGHH~7867| |\x0;proc~1pxGHH~7868|)) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;hashtable-entry-lists~1pxGHH~7737|)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7876| |\x0;x~1pxGHH~7877|)) #|\x0;fold~1pxGHH~5056|)
 #call-with-values)
 #f #( #(hashtable-map->lset #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7858| |\x0;proc~1pxGHH~7859|)) #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~7862| |\x0;value~1pxGHH~7863| |\x0;accumulator~1pxGHH~7864|)))
 #|\x0;hashtable-sum~1pxGHH~7742|)
 #f #( #(hashtable-find #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7847| |\x0;proc~1pxGHH~7848|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;return~1pxGHH~7850|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;key~1pxGHH~7852| |\x0;value~1pxGHH~7853|)))
 #|\x0;hashtable-walk~1pxGHH~7738|)
 #call/cc)
 #f #( #(hashtable-empty? #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7845|)) #|\x0;hashtable-size~1pxGHH~7719|)
 #f #( #(hashtable-pop! #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7822|)) #|\x0;hashtable-empty?~1pxGHH~7745| "Cannot pop from empty hashtable." #error #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7835| |\x0;x~1pxGHH~7836| |\x0;x~1pxGHH~7837|)) #|\x0;hashtable-delete!~1pxGHH~7724| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;k~1pxGHH~7832| |\x0;v~1pxGHH~7833|)))
 #|\x0;hashtable-find~1pxGHH~7744|)
 #call-with-values)
 #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~7801| |\x0;x2~1pxGHH~7802| |\x0;x3~1pxGHH~7803| |\x0;n~1pxGHH~7804|)) #|\x0;hashtable-inc!~1pxGHH~7747| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;v~1pxGHH~7819|)))
 #|\x0;hashtable-update!~1pxGHH~7727| "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #f #( #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x1~1pxGHH~7776| |\x0;x2~1pxGHH~7777| |\x0;x3~1pxGHH~7778| |\x0;n~1pxGHH~7779|)) #|\x0;hashtable-dec!~1pxGHH~7748| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;v~1pxGHH~7794|)))
 #|\x0;hashtable-update!~1pxGHH~7727| "unexpected number of arguments" #assertion-violation)
 #make-case-lambda #hashtable-equivalence-function #hashtable-hash-function #f #( #(hashtable-weakness #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;hashtable~1pxGHH~7770|)))
 #hashtable-mutable? "SRFI_126_HASH_SEED" #|\x0;get-environment-variable~1pxGHH~7230| "" #string=? #greatest-fixnum #|\x0;random-integer~1pxGHH~7327| #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;char~1pxGHH~7767| |\x0;result~1pxGHH~7768|)))
 #string->list #|\x0;fold~1pxGHH~5056| #greatest-fixnum #modulo #f #( #(hash-salt #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #|\x0;*hash-salt*~1pxGHH~7753|)
 #equal-hash #string-hash #string-ci-hash #symbol-hash #values)
 (srfi 126) ((make-eq-hashtable variable |\x0;make-eq-hashtable~1pxGHH~7675| (0) #f (srfi 126)) (make-eqv-hashtable variable |\x0;make-eqv-hashtable~1pxGHH~7676| (0) #f (srfi 126)) (make-hashtable variable |\x0;make-hashtable~1pxGHH~7677| (0) #f (srfi 126)) (alist->eq-hashtable variable |\x0;alist->eq-hashtable~1pxGHH~7678| (0) #f (srfi 126)) (alist->eqv-hashtable variable |\x0;alist->eqv-hashtable~1pxGHH~7679| (0) #f (srfi 126)) (alist->hashtable variable |\x0;alist->hashtable~1pxGHH~7680| (0) #f (srfi 126)) (weakness macro |\x0;weakness~1pxGHH~7682| (0) #f (srfi 126)) (hashtable? variable |\x0;hashtable?~1pxGHH~7718| (0) #f (srfi 126)) (hashtable-size variable |\x0;hashtable-size~1pxGHH~7719| (0) #f (srfi 126)) (hashtable-ref variable |\x0;hashtable-ref~1pxGHH~7722| (0) #f (srfi 126)) (hashtable-set! variable |\x0;hashtable-set!~1pxGHH~7723| (0) #f (srfi 126)) (hashtable-delete! variable |\x0;hashtable-delete!~1pxGHH~7724| (0) #f (srfi 126)) (hashtable-contains? variable |\x0;hashtable-contains?~1pxGHH~7725| (0) #f (srfi 126)) (hashtable-lookup variable |\x0;hashtable-lookup~1pxGHH~7726| (0) #f (srfi 126)) (hashtable-update! variable |\x0;hashtable-update!~1pxGHH~7727| (0) #f (srfi 126)) (hashtable-intern! variable |\x0;hashtable-intern!~1pxGHH~7728| (0) #f (srfi 126)) (hashtable-copy variable |\x0;hashtable-copy~1pxGHH~7729| (0) #f (srfi 126)) (hashtable-clear! variable |\x0;hashtable-clear!~1pxGHH~7730| (0) #f (srfi 126)) (hashtable-empty-copy variable |\x0;hashtable-empty-copy~1pxGHH~7731| (0) #f (srfi 126)) (hashtable-keys variable |\x0;hashtable-keys~1pxGHH~7732| (0) #f (srfi 126)) (hashtable-values variable |\x0;hashtable-values~1pxGHH~7733| (0) #f (srfi 126)) (hashtable-entries variable |\x0;hashtable-entries~1pxGHH~7734| (0) #f (srfi 126)) (hashtable-key-list variable |\x0;hashtable-key-list~1pxGHH~7735| (0) #f (srfi 126)) (hashtable-value-list variable |\x0;hashtable-value-list~1pxGHH~7736| (0) #f (srfi 126)) (hashtable-entry-lists variable |\x0;hashtable-entry-lists~1pxGHH~7737| (0) #f (srfi 126)) (hashtable-walk variable |\x0;hashtable-walk~1pxGHH~7738| (0) #f (srfi 126)) (hashtable-update-all! variable |\x0;hashtable-update-all!~1pxGHH~7739| (0) #f (srfi 126)) (hashtable-prune! variable |\x0;hashtable-prune!~1pxGHH~7740| (0) #f (srfi 126)) (hashtable-merge! variable |\x0;hashtable-merge!~1pxGHH~7741| (0) #f (srfi 126)) (hashtable-sum variable |\x0;hashtable-sum~1pxGHH~7742| (0) #f (srfi 126)) (hashtable-map->lset variable |\x0;hashtable-map->lset~1pxGHH~7743| (0) #f (srfi 126)) (hashtable-find variable |\x0;hashtable-find~1pxGHH~7744| (0) #f (srfi 126)) (hashtable-empty? variable |\x0;hashtable-empty?~1pxGHH~7745| (0) #f (srfi 126)) (hashtable-pop! variable |\x0;hashtable-pop!~1pxGHH~7746| (0) #f (srfi 126)) (hashtable-inc! variable |\x0;hashtable-inc!~1pxGHH~7747| (0) #f (srfi 126)) (hashtable-dec! variable |\x0;hashtable-dec!~1pxGHH~7748| (0) #f (srfi 126)) (hashtable-equivalence-function variable |\x0;hashtable-equivalence-function~1pxGHH~7749| (0) #f (srfi 126)) (hashtable-hash-function variable |\x0;hashtable-hash-function~1pxGHH~7750| (0) #f (srfi 126)) (hashtable-weakness variable |\x0;hashtable-weakness~1pxGHH~7751| (0) #f (srfi 126)) (hashtable-mutable? variable |\x0;hashtable-mutable?~1pxGHH~7752| (0) #f (srfi 126)) (hash-salt variable |\x0;hash-salt~1pxGHH~7754| (0) #f (srfi 126)) (equal-hash variable equal-hash (0) #f (larceny PRIMITIVES)) (string-hash variable string-hash (0) #f (larceny PRIMITIVES)) (string-ci-hash variable string-ci-hash (0) #f (larceny PRIMITIVES)) (symbol-hash variable symbol-hash (0) #f (larceny PRIMITIVES))) (((srfi 27) 0) ((srfi 1) 0) ((rnrs hashtables) 0) ((rnrs arithmetic fixnums) 0) ((rnrs enums) 0) ((scheme process-context) 0) ((scheme case-lambda) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~7668| |\x0;build~1pxGHH~7190| |\x0;build~1pxGHH~7277| |\x0;build~1pxGHH~7264| |\x0;build~1pxGHH~7258| |\x0;build~1pxGHH~7231| |\x0;build~1pxGHH~7216| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~8293| #ex:make-library #ex:register-library! #values)
 #f)
))
