#!fasl
(define .petit-bootstrap-id-76ba669a68fe1b380b9bdca6d07f6988 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/SRFI/srfi/60.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-76ba669a68fe1b380b9bdca6d07f6988 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #values)
 #values #apply)
 (srfi 60 integer-bits) ((logand variable |\x0;logand~1pxGHH~69503| (0) #f (srfi :60 integer-bits)) (bitwise-and variable bitwise-and (0) #f (larceny PRIMITIVES)) (logior variable |\x0;logior~1pxGHH~69504| (0) #f (srfi :60 integer-bits)) (bitwise-ior variable bitwise-ior (0) #f (larceny PRIMITIVES)) (logxor variable |\x0;logxor~1pxGHH~69505| (0) #f (srfi :60 integer-bits)) (bitwise-xor variable bitwise-xor (0) #f (larceny PRIMITIVES)) (lognot variable |\x0;lognot~1pxGHH~69506| (0) #f (srfi :60 integer-bits)) (bitwise-not variable bitwise-not (0) #f (larceny PRIMITIVES)) (bitwise-if variable bitwise-if (0) #f (larceny PRIMITIVES)) (bitwise-merge variable |\x0;bitwise-merge~1pxGHH~69527| (0) #f (srfi :60 integer-bits)) (logtest variable |\x0;logtest~1pxGHH~69507| (0) #f (srfi :60 integer-bits)) (any-bits-set? variable |\x0;any-bits-set?~1pxGHH~69525| (0) #f (srfi :60 integer-bits)) (logcount variable |\x0;logcount~1pxGHH~69515| (0) #f (srfi :60 integer-bits)) (bit-count variable |\x0;bit-count~1pxGHH~69523| (0) #f (srfi :60 integer-bits)) (integer-length variable |\x0;integer-length~1pxGHH~69514| (0) #f (srfi :60 integer-bits)) (log2-binary-factors variable |\x0;log2-binary-factors~1pxGHH~69516| (0) #f (srfi :60 integer-bits)) (first-set-bit variable |\x0;first-set-bit~1pxGHH~69526| (0) #f (srfi :60 integer-bits)) (logbit? variable |\x0;logbit?~1pxGHH~69508| (0) #f (srfi :60 integer-bits)) (bit-set? variable |\x0;bit-set?~1pxGHH~69524| (0) #f (srfi :60 integer-bits)) (copy-bit variable |\x0;copy-bit~1pxGHH~69509| (0) #f (srfi :60 integer-bits)) (bit-field variable |\x0;bit-field~1pxGHH~69510| (0) #f (srfi :60 integer-bits)) (copy-bit-field variable |\x0;copy-bit-field~1pxGHH~69511| (0) #f (srfi :60 integer-bits)) (ash variable |\x0;ash~1pxGHH~69522| (0) #f (srfi :60 integer-bits)) (arithmetic-shift variable |\x0;arithmetic-shift~1pxGHH~69513| (0) #f (srfi :60 integer-bits)) (rotate-bit-field variable |\x0;rotate-bit-field~1pxGHH~69512| (0) #f (srfi :60 integer-bits)) (reverse-bit-field variable |\x0;reverse-bit-field~1pxGHH~69518| (0) #f (srfi :60 integer-bits)) (integer->list variable |\x0;integer->list~1pxGHH~69519| (0) #f (srfi :60 integer-bits)) (list->integer variable |\x0;list->integer~1pxGHH~69520| (0) #f (srfi :60 integer-bits)) (booleans->integer variable |\x0;booleans->integer~1pxGHH~69521| (0) #f (srfi :60 integer-bits))) (((srfi :60 integer-bits) 0)) (|\x0;build~1pxGHH~69722|) |\x0;build~1pxGHH~69730| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-76ba669a68fe1b380b9bdca6d07f6988 1
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #f ()) #values)
 #values #apply)
 (srfi 60) ((logand variable |\x0;logand~1pxGHH~69503| (0) #f (srfi :60 integer-bits)) (bitwise-and variable bitwise-and (0) #f (larceny PRIMITIVES)) (logior variable |\x0;logior~1pxGHH~69504| (0) #f (srfi :60 integer-bits)) (bitwise-ior variable bitwise-ior (0) #f (larceny PRIMITIVES)) (logxor variable |\x0;logxor~1pxGHH~69505| (0) #f (srfi :60 integer-bits)) (bitwise-xor variable bitwise-xor (0) #f (larceny PRIMITIVES)) (lognot variable |\x0;lognot~1pxGHH~69506| (0) #f (srfi :60 integer-bits)) (bitwise-not variable bitwise-not (0) #f (larceny PRIMITIVES)) (bitwise-if variable bitwise-if (0) #f (larceny PRIMITIVES)) (bitwise-merge variable |\x0;bitwise-merge~1pxGHH~69527| (0) #f (srfi :60 integer-bits)) (logtest variable |\x0;logtest~1pxGHH~69507| (0) #f (srfi :60 integer-bits)) (any-bits-set? variable |\x0;any-bits-set?~1pxGHH~69525| (0) #f (srfi :60 integer-bits)) (logcount variable |\x0;logcount~1pxGHH~69515| (0) #f (srfi :60 integer-bits)) (bit-count variable |\x0;bit-count~1pxGHH~69523| (0) #f (srfi :60 integer-bits)) (integer-length variable |\x0;integer-length~1pxGHH~69514| (0) #f (srfi :60 integer-bits)) (log2-binary-factors variable |\x0;log2-binary-factors~1pxGHH~69516| (0) #f (srfi :60 integer-bits)) (first-set-bit variable |\x0;first-set-bit~1pxGHH~69526| (0) #f (srfi :60 integer-bits)) (logbit? variable |\x0;logbit?~1pxGHH~69508| (0) #f (srfi :60 integer-bits)) (bit-set? variable |\x0;bit-set?~1pxGHH~69524| (0) #f (srfi :60 integer-bits)) (copy-bit variable |\x0;copy-bit~1pxGHH~69509| (0) #f (srfi :60 integer-bits)) (bit-field variable |\x0;bit-field~1pxGHH~69510| (0) #f (srfi :60 integer-bits)) (copy-bit-field variable |\x0;copy-bit-field~1pxGHH~69511| (0) #f (srfi :60 integer-bits)) (ash variable |\x0;ash~1pxGHH~69522| (0) #f (srfi :60 integer-bits)) (arithmetic-shift variable |\x0;arithmetic-shift~1pxGHH~69513| (0) #f (srfi :60 integer-bits)) (rotate-bit-field variable |\x0;rotate-bit-field~1pxGHH~69512| (0) #f (srfi :60 integer-bits)) (reverse-bit-field variable |\x0;reverse-bit-field~1pxGHH~69518| (0) #f (srfi :60 integer-bits)) (integer->list variable |\x0;integer->list~1pxGHH~69519| (0) #f (srfi :60 integer-bits)) (list->integer variable |\x0;list->integer~1pxGHH~69520| (0) #f (srfi :60 integer-bits)) (booleans->integer variable |\x0;booleans->integer~1pxGHH~69521| (0) #f (srfi :60 integer-bits))) (((srfi 60 integer-bits) 0)) (|\x0;build~1pxGHH~69730|) |\x0;build~1pxGHH~69731| #ex:make-library #ex:register-library! #values)
 #f)
))
