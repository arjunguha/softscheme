#!fasl
(define .petit-bootstrap-id-cbe6774606b45513e2c3c8852927d4cf (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/rnrs/records/syntactic/original.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-cbe6774606b45513e2c3c8852927d4cf 0
'#(#f #( #f #ex:unspecified #|\x0;preferred-cd-set!~1pxGHH~2336| #|\x0;preferred-cd~1pxGHH~2335| #|\x0;preferred-cd-table~1pxGHH~2334| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;preferred-cd-set!~1pxGHH~2336| #|\x0;preferred-cd~1pxGHH~2335| #|\x0;preferred-cd-table~1pxGHH~2334| #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (t0f0010 t0f0020)) #|\x0;preferred-cd~1pxGHH~2335| #|\x0;preferred-cd-set!~1pxGHH~2336| #values)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~2347|)) #record-type-name #symbol-hash)
 #eqv? #make-r6rs-hashtable #f #( #(|\x0;preferred-cd~1pxGHH~2335| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~2341|)) #hashtable-ref #make-record-constructor-descriptor)
 #f #( #(|\x0;preferred-cd-set!~1pxGHH~2336| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~2338| |\x0;cd~1pxGHH~2339|)) #hashtable-set!)
 #values #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~2341|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~2338| |\x0;cd~1pxGHH~2339|)))
 #apply)
 (rnrs records syntactic helper) ((preferred-cd variable |\x0;preferred-cd~1pxGHH~2335| (0) #f (rnrs records syntactic helper)) (preferred-cd-set! variable |\x0;preferred-cd-set!~1pxGHH~2336| (0) #f (rnrs records syntactic helper))) (((err5rs records procedural) 0) ((rnrs records procedural) 0) ((rnrs base) 0 1) ((core primitives) 0 1)) (|\x0;build~1pxGHH~1713| |\x0;build~1pxGHH~2326| |\x0;build~1pxGHH~1533| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~2348| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-cbe6774606b45513e2c3c8852927d4cf 1
'#(#f #( #f #ex:unspecified #|\x0;record-constructor-descriptor~1pxGHH~3324| #|\x0;record-type-descriptor~1pxGHH~3323| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~3314| 0 1 2 3) (|\x0;env~1pxGHH~3301| 4 1 2 3) (|\x0;env~1pxGHH~3279| 5 6 7 3) (|\x0;env~1pxGHH~3266| 8 6 7 3) (|\x0;env~1pxGHH~3246| 9 10 11 3) (|\x0;env~1pxGHH~3236| 12 10 11 3) (|\x0;env~1pxGHH~3217| 13 14 15 3) (|\x0;env~1pxGHH~3207| 16 14 15 3) (|\x0;env~1pxGHH~3182| 17 18 19 3) (|\x0;env~1pxGHH~3165| 20 18 19 3) (|\x0;env~1pxGHH~3147| 21 18 19 3) (|\x0;env~1pxGHH~3129| 22 18 19 3) (|\x0;env~1pxGHH~3110| 23 18 19 3) (|\x0;env~1pxGHH~3075| 24 25 26 3) (|\x0;env~1pxGHH~3052| 27 25 26 3) (|\x0;env~1pxGHH~3028| 28 25 26 3) (|\x0;env~1pxGHH~3004| 29 25 26 3) (|\x0;env~1pxGHH~2979| 30 25 26 3) (|\x0;env~1pxGHH~2955| 31 25 26 3) (|\x0;env~1pxGHH~2930| 32 25 26 3) (|\x0;env~1pxGHH~2905| 33 25 26 3) (|\x0;env~1pxGHH~2847| 34 35 36 3) (|\x0;env~1pxGHH~2775| 37 38 39 40 41 42 3) (|\x0;env~1pxGHH~2562| 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 41 42 3) (|\x0;env~1pxGHH~2523| 77 78 79 80 81 82 83 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 41 42 3) (|\x0;env~1pxGHH~2501| 84 78 79 80 81 82 83 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 41 42 3) (|\x0;env~1pxGHH~2372| 85 86 87 3) (|\x0;env~1pxGHH~2361| 88 86 87 3)) (88 (((dummy |\x0;c~1pxGHH~2350|) . #f) ((rtd-name) . #f) ((clause) . #f))) (87 (((x |\x0;c~1pxGHH~2350|) variable |\x0;x~1pxGHH~2352| (0) #f (rnrs records syntactic original)))) (86 ()) (85 (((dummy |\x0;c~1pxGHH~2350|) . #f) ((rtd-name) . #f) ((constructor-name) . #f) ((predicate-name) . #f) ((clause) . #f))) (84 (((temp |\x0;c~1pxGHH~2492|) . #f) ((temp |\x0;c~1pxGHH~2491|) . #f))) (83 (((fspec) variable |\x0;fspec~1pxGHH~2475| (1) #f (rnrs records syntactic original)))) (82 ()) (81 (((accessor-name) variable |\x0;accessor-name~1pxGHH~2481| (1) #f (rnrs records syntactic original)))) (80 ()) (79 (((atom-key |\x0;c~1pxGHH~2482|) variable |\x0;atom-key~1pxGHH~2485| (0) #f (rnrs records syntactic original)))) (78 ()) (77 (((temp |\x0;c~1pxGHH~2513|) . #f) ((temp |\x0;c~1pxGHH~2512|) . #f) ((temp |\x0;c~1pxGHH~2511|) . #f))) (76 (((explicit?) . #f) ((rtd-name) . #f) ((constructor-name) . #f) ((predicate-name) . #f) ((clause) . #f))) (75 (((type-name) variable |\x0;type-name~1pxGHH~2403| (1) #f (rnrs records syntactic original)))) (74 ()) (73 (((clauses) variable |\x0;clauses~1pxGHH~2406| (1) #f (rnrs records syntactic original)))) (72 ()) (71 (((fields-clause) variable |\x0;fields-clause~1pxGHH~2409| (1) #f (rnrs records syntactic original)))) (70 ()) (69 (((parent-clause) variable |\x0;parent-clause~1pxGHH~2412| (1) #f (rnrs records syntactic original)))) (68 ()) (67 (((protocol-clause) variable |\x0;protocol-clause~1pxGHH~2415| (1) #f (rnrs records syntactic original)))) (66 ()) (65 (((sealed-clause) variable |\x0;sealed-clause~1pxGHH~2418| (1) #f (rnrs records syntactic original)))) (64 ()) (63 (((opaque-clause) variable |\x0;opaque-clause~1pxGHH~2421| (1) #f (rnrs records syntactic original)))) (62 ()) (61 (((nongenerative-clause) variable |\x0;nongenerative-clause~1pxGHH~2424| (1) #f (rnrs records syntactic original)))) (60 ()) (59 (((parent-rtd-clause) variable |\x0;parent-rtd-clause~1pxGHH~2427| (1) #f (rnrs records syntactic original)))) (58 ()) (57 (((okay?) variable |\x0;okay?~1pxGHH~2430| (1) #f (rnrs records syntactic original)))) (56 ()) (55 (((type-name-string) variable |\x0;type-name-string~1pxGHH~2433| (1) #f (rnrs records syntactic original)))) (54 ()) (53 (((cname) variable |\x0;cname~1pxGHH~2436| (1) #f (rnrs records syntactic original)))) (52 ()) (51 (((pname) variable |\x0;pname~1pxGHH~2439| (1) #f (rnrs records syntactic original)))) (50 ()) (49 (((make-accessor-name) variable |\x0;make-accessor-name~1pxGHH~2442| (1) #f (rnrs records syntactic original)))) (48 ()) (47 (((make-mutator-name) variable |\x0;make-mutator-name~1pxGHH~2445| (1) #f (rnrs records syntactic original)))) (46 ()) (45 (((fspec) variable |\x0;fspec~1pxGHH~2472| (1) #f (rnrs records syntactic original)))) (44 ()) (43 (((temp |\x0;c~1pxGHH~2554|) . #f))) (42 (((x) variable |\x0;x~1pxGHH~2385| (1) #f (rnrs records syntactic original)))) (41 (((complain) variable |\x0;complain~1pxGHH~2391| (1) #f (rnrs records syntactic original)) ((syntax-cdr) variable |\x0;syntax-cdr~1pxGHH~2390| (1) #f (rnrs records syntactic original)) ((syntax-car) variable |\x0;syntax-car~1pxGHH~2389| (1) #f (rnrs records syntactic original)) ((clauses-assq) variable |\x0;clauses-assq~1pxGHH~2388| (1) #f (rnrs records syntactic original)) ((construct-record-type-definitions) variable |\x0;construct-record-type-definitions~1pxGHH~2387| (1) #f (rnrs records syntactic original)) ((spanky-mode?) variable |\x0;spanky-mode?~1pxGHH~2386| (1) #f (rnrs records syntactic original)))) (40 (((rtd-name) variable |\x0;rtd-name~1pxGHH~2744| (1) #f (rnrs records syntactic original)) ((constructor-name) variable |\x0;constructor-name~1pxGHH~2745| (1) #f (rnrs records syntactic original)) ((predicate-name) variable |\x0;predicate-name~1pxGHH~2746| (1) #f (rnrs records syntactic original)) ((type-name) variable |\x0;type-name~1pxGHH~2747| (1) #f (rnrs records syntactic original)) ((field-specs) variable |\x0;field-specs~1pxGHH~2748| (1) #f (rnrs records syntactic original)) ((protocol) variable |\x0;protocol~1pxGHH~2749| (1) #f (rnrs records syntactic original)) ((sealed?) variable |\x0;sealed?~1pxGHH~2750| (1) #f (rnrs records syntactic original)) ((opaque?) variable |\x0;opaque?~1pxGHH~2751| (1) #f (rnrs records syntactic original)) ((uid) variable |\x0;uid~1pxGHH~2752| (1) #f (rnrs records syntactic original)) ((parent) variable |\x0;parent~1pxGHH~2753| (1) #f (rnrs records syntactic original)) ((parent-cd) variable |\x0;parent-cd~1pxGHH~2754| (1) #f (rnrs records syntactic original)))) (39 ()) (38 ()) (37 (((frob) variable |\x0;frob~1pxGHH~2757| (1) #f (rnrs records syntactic original)))) (36 (((x |\x0;c~1pxGHH~2825|) variable |\x0;x~1pxGHH~2827| (0) #f (rnrs records syntactic original)))) (35 ()) (34 (((dummy |\x0;c~1pxGHH~2825|) . #f) ((rtd-name) . #f) ((constructor-name) . #f) ((predicate-name) . #f) ((type-name) . #f) ((mutable?) . #f) ((field-name) . #f) ((accessor) . #f) ((mutator) . #f) ((protocol) . #f) ((sealed?) . #f) ((opaque?) . #f) ((uid) . #f) ((parent) . #f) ((parent-cd) . #f))) (33 (((dummy |\x0;c~1pxGHH~2883|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((fieldspec) . #f) ((parent) . #f) ((sealed?) . #f) ((opaque?) . #f) ((id) . #f))) (32 (((dummy |\x0;c~1pxGHH~2883|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((fieldspec) . #f) ((parent) . #f) ((opaque?) . #f) ((id) . #f))) (31 (((dummy |\x0;c~1pxGHH~2883|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((fieldspec) . #f) ((parent) . #f) ((sealed?) . #f) ((id) . #f))) (30 (((dummy |\x0;c~1pxGHH~2883|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((fieldspec) . #f) ((parent) . #f) ((id) . #f))) (29 (((dummy |\x0;c~1pxGHH~2883|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((fieldspec) . #f) ((parent) . #f) ((sealed?) . #f) ((opaque?) . #f))) (28 (((dummy |\x0;c~1pxGHH~2883|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((fieldspec) . #f) ((parent) . #f) ((opaque?) . #f))) (27 (((dummy |\x0;c~1pxGHH~2883|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((fieldspec) . #f) ((parent) . #f) ((sealed?) . #f))) (26 (((x |\x0;c~1pxGHH~2883|) variable |\x0;x~1pxGHH~2885| (0) #f (rnrs records syntactic original)))) (25 ()) (24 (((dummy |\x0;c~1pxGHH~2883|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((fieldspec) . #f) ((parent) . #f))) (23 (((dummy |\x0;c~1pxGHH~3093|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((parent) . #f) ((parent-cd) . #f) ((protocol) . #f))) (22 (((dummy |\x0;c~1pxGHH~3093|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((parent) . #f) ((protocol) . #f))) (21 (((dummy |\x0;c~1pxGHH~3093|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((parent) . #f))) (20 (((dummy |\x0;c~1pxGHH~3093|) . #f) ((rtd-name) . #f) ((type-name) . #f) ((protocol) . #f))) (19 (((x |\x0;c~1pxGHH~3093|) variable |\x0;x~1pxGHH~3095| (0) #f (rnrs records syntactic original)))) (18 ()) (17 (((dummy |\x0;c~1pxGHH~3093|) . #f) ((rtd-name) . #f) ((type-name) . #f))) (16 (((dummy |\x0;c~1pxGHH~3196|) . #f) ((rtd-name) . #f) ((constructor-name) . #f))) (15 (((x |\x0;c~1pxGHH~3196|) variable |\x0;x~1pxGHH~3198| (0) #f (rnrs records syntactic original)))) (14 ()) (13 (((dummy |\x0;c~1pxGHH~3196|) . #f) ((rtd-name) . #f))) (12 (((dummy |\x0;c~1pxGHH~3225|) . #f) ((rtd-name) . #f) ((predicate-name) . #f))) (11 (((x |\x0;c~1pxGHH~3225|) variable |\x0;x~1pxGHH~3227| (0) #f (rnrs records syntactic original)))) (10 ()) (9 (((dummy |\x0;c~1pxGHH~3225|) . #f) ((rtd-name) . #f))) (8 (((dummy |\x0;c~1pxGHH~3254|) . #f) ((rtd-name) . #f) ((field-name) . #f) ((accessor) . #f))) (7 (((x |\x0;c~1pxGHH~3254|) variable |\x0;x~1pxGHH~3256| (0) #f (rnrs records syntactic original)))) (6 ()) (5 (((dummy |\x0;c~1pxGHH~3254|) . #f) ((rtd-name) . #f) ((field-name) . #f))) (4 (((dummy |\x0;c~1pxGHH~3289|) . #f) ((rtd-name) . #f) ((field-name) . #f) ((mutator) . #f))) (3 (((record-constructor-descriptor) variable |\x0;record-constructor-descriptor~1pxGHH~3324| (0) #f (rnrs records syntactic original)) ((record-type-descriptor) variable |\x0;record-type-descriptor~1pxGHH~3323| (0) #f (rnrs records syntactic original)) ((def-mutator) macro |\x0;def-mutator~1pxGHH~3288| (0) #f (rnrs records syntactic original)) ((def-accessor) macro |\x0;def-accessor~1pxGHH~3253| (0) #f (rnrs records syntactic original)) ((def-predicate) macro |\x0;def-predicate~1pxGHH~3224| (0) #f (rnrs records syntactic original)) ((def-constructor) macro |\x0;def-constructor~1pxGHH~3195| (0) #f (rnrs records syntactic original)) ((def-cd) macro |\x0;def-cd~1pxGHH~3092| (0) #f (rnrs records syntactic original)) ((def-rtd-name) macro |\x0;def-rtd-name~1pxGHH~2882| (0) #f (rnrs records syntactic original)) ((define-record-type-helper1) macro |\x0;define-record-type-helper1~1pxGHH~2824| (0) #f (rnrs records syntactic original)) ((define-record-type-helper0) macro |\x0;define-record-type-helper0~1pxGHH~2383| (0) #f (rnrs records syntactic original)) ((define-record-type) macro |\x0;define-record-type~1pxGHH~2349| (0) #f (rnrs records syntactic original)) ((undefined) variable ex:undefined (0 1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0 1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0 1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0 1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0 1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((call/cc) variable call/cc (0 1) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0 1) #f (larceny PRIMITIVES)) ((error) variable error (0 1) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0 1) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0 1) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0 1) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0 1) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0 1) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0 1) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0 1) #f (larceny PRIMITIVES)) ((div0) variable div0 (0 1) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0 1) #f (larceny PRIMITIVES)) ((mod) variable mod (0 1) #f (larceny PRIMITIVES)) ((div) variable div (0 1) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0 1) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0 1) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0 1) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0 1) #f (larceny PRIMITIVES)) ((exact) variable exact (0 1) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0 1) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0 1) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0 1) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0 1) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0 1) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0 1) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0 1) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0 1) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0 1) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0 1) #f (larceny PRIMITIVES)) ((vector) variable vector (0 1) #f (larceny PRIMITIVES)) ((values) variable values (0 1) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0 1) #f (larceny PRIMITIVES)) ((tan) variable tan (0 1) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0 1) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0 1) #f (larceny PRIMITIVES)) ((substring) variable substring (0 1) #f (larceny PRIMITIVES)) ((string?) variable string? (0 1) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0 1) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0 1) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0 1) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0 1) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0 1) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0 1) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0 1) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0 1) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0 1) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0 1) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0 1) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0 1) #f (larceny PRIMITIVES)) ((string) variable string (0 1) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0 1) #f (larceny PRIMITIVES)) ((sin) variable sin (0 1) #f (larceny PRIMITIVES)) ((round) variable round (0 1) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0 1) #f (larceny PRIMITIVES)) ((real?) variable real? (0 1) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0 1) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0 1) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0 1) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0 1) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0 1) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0 1) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0 1) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0 1) #f (larceny PRIMITIVES)) ((number?) variable number? (0 1) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0 1) #f (larceny PRIMITIVES)) ((null?) variable null? (0 1) #f (larceny PRIMITIVES)) ((not) variable not (0 1) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0 1) #f (larceny PRIMITIVES)) ((min) variable min (0 1) #f (larceny PRIMITIVES)) ((max) variable max (0 1) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0 1) #f (rnrs base)) ((make-vector) variable make-vector (0 1) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0 1) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0 1) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0 1) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0 1) #f (larceny PRIMITIVES)) ((log) variable log (0 1) #f (larceny PRIMITIVES)) ((list?) variable list? (0 1) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0 1) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0 1) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0 1) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0 1) #f (larceny PRIMITIVES)) ((list) variable list (0 1) #f (larceny PRIMITIVES)) ((length) variable length (0 1) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0 1) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0 1) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0 1) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0 1) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0 1) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0 1) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0 1) #f (rnrs base)) ((floor) variable floor (0 1) #f (larceny PRIMITIVES)) ((expt) variable expt (0 1) #f (larceny PRIMITIVES)) ((exp) variable exp (0 1) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0 1) #f (larceny PRIMITIVES)) ((even?) variable even? (0 1) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0 1) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0 1) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0 1) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0 1) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0 1) #f (larceny PRIMITIVES)) ((cos) variable cos (0 1) #f (larceny PRIMITIVES)) ((cons) variable cons (0 1) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0 1) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0 1) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0 1) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0 1) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0 1) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0 1) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0 1) #f (larceny PRIMITIVES)) ((char?) variable char? (0 1) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0 1) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0 1) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0 1) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0 1) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0 1) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0 1) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0 1) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0 1) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0 1) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0 1) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0 1) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0 1) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0 1) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0 1) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0 1) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0 1) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0 1) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0 1) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0 1) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0 1) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0 1) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0 1) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0 1) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0 1) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0 1) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0 1) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0 1) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0 1) #f (larceny PRIMITIVES)) ((caar) variable caar (0 1) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0 1) #f (larceny PRIMITIVES)) ((car) variable car (0 1) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0 1) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0 1) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0 1) #f (larceny PRIMITIVES)) ((atan) variable atan (0 1) #f (larceny PRIMITIVES)) ((asin) variable asin (0 1) #f (larceny PRIMITIVES)) ((apply) variable apply (0 1) #f (larceny PRIMITIVES)) ((append) variable append (0 1) #f (larceny PRIMITIVES)) ((angle) variable angle (0 1) #f (larceny PRIMITIVES)) ((acos) variable acos (0 1) #f (larceny PRIMITIVES)) ((abs) variable abs (0 1) #f (larceny PRIMITIVES)) ((>=) variable >= (0 1) #f (larceny PRIMITIVES)) ((>) variable > (0 1) #f (larceny PRIMITIVES)) ((=) variable = (0 1) #f (larceny PRIMITIVES)) ((<=) variable <= (0 1) #f (larceny PRIMITIVES)) ((<) variable < (0 1) #f (larceny PRIMITIVES)) ((/) variable / (0 1) #f (larceny PRIMITIVES)) ((-) variable - (0 1) #f (larceny PRIMITIVES)) ((+) variable + (0 1) #f (larceny PRIMITIVES)) ((*) variable * (0 1) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1 2) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1 2) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0 1) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0 1) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0 1) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0 1) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0 1) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0 1) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0 1) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0 1) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0 1) #f (core let)) ((let*) macro |\x0;let*~1pxGHH~241| (0 1) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0 1) #f (core let)) ((...) macro ... (2 0 1) #f ()) ((_) macro _ (2 0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (2 0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((cons*) variable cons* (0 1) #f (larceny PRIMITIVES)) ((assq) variable assq (0 1) #f (larceny PRIMITIVES)) ((assv) variable assv (0 1) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0 1) #f (rnrs lists)) ((assp) variable assp (0 1) #f (larceny PRIMITIVES)) ((memq) variable memq (0 1) #f (larceny PRIMITIVES)) ((memv) variable memv (0 1) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0 1) #f (rnrs lists)) ((memp) variable memp (0 1) #f (larceny PRIMITIVES)) ((remv) variable remv (0 1) #f (larceny PRIMITIVES)) ((remq) variable remq (0 1) #f (larceny PRIMITIVES)) ((remove) variable |\x0;remove~1pxGHH~1538| (0 1) #f (rnrs lists)) ((remp) variable remp (0 1) #f (larceny PRIMITIVES)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0 1) #f (rnrs lists)) ((fold-left) variable fold-left (0 1) #f (larceny PRIMITIVES)) ((partition) variable partition (0 1) #f (larceny PRIMITIVES)) ((filter) variable filter (0 1) #f (larceny PRIMITIVES)) ((exists) variable exists (0 1) #f (larceny PRIMITIVES)) ((for-all) variable for-all (0 1) #f (larceny PRIMITIVES)) ((find) variable find (0 1) #f (larceny PRIMITIVES)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (0 1) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (0 1) #f (core quasisyntax)) ((record-mutator) variable record-mutator (0) #f (larceny PRIMITIVES)) ((record-accessor) variable record-accessor (0) #f (larceny PRIMITIVES)) ((record-predicate) variable record-predicate (0) #f (larceny PRIMITIVES)) ((record-constructor) variable record-constructor (0) #f (larceny PRIMITIVES)) ((make-record-constructor-descriptor) variable make-record-constructor-descriptor (0) #f (larceny PRIMITIVES)) ((record-type-descriptor?) variable record-type-descriptor? (0) #f (larceny PRIMITIVES)) ((make-record-type-descriptor) variable make-record-type-descriptor (0) #f (larceny PRIMITIVES)) ((rtd-mutator) variable rtd-mutator (0) #f (larceny PRIMITIVES)) ((rtd-accessor) variable rtd-accessor (0) #f (larceny PRIMITIVES)) ((rtd-predicate) variable rtd-predicate (0) #f (larceny PRIMITIVES)) ((rtd-constructor) variable rtd-constructor (0) #f (larceny PRIMITIVES)) ((rtd?) variable rtd? (0) #f (larceny PRIMITIVES)) ((make-rtd) variable make-rtd (0) #f (larceny PRIMITIVES)) ((preferred-cd-set!) variable |\x0;preferred-cd-set!~1pxGHH~2336| (0) #f (rnrs records syntactic helper)) ((preferred-cd) variable |\x0;preferred-cd~1pxGHH~2335| (0) #f (rnrs records syntactic helper)) ((gensym) variable gensym (0 1) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~3289|) variable |\x0;x~1pxGHH~3291| (0) #f (rnrs records syntactic original)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~3289|) . #f) ((rtd-name) . #f) ((field-name) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2352|))) (3397 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? define-record-type-helper0 (|\x0;env~1pxGHH~2372|) (rnrs records syntactic original) #ex:syntax-rename (|\x0;env~1pxGHH~2361|) #ex:invalid-form)
 |\x0;define-record-type~1pxGHH~2349| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2385|))) (29102 . #(|\x0;frob~1pxGHH~2757| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2816|))) (30587 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (31975 . #(|\x0;syntax-cdr~1pxGHH~2390| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2693|))) (32873 . #(|\x0;clauses-assq~1pxGHH~2388| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;sym~1pxGHH~2713| |\x0;clauses~1pxGHH~2714|))) (35655 . #(|\x0;construct-record-type-definitions~1pxGHH~2387| #f 11 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd-name~1pxGHH~2744| |\x0;constructor-name~1pxGHH~2745| |\x0;predicate-name~1pxGHH~2746| |\x0;type-name~1pxGHH~2747| |\x0;field-specs~1pxGHH~2748| |\x0;protocol~1pxGHH~2749| |\x0;sealed?~1pxGHH~2750| |\x0;opaque?~1pxGHH~2751| |\x0;uid~1pxGHH~2752| |\x0;parent~1pxGHH~2753| |\x0;parent-cd~1pxGHH~2754|)))) #list? #ex:syntax->datum fields parent protocol sealed opaque nongenerative parent-rtd #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fspec~1pxGHH~2601|)) #list? #length immutable (immutable mutable) mutable)
 #for-all #length #symbol->string "make-" #string-append #string->symbol #ex:datum->syntax "?" #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fspec~1pxGHH~2472|)) #ex:identifier? immutable (|\x0;env~1pxGHH~2562|) (rnrs records syntactic original) #ex:syntax-rename #length #ex:syntax->datum #symbol->string "-" #string-append #string->symbol (|\x0;env~1pxGHH~2501|) #ex:invalid-form mutable "-set!" (|\x0;env~1pxGHH~2523|))
 #|\x0;map~1pxGHH~1463| define-record-type "illegal syntax" #ex:syntax-violation "uid" #gensym #ex:invalid-form #ex:identifier? define-record-type-helper1 (|\x0;env~1pxGHH~2775|) (rnrs records syntactic original) #ex:syntax-rename)
 |\x0;define-record-type-helper0~1pxGHH~2383| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2827|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2866|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2868| |\x0;rest~1pxGHH~2867|)) #f #( ((0 . #(#f #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutable?~1pxGHH~2836| |\x0;field-name~1pxGHH~2837| |\x0;accessor~1pxGHH~2838| |\x0;mutator~1pxGHH~2839|))) (12974 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2473\|2475| |.y1\|2473\|2474| |.results\|2473\|2478|))) (16567 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2381\|2383| |.y1\|2381\|2382| |.results\|2381\|2386|))) (20160 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2272\|2274| |.y1\|2272\|2273| |.results\|2272\|2277|)))) begin (|\x0;env~1pxGHH~2847|) (rnrs records syntactic original) #ex:syntax-rename def-rtd-name #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((mutable? field-name) ...) #ex:syntax-violation def-cd def-constructor def-predicate ((def-accessor rtd-name field-name accessor) ... (def-mutator rtd-name field-name mutator) ...) ((def-mutator rtd-name field-name mutator) ...) #append #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~2837| |\x0;mutator~1pxGHH~2839|)) def-mutator (|\x0;env~1pxGHH~2847|) (rnrs records syntactic original) #ex:syntax-rename)
 #larceny:map #reverse def-mutator #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;field-name~1pxGHH~2837| |\x0;accessor~1pxGHH~2838|)) def-accessor (|\x0;env~1pxGHH~2847|) (rnrs records syntactic original) #ex:syntax-rename)
 def-accessor #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutable?~1pxGHH~2836| |\x0;field-name~1pxGHH~2837|)))
)
 (() () () ()) #map #list #apply #ex:invalid-form)
 #ex:map-while #ex:invalid-form)
 |\x0;define-record-type-helper1~1pxGHH~2824| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2885|))) (8367 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (19732 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (30222 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (40712 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (50500 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (60089 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (68993 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? #equal? define (|\x0;env~1pxGHH~3075|) (rnrs records syntactic original) #ex:syntax-rename make-rtd quote #list->vector (|\x0;env~1pxGHH~2905|) sealed opaque uid #ex:invalid-form (|\x0;env~1pxGHH~2930|) (|\x0;env~1pxGHH~2955|) (|\x0;env~1pxGHH~2979|) (|\x0;env~1pxGHH~3004|) (|\x0;env~1pxGHH~3028|) (|\x0;env~1pxGHH~3052|))
 |\x0;def-rtd-name~1pxGHH~2882| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3095|))) (6669 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (11796 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (18138 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (24146 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #equal? define (|\x0;env~1pxGHH~3182|) (rnrs records syntactic original) #ex:syntax-rename ignored preferred-cd-set! make-record-constructor-descriptor (|\x0;env~1pxGHH~3110|) #ex:invalid-form (|\x0;env~1pxGHH~3129|) preferred-cd (|\x0;env~1pxGHH~3147|) (|\x0;env~1pxGHH~3165|))
 |\x0;def-cd~1pxGHH~3092| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3198|))) (2283 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #equal? begin (|\x0;env~1pxGHH~3217|) (rnrs records syntactic original) #ex:syntax-rename define (|\x0;env~1pxGHH~3207|) record-constructor preferred-cd #ex:invalid-form)
 |\x0;def-constructor~1pxGHH~3195| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3227|))) (2283 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #equal? begin (|\x0;env~1pxGHH~3246|) (rnrs records syntactic original) #ex:syntax-rename define (|\x0;env~1pxGHH~3236|) rtd-predicate #ex:invalid-form)
 |\x0;def-predicate~1pxGHH~3224| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3256|))) (2559 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #equal? begin (|\x0;env~1pxGHH~3279|) (rnrs records syntactic original) #ex:syntax-rename define (|\x0;env~1pxGHH~3266|) rtd-accessor quote #ex:invalid-form)
 |\x0;def-accessor~1pxGHH~3253| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3291|))) (2559 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #equal? begin (|\x0;env~1pxGHH~3314|) (rnrs records syntactic original) #ex:syntax-rename define (|\x0;env~1pxGHH~3301|) rtd-mutator quote #ex:invalid-form)
 |\x0;def-mutator~1pxGHH~3288| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;record-constructor-descriptor~1pxGHH~3324| #|\x0;record-type-descriptor~1pxGHH~3323| #f #( #(record-type-descriptor #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~3328|)))
 #f #( #(record-constructor-descriptor #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;rtd~1pxGHH~3326|)) #|\x0;preferred-cd~1pxGHH~2335|)
 #values)
 (rnrs records syntactic original) ((define-record-type macro |\x0;define-record-type~1pxGHH~2349| (0) #f (rnrs records syntactic original)) (record-type-descriptor variable |\x0;record-type-descriptor~1pxGHH~3323| (0) #f (rnrs records syntactic original)) (record-constructor-descriptor variable |\x0;record-constructor-descriptor~1pxGHH~3324| (0) #f (rnrs records syntactic original))) (((rnrs records syntactic helper) 0) ((err5rs records procedural) 0) ((rnrs records procedural) 0) ((rnrs syntax-case) 0 1) ((rnrs lists) 0 1) ((rnrs base) 0 1) ((core primitives) 0 1)) (|\x0;build~1pxGHH~2348| |\x0;build~1pxGHH~1713| |\x0;build~1pxGHH~2326| |\x0;build~1pxGHH~1800| |\x0;build~1pxGHH~1541| |\x0;build~1pxGHH~1533| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~3329| #ex:make-library #ex:register-library! #values)
 #f)
))
