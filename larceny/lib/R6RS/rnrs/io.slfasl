#!fasl
(define .petit-bootstrap-id-43cb17d46d26760471ee4e0c1a1fde26 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/rnrs/io.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-43cb17d46d26760471ee4e0c1a1fde26 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~4419| 0 1 2 3) (|\x0;env~1pxGHH~4404| 4 5 6 3) (|\x0;env~1pxGHH~4389| 7 8 9 3)) (9 (((x |\x0;c~1pxGHH~4380|) variable |\x0;x~1pxGHH~4382| (0) #f (rnrs io ports)))) (8 ()) (7 (((dummy |\x0;c~1pxGHH~4380|) . #f) ((x) . #f))) (6 (((x |\x0;c~1pxGHH~4395|) variable |\x0;x~1pxGHH~4397| (0) #f (rnrs io ports)))) (5 ()) (4 (((dummy |\x0;c~1pxGHH~4395|) . #f) ((x) . #f))) (3 (((error-handling-mode) macro |\x0;error-handling-mode~1pxGHH~4409| (0) #f (rnrs io ports)) ((eol-style) macro |\x0;eol-style~1pxGHH~4394| (0) #f (rnrs io ports)) ((buffer-mode) macro |\x0;buffer-mode~1pxGHH~4379| (0) #f (rnrs io ports)) ((undefined) variable ex:undefined (0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0) #f ()) ((syntax) macro syntax (0) #f ()) ((letrec-syntax) macro letrec-syntax (0) #f ()) ((let-syntax) macro let-syntax (0) #f ()) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0) #f (larceny PRIMITIVES)) ((div0) variable div0 (0) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0) #f (larceny PRIMITIVES)) ((mod) variable mod (0) #f (larceny PRIMITIVES)) ((div) variable div (0) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((tan) variable tan (0) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0) #f (larceny PRIMITIVES)) ((sin) variable sin (0) #f (larceny PRIMITIVES)) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0) #f (larceny PRIMITIVES)) ((log) variable log (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exp) variable exp (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((cos) variable cos (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((atan) variable atan (0) #f (larceny PRIMITIVES)) ((asin) variable asin (0) #f (larceny PRIMITIVES)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((angle) variable angle (0) #f (larceny PRIMITIVES)) ((acos) variable acos (0) #f (larceny PRIMITIVES)) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((cons*) variable cons* (0) #f (larceny PRIMITIVES)) ((assq) variable assq (0) #f (larceny PRIMITIVES)) ((assv) variable assv (0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) ((assp) variable assp (0) #f (larceny PRIMITIVES)) ((memq) variable memq (0) #f (larceny PRIMITIVES)) ((memv) variable memv (0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) ((memp) variable memp (0) #f (larceny PRIMITIVES)) ((remv) variable remv (0) #f (larceny PRIMITIVES)) ((remq) variable remq (0) #f (larceny PRIMITIVES)) ((remove) variable |\x0;remove~1pxGHH~1538| (0) #f (rnrs lists)) ((remp) variable remp (0) #f (larceny PRIMITIVES)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0) #f (rnrs lists)) ((fold-left) variable fold-left (0) #f (larceny PRIMITIVES)) ((partition) variable partition (0) #f (larceny PRIMITIVES)) ((filter) variable filter (0) #f (larceny PRIMITIVES)) ((exists) variable exists (0) #f (larceny PRIMITIVES)) ((for-all) variable for-all (0) #f (larceny PRIMITIVES)) ((find) variable find (0) #f (larceny PRIMITIVES)) ((issue-deprecated-warnings?) variable issue-deprecated-warnings? (0) #f (larceny PRIMITIVES)) ((issue-warning-deprecated) variable issue-warning-deprecated (0) #f (larceny PRIMITIVES)) ((make-custom-textual-input/output-port) variable make-custom-textual-input/output-port (0) #f (larceny PRIMITIVES)) ((make-custom-binary-input/output-port) variable make-custom-binary-input/output-port (0) #f (larceny PRIMITIVES)) ((open-file-input/output-port) variable open-file-input/output-port (0) #f (larceny PRIMITIVES)) ((put-datum) variable put-datum (0) #f (larceny PRIMITIVES)) ((put-string) variable put-string (0) #f (larceny PRIMITIVES)) ((put-char) variable put-char (0) #f (larceny PRIMITIVES)) ((put-bytevector) variable put-bytevector (0) #f (larceny PRIMITIVES)) ((put-u8) variable put-u8 (0) #f (larceny PRIMITIVES)) ((make-custom-textual-output-port) variable make-custom-textual-output-port (0) #f (larceny PRIMITIVES)) ((make-custom-binary-output-port) variable make-custom-binary-output-port (0) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (0) #f (larceny PRIMITIVES)) ((standard-error-port) variable standard-error-port (0) #f (larceny PRIMITIVES)) ((current-output-port) variable current-output-port (0) #f (larceny PRIMITIVES)) ((standard-output-port) variable standard-output-port (0) #f (larceny PRIMITIVES)) ((call-with-string-output-port) variable call-with-string-output-port (0) #f (larceny PRIMITIVES)) ((call-with-bytevector-output-port) variable call-with-bytevector-output-port (0) #f (larceny PRIMITIVES)) ((open-string-output-port) variable open-string-output-port (0) #f (larceny PRIMITIVES)) ((open-bytevector-output-port) variable open-bytevector-output-port (0) #f (larceny PRIMITIVES)) ((open-file-output-port) variable open-file-output-port (0) #f (larceny PRIMITIVES)) ((output-port-buffer-mode) variable output-port-buffer-mode (0) #f (larceny PRIMITIVES)) ((flush-output-port) variable flush-output-port (0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (0) #f (larceny PRIMITIVES)) ((get-datum) variable get-datum (0) #f (larceny PRIMITIVES)) ((get-line) variable get-line (0) #f (larceny PRIMITIVES)) ((get-string-all) variable get-string-all (0) #f (larceny PRIMITIVES)) ((get-string-n!) variable get-string-n! (0) #f (larceny PRIMITIVES)) ((get-string-n) variable get-string-n (0) #f (larceny PRIMITIVES)) ((lookahead-char) variable lookahead-char (0) #f (larceny PRIMITIVES)) ((get-char) variable get-char (0) #f (larceny PRIMITIVES)) ((get-bytevector-all) variable get-bytevector-all (0) #f (larceny PRIMITIVES)) ((get-bytevector-some) variable get-bytevector-some (0) #f (larceny PRIMITIVES)) ((get-bytevector-n!) variable get-bytevector-n! (0) #f (larceny PRIMITIVES)) ((get-bytevector-n) variable get-bytevector-n (0) #f (larceny PRIMITIVES)) ((lookahead-u8) variable lookahead-u8 (0) #f (larceny PRIMITIVES)) ((get-u8) variable get-u8 (0) #f (larceny PRIMITIVES)) ((make-custom-textual-input-port) variable make-custom-textual-input-port (0) #f (larceny PRIMITIVES)) ((make-custom-binary-input-port) variable make-custom-binary-input-port (0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (0) #f (larceny PRIMITIVES)) ((standard-input-port) variable standard-input-port (0) #f (larceny PRIMITIVES)) ((open-string-input-port) variable open-string-input-port (0) #f (larceny PRIMITIVES)) ((open-bytevector-input-port) variable open-bytevector-input-port (0) #f (larceny PRIMITIVES)) ((open-file-input-port) variable open-file-input-port (0) #f (larceny PRIMITIVES)) ((port-eof?) variable port-eof? (0) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (0) #f (larceny PRIMITIVES)) ((set-port-position!) variable set-port-position! (0) #f (larceny PRIMITIVES)) ((port-has-set-port-position!?) variable port-has-set-port-position!? (0) #f (larceny PRIMITIVES)) ((port-position) variable port-position (0) #f (larceny PRIMITIVES)) ((port-has-port-position?) variable port-has-port-position? (0) #f (larceny PRIMITIVES)) ((transcoded-port) variable transcoded-port (0) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (0) #f (larceny PRIMITIVES)) ((port-transcoder) variable port-transcoder (0) #f (larceny PRIMITIVES)) ((port?) variable port? (0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (0) #f (larceny PRIMITIVES)) ((string->bytevector) variable string->bytevector (0) #f (larceny PRIMITIVES)) ((bytevector->string) variable bytevector->string (0) #f (larceny PRIMITIVES)) ((transcoder-error-handling-mode) variable transcoder-error-handling-mode (0) #f (larceny PRIMITIVES)) ((transcoder-eol-style) variable transcoder-eol-style (0) #f (larceny PRIMITIVES)) ((transcoder-codec) variable transcoder-codec (0) #f (larceny PRIMITIVES)) ((native-transcoder) variable native-transcoder (0) #f (larceny PRIMITIVES)) ((make-transcoder) variable make-transcoder (0) #f (larceny PRIMITIVES)) ((i/o-encoding-error-char) variable i/o-encoding-error-char (0) #f (larceny PRIMITIVES)) ((i/o-encoding-error?) variable i/o-encoding-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-encoding-error) variable make-i/o-encoding-error (0) #f (larceny PRIMITIVES)) ((&i/o-encoding) variable &i/o-encoding (0) #f (larceny PRIMITIVES)) ((i/o-decoding-error?) variable i/o-decoding-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-decoding-error) variable make-i/o-decoding-error (0) #f (larceny PRIMITIVES)) ((&i/o-decoding) variable &i/o-decoding (0) #f (larceny PRIMITIVES)) ((native-eol-style) variable native-eol-style (0) #f (larceny PRIMITIVES)) ((utf-16-codec) variable utf-16-codec (0) #f (larceny PRIMITIVES)) ((utf-8-codec) variable utf-8-codec (0) #f (larceny PRIMITIVES)) ((latin-1-codec) variable latin-1-codec (0) #f (larceny PRIMITIVES)) ((buffer-mode?) variable buffer-mode? (0) #f (larceny PRIMITIVES)) ((no-truncate) variable no-truncate (0) #f (larceny PRIMITIVES)) ((no-fail) variable no-fail (0) #f (larceny PRIMITIVES)) ((no-create) variable no-create (0) #f (larceny PRIMITIVES)) ((file-options) variable file-options (0) #f (larceny PRIMITIVES)) ((i/o-error-port) variable i/o-error-port (0) #f (larceny PRIMITIVES)) ((i/o-port-error?) variable i/o-port-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-port-error) variable make-i/o-port-error (0) #f (larceny PRIMITIVES)) ((&i/o-port) variable &i/o-port (0) #f (larceny PRIMITIVES)) ((i/o-file-does-not-exist-error?) variable i/o-file-does-not-exist-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-file-does-not-exist-error) variable make-i/o-file-does-not-exist-error (0) #f (larceny PRIMITIVES)) ((&i/o-file-does-not-exist) variable &i/o-file-does-not-exist (0) #f (larceny PRIMITIVES)) ((i/o-file-already-exists-error?) variable i/o-file-already-exists-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-file-already-exists-error) variable make-i/o-file-already-exists-error (0) #f (larceny PRIMITIVES)) ((&i/o-file-already-exists) variable &i/o-file-already-exists (0) #f (larceny PRIMITIVES)) ((i/o-file-is-read-only-error?) variable i/o-file-is-read-only-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-file-is-read-only-error) variable make-i/o-file-is-read-only-error (0) #f (larceny PRIMITIVES)) ((&i/o-file-is-read-only) variable &i/o-file-is-read-only (0) #f (larceny PRIMITIVES)) ((i/o-file-protection-error?) variable i/o-file-protection-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-file-protection-error) variable make-i/o-file-protection-error (0) #f (larceny PRIMITIVES)) ((&i/o-file-protection) variable &i/o-file-protection (0) #f (larceny PRIMITIVES)) ((i/o-error-filename) variable i/o-error-filename (0) #f (larceny PRIMITIVES)) ((i/o-filename-error?) variable i/o-filename-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-filename-error) variable make-i/o-filename-error (0) #f (larceny PRIMITIVES)) ((&i/o-filename) variable &i/o-filename (0) #f (larceny PRIMITIVES)) ((i/o-error-position) variable i/o-error-position (0) #f (larceny PRIMITIVES)) ((i/o-invalid-position-error?) variable i/o-invalid-position-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-invalid-position-error) variable make-i/o-invalid-position-error (0) #f (larceny PRIMITIVES)) ((&i/o-invalid-position) variable &i/o-invalid-position (0) #f (larceny PRIMITIVES)) ((i/o-write-error?) variable i/o-write-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-write-error) variable make-i/o-write-error (0) #f (larceny PRIMITIVES)) ((&i/o-write) variable &i/o-write (0) #f (larceny PRIMITIVES)) ((i/o-read-error?) variable i/o-read-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-read-error) variable make-i/o-read-error (0) #f (larceny PRIMITIVES)) ((&i/o-read) variable &i/o-read (0) #f (larceny PRIMITIVES)) ((i/o-error?) variable i/o-error? (0) #f (larceny PRIMITIVES)) ((make-i/o-error) variable make-i/o-error (0) #f (larceny PRIMITIVES)) ((&i/o) variable &i/o (0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~4410|) variable |\x0;x~1pxGHH~4412| (0) #f (rnrs io ports)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~4410|) . #f) ((x) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~4382|)) begin (|\x0;env~1pxGHH~4389|) (rnrs io ports) #ex:syntax-rename issue-warning-deprecated quote buffer-mode let mode if memq none line block assertion-violation "Larceny-specific buffer mode" #ex:invalid-form)
 |\x0;buffer-mode~1pxGHH~4379| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~4397|)) begin (|\x0;env~1pxGHH~4404|) (rnrs io ports) #ex:syntax-rename issue-warning-deprecated quote eol-style #ex:invalid-form)
 |\x0;eol-style~1pxGHH~4394| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~4412|)) begin (|\x0;env~1pxGHH~4419|) (rnrs io ports) #ex:syntax-rename issue-warning-deprecated quote error-handling-mode #ex:invalid-form)
 |\x0;error-handling-mode~1pxGHH~4409| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (rnrs io ports) ((&i/o variable &i/o (0) #f (larceny PRIMITIVES)) (make-i/o-error variable make-i/o-error (0) #f (larceny PRIMITIVES)) (i/o-error? variable i/o-error? (0) #f (larceny PRIMITIVES)) (&i/o-read variable &i/o-read (0) #f (larceny PRIMITIVES)) (make-i/o-read-error variable make-i/o-read-error (0) #f (larceny PRIMITIVES)) (i/o-read-error? variable i/o-read-error? (0) #f (larceny PRIMITIVES)) (&i/o-write variable &i/o-write (0) #f (larceny PRIMITIVES)) (make-i/o-write-error variable make-i/o-write-error (0) #f (larceny PRIMITIVES)) (i/o-write-error? variable i/o-write-error? (0) #f (larceny PRIMITIVES)) (&i/o-invalid-position variable &i/o-invalid-position (0) #f (larceny PRIMITIVES)) (make-i/o-invalid-position-error variable make-i/o-invalid-position-error (0) #f (larceny PRIMITIVES)) (i/o-invalid-position-error? variable i/o-invalid-position-error? (0) #f (larceny PRIMITIVES)) (i/o-error-position variable i/o-error-position (0) #f (larceny PRIMITIVES)) (&i/o-filename variable &i/o-filename (0) #f (larceny PRIMITIVES)) (make-i/o-filename-error variable make-i/o-filename-error (0) #f (larceny PRIMITIVES)) (i/o-filename-error? variable i/o-filename-error? (0) #f (larceny PRIMITIVES)) (i/o-error-filename variable i/o-error-filename (0) #f (larceny PRIMITIVES)) (&i/o-file-protection variable &i/o-file-protection (0) #f (larceny PRIMITIVES)) (make-i/o-file-protection-error variable make-i/o-file-protection-error (0) #f (larceny PRIMITIVES)) (i/o-file-protection-error? variable i/o-file-protection-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-is-read-only variable &i/o-file-is-read-only (0) #f (larceny PRIMITIVES)) (make-i/o-file-is-read-only-error variable make-i/o-file-is-read-only-error (0) #f (larceny PRIMITIVES)) (i/o-file-is-read-only-error? variable i/o-file-is-read-only-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-already-exists variable &i/o-file-already-exists (0) #f (larceny PRIMITIVES)) (make-i/o-file-already-exists-error variable make-i/o-file-already-exists-error (0) #f (larceny PRIMITIVES)) (i/o-file-already-exists-error? variable i/o-file-already-exists-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-does-not-exist variable &i/o-file-does-not-exist (0) #f (larceny PRIMITIVES)) (make-i/o-file-does-not-exist-error variable make-i/o-file-does-not-exist-error (0) #f (larceny PRIMITIVES)) (i/o-file-does-not-exist-error? variable i/o-file-does-not-exist-error? (0) #f (larceny PRIMITIVES)) (&i/o-port variable &i/o-port (0) #f (larceny PRIMITIVES)) (make-i/o-port-error variable make-i/o-port-error (0) #f (larceny PRIMITIVES)) (i/o-port-error? variable i/o-port-error? (0) #f (larceny PRIMITIVES)) (i/o-error-port variable i/o-error-port (0) #f (larceny PRIMITIVES)) (file-options variable file-options (0) #f (larceny PRIMITIVES)) (no-create variable no-create (0) #f (larceny PRIMITIVES)) (no-fail variable no-fail (0) #f (larceny PRIMITIVES)) (no-truncate variable no-truncate (0) #f (larceny PRIMITIVES)) (buffer-mode macro |\x0;buffer-mode~1pxGHH~4379| (0) #f (rnrs io ports)) (buffer-mode? variable buffer-mode? (0) #f (larceny PRIMITIVES)) (latin-1-codec variable latin-1-codec (0) #f (larceny PRIMITIVES)) (utf-8-codec variable utf-8-codec (0) #f (larceny PRIMITIVES)) (utf-16-codec variable utf-16-codec (0) #f (larceny PRIMITIVES)) (eol-style macro |\x0;eol-style~1pxGHH~4394| (0) #f (rnrs io ports)) (native-eol-style variable native-eol-style (0) #f (larceny PRIMITIVES)) (&i/o-decoding variable &i/o-decoding (0) #f (larceny PRIMITIVES)) (make-i/o-decoding-error variable make-i/o-decoding-error (0) #f (larceny PRIMITIVES)) (i/o-decoding-error? variable i/o-decoding-error? (0) #f (larceny PRIMITIVES)) (&i/o-encoding variable &i/o-encoding (0) #f (larceny PRIMITIVES)) (make-i/o-encoding-error variable make-i/o-encoding-error (0) #f (larceny PRIMITIVES)) (i/o-encoding-error? variable i/o-encoding-error? (0) #f (larceny PRIMITIVES)) (i/o-encoding-error-char variable i/o-encoding-error-char (0) #f (larceny PRIMITIVES)) (error-handling-mode macro |\x0;error-handling-mode~1pxGHH~4409| (0) #f (rnrs io ports)) (make-transcoder variable make-transcoder (0) #f (larceny PRIMITIVES)) (native-transcoder variable native-transcoder (0) #f (larceny PRIMITIVES)) (transcoder-codec variable transcoder-codec (0) #f (larceny PRIMITIVES)) (transcoder-eol-style variable transcoder-eol-style (0) #f (larceny PRIMITIVES)) (transcoder-error-handling-mode variable transcoder-error-handling-mode (0) #f (larceny PRIMITIVES)) (bytevector->string variable bytevector->string (0) #f (larceny PRIMITIVES)) (string->bytevector variable string->bytevector (0) #f (larceny PRIMITIVES)) (eof-object variable eof-object (0) #f (larceny PRIMITIVES)) (eof-object? variable eof-object? (0) #f (larceny PRIMITIVES)) (port? variable port? (0) #f (larceny PRIMITIVES)) (port-transcoder variable port-transcoder (0) #f (larceny PRIMITIVES)) (textual-port? variable textual-port? (0) #f (larceny PRIMITIVES)) (binary-port? variable binary-port? (0) #f (larceny PRIMITIVES)) (transcoded-port variable transcoded-port (0) #f (larceny PRIMITIVES)) (port-has-port-position? variable port-has-port-position? (0) #f (larceny PRIMITIVES)) (port-position variable port-position (0) #f (larceny PRIMITIVES)) (port-has-set-port-position!? variable port-has-set-port-position!? (0) #f (larceny PRIMITIVES)) (set-port-position! variable set-port-position! (0) #f (larceny PRIMITIVES)) (close-port variable close-port (0) #f (larceny PRIMITIVES)) (call-with-port variable call-with-port (0) #f (larceny PRIMITIVES)) (input-port? variable input-port? (0) #f (larceny PRIMITIVES)) (port-eof? variable port-eof? (0) #f (larceny PRIMITIVES)) (open-file-input-port variable open-file-input-port (0) #f (larceny PRIMITIVES)) (open-bytevector-input-port variable open-bytevector-input-port (0) #f (larceny PRIMITIVES)) (open-string-input-port variable open-string-input-port (0) #f (larceny PRIMITIVES)) (standard-input-port variable standard-input-port (0) #f (larceny PRIMITIVES)) (current-input-port variable current-input-port (0) #f (larceny PRIMITIVES)) (make-custom-binary-input-port variable make-custom-binary-input-port (0) #f (larceny PRIMITIVES)) (make-custom-textual-input-port variable make-custom-textual-input-port (0) #f (larceny PRIMITIVES)) (get-u8 variable get-u8 (0) #f (larceny PRIMITIVES)) (lookahead-u8 variable lookahead-u8 (0) #f (larceny PRIMITIVES)) (get-bytevector-n variable get-bytevector-n (0) #f (larceny PRIMITIVES)) (get-bytevector-n! variable get-bytevector-n! (0) #f (larceny PRIMITIVES)) (get-bytevector-some variable get-bytevector-some (0) #f (larceny PRIMITIVES)) (get-bytevector-all variable get-bytevector-all (0) #f (larceny PRIMITIVES)) (get-char variable get-char (0) #f (larceny PRIMITIVES)) (lookahead-char variable lookahead-char (0) #f (larceny PRIMITIVES)) (get-string-n variable get-string-n (0) #f (larceny PRIMITIVES)) (get-string-n! variable get-string-n! (0) #f (larceny PRIMITIVES)) (get-string-all variable get-string-all (0) #f (larceny PRIMITIVES)) (get-line variable get-line (0) #f (larceny PRIMITIVES)) (get-datum variable get-datum (0) #f (larceny PRIMITIVES)) (output-port? variable output-port? (0) #f (larceny PRIMITIVES)) (flush-output-port variable flush-output-port (0) #f (larceny PRIMITIVES)) (output-port-buffer-mode variable output-port-buffer-mode (0) #f (larceny PRIMITIVES)) (open-file-output-port variable open-file-output-port (0) #f (larceny PRIMITIVES)) (open-bytevector-output-port variable open-bytevector-output-port (0) #f (larceny PRIMITIVES)) (open-string-output-port variable open-string-output-port (0) #f (larceny PRIMITIVES)) (call-with-bytevector-output-port variable call-with-bytevector-output-port (0) #f (larceny PRIMITIVES)) (call-with-string-output-port variable call-with-string-output-port (0) #f (larceny PRIMITIVES)) (standard-output-port variable standard-output-port (0) #f (larceny PRIMITIVES)) (current-output-port variable current-output-port (0) #f (larceny PRIMITIVES)) (standard-error-port variable standard-error-port (0) #f (larceny PRIMITIVES)) (current-error-port variable current-error-port (0) #f (larceny PRIMITIVES)) (make-custom-binary-output-port variable make-custom-binary-output-port (0) #f (larceny PRIMITIVES)) (make-custom-textual-output-port variable make-custom-textual-output-port (0) #f (larceny PRIMITIVES)) (put-u8 variable put-u8 (0) #f (larceny PRIMITIVES)) (put-bytevector variable put-bytevector (0) #f (larceny PRIMITIVES)) (put-char variable put-char (0) #f (larceny PRIMITIVES)) (put-string variable put-string (0) #f (larceny PRIMITIVES)) (put-datum variable put-datum (0) #f (larceny PRIMITIVES)) (open-file-input/output-port variable open-file-input/output-port (0) #f (larceny PRIMITIVES)) (make-custom-binary-input/output-port variable make-custom-binary-input/output-port (0) #f (larceny PRIMITIVES)) (make-custom-textual-input/output-port variable make-custom-textual-input/output-port (0) #f (larceny PRIMITIVES))) (((larceny deprecated) 0) ((rnrs lists) 0) ((rnrs base) 0) ((core syntax-rules) 1) ((core primitives) 1) ((core primitives) 0)) (|\x0;build~1pxGHH~3819| |\x0;build~1pxGHH~1541| |\x0;build~1pxGHH~1533| |\x0;build~1pxGHH~143| |\x0;build~1pxGHH~2| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~4424| #ex:make-library #ex:register-library! #values)
 #f)
))
