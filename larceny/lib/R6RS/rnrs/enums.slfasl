#!fasl
(define .petit-bootstrap-id-1519a406505ef678412b64477971a844 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/rnrs/enums.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-1519a406505ef678412b64477971a844 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~7249| 0 1 2 3)) (3 (((define-enumeration) macro |\x0;define-enumeration~1pxGHH~7237| (0) #f (rnrs enums)) ((call/cc) variable call/cc (0 1) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0 1) #f (larceny PRIMITIVES)) ((error) variable error (0 1) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0 1) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0 1) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0 1) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0 1) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0 1) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0 1) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0 1) #f (larceny PRIMITIVES)) ((div0) variable div0 (0 1) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0 1) #f (larceny PRIMITIVES)) ((mod) variable mod (0 1) #f (larceny PRIMITIVES)) ((div) variable div (0 1) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0 1) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0 1) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0 1) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0 1) #f (larceny PRIMITIVES)) ((exact) variable exact (0 1) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0 1) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0 1) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0 1) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0 1) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0 1) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0 1) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0 1) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0 1) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0 1) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0 1) #f (larceny PRIMITIVES)) ((vector) variable vector (0 1) #f (larceny PRIMITIVES)) ((values) variable values (0 1) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0 1) #f (larceny PRIMITIVES)) ((tan) variable tan (0 1) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0 1) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0 1) #f (larceny PRIMITIVES)) ((substring) variable substring (0 1) #f (larceny PRIMITIVES)) ((string?) variable string? (0 1) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0 1) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0 1) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0 1) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0 1) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0 1) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0 1) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0 1) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0 1) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0 1) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0 1) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0 1) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0 1) #f (larceny PRIMITIVES)) ((string) variable string (0 1) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0 1) #f (larceny PRIMITIVES)) ((sin) variable sin (0 1) #f (larceny PRIMITIVES)) ((round) variable round (0 1) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0 1) #f (larceny PRIMITIVES)) ((real?) variable real? (0 1) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0 1) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0 1) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0 1) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0 1) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0 1) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0 1) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0 1) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0 1) #f (larceny PRIMITIVES)) ((number?) variable number? (0 1) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0 1) #f (larceny PRIMITIVES)) ((null?) variable null? (0 1) #f (larceny PRIMITIVES)) ((not) variable not (0 1) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0 1) #f (larceny PRIMITIVES)) ((min) variable min (0 1) #f (larceny PRIMITIVES)) ((max) variable max (0 1) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0 1) #f (rnrs base)) ((make-vector) variable make-vector (0 1) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0 1) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0 1) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0 1) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0 1) #f (larceny PRIMITIVES)) ((log) variable log (0 1) #f (larceny PRIMITIVES)) ((list?) variable list? (0 1) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0 1) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0 1) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0 1) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0 1) #f (larceny PRIMITIVES)) ((list) variable list (0 1) #f (larceny PRIMITIVES)) ((length) variable length (0 1) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0 1) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0 1) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0 1) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0 1) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0 1) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0 1) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0 1) #f (rnrs base)) ((floor) variable floor (0 1) #f (larceny PRIMITIVES)) ((expt) variable expt (0 1) #f (larceny PRIMITIVES)) ((exp) variable exp (0 1) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0 1) #f (larceny PRIMITIVES)) ((even?) variable even? (0 1) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0 1) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0 1) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0 1) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0 1) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0 1) #f (larceny PRIMITIVES)) ((cos) variable cos (0 1) #f (larceny PRIMITIVES)) ((cons) variable cons (0 1) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0 1) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0 1) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0 1) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0 1) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0 1) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0 1) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0 1) #f (larceny PRIMITIVES)) ((char?) variable char? (0 1) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0 1) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0 1) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0 1) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0 1) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0 1) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0 1) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0 1) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0 1) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0 1) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0 1) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0 1) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0 1) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0 1) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0 1) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0 1) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0 1) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0 1) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0 1) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0 1) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0 1) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0 1) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0 1) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0 1) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0 1) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0 1) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0 1) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0 1) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0 1) #f (larceny PRIMITIVES)) ((caar) variable caar (0 1) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0 1) #f (larceny PRIMITIVES)) ((car) variable car (0 1) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0 1) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0 1) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0 1) #f (larceny PRIMITIVES)) ((atan) variable atan (0 1) #f (larceny PRIMITIVES)) ((asin) variable asin (0 1) #f (larceny PRIMITIVES)) ((apply) variable apply (0 1) #f (larceny PRIMITIVES)) ((append) variable append (0 1) #f (larceny PRIMITIVES)) ((angle) variable angle (0 1) #f (larceny PRIMITIVES)) ((acos) variable acos (0 1) #f (larceny PRIMITIVES)) ((abs) variable abs (0 1) #f (larceny PRIMITIVES)) ((>=) variable >= (0 1) #f (larceny PRIMITIVES)) ((>) variable > (0 1) #f (larceny PRIMITIVES)) ((=) variable = (0 1) #f (larceny PRIMITIVES)) ((<=) variable <= (0 1) #f (larceny PRIMITIVES)) ((<) variable < (0 1) #f (larceny PRIMITIVES)) ((/) variable / (0 1) #f (larceny PRIMITIVES)) ((-) variable - (0 1) #f (larceny PRIMITIVES)) ((+) variable + (0 1) #f (larceny PRIMITIVES)) ((*) variable * (0 1) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1 2) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1 2) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0 1) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0 1) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0 1) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0 1) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0 1) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0 1) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0 1) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0 1) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0 1) #f (core let)) ((let*) macro |\x0;let*~1pxGHH~241| (0 1) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0 1) #f (core let)) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0 1) #f (rnrs base)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0 1) #f (rnrs base)) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 2 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((...) macro ... (0 2 1) #f ()) ((_) macro _ (0 2 1) #f ()) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (0 1) #f (core with-syntax)) ((unsyntax-splicing) macro |\x0;unsyntax-splicing~1pxGHH~845| (0 1) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (0 1) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (0 1) #f (core quasisyntax)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((syntax-violation) variable |\x0;syntax-violation~1pxGHH~1758| (0 1) #f (rnrs syntax-case)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((cons*) variable cons* (0 1) #f (larceny PRIMITIVES)) ((assq) variable assq (0 1) #f (larceny PRIMITIVES)) ((assv) variable assv (0 1) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0 1) #f (rnrs lists)) ((assp) variable assp (0 1) #f (larceny PRIMITIVES)) ((memq) variable memq (0 1) #f (larceny PRIMITIVES)) ((memv) variable memv (0 1) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0 1) #f (rnrs lists)) ((memp) variable memp (0 1) #f (larceny PRIMITIVES)) ((remv) variable remv (0 1) #f (larceny PRIMITIVES)) ((remq) variable remq (0 1) #f (larceny PRIMITIVES)) ((remove) variable |\x0;remove~1pxGHH~1538| (0 1) #f (rnrs lists)) ((remp) variable remp (0 1) #f (larceny PRIMITIVES)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0 1) #f (rnrs lists)) ((fold-left) variable fold-left (0 1) #f (larceny PRIMITIVES)) ((partition) variable partition (0 1) #f (larceny PRIMITIVES)) ((filter) variable filter (0 1) #f (larceny PRIMITIVES)) ((exists) variable exists (0 1) #f (larceny PRIMITIVES)) ((for-all) variable for-all (0 1) #f (larceny PRIMITIVES)) ((find) variable find (0 1) #f (larceny PRIMITIVES)) ((enum-set-projection) variable enum-set-projection (0) #f (larceny PRIMITIVES)) ((enum-set-complement) variable enum-set-complement (0) #f (larceny PRIMITIVES)) ((enum-set-difference) variable enum-set-difference (0) #f (larceny PRIMITIVES)) ((enum-set-intersection) variable enum-set-intersection (0) #f (larceny PRIMITIVES)) ((enum-set-union) variable enum-set-union (0) #f (larceny PRIMITIVES)) ((enum-set=?) variable enum-set=? (0) #f (larceny PRIMITIVES)) ((enum-set-subset?) variable enum-set-subset? (0) #f (larceny PRIMITIVES)) ((enum-set-member?) variable enum-set-member? (0) #f (larceny PRIMITIVES)) ((enum-set->list) variable enum-set->list (0) #f (larceny PRIMITIVES)) ((enum-set-constructor) variable enum-set-constructor (0) #f (larceny PRIMITIVES)) ((enum-set-indexer) variable enum-set-indexer (0) #f (larceny PRIMITIVES)) ((enum-set-universe) variable enum-set-universe (0) #f (larceny PRIMITIVES)) ((make-enumeration) variable make-enumeration (0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~7238|) variable |\x0;x~1pxGHH~7240| (0) #f (rnrs enums)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~7238|) . #f) ((type-name) . #f) ((symbol1) . #f) ((set-constructor-syntax) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~7240|)) #list? begin (|\x0;env~1pxGHH~7249|) (rnrs enums) #ex:syntax-rename define-syntax lambda x define complain syntax-violation quote "illegal symbol" syntax-case _ y let sym1 syntax->datum syntax if memq hidden-name make-enumeration syntax-rules ... enum-set-constructor list #ex:invalid-form)
 |\x0;define-enumeration~1pxGHH~7237| #ex:register-macro! #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (rnrs enums) ((make-enumeration variable make-enumeration (0) #f (larceny PRIMITIVES)) (enum-set-universe variable enum-set-universe (0) #f (larceny PRIMITIVES)) (enum-set-indexer variable enum-set-indexer (0) #f (larceny PRIMITIVES)) (enum-set-constructor variable enum-set-constructor (0) #f (larceny PRIMITIVES)) (enum-set->list variable enum-set->list (0) #f (larceny PRIMITIVES)) (enum-set-member? variable enum-set-member? (0) #f (larceny PRIMITIVES)) (enum-set-subset? variable enum-set-subset? (0) #f (larceny PRIMITIVES)) (enum-set=? variable enum-set=? (0) #f (larceny PRIMITIVES)) (enum-set-union variable enum-set-union (0) #f (larceny PRIMITIVES)) (enum-set-intersection variable enum-set-intersection (0) #f (larceny PRIMITIVES)) (enum-set-difference variable enum-set-difference (0) #f (larceny PRIMITIVES)) (enum-set-complement variable enum-set-complement (0) #f (larceny PRIMITIVES)) (enum-set-projection variable enum-set-projection (0) #f (larceny PRIMITIVES)) (define-enumeration macro |\x0;define-enumeration~1pxGHH~7237| (0) #f (rnrs enums))) (((rnrs lists) 0 1) ((rnrs syntax-case) 0 1) ((rnrs base) 0 1)) (|\x0;build~1pxGHH~1541| |\x0;build~1pxGHH~1800| |\x0;build~1pxGHH~1533|) |\x0;build~1pxGHH~7258| #ex:make-library #ex:register-library! #values)
 #f)
))
