#!fasl
(define .petit-bootstrap-id-fea3fec620a3a276252b31a640c99ef0 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/rnrs/arithmetic.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-fea3fec620a3a276252b31a640c99ef0 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #values #apply)
 (rnrs arithmetic fixnums) ((fixnum? variable fixnum? (0) #f (larceny PRIMITIVES)) (fixnum-width variable fixnum-width (0) #f (larceny PRIMITIVES)) (least-fixnum variable least-fixnum (0) #f (larceny PRIMITIVES)) (greatest-fixnum variable greatest-fixnum (0) #f (larceny PRIMITIVES)) (fx=? variable fx=? (0) #f (larceny PRIMITIVES)) (fx>? variable fx>? (0) #f (larceny PRIMITIVES)) (fx<? variable fx<? (0) #f (larceny PRIMITIVES)) (fx>=? variable fx>=? (0) #f (larceny PRIMITIVES)) (fx<=? variable fx<=? (0) #f (larceny PRIMITIVES)) (fxzero? variable fxzero? (0) #f (larceny PRIMITIVES)) (fxpositive? variable fxpositive? (0) #f (larceny PRIMITIVES)) (fxnegative? variable fxnegative? (0) #f (larceny PRIMITIVES)) (fxodd? variable fxodd? (0) #f (larceny PRIMITIVES)) (fxeven? variable fxeven? (0) #f (larceny PRIMITIVES)) (fxmax variable fxmax (0) #f (larceny PRIMITIVES)) (fxmin variable fxmin (0) #f (larceny PRIMITIVES)) (fx+ variable fx+ (0) #f (larceny PRIMITIVES)) (fx- variable fx- (0) #f (larceny PRIMITIVES)) (fx* variable fx* (0) #f (larceny PRIMITIVES)) (fxdiv-and-mod variable fxdiv-and-mod (0) #f (larceny PRIMITIVES)) (fxdiv variable fxdiv (0) #f (larceny PRIMITIVES)) (fxmod variable fxmod (0) #f (larceny PRIMITIVES)) (fxdiv0-and-mod0 variable fxdiv0-and-mod0 (0) #f (larceny PRIMITIVES)) (fxdiv0 variable fxdiv0 (0) #f (larceny PRIMITIVES)) (fxmod0 variable fxmod0 (0) #f (larceny PRIMITIVES)) (fx+/carry variable fx+/carry (0) #f (larceny PRIMITIVES)) (fx-/carry variable fx-/carry (0) #f (larceny PRIMITIVES)) (fx*/carry variable fx*/carry (0) #f (larceny PRIMITIVES)) (fxnot variable fxnot (0) #f (larceny PRIMITIVES)) (fxand variable fxand (0) #f (larceny PRIMITIVES)) (fxior variable fxior (0) #f (larceny PRIMITIVES)) (fxxor variable fxxor (0) #f (larceny PRIMITIVES)) (fxif variable fxif (0) #f (larceny PRIMITIVES)) (fxbit-count variable fxbit-count (0) #f (larceny PRIMITIVES)) (fxlength variable fxlength (0) #f (larceny PRIMITIVES)) (fxfirst-bit-set variable fxfirst-bit-set (0) #f (larceny PRIMITIVES)) (fxbit-set? variable fxbit-set? (0) #f (larceny PRIMITIVES)) (fxcopy-bit variable fxcopy-bit (0) #f (larceny PRIMITIVES)) (fxbit-field variable fxbit-field (0) #f (larceny PRIMITIVES)) (fxcopy-bit-field variable fxcopy-bit-field (0) #f (larceny PRIMITIVES)) (fxrotate-bit-field variable fxrotate-bit-field (0) #f (larceny PRIMITIVES)) (fxreverse-bit-field variable fxreverse-bit-field (0) #f (larceny PRIMITIVES)) (fxarithmetic-shift variable fxarithmetic-shift (0) #f (larceny PRIMITIVES)) (fxarithmetic-shift-left variable fxarithmetic-shift-left (0) #f (larceny PRIMITIVES)) (fxarithmetic-shift-right variable fxarithmetic-shift-right (0) #f (larceny PRIMITIVES))) |\x0;build~1pxGHH~7264| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-fea3fec620a3a276252b31a640c99ef0 1
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #values #apply)
 (rnrs arithmetic flonums) ((flonum? variable flonum? (0) #f (larceny PRIMITIVES)) (real->flonum variable real->flonum (0) #f (larceny PRIMITIVES)) (fl=? variable fl=? (0) #f (larceny PRIMITIVES)) (fl<? variable fl<? (0) #f (larceny PRIMITIVES)) (fl>? variable fl>? (0) #f (larceny PRIMITIVES)) (fl<=? variable fl<=? (0) #f (larceny PRIMITIVES)) (fl>=? variable fl>=? (0) #f (larceny PRIMITIVES)) (flinteger? variable flinteger? (0) #f (larceny PRIMITIVES)) (flzero? variable flzero? (0) #f (larceny PRIMITIVES)) (flpositive? variable flpositive? (0) #f (larceny PRIMITIVES)) (flnegative? variable flnegative? (0) #f (larceny PRIMITIVES)) (flodd? variable flodd? (0) #f (larceny PRIMITIVES)) (fleven? variable fleven? (0) #f (larceny PRIMITIVES)) (flfinite? variable flfinite? (0) #f (larceny PRIMITIVES)) (flinfinite? variable flinfinite? (0) #f (larceny PRIMITIVES)) (flnan? variable flnan? (0) #f (larceny PRIMITIVES)) (flmax variable flmax (0) #f (larceny PRIMITIVES)) (flmin variable flmin (0) #f (larceny PRIMITIVES)) (fl+ variable fl+ (0) #f (larceny PRIMITIVES)) (fl* variable fl* (0) #f (larceny PRIMITIVES)) (fl- variable fl- (0) #f (larceny PRIMITIVES)) (fl/ variable fl/ (0) #f (larceny PRIMITIVES)) (flabs variable flabs (0) #f (larceny PRIMITIVES)) (fldiv-and-mod variable fldiv-and-mod (0) #f (larceny PRIMITIVES)) (fldiv variable fldiv (0) #f (larceny PRIMITIVES)) (flmod variable flmod (0) #f (larceny PRIMITIVES)) (fldiv0-and-mod0 variable fldiv0-and-mod0 (0) #f (larceny PRIMITIVES)) (fldiv0 variable fldiv0 (0) #f (larceny PRIMITIVES)) (flmod0 variable flmod0 (0) #f (larceny PRIMITIVES)) (flnumerator variable flnumerator (0) #f (larceny PRIMITIVES)) (fldenominator variable fldenominator (0) #f (larceny PRIMITIVES)) (flfloor variable flfloor (0) #f (larceny PRIMITIVES)) (flceiling variable flceiling (0) #f (larceny PRIMITIVES)) (fltruncate variable fltruncate (0) #f (larceny PRIMITIVES)) (flround variable flround (0) #f (larceny PRIMITIVES)) (flexp variable flexp (0) #f (larceny PRIMITIVES)) (fllog variable fllog (0) #f (larceny PRIMITIVES)) (flsin variable flsin (0) #f (larceny PRIMITIVES)) (flcos variable flcos (0) #f (larceny PRIMITIVES)) (fltan variable fltan (0) #f (larceny PRIMITIVES)) (flasin variable flasin (0) #f (larceny PRIMITIVES)) (flacos variable flacos (0) #f (larceny PRIMITIVES)) (flatan variable flatan (0) #f (larceny PRIMITIVES)) (flsqrt variable flsqrt (0) #f (larceny PRIMITIVES)) (flexpt variable flexpt (0) #f (larceny PRIMITIVES)) (&no-infinities variable &no-infinities (0) #f (larceny PRIMITIVES)) (make-no-infinities-violation variable make-no-infinities-violation (0) #f (larceny PRIMITIVES)) (no-infinities-violation? variable no-infinities-violation? (0) #f (larceny PRIMITIVES)) (&no-nans variable &no-nans (0) #f (larceny PRIMITIVES)) (make-no-nans-violation variable make-no-nans-violation (0) #f (larceny PRIMITIVES)) (no-nans-violation? variable no-nans-violation? (0) #f (larceny PRIMITIVES)) (fixnum->flonum variable fixnum->flonum (0) #f (larceny PRIMITIVES))) |\x0;build~1pxGHH~7265| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-fea3fec620a3a276252b31a640c99ef0 2
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #values #apply)
 (rnrs arithmetic bitwise) ((bitwise-not variable bitwise-not (0) #f (larceny PRIMITIVES)) (bitwise-and variable bitwise-and (0) #f (larceny PRIMITIVES)) (bitwise-ior variable bitwise-ior (0) #f (larceny PRIMITIVES)) (bitwise-xor variable bitwise-xor (0) #f (larceny PRIMITIVES)) (bitwise-if variable bitwise-if (0) #f (larceny PRIMITIVES)) (bitwise-bit-count variable bitwise-bit-count (0) #f (larceny PRIMITIVES)) (bitwise-length variable bitwise-length (0) #f (larceny PRIMITIVES)) (bitwise-first-bit-set variable bitwise-first-bit-set (0) #f (larceny PRIMITIVES)) (bitwise-bit-set? variable bitwise-bit-set? (0) #f (larceny PRIMITIVES)) (bitwise-copy-bit variable bitwise-copy-bit (0) #f (larceny PRIMITIVES)) (bitwise-bit-field variable bitwise-bit-field (0) #f (larceny PRIMITIVES)) (bitwise-copy-bit-field variable bitwise-copy-bit-field (0) #f (larceny PRIMITIVES)) (bitwise-rotate-bit-field variable bitwise-rotate-bit-field (0) #f (larceny PRIMITIVES)) (bitwise-reverse-bit-field variable bitwise-reverse-bit-field (0) #f (larceny PRIMITIVES)) (bitwise-arithmetic-shift variable bitwise-arithmetic-shift (0) #f (larceny PRIMITIVES)) (bitwise-arithmetic-shift-left variable bitwise-arithmetic-shift-left (0) #f (larceny PRIMITIVES)) (bitwise-arithmetic-shift-right variable bitwise-arithmetic-shift-right (0) #f (larceny PRIMITIVES))) |\x0;build~1pxGHH~7266| #ex:make-library #ex:register-library! #values)
 #f)
))
