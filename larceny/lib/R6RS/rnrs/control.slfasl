#!fasl
(define .petit-bootstrap-id-836bb2b004c1456d780937fda9914b61 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/rnrs/control.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-836bb2b004c1456d780937fda9914b61 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~4366| 0 1 2 3) (|\x0;env~1pxGHH~4349| 4 1 2 3) (|\x0;env~1pxGHH~4324| 5 1 2 3) (|\x0;env~1pxGHH~4301| 6 1 2 3) (|\x0;env~1pxGHH~4274| 7 8 9 3) (|\x0;env~1pxGHH~4260| 10 8 9 3) (|\x0;env~1pxGHH~4228| 11 12 13 3) (|\x0;env~1pxGHH~4198| 14 12 13 3) (|\x0;env~1pxGHH~4165| 15 12 13 3) (|\x0;env~1pxGHH~4129| 16 12 13 3) (|\x0;env~1pxGHH~4104| 17 12 13 3) (|\x0;env~1pxGHH~4076| 18 19 20 3) (|\x0;env~1pxGHH~4057| 21 19 20 3) (|\x0;env~1pxGHH~4035| 22 19 20 3) (|\x0;env~1pxGHH~4010| 23 19 20 3) (|\x0;env~1pxGHH~3994| 24 19 20 3) (|\x0;env~1pxGHH~3984| 25 19 20 3) (|\x0;env~1pxGHH~3964| 26 27 28 3) (|\x0;env~1pxGHH~3956| 29 27 28 3) (|\x0;env~1pxGHH~3929| 30 31 32 33 34 3) (|\x0;env~1pxGHH~3925| 35 31 32 33 34 3) (|\x0;env~1pxGHH~3877| 36 37 38 3) (|\x0;env~1pxGHH~3858| 39 40 41 3)) (41 (((x |\x0;c~1pxGHH~3847|) variable |\x0;x~1pxGHH~3849| (0) #f (rnrs control)))) (40 ()) (39 (((dummy |\x0;c~1pxGHH~3847|) . #f) ((test) . #f) ((result1) . #f) ((result2) . #f))) (38 (((x |\x0;c~1pxGHH~3866|) variable |\x0;x~1pxGHH~3868| (0) #f (rnrs control)))) (37 ()) (36 (((dummy |\x0;c~1pxGHH~3866|) . #f) ((test) . #f) ((result1) . #f) ((result2) . #f))) (35 (((e1) . #f) ((e2) . #f))) (34 (((orig-x) variable |\x0;orig-x~1pxGHH~3886| (1) #f (rnrs control)))) (33 ()) (32 (((var) . #f) ((init) . #f) ((step) . #f) ((e0) . #f) ((e1) . #f) ((c) . #f))) (31 (((step) . #f))) (30 ()) (29 (((dummy |\x0;c~1pxGHH~3945|) . #f) ((clause1) . #f) ((clause2) . #f))) (28 (((x |\x0;c~1pxGHH~3945|) variable |\x0;x~1pxGHH~3947| (0) #f (rnrs control)))) (27 ()) (26 (((dummy |\x0;c~1pxGHH~3945|) . #f) ((clause1) . #f))) (25 (((dummy |\x0;c~1pxGHH~3970|) . #f) ((c1) . #f))) (24 (((dummy |\x0;c~1pxGHH~3970|) . #f) ((c1) . #f) ((clause1) . #f) ((clause2) . #f))) (23 (((dummy |\x0;c~1pxGHH~3970|) . #f) ((c1) . #f) ((x1) . #f) ((x2) . #f) ((x3) . #f) ((b1) . #f) ((b2) . #f) ((clause2) . #f))) (22 (((dummy |\x0;c~1pxGHH~3970|) . #f) ((c1) . #f) ((x1) . #f) ((x2) . #f) ((b1) . #f) ((b2) . #f) ((clause2) . #f))) (21 (((dummy |\x0;c~1pxGHH~3970|) . #f) ((c1) . #f) ((x1) . #f) ((b1) . #f) ((b2) . #f) ((clause2) . #f))) (20 (((x |\x0;c~1pxGHH~3970|) variable |\x0;x~1pxGHH~3972| (0) #f (rnrs control)))) (19 ()) (18 (((dummy |\x0;c~1pxGHH~3970|) . #f) ((c1) . #f) ((b1) . #f) ((b2) . #f) ((clause2) . #f))) (17 (((dummy |\x0;c~1pxGHH~4088|) . #f) ((x1) . #f) ((x2) . #f) ((x3) . #f) ((n) . #f))) (16 (((dummy |\x0;c~1pxGHH~4088|) . #f) ((x1) . #f) ((x2) . #f) ((x3) . #f) ((n) . #f) ((y1) . #f) ((y2) . #f) ((y3) . #f) ((b1) . #f) ((b2) . #f) ((c2) . #f))) (15 (((dummy |\x0;c~1pxGHH~4088|) . #f) ((x1) . #f) ((x2) . #f) ((x3) . #f) ((n) . #f) ((y1) . #f) ((y2) . #f) ((b1) . #f) ((b2) . #f) ((c2) . #f))) (14 (((dummy |\x0;c~1pxGHH~4088|) . #f) ((x1) . #f) ((x2) . #f) ((x3) . #f) ((n) . #f) ((y1) . #f) ((b1) . #f) ((b2) . #f) ((c2) . #f))) (13 (((x |\x0;c~1pxGHH~4088|) variable |\x0;x~1pxGHH~4090| (0) #f (rnrs control)))) (12 ()) (11 (((dummy |\x0;c~1pxGHH~4088|) . #f) ((x1) . #f) ((x2) . #f) ((x3) . #f) ((n) . #f) ((b1) . #f) ((b2) . #f) ((c2) . #f))) (10 (((dummy |\x0;c~1pxGHH~4248|) . #f) ((fmls) . #f) ((b1) . #f) ((b2) . #f))) (9 (((x |\x0;c~1pxGHH~4248|) variable |\x0;x~1pxGHH~4250| (0) #f (rnrs control)))) (8 ()) (7 (((dummy |\x0;c~1pxGHH~4248|) . #f) ((fmls) . #f) ((b1) . #f) ((b2) . #f))) (6 (((dummy |\x0;c~1pxGHH~4284|) . #f) ((args) . #f) ((n) . #f) ((r) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (5 (((dummy |\x0;c~1pxGHH~4284|) . #f) ((args) . #f) ((n) . #f) ((x1) . #f) ((x2) . #f) ((r) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (4 (((dummy |\x0;c~1pxGHH~4284|) . #f) ((args) . #f) ((n) . #f) ((x) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (3 (((case-lambda-help) macro |\x0;case-lambda-help~1pxGHH~4283| (0) #f (rnrs control)) ((case-lambda-for-general-case) macro |\x0;case-lambda-for-general-case~1pxGHH~4247| (0) #f (rnrs control)) ((case-lambda-dispatch) macro |\x0;case-lambda-dispatch~1pxGHH~4087| (0) #f (rnrs control)) ((case-lambda-prepass) macro |\x0;case-lambda-prepass~1pxGHH~3969| (0) #f (rnrs control)) ((case-lambda) macro |\x0;case-lambda~1pxGHH~3944| (0) #f (rnrs control)) ((do) macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) ((unless) macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) ((when) macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (1 0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (1 0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (1 0) #f (core let)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((make-case-lambda) variable make-case-lambda (1 0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (1 0) #f (larceny PRIMITIVES)) ((apply) variable apply (1 0) #f (larceny PRIMITIVES)) ((>=) variable >= (1 0) #f (larceny PRIMITIVES)) ((=) variable = (1 0) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (1 0) #f (larceny PRIMITIVES)) ((length) variable length (1 0) #f (larceny PRIMITIVES)) ((map) variable map (1 0) #f (larceny PRIMITIVES)) ((not) variable not (1 0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~4284|) variable |\x0;x~1pxGHH~4286| (0) #f (rnrs control)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~4284|) . #f) ((args) . #f) ((n) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3849|)) #list? if (|\x0;env~1pxGHH~3858|) (rnrs control) #ex:syntax-rename begin #ex:invalid-form)
 |\x0;when~1pxGHH~3846| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3868|)) #list? if (|\x0;env~1pxGHH~3877|) (rnrs control) #ex:syntax-rename not begin #ex:invalid-form)
 |\x0;unless~1pxGHH~3865| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;orig-x~1pxGHH~3886|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~3938| |\x0;rest~1pxGHH~3937|)) #f #( ((0 . #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;var~1pxGHH~3890| |\x0;init~1pxGHH~3891| |\x0;step~1pxGHH~3892|))) (8947 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|480\|482| |.y1\|480\|481| |.results\|480\|485|))) (11670 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|356\|358| |.y1\|356\|357| |.results\|356\|361|))) (14393 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (21288 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (22252 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|599\|601| |.y1\|599\|600| |.results\|599\|604|)))) #list? let (|\x0;env~1pxGHH~3929|) (rnrs control) #ex:syntax-rename do #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((var init) ...) #ex:syntax-violation if not begin #append #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;var~1pxGHH~3890| |\x0;init~1pxGHH~3891|)))
 #larceny:map #reverse #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;var~1pxGHH~3890| |\x0;init~1pxGHH~3891|)))
 (|\x0;env~1pxGHH~3925|) "Invalid step" #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;v~1pxGHH~3900| |\x0;s~1pxGHH~3901|))) (357 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) do "Invalid step" #ex:syntax-violation)
)
 (() () ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~3936|)))
 #ex:map-while #ex:invalid-form)
 |\x0;do~1pxGHH~3884| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3947|))) (1620 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) case-lambda-for-general-case (|\x0;env~1pxGHH~3964|) (rnrs control) #ex:syntax-rename #list? case-lambda-prepass (|\x0;env~1pxGHH~3956|) #ex:invalid-form)
 |\x0;case-lambda~1pxGHH~3944| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3972|))) (4661 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (12631 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (15538 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (21589 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (27146 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? case-lambda-prepass (|\x0;env~1pxGHH~4076|) (rnrs control) #ex:syntax-rename #append make-case-lambda (|\x0;env~1pxGHH~3984|) lambda x1 x2 x3 n case-lambda-dispatch #ex:invalid-form case-lambda-for-general-case (|\x0;env~1pxGHH~3994|) (|\x0;env~1pxGHH~4010|) (|\x0;env~1pxGHH~4035|) (|\x0;env~1pxGHH~4057|))
 |\x0;case-lambda-prepass~1pxGHH~3969| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~4090|))) (7950 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (11043 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (20793 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (29908 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? if (|\x0;env~1pxGHH~4228|) (rnrs control) #ex:syntax-rename eq? let case-lambda-dispatch "unexpected number of arguments" assertion-violation (|\x0;env~1pxGHH~4104|) #ex:invalid-form (|\x0;env~1pxGHH~4129|) (|\x0;env~1pxGHH~4165|) (|\x0;env~1pxGHH~4198|))
 |\x0;case-lambda-dispatch~1pxGHH~4087| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~4250|))) (2914 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? lambda (|\x0;env~1pxGHH~4274|) (rnrs control) #ex:syntax-rename #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~4263| |\x0;rest~1pxGHH~4262|)) #f #( ((0 . #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fmls~1pxGHH~4256| |\x0;b1~1pxGHH~4257| |\x0;b2~1pxGHH~4258|))) (8060 . #(loop #f 4 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|3465\|3468| |.y1\|3465\|3467| |.y1\|3465\|3466| |.results\|3465\|3471|)))) lambda (|\x0;env~1pxGHH~4260|) (rnrs control) #ex:syntax-rename args let n length case-lambda-help #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((fmls b1 b2 ...) ...) #ex:syntax-violation #f #( #(#f #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fmls~1pxGHH~4256| |\x0;b1~1pxGHH~4257| |\x0;b2~1pxGHH~4258|)))
 #larceny:map #reverse #append)
 (() () ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~4261|)) #list?)
 #ex:map-while #ex:invalid-form)
 |\x0;case-lambda-for-general-case~1pxGHH~4247| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~4286|))) (1970 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (6586 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (17190 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) "unexpected number of arguments" assertion-violation (|\x0;env~1pxGHH~4366|) (rnrs control) #ex:syntax-rename #list? apply (|\x0;env~1pxGHH~4301|) lambda #ex:invalid-form #ex:dotted-length #ex:dotted-butlast #ex:dotted-last if (|\x0;env~1pxGHH~4324|) >= length quote #append case-lambda-help (|\x0;env~1pxGHH~4349|) =)
 |\x0;case-lambda-help~1pxGHH~4283| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (rnrs control) ((when macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) (unless macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) (do macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) (case-lambda macro |\x0;case-lambda~1pxGHH~3944| (0) #f (rnrs control))) (((core derived) 0) ((core syntax-rules) 1) ((core with-syntax) 1) ((core let) 1 0) ((core primitives) 1 0)) (|\x0;build~1pxGHH~576| |\x0;build~1pxGHH~143| |\x0;build~1pxGHH~57| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~4373| #ex:make-library #ex:register-library! #values)
 #f)
))
