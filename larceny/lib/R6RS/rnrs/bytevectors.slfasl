#!fasl
(define .petit-bootstrap-id-f1456f1c95889e7e5151e91e43a3272d (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/rnrs/bytevectors.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-f1456f1c95889e7e5151e91e43a3272d 0
'#(#f #( #f #ex:unspecified #|\x0;bytevector-copy!~1pxGHH~3824| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~3835| 0 1 2 3)) (3 (((endianness) macro |\x0;endianness~1pxGHH~3825| (0) #f (rnrs bytevectors)) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~3824| (0) #f (rnrs bytevectors)) ((undefined) variable ex:undefined (0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0) #f ()) ((syntax) macro syntax (0) #f ()) ((...) macro ... (0) #f ()) ((_) macro _ (0) #f ()) ((letrec-syntax) macro letrec-syntax (0) #f ()) ((let-syntax) macro let-syntax (0) #f ()) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((set!) macro set! (0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((issue-deprecated-warnings?) variable issue-deprecated-warnings? (0) #f (larceny PRIMITIVES)) ((issue-warning-deprecated) variable issue-warning-deprecated (0) #f (larceny PRIMITIVES)) ((utf32->string) variable utf32->string (0) #f (larceny PRIMITIVES)) ((utf16->string) variable utf16->string (0) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (0) #f (larceny PRIMITIVES)) ((string->utf32) variable string->utf32 (0) #f (larceny PRIMITIVES)) ((string->utf16) variable string->utf16 (0) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (0) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-set!) variable bytevector-ieee-double-set! (0) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-native-set!) variable bytevector-ieee-double-native-set! (0) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-set!) variable bytevector-ieee-single-set! (0) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-native-set!) variable bytevector-ieee-single-native-set! (0) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-ref) variable bytevector-ieee-double-ref (0) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-native-ref) variable bytevector-ieee-double-native-ref (0) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-ref) variable bytevector-ieee-single-ref (0) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-native-ref) variable bytevector-ieee-single-native-ref (0) #f (larceny PRIMITIVES)) ((bytevector-s64-native-set!) variable bytevector-s64-native-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u64-native-set!) variable bytevector-u64-native-set! (0) #f (larceny PRIMITIVES)) ((bytevector-s64-set!) variable bytevector-s64-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u64-set!) variable bytevector-u64-set! (0) #f (larceny PRIMITIVES)) ((bytevector-s64-native-ref) variable bytevector-s64-native-ref (0) #f (larceny PRIMITIVES)) ((bytevector-u64-native-ref) variable bytevector-u64-native-ref (0) #f (larceny PRIMITIVES)) ((bytevector-s64-ref) variable bytevector-s64-ref (0) #f (larceny PRIMITIVES)) ((bytevector-u64-ref) variable bytevector-u64-ref (0) #f (larceny PRIMITIVES)) ((bytevector-s32-native-set!) variable bytevector-s32-native-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u32-native-set!) variable bytevector-u32-native-set! (0) #f (larceny PRIMITIVES)) ((bytevector-s32-set!) variable bytevector-s32-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u32-set!) variable bytevector-u32-set! (0) #f (larceny PRIMITIVES)) ((bytevector-s32-native-ref) variable bytevector-s32-native-ref (0) #f (larceny PRIMITIVES)) ((bytevector-u32-native-ref) variable bytevector-u32-native-ref (0) #f (larceny PRIMITIVES)) ((bytevector-s32-ref) variable bytevector-s32-ref (0) #f (larceny PRIMITIVES)) ((bytevector-u32-ref) variable bytevector-u32-ref (0) #f (larceny PRIMITIVES)) ((bytevector-s16-native-set!) variable bytevector-s16-native-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u16-native-set!) variable bytevector-u16-native-set! (0) #f (larceny PRIMITIVES)) ((bytevector-s16-set!) variable bytevector-s16-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u16-set!) variable bytevector-u16-set! (0) #f (larceny PRIMITIVES)) ((bytevector-s16-native-ref) variable bytevector-s16-native-ref (0) #f (larceny PRIMITIVES)) ((bytevector-u16-native-ref) variable bytevector-u16-native-ref (0) #f (larceny PRIMITIVES)) ((bytevector-s16-ref) variable bytevector-s16-ref (0) #f (larceny PRIMITIVES)) ((bytevector-u16-ref) variable bytevector-u16-ref (0) #f (larceny PRIMITIVES)) ((sint-list->bytevector) variable sint-list->bytevector (0) #f (larceny PRIMITIVES)) ((uint-list->bytevector) variable uint-list->bytevector (0) #f (larceny PRIMITIVES)) ((bytevector->sint-list) variable bytevector->sint-list (0) #f (larceny PRIMITIVES)) ((bytevector->uint-list) variable bytevector->uint-list (0) #f (larceny PRIMITIVES)) ((bytevector-sint-set!) variable bytevector-sint-set! (0) #f (larceny PRIMITIVES)) ((bytevector-uint-set!) variable bytevector-uint-set! (0) #f (larceny PRIMITIVES)) ((bytevector-sint-ref) variable bytevector-sint-ref (0) #f (larceny PRIMITIVES)) ((bytevector-uint-ref) variable bytevector-uint-ref (0) #f (larceny PRIMITIVES)) ((u8-list->bytevector) variable u8-list->bytevector (0) #f (larceny PRIMITIVES)) ((bytevector->u8-list) variable bytevector->u8-list (0) #f (larceny PRIMITIVES)) ((bytevector-s8-set!) variable bytevector-s8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) ((bytevector-s8-ref) variable bytevector-s8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) ((bytevector-copy) variable bytevector-copy (0) #f (larceny PRIMITIVES)) ((r6rs:bytevector-copy!) variable r6rs:bytevector-copy! (0) #f (larceny PRIMITIVES)) ((bytevector-fill!) variable bytevector-fill! (0) #f (larceny PRIMITIVES)) ((bytevector=?) variable bytevector=? (0) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (0) #f (larceny PRIMITIVES)) ((native-endianness) variable native-endianness (0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~3826|) variable |\x0;x~1pxGHH~3828| (0) #f (rnrs bytevectors)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~3826|) . #f) ((x) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3828|)) begin (|\x0;env~1pxGHH~3835|) (rnrs bytevectors) #ex:syntax-rename issue-warning-deprecated quote endianness #ex:invalid-form)
 |\x0;endianness~1pxGHH~3825| #ex:register-macro! #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;bytevector-copy!~1pxGHH~3824| #r6rs:bytevector-copy! #values)
 (rnrs bytevectors) ((endianness macro |\x0;endianness~1pxGHH~3825| (0) #f (rnrs bytevectors)) (native-endianness variable native-endianness (0) #f (larceny PRIMITIVES)) (bytevector? variable bytevector? (0) #f (larceny PRIMITIVES)) (make-bytevector variable make-bytevector (0) #f (larceny PRIMITIVES)) (bytevector-length variable bytevector-length (0) #f (larceny PRIMITIVES)) (bytevector=? variable bytevector=? (0) #f (larceny PRIMITIVES)) (bytevector-fill! variable bytevector-fill! (0) #f (larceny PRIMITIVES)) (bytevector-copy! variable |\x0;bytevector-copy!~1pxGHH~3824| (0) #f (rnrs bytevectors)) (bytevector-copy variable bytevector-copy (0) #f (larceny PRIMITIVES)) (bytevector-u8-ref variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) (bytevector-s8-ref variable bytevector-s8-ref (0) #f (larceny PRIMITIVES)) (bytevector-u8-set! variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) (bytevector-s8-set! variable bytevector-s8-set! (0) #f (larceny PRIMITIVES)) (bytevector->u8-list variable bytevector->u8-list (0) #f (larceny PRIMITIVES)) (u8-list->bytevector variable u8-list->bytevector (0) #f (larceny PRIMITIVES)) (bytevector-uint-ref variable bytevector-uint-ref (0) #f (larceny PRIMITIVES)) (bytevector-sint-ref variable bytevector-sint-ref (0) #f (larceny PRIMITIVES)) (bytevector-uint-set! variable bytevector-uint-set! (0) #f (larceny PRIMITIVES)) (bytevector-sint-set! variable bytevector-sint-set! (0) #f (larceny PRIMITIVES)) (bytevector->uint-list variable bytevector->uint-list (0) #f (larceny PRIMITIVES)) (bytevector->sint-list variable bytevector->sint-list (0) #f (larceny PRIMITIVES)) (uint-list->bytevector variable uint-list->bytevector (0) #f (larceny PRIMITIVES)) (sint-list->bytevector variable sint-list->bytevector (0) #f (larceny PRIMITIVES)) (bytevector-u16-ref variable bytevector-u16-ref (0) #f (larceny PRIMITIVES)) (bytevector-s16-ref variable bytevector-s16-ref (0) #f (larceny PRIMITIVES)) (bytevector-u16-native-ref variable bytevector-u16-native-ref (0) #f (larceny PRIMITIVES)) (bytevector-s16-native-ref variable bytevector-s16-native-ref (0) #f (larceny PRIMITIVES)) (bytevector-u16-set! variable bytevector-u16-set! (0) #f (larceny PRIMITIVES)) (bytevector-s16-set! variable bytevector-s16-set! (0) #f (larceny PRIMITIVES)) (bytevector-u16-native-set! variable bytevector-u16-native-set! (0) #f (larceny PRIMITIVES)) (bytevector-s16-native-set! variable bytevector-s16-native-set! (0) #f (larceny PRIMITIVES)) (bytevector-u32-ref variable bytevector-u32-ref (0) #f (larceny PRIMITIVES)) (bytevector-s32-ref variable bytevector-s32-ref (0) #f (larceny PRIMITIVES)) (bytevector-u32-native-ref variable bytevector-u32-native-ref (0) #f (larceny PRIMITIVES)) (bytevector-s32-native-ref variable bytevector-s32-native-ref (0) #f (larceny PRIMITIVES)) (bytevector-u32-set! variable bytevector-u32-set! (0) #f (larceny PRIMITIVES)) (bytevector-s32-set! variable bytevector-s32-set! (0) #f (larceny PRIMITIVES)) (bytevector-u32-native-set! variable bytevector-u32-native-set! (0) #f (larceny PRIMITIVES)) (bytevector-s32-native-set! variable bytevector-s32-native-set! (0) #f (larceny PRIMITIVES)) (bytevector-u64-ref variable bytevector-u64-ref (0) #f (larceny PRIMITIVES)) (bytevector-s64-ref variable bytevector-s64-ref (0) #f (larceny PRIMITIVES)) (bytevector-u64-native-ref variable bytevector-u64-native-ref (0) #f (larceny PRIMITIVES)) (bytevector-s64-native-ref variable bytevector-s64-native-ref (0) #f (larceny PRIMITIVES)) (bytevector-u64-set! variable bytevector-u64-set! (0) #f (larceny PRIMITIVES)) (bytevector-s64-set! variable bytevector-s64-set! (0) #f (larceny PRIMITIVES)) (bytevector-u64-native-set! variable bytevector-u64-native-set! (0) #f (larceny PRIMITIVES)) (bytevector-s64-native-set! variable bytevector-s64-native-set! (0) #f (larceny PRIMITIVES)) (bytevector-ieee-single-native-ref variable bytevector-ieee-single-native-ref (0) #f (larceny PRIMITIVES)) (bytevector-ieee-single-ref variable bytevector-ieee-single-ref (0) #f (larceny PRIMITIVES)) (bytevector-ieee-double-native-ref variable bytevector-ieee-double-native-ref (0) #f (larceny PRIMITIVES)) (bytevector-ieee-double-ref variable bytevector-ieee-double-ref (0) #f (larceny PRIMITIVES)) (bytevector-ieee-single-native-set! variable bytevector-ieee-single-native-set! (0) #f (larceny PRIMITIVES)) (bytevector-ieee-single-set! variable bytevector-ieee-single-set! (0) #f (larceny PRIMITIVES)) (bytevector-ieee-double-native-set! variable bytevector-ieee-double-native-set! (0) #f (larceny PRIMITIVES)) (bytevector-ieee-double-set! variable bytevector-ieee-double-set! (0) #f (larceny PRIMITIVES)) (string->utf8 variable string->utf8 (0) #f (larceny PRIMITIVES)) (string->utf16 variable string->utf16 (0) #f (larceny PRIMITIVES)) (string->utf32 variable string->utf32 (0) #f (larceny PRIMITIVES)) (utf8->string variable utf8->string (0) #f (larceny PRIMITIVES)) (utf16->string variable utf16->string (0) #f (larceny PRIMITIVES)) (utf32->string variable utf32->string (0) #f (larceny PRIMITIVES))) (((larceny deprecated) 0) ((core syntax-rules) 1) ((core primitives) 0)) (|\x0;build~1pxGHH~3819| |\x0;build~1pxGHH~143| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~3840| #ex:make-library #ex:register-library! #values)
 #f)
))
