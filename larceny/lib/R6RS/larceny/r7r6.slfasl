#!fasl
(define .petit-bootstrap-id-3ae54f5e777523060adad131f703fb46 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/larceny/r7r6.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-3ae54f5e777523060adad131f703fb46 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~24049| 0 1 2 3) (|\x0;env~1pxGHH~24033| 4 5 6 3)) (6 (((x |\x0;c~1pxGHH~24023|) variable |\x0;x~1pxGHH~24025| (0) #f (larceny r7r6)))) (5 ()) (4 (((dummy |\x0;c~1pxGHH~24023|) . #f) ((bindings) . #f) ((body) . #f))) (3 (((r7rs:letrec-syntax) macro |\x0;r7rs:letrec-syntax~1pxGHH~24038| (0) #f (larceny r7r6)) ((r7rs:let-syntax) macro |\x0;r7rs:let-syntax~1pxGHH~24022| (0) #f (larceny r7r6)) ((write-u8) variable write-u8 (0) #f (larceny PRIMITIVES)) ((write-string) variable write-string (0) #f (larceny PRIMITIVES)) ((write-bytevector) variable write-bytevector (0) #f (larceny PRIMITIVES)) ((vector-copy!) variable vector-copy! (0) #f (larceny PRIMITIVES)) ((vector-copy) variable vector-copy (0) #f (larceny PRIMITIVES)) ((vector-append) variable vector-append (0) #f (larceny PRIMITIVES)) ((vector->string) variable vector->string (0) #f (larceny PRIMITIVES)) ((u8-ready?) variable u8-ready? (0) #f (larceny PRIMITIVES)) ((truncate/) variable truncate/ (0) #f (larceny PRIMITIVES)) ((truncate-remainder) variable truncate-remainder (0) #f (larceny PRIMITIVES)) ((truncate-quotient) variable truncate-quotient (0) #f (larceny PRIMITIVES)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((string-map) variable string-map (0) #f (larceny PRIMITIVES)) ((string-copy!) variable string-copy! (0) #f (larceny PRIMITIVES)) ((string->vector) variable string->vector (0) #f (larceny PRIMITIVES)) ((square) variable square (0) #f (larceny PRIMITIVES)) ((read-u8) variable read-u8 (0) #f (larceny PRIMITIVES)) ((read-string) variable read-string (0) #f (larceny PRIMITIVES)) ((read-line) variable read-line (0) #f (larceny PRIMITIVES)) ((read-error?) variable read-error? (0) #f (larceny PRIMITIVES)) ((read-bytevector!) variable read-bytevector! (0) #f (larceny PRIMITIVES)) ((read-bytevector) variable read-bytevector (0) #f (larceny PRIMITIVES)) ((peek-u8) variable peek-u8 (0) #f (larceny PRIMITIVES)) ((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((output-port-open?) variable output-port-open? (0) #f (larceny PRIMITIVES)) ((open-output-string) variable open-output-string (0) #f (larceny PRIMITIVES)) ((open-output-bytevector) variable open-output-bytevector (0) #f (larceny PRIMITIVES)) ((open-input-string) variable open-input-string (0) #f (larceny PRIMITIVES)) ((open-input-bytevector) variable open-input-bytevector (0) #f (larceny PRIMITIVES)) ((make-parameter) variable make-parameter (0) #f (larceny PRIMITIVES)) ((list-set!) variable list-set! (0) #f (larceny PRIMITIVES)) ((input-port-open?) variable input-port-open? (0) #f (larceny PRIMITIVES)) ((include-ci) macro include-ci (0) #f ()) ((include) macro include (0) #f ()) ((get-output-string) variable get-output-string (0) #f (larceny PRIMITIVES)) ((get-output-bytevector) variable get-output-bytevector (0) #f (larceny PRIMITIVES)) ((floor/) variable floor/ (0) #f (larceny PRIMITIVES)) ((floor-remainder) variable floor-remainder (0) #f (larceny PRIMITIVES)) ((floor-quotient) variable floor-quotient (0) #f (larceny PRIMITIVES)) ((file-error?) variable file-error? (0) #f (larceny PRIMITIVES)) ((features) variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) ((exact-integer?) variable exact-integer? (0) #f (larceny PRIMITIVES)) ((error-object?) variable error-object? (0) #f (larceny PRIMITIVES)) ((error-object-message) variable error-object-message (0) #f (larceny PRIMITIVES)) ((error-object-irritants) variable error-object-irritants (0) #f (larceny PRIMITIVES)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((cond-expand) macro cond-expand (0) #f ()) ((bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) ((bytevector-append) variable bytevector-append (0) #f (larceny PRIMITIVES)) ((bytevector) variable bytevector (0) #f (larceny PRIMITIVES)) ((digit-value) variable |\x0;digit-value~1pxGHH~8989| (0) #f (scheme char)) ((environment) variable ex:environment (0) #f (larceny PRIMITIVES)) ((open-binary-output-file) variable open-file-output-port (0) #f (larceny PRIMITIVES)) ((open-binary-input-file) variable open-file-input-port (0) #f (larceny PRIMITIVES)) ((promise?) variable |\x0;promise?~1pxGHH~3713| (0) #f (larceny r7rs promises)) ((make-promise) variable |\x0;make-promise~1pxGHH~3716| (0) #f (larceny r7rs promises)) ((delay-force) macro |\x0;delay-force~1pxGHH~3752| (0) #f (larceny r7rs promises)) ((get-environment-variables) variable get-environment-variables (0) #f (larceny PRIMITIVES)) ((get-environment-variable) variable |\x0;get-environment-variable~1pxGHH~7230| (0) #f (scheme process-context)) ((emergency-exit) variable emergency-exit (0) #f (larceny PRIMITIVES)) ((jiffies-per-second) variable |\x0;jiffies-per-second~1pxGHH~3654| (0) #f (larceny r7rs primitives patches)) ((current-jiffy) variable |\x0;current-jiffy~1pxGHH~9055| (0) #f (scheme time)) ((current-second) variable current-second (0) #f (larceny PRIMITIVES)) ((write-simple) variable write-simple (0) #f (larceny PRIMITIVES)) ((write-shared) variable write-shared (0) #f (larceny PRIMITIVES)) ((string-set!) variable string-set! (0) #f (larceny PRIMITIVES)) ((string-fill!) variable string-fill! (0) #f (larceny PRIMITIVES)) ((scheme-report-environment) variable |\x0;scheme-report-environment~1pxGHH~4439| (0) #f (rnrs r5rs)) ((remainder) variable remainder (0) #f (larceny PRIMITIVES)) ((quotient) variable quotient (0) #f (larceny PRIMITIVES)) ((null-environment) variable |\x0;null-environment~1pxGHH~4440| (0) #f (rnrs r5rs)) ((modulo) variable modulo (0) #f (larceny PRIMITIVES)) ((load) variable load-r6rs-library-or-program (0) #f (larceny PRIMITIVES)) ((interaction-environment) variable |\x0;interaction-environment~1pxGHH~9046| (0) #f (scheme repl)) ((inexact->exact) variable inexact->exact (0) #f (larceny PRIMITIVES)) ((force) variable |\x0;force~1pxGHH~3751| (0) #f (larceny r7rs promises)) ((exact->inexact) variable exact->inexact (0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0) #f (larceny PRIMITIVES)) ((delay) macro |\x0;delay~1pxGHH~3736| (0) #f (larceny r7rs promises)) ((char-ready?) variable char-ready? (0) #f (larceny PRIMITIVES)) ((define-enumeration) macro |\x0;define-enumeration~1pxGHH~7237| (0 1) #f (rnrs enums)) ((enum-set-projection) variable enum-set-projection (0 1) #f (larceny PRIMITIVES)) ((enum-set-complement) variable enum-set-complement (0 1) #f (larceny PRIMITIVES)) ((enum-set-difference) variable enum-set-difference (0 1) #f (larceny PRIMITIVES)) ((enum-set-intersection) variable enum-set-intersection (0 1) #f (larceny PRIMITIVES)) ((enum-set-union) variable enum-set-union (0 1) #f (larceny PRIMITIVES)) ((enum-set=?) variable enum-set=? (0 1) #f (larceny PRIMITIVES)) ((enum-set-subset?) variable enum-set-subset? (0 1) #f (larceny PRIMITIVES)) ((enum-set-member?) variable enum-set-member? (0 1) #f (larceny PRIMITIVES)) ((enum-set->list) variable enum-set->list (0 1) #f (larceny PRIMITIVES)) ((enum-set-constructor) variable enum-set-constructor (0 1) #f (larceny PRIMITIVES)) ((enum-set-indexer) variable enum-set-indexer (0 1) #f (larceny PRIMITIVES)) ((enum-set-universe) variable enum-set-universe (0 1) #f (larceny PRIMITIVES)) ((make-enumeration) variable make-enumeration (0 1) #f (larceny PRIMITIVES)) ((equal-hash) variable equal-hash (0 1) #f (larceny PRIMITIVES)) ((hashtable-mutable?) variable hashtable-mutable? (0 1) #f (larceny PRIMITIVES)) ((hashtable-hash-function) variable hashtable-hash-function (0 1) #f (larceny PRIMITIVES)) ((hashtable-equivalence-function) variable hashtable-equivalence-function (0 1) #f (larceny PRIMITIVES)) ((hashtable-entries) variable hashtable-entries (0 1) #f (larceny PRIMITIVES)) ((hashtable-keys) variable hashtable-keys (0 1) #f (larceny PRIMITIVES)) ((hashtable-clear!) variable hashtable-clear! (0 1) #f (larceny PRIMITIVES)) ((hashtable-copy) variable hashtable-copy (0 1) #f (larceny PRIMITIVES)) ((hashtable-update!) variable hashtable-update! (0 1) #f (larceny PRIMITIVES)) ((hashtable-contains?) variable hashtable-contains? (0 1) #f (larceny PRIMITIVES)) ((hashtable-delete!) variable hashtable-delete! (0 1) #f (larceny PRIMITIVES)) ((hashtable-set!) variable hashtable-set! (0 1) #f (larceny PRIMITIVES)) ((hashtable-ref) variable hashtable-ref (0 1) #f (larceny PRIMITIVES)) ((hashtable-size) variable hashtable-size (0 1) #f (larceny PRIMITIVES)) ((hashtable?) variable hashtable? (0 1) #f (larceny PRIMITIVES)) ((make-hashtable) variable |\x0;make-hashtable~1pxGHH~7276| (0 1) #f (rnrs hashtables)) ((make-eqv-hashtable) variable make-eqv-hashtable (0 1) #f (larceny PRIMITIVES)) ((make-eq-hashtable) variable make-eq-hashtable (0 1) #f (larceny PRIMITIVES)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (0 1) #f (core with-syntax)) ((unsyntax-splicing) macro |\x0;unsyntax-splicing~1pxGHH~845| (0 1) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (0 1) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (0 1) #f (core quasisyntax)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((syntax-violation) variable |\x0;syntax-violation~1pxGHH~1758| (0 1) #f (rnrs syntax-case)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((bitwise-arithmetic-shift-right) variable bitwise-arithmetic-shift-right (0 1) #f (larceny PRIMITIVES)) ((bitwise-arithmetic-shift-left) variable bitwise-arithmetic-shift-left (0 1) #f (larceny PRIMITIVES)) ((bitwise-arithmetic-shift) variable bitwise-arithmetic-shift (0 1) #f (larceny PRIMITIVES)) ((bitwise-reverse-bit-field) variable bitwise-reverse-bit-field (0 1) #f (larceny PRIMITIVES)) ((bitwise-rotate-bit-field) variable bitwise-rotate-bit-field (0 1) #f (larceny PRIMITIVES)) ((bitwise-copy-bit-field) variable bitwise-copy-bit-field (0 1) #f (larceny PRIMITIVES)) ((bitwise-bit-field) variable bitwise-bit-field (0 1) #f (larceny PRIMITIVES)) ((bitwise-copy-bit) variable bitwise-copy-bit (0 1) #f (larceny PRIMITIVES)) ((bitwise-bit-set?) variable bitwise-bit-set? (0 1) #f (larceny PRIMITIVES)) ((bitwise-first-bit-set) variable bitwise-first-bit-set (0 1) #f (larceny PRIMITIVES)) ((bitwise-length) variable bitwise-length (0 1) #f (larceny PRIMITIVES)) ((bitwise-bit-count) variable bitwise-bit-count (0 1) #f (larceny PRIMITIVES)) ((bitwise-if) variable bitwise-if (0 1) #f (larceny PRIMITIVES)) ((bitwise-xor) variable bitwise-xor (0 1) #f (larceny PRIMITIVES)) ((bitwise-ior) variable bitwise-ior (0 1) #f (larceny PRIMITIVES)) ((bitwise-and) variable bitwise-and (0 1) #f (larceny PRIMITIVES)) ((bitwise-not) variable bitwise-not (0 1) #f (larceny PRIMITIVES)) ((no-nans-violation?) variable no-nans-violation? (0 1) #f (larceny PRIMITIVES)) ((make-no-nans-violation) variable make-no-nans-violation (0 1) #f (larceny PRIMITIVES)) ((&no-nans) variable &no-nans (0 1) #f (larceny PRIMITIVES)) ((no-infinities-violation?) variable no-infinities-violation? (0 1) #f (larceny PRIMITIVES)) ((make-no-infinities-violation) variable make-no-infinities-violation (0 1) #f (larceny PRIMITIVES)) ((&no-infinities) variable &no-infinities (0 1) #f (larceny PRIMITIVES)) ((fixnum->flonum) variable fixnum->flonum (0 1) #f (larceny PRIMITIVES)) ((flexpt) variable flexpt (0 1) #f (larceny PRIMITIVES)) ((flsqrt) variable flsqrt (0 1) #f (larceny PRIMITIVES)) ((flatan) variable flatan (0 1) #f (larceny PRIMITIVES)) ((flacos) variable flacos (0 1) #f (larceny PRIMITIVES)) ((flasin) variable flasin (0 1) #f (larceny PRIMITIVES)) ((fltan) variable fltan (0 1) #f (larceny PRIMITIVES)) ((flcos) variable flcos (0 1) #f (larceny PRIMITIVES)) ((flsin) variable flsin (0 1) #f (larceny PRIMITIVES)) ((fllog) variable fllog (0 1) #f (larceny PRIMITIVES)) ((flexp) variable flexp (0 1) #f (larceny PRIMITIVES)) ((flround) variable flround (0 1) #f (larceny PRIMITIVES)) ((fltruncate) variable fltruncate (0 1) #f (larceny PRIMITIVES)) ((flceiling) variable flceiling (0 1) #f (larceny PRIMITIVES)) ((flfloor) variable flfloor (0 1) #f (larceny PRIMITIVES)) ((fldenominator) variable fldenominator (0 1) #f (larceny PRIMITIVES)) ((flnumerator) variable flnumerator (0 1) #f (larceny PRIMITIVES)) ((flmod0) variable flmod0 (0 1) #f (larceny PRIMITIVES)) ((fldiv0) variable fldiv0 (0 1) #f (larceny PRIMITIVES)) ((fldiv0-and-mod0) variable fldiv0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((flmod) variable flmod (0 1) #f (larceny PRIMITIVES)) ((fldiv) variable fldiv (0 1) #f (larceny PRIMITIVES)) ((fldiv-and-mod) variable fldiv-and-mod (0 1) #f (larceny PRIMITIVES)) ((flabs) variable flabs (0 1) #f (larceny PRIMITIVES)) ((fl/) variable fl/ (0 1) #f (larceny PRIMITIVES)) ((fl-) variable fl- (0 1) #f (larceny PRIMITIVES)) ((fl*) variable fl* (0 1) #f (larceny PRIMITIVES)) ((fl+) variable fl+ (0 1) #f (larceny PRIMITIVES)) ((flmin) variable flmin (0 1) #f (larceny PRIMITIVES)) ((flmax) variable flmax (0 1) #f (larceny PRIMITIVES)) ((flnan?) variable flnan? (0 1) #f (larceny PRIMITIVES)) ((flinfinite?) variable flinfinite? (0 1) #f (larceny PRIMITIVES)) ((flfinite?) variable flfinite? (0 1) #f (larceny PRIMITIVES)) ((fleven?) variable fleven? (0 1) #f (larceny PRIMITIVES)) ((flodd?) variable flodd? (0 1) #f (larceny PRIMITIVES)) ((flnegative?) variable flnegative? (0 1) #f (larceny PRIMITIVES)) ((flpositive?) variable flpositive? (0 1) #f (larceny PRIMITIVES)) ((flzero?) variable flzero? (0 1) #f (larceny PRIMITIVES)) ((flinteger?) variable flinteger? (0 1) #f (larceny PRIMITIVES)) ((fl>=?) variable fl>=? (0 1) #f (larceny PRIMITIVES)) ((fl<=?) variable fl<=? (0 1) #f (larceny PRIMITIVES)) ((fl>?) variable fl>? (0 1) #f (larceny PRIMITIVES)) ((fl<?) variable fl<? (0 1) #f (larceny PRIMITIVES)) ((fl=?) variable fl=? (0 1) #f (larceny PRIMITIVES)) ((real->flonum) variable real->flonum (0 1) #f (larceny PRIMITIVES)) ((flonum?) variable flonum? (0 1) #f (larceny PRIMITIVES)) ((fxarithmetic-shift-right) variable fxarithmetic-shift-right (0 1) #f (larceny PRIMITIVES)) ((fxarithmetic-shift-left) variable fxarithmetic-shift-left (0 1) #f (larceny PRIMITIVES)) ((fxarithmetic-shift) variable fxarithmetic-shift (0 1) #f (larceny PRIMITIVES)) ((fxreverse-bit-field) variable fxreverse-bit-field (0 1) #f (larceny PRIMITIVES)) ((fxrotate-bit-field) variable fxrotate-bit-field (0 1) #f (larceny PRIMITIVES)) ((fxcopy-bit-field) variable fxcopy-bit-field (0 1) #f (larceny PRIMITIVES)) ((fxbit-field) variable fxbit-field (0 1) #f (larceny PRIMITIVES)) ((fxcopy-bit) variable fxcopy-bit (0 1) #f (larceny PRIMITIVES)) ((fxbit-set?) variable fxbit-set? (0 1) #f (larceny PRIMITIVES)) ((fxfirst-bit-set) variable fxfirst-bit-set (0 1) #f (larceny PRIMITIVES)) ((fxlength) variable fxlength (0 1) #f (larceny PRIMITIVES)) ((fxbit-count) variable fxbit-count (0 1) #f (larceny PRIMITIVES)) ((fxif) variable fxif (0 1) #f (larceny PRIMITIVES)) ((fxxor) variable fxxor (0 1) #f (larceny PRIMITIVES)) ((fxior) variable fxior (0 1) #f (larceny PRIMITIVES)) ((fxand) variable fxand (0 1) #f (larceny PRIMITIVES)) ((fxnot) variable fxnot (0 1) #f (larceny PRIMITIVES)) ((fx*/carry) variable fx*/carry (0 1) #f (larceny PRIMITIVES)) ((fx-/carry) variable fx-/carry (0 1) #f (larceny PRIMITIVES)) ((fx+/carry) variable fx+/carry (0 1) #f (larceny PRIMITIVES)) ((fxmod0) variable fxmod0 (0 1) #f (larceny PRIMITIVES)) ((fxdiv0) variable fxdiv0 (0 1) #f (larceny PRIMITIVES)) ((fxdiv0-and-mod0) variable fxdiv0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((fxmod) variable fxmod (0 1) #f (larceny PRIMITIVES)) ((fxdiv) variable fxdiv (0 1) #f (larceny PRIMITIVES)) ((fxdiv-and-mod) variable fxdiv-and-mod (0 1) #f (larceny PRIMITIVES)) ((fx*) variable fx* (0 1) #f (larceny PRIMITIVES)) ((fx-) variable fx- (0 1) #f (larceny PRIMITIVES)) ((fx+) variable fx+ (0 1) #f (larceny PRIMITIVES)) ((fxmin) variable fxmin (0 1) #f (larceny PRIMITIVES)) ((fxmax) variable fxmax (0 1) #f (larceny PRIMITIVES)) ((fxeven?) variable fxeven? (0 1) #f (larceny PRIMITIVES)) ((fxodd?) variable fxodd? (0 1) #f (larceny PRIMITIVES)) ((fxnegative?) variable fxnegative? (0 1) #f (larceny PRIMITIVES)) ((fxpositive?) variable fxpositive? (0 1) #f (larceny PRIMITIVES)) ((fxzero?) variable fxzero? (0 1) #f (larceny PRIMITIVES)) ((fx<=?) variable fx<=? (0 1) #f (larceny PRIMITIVES)) ((fx>=?) variable fx>=? (0 1) #f (larceny PRIMITIVES)) ((fx<?) variable fx<? (0 1) #f (larceny PRIMITIVES)) ((fx>?) variable fx>? (0 1) #f (larceny PRIMITIVES)) ((fx=?) variable fx=? (0 1) #f (larceny PRIMITIVES)) ((greatest-fixnum) variable greatest-fixnum (0 1) #f (larceny PRIMITIVES)) ((least-fixnum) variable least-fixnum (0 1) #f (larceny PRIMITIVES)) ((fixnum-width) variable fixnum-width (0 1) #f (larceny PRIMITIVES)) ((fixnum?) variable fixnum? (0 1) #f (larceny PRIMITIVES)) ((exit) variable exit (1 0) #f (larceny PRIMITIVES)) ((command-line) variable |\x0;command-line~1pxGHH~7223| (1 0) #f (rnrs programs)) ((delete-file) variable delete-file (1 0) #f (larceny PRIMITIVES)) ((file-exists?) variable file-exists? (1 0) #f (larceny PRIMITIVES)) ((write-char) variable write-char (1 0) #f (larceny PRIMITIVES)) ((write) variable write (1 0) #f (larceny PRIMITIVES)) ((with-output-to-file) variable with-output-to-file (1 0) #f (larceny PRIMITIVES)) ((with-input-from-file) variable with-input-from-file (1 0) #f (larceny PRIMITIVES)) ((read-char) variable read-char (1 0) #f (larceny PRIMITIVES)) ((read) variable read (1 0) #f (larceny PRIMITIVES)) ((peek-char) variable peek-char (1 0) #f (larceny PRIMITIVES)) ((open-output-file) variable open-output-file (1 0) #f (larceny PRIMITIVES)) ((open-input-file) variable open-input-file (1 0) #f (larceny PRIMITIVES)) ((newline) variable newline (1 0) #f (larceny PRIMITIVES)) ((eof-object?) variable eof-object? (1 0) #f (larceny PRIMITIVES)) ((display) variable display (1 0) #f (larceny PRIMITIVES)) ((current-output-port) variable current-output-port (1 0) #f (larceny PRIMITIVES)) ((current-input-port) variable current-input-port (1 0) #f (larceny PRIMITIVES)) ((close-output-port) variable close-output-port (1 0) #f (larceny PRIMITIVES)) ((close-input-port) variable close-input-port (1 0) #f (larceny PRIMITIVES)) ((call-with-output-file) variable call-with-output-file (1 0) #f (larceny PRIMITIVES)) ((call-with-input-file) variable call-with-input-file (1 0) #f (larceny PRIMITIVES)) ((make-custom-textual-input/output-port) variable make-custom-textual-input/output-port (0 1) #f (larceny PRIMITIVES)) ((make-custom-binary-input/output-port) variable make-custom-binary-input/output-port (0 1) #f (larceny PRIMITIVES)) ((open-file-input/output-port) variable open-file-input/output-port (0 1) #f (larceny PRIMITIVES)) ((put-datum) variable put-datum (0 1) #f (larceny PRIMITIVES)) ((put-string) variable put-string (0 1) #f (larceny PRIMITIVES)) ((put-char) variable put-char (0 1) #f (larceny PRIMITIVES)) ((put-bytevector) variable put-bytevector (0 1) #f (larceny PRIMITIVES)) ((put-u8) variable put-u8 (0 1) #f (larceny PRIMITIVES)) ((make-custom-textual-output-port) variable make-custom-textual-output-port (0 1) #f (larceny PRIMITIVES)) ((make-custom-binary-output-port) variable make-custom-binary-output-port (0 1) #f (larceny PRIMITIVES)) ((current-error-port) variable current-error-port (1 0) #f (larceny PRIMITIVES)) ((standard-error-port) variable standard-error-port (0 1) #f (larceny PRIMITIVES)) ((standard-output-port) variable standard-output-port (0 1) #f (larceny PRIMITIVES)) ((call-with-string-output-port) variable call-with-string-output-port (0 1) #f (larceny PRIMITIVES)) ((call-with-bytevector-output-port) variable call-with-bytevector-output-port (0 1) #f (larceny PRIMITIVES)) ((open-string-output-port) variable open-string-output-port (0 1) #f (larceny PRIMITIVES)) ((open-bytevector-output-port) variable open-bytevector-output-port (0 1) #f (larceny PRIMITIVES)) ((open-file-output-port) variable open-file-output-port (0 1) #f (larceny PRIMITIVES)) ((output-port-buffer-mode) variable output-port-buffer-mode (0 1) #f (larceny PRIMITIVES)) ((flush-output-port) variable flush-output-port (1 0) #f (larceny PRIMITIVES)) ((output-port?) variable output-port? (1 0) #f (larceny PRIMITIVES)) ((get-datum) variable get-datum (0 1) #f (larceny PRIMITIVES)) ((get-line) variable get-line (0 1) #f (larceny PRIMITIVES)) ((get-string-all) variable get-string-all (0 1) #f (larceny PRIMITIVES)) ((get-string-n!) variable get-string-n! (0 1) #f (larceny PRIMITIVES)) ((get-string-n) variable get-string-n (0 1) #f (larceny PRIMITIVES)) ((lookahead-char) variable lookahead-char (0 1) #f (larceny PRIMITIVES)) ((get-char) variable get-char (0 1) #f (larceny PRIMITIVES)) ((get-bytevector-all) variable get-bytevector-all (0 1) #f (larceny PRIMITIVES)) ((get-bytevector-some) variable get-bytevector-some (0 1) #f (larceny PRIMITIVES)) ((get-bytevector-n!) variable get-bytevector-n! (0 1) #f (larceny PRIMITIVES)) ((get-bytevector-n) variable get-bytevector-n (0 1) #f (larceny PRIMITIVES)) ((lookahead-u8) variable lookahead-u8 (0 1) #f (larceny PRIMITIVES)) ((get-u8) variable get-u8 (0 1) #f (larceny PRIMITIVES)) ((make-custom-textual-input-port) variable make-custom-textual-input-port (0 1) #f (larceny PRIMITIVES)) ((make-custom-binary-input-port) variable make-custom-binary-input-port (0 1) #f (larceny PRIMITIVES)) ((standard-input-port) variable standard-input-port (0 1) #f (larceny PRIMITIVES)) ((open-string-input-port) variable open-string-input-port (0 1) #f (larceny PRIMITIVES)) ((open-bytevector-input-port) variable open-bytevector-input-port (0 1) #f (larceny PRIMITIVES)) ((open-file-input-port) variable open-file-input-port (0 1) #f (larceny PRIMITIVES)) ((port-eof?) variable port-eof? (0 1) #f (larceny PRIMITIVES)) ((input-port?) variable input-port? (1 0) #f (larceny PRIMITIVES)) ((call-with-port) variable call-with-port (1 0) #f (larceny PRIMITIVES)) ((close-port) variable close-port (1 0) #f (larceny PRIMITIVES)) ((set-port-position!) variable set-port-position! (0 1) #f (larceny PRIMITIVES)) ((port-has-set-port-position!?) variable port-has-set-port-position!? (0 1) #f (larceny PRIMITIVES)) ((port-position) variable port-position (0 1) #f (larceny PRIMITIVES)) ((port-has-port-position?) variable port-has-port-position? (0 1) #f (larceny PRIMITIVES)) ((transcoded-port) variable transcoded-port (0 1) #f (larceny PRIMITIVES)) ((binary-port?) variable binary-port? (1 0) #f (larceny PRIMITIVES)) ((textual-port?) variable textual-port? (1 0) #f (larceny PRIMITIVES)) ((port-transcoder) variable port-transcoder (0 1) #f (larceny PRIMITIVES)) ((port?) variable port? (1 0) #f (larceny PRIMITIVES)) ((eof-object) variable eof-object (1 0) #f (larceny PRIMITIVES)) ((string->bytevector) variable string->bytevector (0 1) #f (larceny PRIMITIVES)) ((bytevector->string) variable bytevector->string (0 1) #f (larceny PRIMITIVES)) ((transcoder-error-handling-mode) variable transcoder-error-handling-mode (0 1) #f (larceny PRIMITIVES)) ((transcoder-eol-style) variable transcoder-eol-style (0 1) #f (larceny PRIMITIVES)) ((transcoder-codec) variable transcoder-codec (0 1) #f (larceny PRIMITIVES)) ((native-transcoder) variable native-transcoder (0 1) #f (larceny PRIMITIVES)) ((make-transcoder) variable make-transcoder (0 1) #f (larceny PRIMITIVES)) ((error-handling-mode) macro |\x0;error-handling-mode~1pxGHH~4409| (0 1) #f (rnrs io ports)) ((i/o-encoding-error-char) variable i/o-encoding-error-char (0 1) #f (larceny PRIMITIVES)) ((i/o-encoding-error?) variable i/o-encoding-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-encoding-error) variable make-i/o-encoding-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-encoding) variable &i/o-encoding (0 1) #f (larceny PRIMITIVES)) ((i/o-decoding-error?) variable i/o-decoding-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-decoding-error) variable make-i/o-decoding-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-decoding) variable &i/o-decoding (0 1) #f (larceny PRIMITIVES)) ((native-eol-style) variable native-eol-style (0 1) #f (larceny PRIMITIVES)) ((eol-style) macro |\x0;eol-style~1pxGHH~4394| (0 1) #f (rnrs io ports)) ((utf-16-codec) variable utf-16-codec (0 1) #f (larceny PRIMITIVES)) ((utf-8-codec) variable utf-8-codec (0 1) #f (larceny PRIMITIVES)) ((latin-1-codec) variable latin-1-codec (0 1) #f (larceny PRIMITIVES)) ((buffer-mode?) variable buffer-mode? (0 1) #f (larceny PRIMITIVES)) ((buffer-mode) macro |\x0;buffer-mode~1pxGHH~4379| (0 1) #f (rnrs io ports)) ((no-truncate) variable no-truncate (0 1) #f (larceny PRIMITIVES)) ((no-fail) variable no-fail (0 1) #f (larceny PRIMITIVES)) ((no-create) variable no-create (0 1) #f (larceny PRIMITIVES)) ((file-options) variable file-options (0 1) #f (larceny PRIMITIVES)) ((i/o-error-port) variable i/o-error-port (0 1) #f (larceny PRIMITIVES)) ((i/o-port-error?) variable i/o-port-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-port-error) variable make-i/o-port-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-port) variable &i/o-port (0 1) #f (larceny PRIMITIVES)) ((i/o-file-does-not-exist-error?) variable i/o-file-does-not-exist-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-file-does-not-exist-error) variable make-i/o-file-does-not-exist-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-file-does-not-exist) variable &i/o-file-does-not-exist (0 1) #f (larceny PRIMITIVES)) ((i/o-file-already-exists-error?) variable i/o-file-already-exists-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-file-already-exists-error) variable make-i/o-file-already-exists-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-file-already-exists) variable &i/o-file-already-exists (0 1) #f (larceny PRIMITIVES)) ((i/o-file-is-read-only-error?) variable i/o-file-is-read-only-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-file-is-read-only-error) variable make-i/o-file-is-read-only-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-file-is-read-only) variable &i/o-file-is-read-only (0 1) #f (larceny PRIMITIVES)) ((i/o-file-protection-error?) variable i/o-file-protection-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-file-protection-error) variable make-i/o-file-protection-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-file-protection) variable &i/o-file-protection (0 1) #f (larceny PRIMITIVES)) ((i/o-error-filename) variable i/o-error-filename (0 1) #f (larceny PRIMITIVES)) ((i/o-filename-error?) variable i/o-filename-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-filename-error) variable make-i/o-filename-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-filename) variable &i/o-filename (0 1) #f (larceny PRIMITIVES)) ((i/o-error-position) variable i/o-error-position (0 1) #f (larceny PRIMITIVES)) ((i/o-invalid-position-error?) variable i/o-invalid-position-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-invalid-position-error) variable make-i/o-invalid-position-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-invalid-position) variable &i/o-invalid-position (0 1) #f (larceny PRIMITIVES)) ((i/o-write-error?) variable i/o-write-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-write-error) variable make-i/o-write-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-write) variable &i/o-write (0 1) #f (larceny PRIMITIVES)) ((i/o-read-error?) variable i/o-read-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-read-error) variable make-i/o-read-error (0 1) #f (larceny PRIMITIVES)) ((&i/o-read) variable &i/o-read (0 1) #f (larceny PRIMITIVES)) ((i/o-error?) variable i/o-error? (0 1) #f (larceny PRIMITIVES)) ((make-i/o-error) variable make-i/o-error (0 1) #f (larceny PRIMITIVES)) ((&i/o) variable &i/o (0 1) #f (larceny PRIMITIVES)) ((undefined-violation?) variable undefined-violation? (0 1) #f (larceny PRIMITIVES)) ((make-undefined-violation) variable make-undefined-violation (0 1) #f (larceny PRIMITIVES)) ((&undefined) variable &undefined (0 1) #f (larceny PRIMITIVES)) ((syntax-violation-subform) variable syntax-violation-subform (0 1) #f (larceny PRIMITIVES)) ((syntax-violation-form) variable syntax-violation-form (0 1) #f (larceny PRIMITIVES)) ((syntax-violation?) variable syntax-violation? (0 1) #f (larceny PRIMITIVES)) ((make-syntax-violation) variable make-syntax-violation (0 1) #f (larceny PRIMITIVES)) ((&syntax) variable &syntax (0 1) #f (larceny PRIMITIVES)) ((lexical-violation?) variable lexical-violation? (0 1) #f (larceny PRIMITIVES)) ((make-lexical-violation) variable make-lexical-violation (0 1) #f (larceny PRIMITIVES)) ((&lexical) variable &lexical (0 1) #f (larceny PRIMITIVES)) ((implementation-restriction-violation?) variable implementation-restriction-violation? (0 1) #f (larceny PRIMITIVES)) ((make-implementation-restriction-violation) variable make-implementation-restriction-violation (0 1) #f (larceny PRIMITIVES)) ((&implementation-restriction) variable &implementation-restriction (0 1) #f (larceny PRIMITIVES)) ((non-continuable-violation?) variable non-continuable-violation? (0 1) #f (larceny PRIMITIVES)) ((make-non-continuable-violation) variable make-non-continuable-violation (0 1) #f (larceny PRIMITIVES)) ((&non-continuable) variable &non-continuable (0 1) #f (larceny PRIMITIVES)) ((condition-who) variable condition-who (0 1) #f (larceny PRIMITIVES)) ((who-condition?) variable who-condition? (0 1) #f (larceny PRIMITIVES)) ((make-who-condition) variable make-who-condition (0 1) #f (larceny PRIMITIVES)) ((&who) variable &who (0 1) #f (larceny PRIMITIVES)) ((condition-irritants) variable condition-irritants (0 1) #f (larceny PRIMITIVES)) ((irritants-condition?) variable irritants-condition? (0 1) #f (larceny PRIMITIVES)) ((make-irritants-condition) variable make-irritants-condition (0 1) #f (larceny PRIMITIVES)) ((&irritants) variable &irritants (0 1) #f (larceny PRIMITIVES)) ((assertion-violation?) variable assertion-violation? (0 1) #f (larceny PRIMITIVES)) ((make-assertion-violation) variable make-assertion-violation (0 1) #f (larceny PRIMITIVES)) ((&assertion) variable &assertion (0 1) #f (larceny PRIMITIVES)) ((violation?) variable violation? (0 1) #f (larceny PRIMITIVES)) ((make-violation) variable make-violation (0 1) #f (larceny PRIMITIVES)) ((&violation) variable &violation (0 1) #f (larceny PRIMITIVES)) ((error?) variable error? (0 1) #f (larceny PRIMITIVES)) ((make-error) variable make-error (0 1) #f (larceny PRIMITIVES)) ((&error) variable &error (0 1) #f (larceny PRIMITIVES)) ((serious-condition?) variable serious-condition? (0 1) #f (larceny PRIMITIVES)) ((make-serious-condition) variable make-serious-condition (0 1) #f (larceny PRIMITIVES)) ((&serious) variable &serious (0 1) #f (larceny PRIMITIVES)) ((warning?) variable warning? (0 1) #f (larceny PRIMITIVES)) ((make-warning) variable make-warning (0 1) #f (larceny PRIMITIVES)) ((&warning) variable &warning (0 1) #f (larceny PRIMITIVES)) ((condition-message) variable condition-message (0 1) #f (larceny PRIMITIVES)) ((message-condition?) variable message-condition? (0 1) #f (larceny PRIMITIVES)) ((make-message-condition) variable make-message-condition (0 1) #f (larceny PRIMITIVES)) ((&message) variable &message (0 1) #f (larceny PRIMITIVES)) ((define-condition-type) macro |\x0;define-condition-type~1pxGHH~1721| (0 1) #f (rnrs conditions)) ((condition-accessor) variable condition-accessor (0 1) #f (larceny PRIMITIVES)) ((condition-predicate) variable condition-predicate (0 1) #f (larceny PRIMITIVES)) ((condition?) variable condition? (0 1) #f (larceny PRIMITIVES)) ((simple-conditions) variable simple-conditions (0 1) #f (larceny PRIMITIVES)) ((condition) variable condition (0 1) #f (larceny PRIMITIVES)) ((&condition) variable &condition (0 1) #f (larceny PRIMITIVES)) ((guard) macro |\x0;guard~1pxGHH~1548| (1 0) #f (rnrs exceptions)) ((raise-continuable) variable raise-continuable (1 0) #f (larceny PRIMITIVES)) ((raise) variable raise (1 0) #f (larceny PRIMITIVES)) ((with-exception-handler) variable with-exception-handler (1 0) #f (larceny PRIMITIVES)) ((record-constructor-descriptor) variable |\x0;record-constructor-descriptor~1pxGHH~3324| (0 1) #f (rnrs records syntactic original)) ((record-type-descriptor) variable |\x0;record-type-descriptor~1pxGHH~3323| (0 1) #f (rnrs records syntactic original)) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (1 0) #f (larceny r7rs macros)) ((record-field-mutable?) variable record-field-mutable? (0 1) #f (larceny PRIMITIVES)) ((record-type-field-names) variable record-type-field-names (0 1) #f (larceny PRIMITIVES)) ((record-type-opaque?) variable record-type-opaque? (0 1) #f (larceny PRIMITIVES)) ((record-type-sealed?) variable record-type-sealed? (0 1) #f (larceny PRIMITIVES)) ((record-type-generative?) variable record-type-generative? (0 1) #f (larceny PRIMITIVES)) ((record-type-uid) variable record-type-uid (0 1) #f (larceny PRIMITIVES)) ((record-type-parent) variable record-type-parent (0 1) #f (larceny PRIMITIVES)) ((record-type-name) variable record-type-name (0 1) #f (larceny PRIMITIVES)) ((record-rtd) variable record-rtd (0 1) #f (larceny PRIMITIVES)) ((record?) variable record? (0 1) #f (larceny PRIMITIVES)) ((record-mutator) variable record-mutator (0 1) #f (larceny PRIMITIVES)) ((record-accessor) variable record-accessor (0 1) #f (larceny PRIMITIVES)) ((record-predicate) variable record-predicate (0 1) #f (larceny PRIMITIVES)) ((record-constructor) variable record-constructor (0 1) #f (larceny PRIMITIVES)) ((make-record-constructor-descriptor) variable make-record-constructor-descriptor (0 1) #f (larceny PRIMITIVES)) ((record-type-descriptor?) variable record-type-descriptor? (0 1) #f (larceny PRIMITIVES)) ((make-record-type-descriptor) variable make-record-type-descriptor (0 1) #f (larceny PRIMITIVES)) ((case-lambda) macro |\x0;case-lambda~1pxGHH~3944| (1 0) #f (rnrs control)) ((do) macro |\x0;do~1pxGHH~3884| (1 0) #f (rnrs control)) ((unless) macro |\x0;unless~1pxGHH~3865| (1 0) #f (rnrs control)) ((when) macro |\x0;when~1pxGHH~3846| (1 0) #f (rnrs control)) ((assp) variable assp (0 1) #f (larceny PRIMITIVES)) ((memp) variable memp (0 1) #f (larceny PRIMITIVES)) ((remv) variable remv (0 1) #f (larceny PRIMITIVES)) ((remq) variable remq (0 1) #f (larceny PRIMITIVES)) ((r6rs:remove) variable |\x0;remove~1pxGHH~1538| (0 1) #f (rnrs lists)) ((remp) variable remp (0 1) #f (larceny PRIMITIVES)) ((fold-left) variable fold-left (0 1) #f (larceny PRIMITIVES)) ((exists) variable exists (0 1) #f (larceny PRIMITIVES)) ((for-all) variable for-all (0 1) #f (larceny PRIMITIVES)) ((utf32->string) variable utf32->string (0 1) #f (larceny PRIMITIVES)) ((utf16->string) variable utf16->string (0 1) #f (larceny PRIMITIVES)) ((utf8->string) variable utf8->string (1 0) #f (larceny PRIMITIVES)) ((string->utf32) variable string->utf32 (0 1) #f (larceny PRIMITIVES)) ((string->utf16) variable string->utf16 (0 1) #f (larceny PRIMITIVES)) ((string->utf8) variable string->utf8 (1 0) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-set!) variable bytevector-ieee-double-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-native-set!) variable bytevector-ieee-double-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-set!) variable bytevector-ieee-single-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-native-set!) variable bytevector-ieee-single-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-ref) variable bytevector-ieee-double-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-double-native-ref) variable bytevector-ieee-double-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-ref) variable bytevector-ieee-single-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-ieee-single-native-ref) variable bytevector-ieee-single-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s64-native-set!) variable bytevector-s64-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u64-native-set!) variable bytevector-u64-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s64-set!) variable bytevector-s64-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u64-set!) variable bytevector-u64-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s64-native-ref) variable bytevector-s64-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u64-native-ref) variable bytevector-u64-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s64-ref) variable bytevector-s64-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u64-ref) variable bytevector-u64-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s32-native-set!) variable bytevector-s32-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u32-native-set!) variable bytevector-u32-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s32-set!) variable bytevector-s32-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u32-set!) variable bytevector-u32-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s32-native-ref) variable bytevector-s32-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u32-native-ref) variable bytevector-u32-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s32-ref) variable bytevector-s32-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u32-ref) variable bytevector-u32-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s16-native-set!) variable bytevector-s16-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u16-native-set!) variable bytevector-u16-native-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s16-set!) variable bytevector-s16-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u16-set!) variable bytevector-u16-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-s16-native-ref) variable bytevector-s16-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u16-native-ref) variable bytevector-u16-native-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-s16-ref) variable bytevector-s16-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u16-ref) variable bytevector-u16-ref (0 1) #f (larceny PRIMITIVES)) ((sint-list->bytevector) variable sint-list->bytevector (0 1) #f (larceny PRIMITIVES)) ((uint-list->bytevector) variable uint-list->bytevector (0 1) #f (larceny PRIMITIVES)) ((bytevector->sint-list) variable bytevector->sint-list (0 1) #f (larceny PRIMITIVES)) ((bytevector->uint-list) variable bytevector->uint-list (0 1) #f (larceny PRIMITIVES)) ((bytevector-sint-set!) variable bytevector-sint-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-uint-set!) variable bytevector-uint-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-sint-ref) variable bytevector-sint-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-uint-ref) variable bytevector-uint-ref (0 1) #f (larceny PRIMITIVES)) ((u8-list->bytevector) variable u8-list->bytevector (0 1) #f (larceny PRIMITIVES)) ((bytevector->u8-list) variable bytevector->u8-list (0 1) #f (larceny PRIMITIVES)) ((bytevector-s8-set!) variable bytevector-s8-set! (0 1) #f (larceny PRIMITIVES)) ((bytevector-u8-set!) variable bytevector-u8-set! (1 0) #f (larceny PRIMITIVES)) ((bytevector-s8-ref) variable bytevector-s8-ref (0 1) #f (larceny PRIMITIVES)) ((bytevector-u8-ref) variable bytevector-u8-ref (1 0) #f (larceny PRIMITIVES)) ((bytevector-copy) variable bytevector-copy (1 0) #f (larceny PRIMITIVES)) ((r6rs:bytevector-copy!) variable |\x0;bytevector-copy!~1pxGHH~3824| (0 1) #f (rnrs bytevectors)) ((bytevector-fill!) variable bytevector-fill! (0 1) #f (larceny PRIMITIVES)) ((bytevector=?) variable bytevector=? (0 1) #f (larceny PRIMITIVES)) ((bytevector-length) variable bytevector-length (1 0) #f (larceny PRIMITIVES)) ((make-bytevector) variable make-bytevector (1 0) #f (larceny PRIMITIVES)) ((bytevector?) variable bytevector? (1 0) #f (larceny PRIMITIVES)) ((native-endianness) variable native-endianness (0 1) #f (larceny PRIMITIVES)) ((endianness) macro |\x0;endianness~1pxGHH~3825| (0 1) #f (rnrs bytevectors)) ((string-normalize-nfkc) variable string-normalize-nfkc (0 1) #f (larceny PRIMITIVES)) ((string-normalize-nfc) variable string-normalize-nfc (0 1) #f (larceny PRIMITIVES)) ((string-normalize-nfkd) variable string-normalize-nfkd (0 1) #f (larceny PRIMITIVES)) ((string-normalize-nfd) variable string-normalize-nfd (0 1) #f (larceny PRIMITIVES)) ((string-ci>=?) variable string-ci>=? (1 0) #f (larceny PRIMITIVES)) ((string-ci<=?) variable string-ci<=? (1 0) #f (larceny PRIMITIVES)) ((string-ci>?) variable string-ci>? (1 0) #f (larceny PRIMITIVES)) ((string-ci<?) variable string-ci<? (1 0) #f (larceny PRIMITIVES)) ((string-ci=?) variable string-ci=? (1 0) #f (larceny PRIMITIVES)) ((string-foldcase) variable string-foldcase (1 0) #f (larceny PRIMITIVES)) ((string-titlecase) variable string-titlecase (0 1) #f (larceny PRIMITIVES)) ((string-downcase) variable string-downcase (1 0) #f (larceny PRIMITIVES)) ((string-upcase) variable string-upcase (1 0) #f (larceny PRIMITIVES)) ((char-general-category) variable char-general-category (0 1) #f (larceny PRIMITIVES)) ((char-title-case?) variable char-title-case? (0 1) #f (larceny PRIMITIVES)) ((char-lower-case?) variable char-lower-case? (1 0) #f (larceny PRIMITIVES)) ((char-upper-case?) variable char-upper-case? (1 0) #f (larceny PRIMITIVES)) ((char-whitespace?) variable char-whitespace? (1 0) #f (larceny PRIMITIVES)) ((char-numeric?) variable char-numeric? (1 0) #f (larceny PRIMITIVES)) ((char-alphabetic?) variable char-alphabetic? (1 0) #f (larceny PRIMITIVES)) ((char-ci>=?) variable char-ci>=? (1 0) #f (larceny PRIMITIVES)) ((char-ci<=?) variable char-ci<=? (1 0) #f (larceny PRIMITIVES)) ((char-ci>?) variable char-ci>? (1 0) #f (larceny PRIMITIVES)) ((char-ci<?) variable char-ci<? (1 0) #f (larceny PRIMITIVES)) ((char-ci=?) variable char-ci=? (1 0) #f (larceny PRIMITIVES)) ((char-foldcase) variable char-foldcase (1 0) #f (larceny PRIMITIVES)) ((char-titlecase) variable char-titlecase (0 1) #f (larceny PRIMITIVES)) ((char-downcase) variable char-downcase (1 0) #f (larceny PRIMITIVES)) ((char-upcase) variable char-upcase (1 0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (1 0) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0 1) #f (larceny PRIMITIVES)) ((error) variable error (1 0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (1 0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (1 0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (1 0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (1 0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (1 0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (1 0) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0 1) #f (larceny PRIMITIVES)) ((div0) variable div0 (0 1) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0 1) #f (larceny PRIMITIVES)) ((mod) variable mod (0 1) #f (larceny PRIMITIVES)) ((div) variable div (0 1) #f (larceny PRIMITIVES)) ((nan?) variable nan? (1 0) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (1 0) #f (larceny PRIMITIVES)) ((finite?) variable finite? (1 0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (1 0) #f (larceny PRIMITIVES)) ((exact) variable exact (1 0) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0 1) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0 1) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0 1) #f (larceny PRIMITIVES)) ((zero?) variable zero? (1 0) #f (larceny PRIMITIVES)) ((vector?) variable vector? (1 0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (1 0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (1 0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (1 0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (1 0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (1 0) #f (larceny PRIMITIVES)) ((vector) variable vector (1 0) #f (larceny PRIMITIVES)) ((values) variable values (1 0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (1 0) #f (larceny PRIMITIVES)) ((tan) variable tan (1 0) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (1 0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (1 0) #f (larceny PRIMITIVES)) ((substring) variable substring (1 0) #f (larceny PRIMITIVES)) ((string?) variable string? (1 0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (1 0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (1 0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (1 0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (1 0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (1 0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (1 0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (1 0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (1 0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (1 0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (1 0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (1 0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (1 0) #f (larceny PRIMITIVES)) ((string) variable string (1 0) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (1 0) #f (larceny PRIMITIVES)) ((sin) variable sin (1 0) #f (larceny PRIMITIVES)) ((round) variable round (1 0) #f (larceny PRIMITIVES)) ((real?) variable real? (1 0) #f (larceny PRIMITIVES)) ((real-part) variable real-part (1 0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (1 0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (1 0) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (1 0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (1 0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (1 0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (1 0) #f (larceny PRIMITIVES)) ((number?) variable number? (1 0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (1 0) #f (larceny PRIMITIVES)) ((not) variable not (1 0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (1 0) #f (larceny PRIMITIVES)) ((min) variable min (1 0) #f (larceny PRIMITIVES)) ((max) variable max (1 0) #f (larceny PRIMITIVES)) ((make-vector) variable make-vector (1 0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (1 0) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (1 0) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (1 0) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (1 0) #f (larceny PRIMITIVES)) ((log) variable log (1 0) #f (larceny PRIMITIVES)) ((list?) variable list? (1 0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (1 0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (1 0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (1 0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (1 0) #f (larceny PRIMITIVES)) ((integer?) variable integer? (1 0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (1 0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (1 0) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (1 0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (1 0) #f (larceny PRIMITIVES)) ((floor) variable floor (1 0) #f (larceny PRIMITIVES)) ((expt) variable expt (1 0) #f (larceny PRIMITIVES)) ((exp) variable exp (1 0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (1 0) #f (larceny PRIMITIVES)) ((even?) variable even? (1 0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (1 0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (1 0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (1 0) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (1 0) #f (larceny PRIMITIVES)) ((denominator) variable denominator (1 0) #f (larceny PRIMITIVES)) ((cos) variable cos (1 0) #f (larceny PRIMITIVES)) ((complex?) variable complex? (1 0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (1 0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (1 0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (1 0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (1 0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (1 0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (1 0) #f (larceny PRIMITIVES)) ((char?) variable char? (1 0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (1 0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (1 0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (1 0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (1 0) #f (larceny PRIMITIVES)) ((atan) variable atan (1 0) #f (larceny PRIMITIVES)) ((asin) variable asin (1 0) #f (larceny PRIMITIVES)) ((apply) variable apply (1 0) #f (larceny PRIMITIVES)) ((angle) variable angle (1 0) #f (larceny PRIMITIVES)) ((acos) variable acos (1 0) #f (larceny PRIMITIVES)) ((abs) variable abs (1 0) #f (larceny PRIMITIVES)) ((>=) variable >= (1 0) #f (larceny PRIMITIVES)) ((>) variable > (1 0) #f (larceny PRIMITIVES)) ((=) variable = (1 0) #f (larceny PRIMITIVES)) ((<=) variable <= (1 0) #f (larceny PRIMITIVES)) ((<) variable < (1 0) #f (larceny PRIMITIVES)) ((/) variable / (1 0) #f (larceny PRIMITIVES)) ((-) variable - (1 0) #f (larceny PRIMITIVES)) ((+) variable + (1 0) #f (larceny PRIMITIVES)) ((*) variable * (1 0) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (0 1) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (0 1) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (1 0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (1 0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (1 0) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0 1) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (1 0) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (1 0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (1 0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (1 0) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (1 0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (1 0) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (1 0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (1 0) #f (core let)) ((let*) macro |\x0;let*~1pxGHH~241| (1 0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (1 0) #f (core let)) ((...) macro ... (2 1 0) #f ()) ((_) macro _ (2 1 0) #f ()) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (1 0) #f (rnrs base)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (1 0) #f (rnrs base)) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (2 1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((lset-diff+intersection!) variable |\x0;lset-diff+intersection!~1pxGHH~5105| (0) #f (srfi :1 lists)) ((lset-diff+intersection) variable |\x0;lset-diff+intersection~1pxGHH~5104| (0) #f (srfi :1 lists)) ((lset-xor!) variable |\x0;lset-xor!~1pxGHH~5103| (0) #f (srfi :1 lists)) ((lset-xor) variable |\x0;lset-xor~1pxGHH~5102| (0) #f (srfi :1 lists)) ((lset-difference!) variable |\x0;lset-difference!~1pxGHH~5101| (0) #f (srfi :1 lists)) ((lset-difference) variable |\x0;lset-difference~1pxGHH~5100| (0) #f (srfi :1 lists)) ((lset-intersection!) variable |\x0;lset-intersection!~1pxGHH~5099| (0) #f (srfi :1 lists)) ((lset-intersection) variable |\x0;lset-intersection~1pxGHH~5098| (0) #f (srfi :1 lists)) ((lset-union!) variable |\x0;lset-union!~1pxGHH~5097| (0) #f (srfi :1 lists)) ((lset-union) variable |\x0;lset-union~1pxGHH~5096| (0) #f (srfi :1 lists)) ((lset-adjoin) variable |\x0;lset-adjoin~1pxGHH~5095| (0) #f (srfi :1 lists)) ((lset=) variable |\x0;lset=~1pxGHH~5094| (0) #f (srfi :1 lists)) ((lset<=) variable |\x0;lset<=~1pxGHH~5093| (0) #f (srfi :1 lists)) ((alist-delete!) variable |\x0;alist-delete!~1pxGHH~5079| (0) #f (srfi :1 lists)) ((alist-delete) variable |\x0;alist-delete~1pxGHH~5078| (0) #f (srfi :1 lists)) ((alist-copy) variable |\x0;alist-copy~1pxGHH~5077| (0) #f (srfi :1 lists)) ((alist-cons) variable |\x0;alist-cons~1pxGHH~5076| (0) #f (srfi :1 lists)) ((assv) variable assv (1 0) #f (larceny PRIMITIVES)) ((assq) variable assq (1 0) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (1 0) #f (rnrs lists)) ((delete-duplicates!) variable |\x0;delete-duplicates!~1pxGHH~5075| (0) #f (srfi :1 lists)) ((delete!) variable |\x0;delete!~1pxGHH~5073| (0) #f (srfi :1 lists)) ((delete-duplicates) variable |\x0;delete-duplicates~1pxGHH~5074| (0) #f (srfi :1 lists)) ((delete) variable |\x0;delete~1pxGHH~5072| (0) #f (srfi :1 lists)) ((break!) variable |\x0;break!~1pxGHH~5087| (0) #f (srfi :1 lists)) ((span!) variable |\x0;span!~1pxGHH~5085| (0) #f (srfi :1 lists)) ((break) variable |\x0;break~1pxGHH~5086| (0) #f (srfi :1 lists)) ((span) variable |\x0;span~1pxGHH~5084| (0) #f (srfi :1 lists)) ((take-while!) variable |\x0;take-while!~1pxGHH~5083| (0) #f (srfi :1 lists)) ((drop-while) variable |\x0;drop-while~1pxGHH~5082| (0) #f (srfi :1 lists)) ((take-while) variable |\x0;take-while~1pxGHH~5081| (0) #f (srfi :1 lists)) ((list-index) variable |\x0;list-index~1pxGHH~5090| (0) #f (srfi :1 lists)) ((every) variable |\x0;every~1pxGHH~5089| (0) #f (srfi :1 lists)) ((any) variable |\x0;any~1pxGHH~5088| (0) #f (srfi :1 lists)) ((find-tail) variable |\x0;find-tail~1pxGHH~5080| (0) #f (srfi :1 lists)) ((find) variable find (0 1) #f (larceny PRIMITIVES)) ((memv) variable memv (1 0) #f (larceny PRIMITIVES)) ((memq) variable memq (1 0) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (1 0) #f (rnrs lists)) ((remove!) variable |\x0;remove!~1pxGHH~5071| (0) #f (srfi :1 lists)) ((partition!) variable |\x0;partition!~1pxGHH~5069| (0) #f (srfi :1 lists)) ((filter!) variable |\x0;filter!~1pxGHH~5068| (0) #f (srfi :1 lists)) ((remove) variable |\x0;remove~1pxGHH~5070| (0) #f (srfi :1 lists)) ((partition) variable partition (0 1) #f (larceny PRIMITIVES)) ((filter) variable filter (0 1) #f (larceny PRIMITIVES)) ((map-in-order) variable |\x0;map-in-order~1pxGHH~5067| (0) #f (srfi :1 lists)) ((filter-map) variable |\x0;filter-map~1pxGHH~5066| (0) #f (srfi :1 lists)) ((pair-for-each) variable |\x0;pair-for-each~1pxGHH~5064| (0) #f (srfi :1 lists)) ((map!) variable |\x0;map!~1pxGHH~5065| (0) #f (srfi :1 lists)) ((append-map!) variable |\x0;append-map!~1pxGHH~5062| (0) #f (srfi :1 lists)) ((append-map) variable |\x0;append-map~1pxGHH~5061| (0) #f (srfi :1 lists)) ((reduce-right) variable |\x0;reduce-right~1pxGHH~5060| (0) #f (srfi :1 lists)) ((pair-fold-right) variable |\x0;pair-fold-right~1pxGHH~5057| (0) #f (srfi :1 lists)) ((unfold-right) variable |\x0;unfold-right~1pxGHH~5054| (0) #f (srfi :1 lists)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0 1) #f (rnrs lists)) ((reduce) variable |\x0;reduce~1pxGHH~5059| (0) #f (srfi :1 lists)) ((pair-fold) variable |\x0;pair-fold~1pxGHH~5058| (0) #f (srfi :1 lists)) ((unfold) variable |\x0;unfold~1pxGHH~5055| (0) #f (srfi :1 lists)) ((fold) variable |\x0;fold~1pxGHH~5056| (0) #f (srfi :1 lists)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (1 0) #f (rnrs base)) ((map) variable |\x0;map~1pxGHH~1463| (1 0) #f (rnrs base)) ((count) variable |\x0;count~1pxGHH~5053| (0) #f (srfi :1 lists)) ((unzip5) variable |\x0;unzip5~1pxGHH~5042| (0) #f (srfi :1 lists)) ((unzip4) variable |\x0;unzip4~1pxGHH~5041| (0) #f (srfi :1 lists)) ((unzip3) variable |\x0;unzip3~1pxGHH~5040| (0) #f (srfi :1 lists)) ((unzip2) variable |\x0;unzip2~1pxGHH~5039| (0) #f (srfi :1 lists)) ((unzip1) variable |\x0;unzip1~1pxGHH~5038| (0) #f (srfi :1 lists)) ((zip) variable |\x0;zip~1pxGHH~5016| (0) #f (srfi :1 lists)) ((append-reverse!) variable |\x0;append-reverse!~1pxGHH~5045| (0) #f (srfi :1 lists)) ((append-reverse) variable |\x0;append-reverse~1pxGHH~5044| (0) #f (srfi :1 lists)) ((reverse!) variable |\x0;reverse!~1pxGHH~5091| (0) #f (srfi :1 lists)) ((concatenate!) variable |\x0;concatenate!~1pxGHH~5047| (0) #f (srfi :1 lists)) ((append!) variable |\x0;append!~1pxGHH~5043| (0) #f (srfi :1 lists)) ((reverse) variable reverse (1 0) #f (larceny PRIMITIVES)) ((concatenate) variable |\x0;concatenate~1pxGHH~5046| (0) #f (srfi :1 lists)) ((append) variable append (1 0) #f (larceny PRIMITIVES)) ((length+) variable |\x0;length+~1pxGHH~5015| (0) #f (srfi :1 lists)) ((length) variable length (1 0) #f (larceny PRIMITIVES)) ((last-pair) variable |\x0;last-pair~1pxGHH~5037| (0) #f (srfi :1 lists)) ((last) variable |\x0;last~1pxGHH~5036| (0) #f (srfi :1 lists)) ((split-at!) variable |\x0;split-at!~1pxGHH~5035| (0) #f (srfi :1 lists)) ((split-at) variable |\x0;split-at~1pxGHH~5034| (0) #f (srfi :1 lists)) ((drop-right!) variable |\x0;drop-right!~1pxGHH~5033| (0) #f (srfi :1 lists)) ((take!) variable |\x0;take!~1pxGHH~5030| (0) #f (srfi :1 lists)) ((drop-right) variable |\x0;drop-right~1pxGHH~5032| (0) #f (srfi :1 lists)) ((take-right) variable |\x0;take-right~1pxGHH~5031| (0) #f (srfi :1 lists)) ((drop) variable |\x0;drop~1pxGHH~5029| (0) #f (srfi :1 lists)) ((take) variable |\x0;take~1pxGHH~5028| (0) #f (srfi :1 lists)) ((car+cdr) variable |\x0;car+cdr~1pxGHH~5027| (0) #f (srfi :1 lists)) ((tenth) variable |\x0;tenth~1pxGHH~5026| (0) #f (srfi :1 lists)) ((ninth) variable |\x0;ninth~1pxGHH~5025| (0) #f (srfi :1 lists)) ((eighth) variable |\x0;eighth~1pxGHH~5024| (0) #f (srfi :1 lists)) ((seventh) variable |\x0;seventh~1pxGHH~5023| (0) #f (srfi :1 lists)) ((sixth) variable |\x0;sixth~1pxGHH~5022| (0) #f (srfi :1 lists)) ((fifth) variable |\x0;fifth~1pxGHH~5021| (0) #f (srfi :1 lists)) ((fourth) variable |\x0;fourth~1pxGHH~5020| (0) #f (srfi :1 lists)) ((third) variable |\x0;third~1pxGHH~5019| (0) #f (srfi :1 lists)) ((second) variable |\x0;second~1pxGHH~5018| (0) #f (srfi :1 lists)) ((first) variable |\x0;first~1pxGHH~5017| (0) #f (srfi :1 lists)) ((list-ref) variable list-ref (1 0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (1 0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (1 0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (1 0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (1 0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (1 0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (1 0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (1 0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (1 0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (1 0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (1 0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (1 0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (1 0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (1 0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (1 0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (1 0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (1 0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (1 0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (1 0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (1 0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (1 0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (1 0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (1 0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (1 0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (1 0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (1 0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (1 0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (1 0) #f (larceny PRIMITIVES)) ((caar) variable caar (1 0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (1 0) #f (larceny PRIMITIVES)) ((car) variable car (1 0) #f (larceny PRIMITIVES)) ((list=) variable |\x0;list=~1pxGHH~5014| (0) #f (srfi :1 lists)) ((null-list?) variable |\x0;null-list?~1pxGHH~5013| (0) #f (srfi :1 lists)) ((not-pair?) variable |\x0;not-pair?~1pxGHH~5012| (0) #f (srfi :1 lists)) ((dotted-list?) variable |\x0;dotted-list?~1pxGHH~5010| (0) #f (srfi :1 lists)) ((circular-list?) variable |\x0;circular-list?~1pxGHH~5011| (0) #f (srfi :1 lists)) ((proper-list?) variable |\x0;proper-list?~1pxGHH~5009| (0) #f (srfi :1 lists)) ((null?) variable null? (1 0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (1 0) #f (larceny PRIMITIVES)) ((iota) variable |\x0;iota~1pxGHH~5007| (0) #f (srfi :1 lists)) ((circular-list) variable |\x0;circular-list~1pxGHH~5008| (0) #f (srfi :1 lists)) ((list-copy) variable list-copy (0) #f (larceny PRIMITIVES)) ((list-tabulate) variable |\x0;list-tabulate~1pxGHH~5006| (0) #f (srfi :1 lists)) ((make-list) variable make-list (0) #f (larceny PRIMITIVES)) ((cons*) variable cons* (0 1) #f (larceny PRIMITIVES)) ((xcons) variable |\x0;xcons~1pxGHH~5005| (0) #f (srfi :1 lists)) ((list) variable list (1 0) #f (larceny PRIMITIVES)) ((cons) variable cons (1 0) #f (larceny PRIMITIVES)) ((reverse-list->vector) variable |\x0;reverse-list->vector~1pxGHH~9324| (0) #f (srfi 133 vectors)) ((reverse-vector->list) variable |\x0;reverse-vector->list~1pxGHH~9323| (0) #f (srfi 133 vectors)) ((vector-unfold-right!) variable |\x0;vector-unfold-right!~1pxGHH~9298| (0) #f (srfi 133 vectors)) ((vector-unfold!) variable |\x0;vector-unfold!~1pxGHH~9296| (0) #f (srfi 133 vectors)) ((vector-reverse-copy!) variable |\x0;vector-reverse-copy!~1pxGHH~9321| (0) #f (srfi 133 vectors)) ((vector-reverse!) variable |\x0;vector-reverse!~1pxGHH~9322| (0) #f (srfi 133 vectors)) ((vector-swap!) variable |\x0;vector-swap!~1pxGHH~9320| (0) #f (srfi 133 vectors)) ((vector-partition) variable |\x0;vector-partition~1pxGHH~9319| (0) #f (srfi 133 vectors)) ((vector-every) variable |\x0;vector-every~1pxGHH~9318| (0) #f (srfi 133 vectors)) ((vector-any) variable |\x0;vector-any~1pxGHH~9317| (0) #f (srfi 133 vectors)) ((vector-binary-search) variable |\x0;vector-binary-search~1pxGHH~9316| (0) #f (srfi 133 vectors)) ((vector-skip-right) variable |\x0;vector-skip-right~1pxGHH~9314| (0) #f (srfi 133 vectors)) ((vector-skip) variable |\x0;vector-skip~1pxGHH~9311| (0) #f (srfi 133 vectors)) ((vector-index-right) variable |\x0;vector-index-right~1pxGHH~9313| (0) #f (srfi 133 vectors)) ((vector-index) variable |\x0;vector-index~1pxGHH~9310| (0) #f (srfi 133 vectors)) ((vector-cumulate) variable |\x0;vector-cumulate~1pxGHH~9309| (0) #f (srfi 133 vectors)) ((vector-count) variable |\x0;vector-count~1pxGHH~9308| (0) #f (srfi 133 vectors)) ((vector-map!) variable |\x0;vector-map!~1pxGHH~9325| (0) #f (srfi 133 vectors)) ((vector-fold-right) variable |\x0;vector-fold-right~1pxGHH~9307| (0) #f (srfi 133 vectors)) ((vector-fold) variable |\x0;vector-fold~1pxGHH~9306| (0) #f (srfi 133 vectors)) ((vector=) variable |\x0;vector=~1pxGHH~9304| (0) #f (srfi 133 vectors)) ((vector-empty?) variable |\x0;vector-empty?~1pxGHH~9303| (0) #f (srfi 133 vectors)) ((vector-append-subvectors) variable |\x0;vector-append-subvectors~1pxGHH~9302| (0) #f (srfi 133 vectors)) ((vector-concatenate) variable |\x0;vector-concatenate~1pxGHH~9300| (0) #f (srfi 133 vectors)) ((vector-reverse-copy) variable |\x0;vector-reverse-copy~1pxGHH~9299| (0) #f (srfi 133 vectors)) ((vector-unfold-right) variable |\x0;vector-unfold-right~1pxGHH~9297| (0) #f (srfi 133 vectors)) ((vector-unfold) variable |\x0;vector-unfold~1pxGHH~9295| (0) #f (srfi 133 vectors)) ((vector-separate!) variable |\x0;vector-separate!~1pxGHH~10602| (0) #f (srfi 132 sorting)) ((vector-select!) variable |\x0;vector-select!~1pxGHH~10601| (0) #f (srfi 132 sorting)) ((vector-find-median!) variable |\x0;vector-find-median!~1pxGHH~10599| (0) #f (srfi 132 sorting)) ((vector-find-median) variable |\x0;vector-find-median~1pxGHH~10598| (0) #f (srfi 132 sorting)) ((vector-delete-neighbor-dups!) variable |\x0;vector-delete-neighbor-dups!~1pxGHH~10583| (0) #f (srfi 132 sorting)) ((list-delete-neighbor-dups!) variable |\x0;list-delete-neighbor-dups!~1pxGHH~10581| (0) #f (srfi 132 sorting)) ((vector-delete-neighbor-dups) variable |\x0;vector-delete-neighbor-dups~1pxGHH~10582| (0) #f (srfi 132 sorting)) ((list-delete-neighbor-dups) variable |\x0;list-delete-neighbor-dups~1pxGHH~10580| (0) #f (srfi 132 sorting)) ((vector-merge!) variable |\x0;vector-merge!~1pxGHH~10578| (0) #f (srfi 132 sorting)) ((list-merge!) variable |\x0;list-merge!~1pxGHH~10576| (0) #f (srfi 132 sorting)) ((vector-merge) variable |\x0;vector-merge~1pxGHH~10577| (0) #f (srfi 132 sorting)) ((list-merge) variable |\x0;list-merge~1pxGHH~10575| (0) #f (srfi 132 sorting)) ((vector-stable-sort!) variable |\x0;vector-stable-sort!~1pxGHH~10597| (0) #f (srfi 132 sorting)) ((list-stable-sort!) variable |\x0;list-stable-sort!~1pxGHH~10595| (0) #f (srfi 132 sorting)) ((vector-sort!) variable vector-sort! (0 1) #f (larceny PRIMITIVES)) ((list-sort!) variable |\x0;list-sort!~1pxGHH~10593| (0) #f (srfi 132 sorting)) ((vector-stable-sort) variable |\x0;vector-stable-sort~1pxGHH~10596| (0) #f (srfi 132 sorting)) ((list-stable-sort) variable |\x0;list-stable-sort~1pxGHH~10594| (0) #f (srfi 132 sorting)) ((vector-sort) variable vector-sort (0 1) #f (larceny PRIMITIVES)) ((list-sort) variable list-sort (0 1) #f (larceny PRIMITIVES)) ((vector-sorted?) variable |\x0;vector-sorted?~1pxGHH~10585| (0) #f (srfi 132 sorting)) ((list-sorted?) variable |\x0;list-sorted?~1pxGHH~10584| (0) #f (srfi 132 sorting)) ((alist->bag) variable |\x0;alist->bag~1pxGHH~12981| (0) #f (srfi 113 sets)) ((bag->alist) variable |\x0;bag->alist~1pxGHH~12980| (0) #f (srfi 113 sets)) ((set->bag!) variable |\x0;set->bag!~1pxGHH~12979| (0) #f (srfi 113 sets)) ((set->bag) variable |\x0;set->bag~1pxGHH~12978| (0) #f (srfi 113 sets)) ((bag->set) variable |\x0;bag->set~1pxGHH~12977| (0) #f (srfi 113 sets)) ((bag-decrement!) variable |\x0;bag-decrement!~1pxGHH~12844| (0) #f (srfi 113 sets)) ((bag-increment!) variable |\x0;bag-increment!~1pxGHH~12843| (0) #f (srfi 113 sets)) ((bag-fold-unique) variable |\x0;bag-fold-unique~1pxGHH~12976| (0) #f (srfi 113 sets)) ((bag-for-each-unique) variable |\x0;bag-for-each-unique~1pxGHH~12975| (0) #f (srfi 113 sets)) ((bag-element-count) variable |\x0;bag-element-count~1pxGHH~12974| (0) #f (srfi 113 sets)) ((bag-unique-size) variable |\x0;bag-unique-size~1pxGHH~12973| (0) #f (srfi 113 sets)) ((bag-product!) variable |\x0;bag-product!~1pxGHH~12972| (0) #f (srfi 113 sets)) ((bag-product) variable |\x0;bag-product~1pxGHH~12971| (0) #f (srfi 113 sets)) ((bag-sum!) variable |\x0;bag-sum!~1pxGHH~12963| (0) #f (srfi 113 sets)) ((bag-sum) variable |\x0;bag-sum~1pxGHH~12961| (0) #f (srfi 113 sets)) ((bag-comparator) variable |\x0;bag-comparator~1pxGHH~12984| (0) #f (srfi 113 sets)) ((bag-xor!) variable |\x0;bag-xor!~1pxGHH~12968| (0) #f (srfi 113 sets)) ((bag-difference!) variable |\x0;bag-difference!~1pxGHH~12958| (0) #f (srfi 113 sets)) ((bag-intersection!) variable |\x0;bag-intersection!~1pxGHH~12951| (0) #f (srfi 113 sets)) ((bag-union!) variable |\x0;bag-union!~1pxGHH~12944| (0) #f (srfi 113 sets)) ((bag-xor) variable |\x0;bag-xor~1pxGHH~12966| (0) #f (srfi 113 sets)) ((bag-difference) variable |\x0;bag-difference~1pxGHH~12955| (0) #f (srfi 113 sets)) ((bag-intersection) variable |\x0;bag-intersection~1pxGHH~12948| (0) #f (srfi 113 sets)) ((bag-union) variable |\x0;bag-union~1pxGHH~12941| (0) #f (srfi 113 sets)) ((bag>=?) variable |\x0;bag>=?~1pxGHH~12935| (0) #f (srfi 113 sets)) ((bag<=?) variable |\x0;bag<=?~1pxGHH~12923| (0) #f (srfi 113 sets)) ((bag>?) variable |\x0;bag>?~1pxGHH~12927| (0) #f (srfi 113 sets)) ((bag<?) variable |\x0;bag<?~1pxGHH~12931| (0) #f (srfi 113 sets)) ((bag=?) variable |\x0;bag=?~1pxGHH~12919| (0) #f (srfi 113 sets)) ((list->bag!) variable |\x0;list->bag!~1pxGHH~12916| (0) #f (srfi 113 sets)) ((list->bag) variable |\x0;list->bag~1pxGHH~12914| (0) #f (srfi 113 sets)) ((bag->list) variable |\x0;bag->list~1pxGHH~12911| (0) #f (srfi 113 sets)) ((bag-copy) variable |\x0;bag-copy~1pxGHH~12818| (0) #f (srfi 113 sets)) ((bag-partition!) variable |\x0;bag-partition!~1pxGHH~12908| (0) #f (srfi 113 sets)) ((bag-remove!) variable |\x0;bag-remove!~1pxGHH~12902| (0) #f (srfi 113 sets)) ((bag-filter!) variable |\x0;bag-filter!~1pxGHH~12900| (0) #f (srfi 113 sets)) ((bag-partition) variable |\x0;bag-partition~1pxGHH~12905| (0) #f (srfi 113 sets)) ((bag-remove) variable |\x0;bag-remove~1pxGHH~12897| (0) #f (srfi 113 sets)) ((bag-filter) variable |\x0;bag-filter~1pxGHH~12895| (0) #f (srfi 113 sets)) ((bag-fold) variable |\x0;bag-fold~1pxGHH~12892| (0) #f (srfi 113 sets)) ((bag-for-each) variable |\x0;bag-for-each~1pxGHH~12886| (0) #f (srfi 113 sets)) ((bag-map) variable |\x0;bag-map~1pxGHH~12889| (0) #f (srfi 113 sets)) ((bag-every?) variable |\x0;bag-every?~1pxGHH~12882| (0) #f (srfi 113 sets)) ((bag-any?) variable |\x0;bag-any?~1pxGHH~12879| (0) #f (srfi 113 sets)) ((bag-count) variable |\x0;bag-count~1pxGHH~12876| (0) #f (srfi 113 sets)) ((bag-find) variable |\x0;bag-find~1pxGHH~12873| (0) #f (srfi 113 sets)) ((bag-size) variable |\x0;bag-size~1pxGHH~12870| (0) #f (srfi 113 sets)) ((bag-search!) variable |\x0;bag-search!~1pxGHH~12867| (0) #f (srfi 113 sets)) ((bag-delete-all!) variable |\x0;bag-delete-all!~1pxGHH~12859| (0) #f (srfi 113 sets)) ((bag-delete-all) variable |\x0;bag-delete-all~1pxGHH~12863| (0) #f (srfi 113 sets)) ((bag-delete!) variable |\x0;bag-delete!~1pxGHH~12857| (0) #f (srfi 113 sets)) ((bag-delete) variable |\x0;bag-delete~1pxGHH~12861| (0) #f (srfi 113 sets)) ((bag-replace!) variable |\x0;bag-replace!~1pxGHH~12852| (0) #f (srfi 113 sets)) ((bag-replace) variable |\x0;bag-replace~1pxGHH~12854| (0) #f (srfi 113 sets)) ((bag-adjoin!) variable |\x0;bag-adjoin!~1pxGHH~12847| (0) #f (srfi 113 sets)) ((bag-adjoin) variable |\x0;bag-adjoin~1pxGHH~12849| (0) #f (srfi 113 sets)) ((bag-element-comparator) variable |\x0;bag-element-comparator~1pxGHH~12838| (0) #f (srfi 113 sets)) ((bag-member) variable |\x0;bag-member~1pxGHH~12836| (0) #f (srfi 113 sets)) ((bag-disjoint?) variable |\x0;bag-disjoint?~1pxGHH~12833| (0) #f (srfi 113 sets)) ((bag-empty?) variable |\x0;bag-empty?~1pxGHH~12830| (0) #f (srfi 113 sets)) ((bag-contains?) variable |\x0;bag-contains?~1pxGHH~12827| (0) #f (srfi 113 sets)) ((bag?) variable |\x0;bag?~1pxGHH~12807| (0) #f (srfi 113 sets)) ((bag-unfold) variable |\x0;bag-unfold~1pxGHH~12824| (0) #f (srfi 113 sets)) ((bag) variable |\x0;bag~1pxGHH~12821| (0) #f (srfi 113 sets)) ((set-comparator) variable |\x0;set-comparator~1pxGHH~12983| (0) #f (srfi 113 sets)) ((set-xor!) variable |\x0;set-xor!~1pxGHH~12967| (0) #f (srfi 113 sets)) ((set-difference!) variable |\x0;set-difference!~1pxGHH~12957| (0) #f (srfi 113 sets)) ((set-intersection!) variable |\x0;set-intersection!~1pxGHH~12950| (0) #f (srfi 113 sets)) ((set-union!) variable |\x0;set-union!~1pxGHH~12943| (0) #f (srfi 113 sets)) ((set-xor) variable |\x0;set-xor~1pxGHH~12965| (0) #f (srfi 113 sets)) ((set-difference) variable |\x0;set-difference~1pxGHH~12954| (0) #f (srfi 113 sets)) ((set-intersection) variable |\x0;set-intersection~1pxGHH~12947| (0) #f (srfi 113 sets)) ((set-union) variable |\x0;set-union~1pxGHH~12940| (0) #f (srfi 113 sets)) ((set>=?) variable |\x0;set>=?~1pxGHH~12934| (0) #f (srfi 113 sets)) ((set<=?) variable |\x0;set<=?~1pxGHH~12922| (0) #f (srfi 113 sets)) ((set>?) variable |\x0;set>?~1pxGHH~12926| (0) #f (srfi 113 sets)) ((set<?) variable |\x0;set<?~1pxGHH~12930| (0) #f (srfi 113 sets)) ((set=?) variable |\x0;set=?~1pxGHH~12918| (0) #f (srfi 113 sets)) ((list->set!) variable |\x0;list->set!~1pxGHH~12915| (0) #f (srfi 113 sets)) ((list->set) variable |\x0;list->set~1pxGHH~12913| (0) #f (srfi 113 sets)) ((set->list) variable |\x0;set->list~1pxGHH~12910| (0) #f (srfi 113 sets)) ((set-copy) variable |\x0;set-copy~1pxGHH~12817| (0) #f (srfi 113 sets)) ((set-partition!) variable |\x0;set-partition!~1pxGHH~12907| (0) #f (srfi 113 sets)) ((set-remove!) variable |\x0;set-remove!~1pxGHH~12901| (0) #f (srfi 113 sets)) ((set-filter!) variable |\x0;set-filter!~1pxGHH~12899| (0) #f (srfi 113 sets)) ((set-partition) variable |\x0;set-partition~1pxGHH~12904| (0) #f (srfi 113 sets)) ((set-remove) variable |\x0;set-remove~1pxGHH~12896| (0) #f (srfi 113 sets)) ((set-filter) variable |\x0;set-filter~1pxGHH~12894| (0) #f (srfi 113 sets)) ((set-fold) variable |\x0;set-fold~1pxGHH~12891| (0) #f (srfi 113 sets)) ((set-for-each) variable |\x0;set-for-each~1pxGHH~12885| (0) #f (srfi 113 sets)) ((set-map) variable |\x0;set-map~1pxGHH~12888| (0) #f (srfi 113 sets)) ((set-every?) variable |\x0;set-every?~1pxGHH~12881| (0) #f (srfi 113 sets)) ((set-any?) variable |\x0;set-any?~1pxGHH~12878| (0) #f (srfi 113 sets)) ((set-count) variable |\x0;set-count~1pxGHH~12875| (0) #f (srfi 113 sets)) ((set-find) variable |\x0;set-find~1pxGHH~12872| (0) #f (srfi 113 sets)) ((set-size) variable |\x0;set-size~1pxGHH~12869| (0) #f (srfi 113 sets)) ((set-search!) variable |\x0;set-search!~1pxGHH~12866| (0) #f (srfi 113 sets)) ((set-delete-all!) variable |\x0;set-delete-all!~1pxGHH~12858| (0) #f (srfi 113 sets)) ((set-delete-all) variable |\x0;set-delete-all~1pxGHH~12862| (0) #f (srfi 113 sets)) ((set-delete!) variable |\x0;set-delete!~1pxGHH~12856| (0) #f (srfi 113 sets)) ((set-delete) variable |\x0;set-delete~1pxGHH~12860| (0) #f (srfi 113 sets)) ((set-replace!) variable |\x0;set-replace!~1pxGHH~12851| (0) #f (srfi 113 sets)) ((set-replace) variable |\x0;set-replace~1pxGHH~12853| (0) #f (srfi 113 sets)) ((set-adjoin!) variable |\x0;set-adjoin!~1pxGHH~12846| (0) #f (srfi 113 sets)) ((set-adjoin) variable |\x0;set-adjoin~1pxGHH~12848| (0) #f (srfi 113 sets)) ((set-element-comparator) variable |\x0;set-element-comparator~1pxGHH~12837| (0) #f (srfi 113 sets)) ((set-member) variable |\x0;set-member~1pxGHH~12835| (0) #f (srfi 113 sets)) ((set-disjoint?) variable |\x0;set-disjoint?~1pxGHH~12832| (0) #f (srfi 113 sets)) ((set-empty?) variable |\x0;set-empty?~1pxGHH~12829| (0) #f (srfi 113 sets)) ((set-contains?) variable |\x0;set-contains?~1pxGHH~12826| (0) #f (srfi 113 sets)) ((set?) variable |\x0;set?~1pxGHH~12806| (0) #f (srfi 113 sets)) ((set-unfold) variable |\x0;set-unfold~1pxGHH~12823| (0) #f (srfi 113 sets)) ((set) variable |\x0;set~1pxGHH~12820| (0) #f (srfi 113 sets)) ((char-set:full) variable |\x0;char-set:full~1pxGHH~14255| (0) #f (srfi 14 unicode)) ((char-set:empty) variable |\x0;char-set:empty~1pxGHH~14254| (0) #f (srfi 14 unicode)) ((char-set:ascii) variable |\x0;char-set:ascii~1pxGHH~14270| (0) #f (srfi 14 unicode)) ((char-set:blank) variable |\x0;char-set:blank~1pxGHH~14268| (0) #f (srfi 14 unicode)) ((char-set:hex-digit) variable |\x0;char-set:hex-digit~1pxGHH~14261| (0) #f (srfi 14 unicode)) ((char-set:symbol) variable |\x0;char-set:symbol~1pxGHH~14264| (0) #f (srfi 14 unicode)) ((char-set:punctuation) variable |\x0;char-set:punctuation~1pxGHH~14263| (0) #f (srfi 14 unicode)) ((char-set:iso-control) variable |\x0;char-set:iso-control~1pxGHH~14269| (0) #f (srfi 14 unicode)) ((char-set:whitespace) variable |\x0;char-set:whitespace~1pxGHH~14266| (0) #f (srfi 14 unicode)) ((char-set:printing) variable |\x0;char-set:printing~1pxGHH~14267| (0) #f (srfi 14 unicode)) ((char-set:graphic) variable |\x0;char-set:graphic~1pxGHH~14265| (0) #f (srfi 14 unicode)) ((char-set:letter+digit) variable |\x0;char-set:letter+digit~1pxGHH~14262| (0) #f (srfi 14 unicode)) ((char-set:digit) variable |\x0;char-set:digit~1pxGHH~14260| (0) #f (srfi 14 unicode)) ((char-set:letter) variable |\x0;char-set:letter~1pxGHH~14259| (0) #f (srfi 14 unicode)) ((char-set:title-case) variable |\x0;char-set:title-case~1pxGHH~14258| (0) #f (srfi 14 unicode)) ((char-set:upper-case) variable |\x0;char-set:upper-case~1pxGHH~14257| (0) #f (srfi 14 unicode)) ((char-set:lower-case) variable |\x0;char-set:lower-case~1pxGHH~14256| (0) #f (srfi 14 unicode)) ((char-set-diff+intersection!) variable |\x0;char-set-diff+intersection!~1pxGHH~14252| (0) #f (srfi 14 unicode)) ((char-set-xor!) variable |\x0;char-set-xor!~1pxGHH~14250| (0) #f (srfi 14 unicode)) ((char-set-difference!) variable |\x0;char-set-difference!~1pxGHH~14248| (0) #f (srfi 14 unicode)) ((char-set-diff+intersection) variable |\x0;char-set-diff+intersection~1pxGHH~14253| (0) #f (srfi 14 unicode)) ((char-set-xor) variable |\x0;char-set-xor~1pxGHH~14251| (0) #f (srfi 14 unicode)) ((char-set-difference) variable |\x0;char-set-difference~1pxGHH~14249| (0) #f (srfi 14 unicode)) ((char-set-intersection!) variable |\x0;char-set-intersection!~1pxGHH~14246| (0) #f (srfi 14 unicode)) ((char-set-union!) variable |\x0;char-set-union!~1pxGHH~14244| (0) #f (srfi 14 unicode)) ((char-set-complement!) variable |\x0;char-set-complement!~1pxGHH~14243| (0) #f (srfi 14 unicode)) ((char-set-intersection) variable |\x0;char-set-intersection~1pxGHH~14247| (0) #f (srfi 14 unicode)) ((char-set-union) variable |\x0;char-set-union~1pxGHH~14245| (0) #f (srfi 14 unicode)) ((char-set-complement) variable |\x0;char-set-complement~1pxGHH~14242| (0) #f (srfi 14 unicode)) ((char-set-delete!) variable |\x0;char-set-delete!~1pxGHH~14212| (0) #f (srfi 14 unicode)) ((char-set-adjoin!) variable |\x0;char-set-adjoin!~1pxGHH~14210| (0) #f (srfi 14 unicode)) ((char-set-delete) variable |\x0;char-set-delete~1pxGHH~14211| (0) #f (srfi 14 unicode)) ((char-set-adjoin) variable |\x0;char-set-adjoin~1pxGHH~14209| (0) #f (srfi 14 unicode)) ((char-set-any) variable |\x0;char-set-any~1pxGHH~14222| (0) #f (srfi 14 unicode)) ((char-set-every) variable |\x0;char-set-every~1pxGHH~14221| (0) #f (srfi 14 unicode)) ((char-set-contains?) variable |\x0;char-set-contains?~1pxGHH~14206| (0) #f (srfi 14 unicode)) ((char-set-count) variable |\x0;char-set-count~1pxGHH~14208| (0) #f (srfi 14 unicode)) ((char-set-size) variable |\x0;char-set-size~1pxGHH~14207| (0) #f (srfi 14 unicode)) ((char-set->string) variable |\x0;char-set->string~1pxGHH~14234| (0) #f (srfi 14 unicode)) ((char-set->list) variable |\x0;char-set->list~1pxGHH~14230| (0) #f (srfi 14 unicode)) ((->char-set) variable |\x0;->char-set~1pxGHH~14241| (0) #f (srfi 14 unicode)) ((ucs-range->char-set!) variable |\x0;ucs-range->char-set!~1pxGHH~14237| (0) #f (srfi 14 unicode)) ((ucs-range->char-set) variable |\x0;ucs-range->char-set~1pxGHH~14236| (0) #f (srfi 14 unicode)) ((char-set-filter!) variable |\x0;char-set-filter!~1pxGHH~14240| (0) #f (srfi 14 unicode)) ((char-set-filter) variable |\x0;char-set-filter~1pxGHH~14239| (0) #f (srfi 14 unicode)) ((string->char-set!) variable |\x0;string->char-set!~1pxGHH~14233| (0) #f (srfi 14 unicode)) ((list->char-set!) variable |\x0;list->char-set!~1pxGHH~14229| (0) #f (srfi 14 unicode)) ((string->char-set) variable |\x0;string->char-set~1pxGHH~14232| (0) #f (srfi 14 unicode)) ((list->char-set) variable |\x0;list->char-set~1pxGHH~14228| (0) #f (srfi 14 unicode)) ((char-set) variable |\x0;char-set~1pxGHH~14227| (0) #f (srfi 14 unicode)) ((char-set-copy) variable |\x0;char-set-copy~1pxGHH~14202| (0) #f (srfi 14 unicode)) ((char-set-map) variable |\x0;char-set-map~1pxGHH~14219| (0) #f (srfi 14 unicode)) ((char-set-for-each) variable |\x0;char-set-for-each~1pxGHH~14218| (0) #f (srfi 14 unicode)) ((char-set-unfold!) variable |\x0;char-set-unfold!~1pxGHH~14225| (0) #f (srfi 14 unicode)) ((char-set-unfold) variable |\x0;char-set-unfold~1pxGHH~14224| (0) #f (srfi 14 unicode)) ((char-set-fold) variable |\x0;char-set-fold~1pxGHH~14220| (0) #f (srfi 14 unicode)) ((end-of-char-set?) variable |\x0;end-of-char-set?~1pxGHH~14214| (0) #f (srfi 14 unicode)) ((char-set-cursor-next) variable |\x0;char-set-cursor-next~1pxGHH~14216| (0) #f (srfi 14 unicode)) ((char-set-ref) variable |\x0;char-set-ref~1pxGHH~14215| (0) #f (srfi 14 unicode)) ((char-set-cursor) variable |\x0;char-set-cursor~1pxGHH~14213| (0) #f (srfi 14 unicode)) ((char-set-hash) variable |\x0;char-set-hash~1pxGHH~14205| (0) #f (srfi 14 unicode)) ((char-set<=) variable |\x0;char-set<=~1pxGHH~14204| (0) #f (srfi 14 unicode)) ((char-set=) variable |\x0;char-set=~1pxGHH~14203| (0) #f (srfi 14 unicode)) ((char-set?) variable |\x0;char-set?~1pxGHH~14173| (0) #f (srfi 14 unicode)) ((hash-table-merge!) variable |\x0;deprecated:hash-table-merge!~1pxGHH~15465| (0) #f (srfi 125)) ((hash-table-walk) variable |\x0;deprecated:hash-table-walk~1pxGHH~15463| (0) #f (srfi 125)) ((hash-table-exists?) variable |\x0;deprecated:hash-table-exists?~1pxGHH~15462| (0) #f (srfi 125)) ((hash-table-hash-function) variable |\x0;deprecated:hash-table-hash-function~1pxGHH~15461| (0) #f (srfi 125)) ((hash-table-equivalence-function) variable |\x0;deprecated:hash-table-equivalence-function~1pxGHH~15460| (0) #f (srfi 125)) ((hash-by-identity) variable |\x0;deprecated:hash-by-identity~1pxGHH~15459| (0) #f (srfi 125)) ((hash) variable |\x0;deprecated:hash~1pxGHH~15456| (0) #f (srfi 125)) ((hash-table-xor!) variable |\x0;hash-table-xor!~1pxGHH~15455| (0) #f (srfi 125)) ((hash-table-difference!) variable |\x0;hash-table-difference!~1pxGHH~15454| (0) #f (srfi 125)) ((hash-table-intersection!) variable |\x0;hash-table-intersection!~1pxGHH~15453| (0) #f (srfi 125)) ((hash-table-union!) variable |\x0;hash-table-union!~1pxGHH~15452| (0) #f (srfi 125)) ((hash-table->alist) variable |\x0;hash-table->alist~1pxGHH~15451| (0) #f (srfi 125)) ((hash-table-empty-copy) variable |\x0;hash-table-empty-copy~1pxGHH~15450| (0) #f (srfi 125)) ((hash-table-copy) variable |\x0;hash-table-copy~1pxGHH~15449| (0) #f (srfi 125)) ((hash-table-prune!) variable |\x0;hash-table-prune!~1pxGHH~15448| (0) #f (srfi 125)) ((hash-table-fold) variable |\x0;hash-table-fold~1pxGHH~15447| (0) #f (srfi 125)) ((hash-table-map->list) variable |\x0;hash-table-map->list~1pxGHH~15444| (0) #f (srfi 125)) ((hash-table-map!) variable |\x0;hash-table-map!~1pxGHH~15446| (0) #f (srfi 125)) ((hash-table-for-each) variable |\x0;hash-table-for-each~1pxGHH~15445| (0) #f (srfi 125)) ((hash-table-map) variable |\x0;hash-table-map~1pxGHH~15443| (0) #f (srfi 125)) ((hash-table-count) variable |\x0;hash-table-count~1pxGHH~15442| (0) #f (srfi 125)) ((hash-table-find) variable |\x0;hash-table-find~1pxGHH~15441| (0) #f (srfi 125)) ((hash-table-entries) variable |\x0;hash-table-entries~1pxGHH~15440| (0) #f (srfi 125)) ((hash-table-values) variable |\x0;hash-table-values~1pxGHH~15439| (0) #f (srfi 125)) ((hash-table-keys) variable |\x0;hash-table-keys~1pxGHH~15438| (0) #f (srfi 125)) ((hash-table-size) variable |\x0;hash-table-size~1pxGHH~15437| (0) #f (srfi 125)) ((hash-table-clear!) variable |\x0;hash-table-clear!~1pxGHH~15436| (0) #f (srfi 125)) ((hash-table-pop!) variable |\x0;hash-table-pop!~1pxGHH~15435| (0) #f (srfi 125)) ((hash-table-update!/default) variable |\x0;hash-table-update!/default~1pxGHH~15434| (0) #f (srfi 125)) ((hash-table-update!) variable |\x0;hash-table-update!~1pxGHH~15433| (0) #f (srfi 125)) ((hash-table-intern!) variable |\x0;hash-table-intern!~1pxGHH~15432| (0) #f (srfi 125)) ((hash-table-delete!) variable |\x0;hash-table-delete!~1pxGHH~15431| (0) #f (srfi 125)) ((hash-table-set!) variable |\x0;hash-table-set!~1pxGHH~15430| (0) #f (srfi 125)) ((hash-table-ref/default) variable |\x0;hash-table-ref/default~1pxGHH~15429| (0) #f (srfi 125)) ((hash-table-ref) variable |\x0;hash-table-ref~1pxGHH~15428| (0) #f (srfi 125)) ((hash-table-mutable?) variable |\x0;hash-table-mutable?~1pxGHH~15427| (0) #f (srfi 125)) ((hash-table=?) variable |\x0;hash-table=?~1pxGHH~15426| (0) #f (srfi 125)) ((hash-table-empty?) variable |\x0;hash-table-empty?~1pxGHH~15425| (0) #f (srfi 125)) ((hash-table-contains?) variable |\x0;hash-table-contains?~1pxGHH~15424| (0) #f (srfi 125)) ((hash-table?) variable |\x0;hash-table?~1pxGHH~15423| (0) #f (srfi 125)) ((alist->hash-table) variable |\x0;alist->hash-table~1pxGHH~15422| (0) #f (srfi 125)) ((hash-table-unfold) variable |\x0;hash-table-unfold~1pxGHH~15421| (0) #f (srfi 125)) ((hash-table) variable |\x0;hash-table~1pxGHH~15420| (0) #f (srfi 125)) ((make-hash-table) variable |\x0;make-hash-table~1pxGHH~15418| (0) #f (srfi 125)) ((make-icdr-comparator) variable |\x0;make-icdr-comparator~1pxGHH~19248| (0) #f (srfi 116 comparators)) ((make-icar-comparator) variable |\x0;make-icar-comparator~1pxGHH~19247| (0) #f (srfi 116 comparators)) ((make-improper-ilist-comparator) variable |\x0;make-improper-ilist-comparator~1pxGHH~19249| (0) #f (srfi 116 comparators)) ((make-ilist-comparator) variable |\x0;make-ilist-comparator~1pxGHH~19245| (0) #f (srfi 116 comparators)) ((make-ipair-comparator) variable |\x0;make-ipair-comparator~1pxGHH~19242| (0) #f (srfi 116 comparators)) ((ilist-comparator) variable |\x0;ilist-comparator~1pxGHH~19246| (0) #f (srfi 116 comparators)) ((ipair-comparator) variable |\x0;ipair-comparator~1pxGHH~19244| (0) #f (srfi 116 comparators)) ((iapply) variable |\x0;iapply~1pxGHH~16060| (0) #f (srfi 116 ilists)) ((gtree->tree) variable |\x0;gtree->tree~1pxGHH~16056| (0) #f (srfi 116 ilists)) ((gtree->itree) variable |\x0;gtree->itree~1pxGHH~16055| (0) #f (srfi 116 ilists)) ((itree->tree) variable |\x0;itree->tree~1pxGHH~16054| (0) #f (srfi 116 ilists)) ((tree->itree) variable |\x0;tree->itree~1pxGHH~16053| (0) #f (srfi 116 ilists)) ((ilist->list) variable |\x0;ilist->list~1pxGHH~16052| (0) #f (srfi 116 ilists)) ((list->ilist) variable |\x0;list->ilist~1pxGHH~16050| (0) #f (srfi 116 ilists)) ((ipair->pair) variable |\x0;ipair->pair~1pxGHH~16049| (0) #f (srfi 116 ilists)) ((pair->ipair) variable |\x0;pair->ipair~1pxGHH~16048| (0) #f (srfi 116 ilists)) ((replace-icdr) variable |\x0;replace-icdr~1pxGHH~16047| (0) #f (srfi 116 ilists)) ((replace-icar) variable |\x0;replace-icar~1pxGHH~16046| (0) #f (srfi 116 ilists)) ((ialist-delete) variable |\x0;ialist-delete~1pxGHH~16185| (0) #f (srfi 116 ilists)) ((ialist-cons) variable |\x0;ialist-cons~1pxGHH~16183| (0) #f (srfi 116 ilists)) ((iassv) variable |\x0;iassv~1pxGHH~16081| (0) #f (srfi 116 ilists)) ((iassq) variable |\x0;iassq~1pxGHH~16080| (0) #f (srfi 116 ilists)) ((iassoc) variable |\x0;iassoc~1pxGHH~16182| (0) #f (srfi 116 ilists)) ((idelete-duplicates) variable |\x0;idelete-duplicates~1pxGHH~16181| (0) #f (srfi 116 ilists)) ((idelete) variable |\x0;idelete~1pxGHH~16177| (0) #f (srfi 116 ilists)) ((ibreak) variable |\x0;ibreak~1pxGHH~16191| (0) #f (srfi 116 ilists)) ((ispan) variable |\x0;ispan~1pxGHH~16190| (0) #f (srfi 116 ilists)) ((idrop-while) variable |\x0;idrop-while~1pxGHH~16189| (0) #f (srfi 116 ilists)) ((itake-while) variable |\x0;itake-while~1pxGHH~16188| (0) #f (srfi 116 ilists)) ((ilist-index) variable |\x0;ilist-index~1pxGHH~16194| (0) #f (srfi 116 ilists)) ((ievery) variable |\x0;ievery~1pxGHH~16192| (0) #f (srfi 116 ilists)) ((iany) variable |\x0;iany~1pxGHH~16193| (0) #f (srfi 116 ilists)) ((ifind-tail) variable |\x0;ifind-tail~1pxGHH~16187| (0) #f (srfi 116 ilists)) ((ifind) variable |\x0;ifind~1pxGHH~16186| (0) #f (srfi 116 ilists)) ((imemv) variable |\x0;imemv~1pxGHH~16180| (0) #f (srfi 116 ilists)) ((imemq) variable |\x0;imemq~1pxGHH~16179| (0) #f (srfi 116 ilists)) ((imember) variable |\x0;imember~1pxGHH~16178| (0) #f (srfi 116 ilists)) ((iremove) variable |\x0;iremove~1pxGHH~16176| (0) #f (srfi 116 ilists)) ((ipartition) variable |\x0;ipartition~1pxGHH~16175| (0) #f (srfi 116 ilists)) ((ifilter) variable |\x0;ifilter~1pxGHH~16174| (0) #f (srfi 116 ilists)) ((imap-in-order) variable |\x0;imap-in-order~1pxGHH~16172| (0) #f (srfi 116 ilists)) ((ifilter-map) variable |\x0;ifilter-map~1pxGHH~16171| (0) #f (srfi 116 ilists)) ((ipair-for-each) variable |\x0;ipair-for-each~1pxGHH~16170| (0) #f (srfi 116 ilists)) ((iappend-map) variable |\x0;iappend-map~1pxGHH~16168| (0) #f (srfi 116 ilists)) ((ireduce-right) variable |\x0;ireduce-right~1pxGHH~16167| (0) #f (srfi 116 ilists)) ((ipair-fold-right) variable |\x0;ipair-fold-right~1pxGHH~16164| (0) #f (srfi 116 ilists)) ((iunfold-right) variable |\x0;iunfold-right~1pxGHH~16160| (0) #f (srfi 116 ilists)) ((ifold-right) variable |\x0;ifold-right~1pxGHH~16163| (0) #f (srfi 116 ilists)) ((ireduce) variable |\x0;ireduce~1pxGHH~16166| (0) #f (srfi 116 ilists)) ((ipair-fold) variable |\x0;ipair-fold~1pxGHH~16165| (0) #f (srfi 116 ilists)) ((iunfold) variable |\x0;iunfold~1pxGHH~16161| (0) #f (srfi 116 ilists)) ((ifold) variable |\x0;ifold~1pxGHH~16162| (0) #f (srfi 116 ilists)) ((ifor-each) variable |\x0;ifor-each~1pxGHH~16082| (0) #f (srfi 116 ilists)) ((imap) variable |\x0;imap~1pxGHH~16173| (0) #f (srfi 116 ilists)) ((icount) variable |\x0;icount~1pxGHH~16159| (0) #f (srfi 116 ilists)) ((iunzip5) variable |\x0;iunzip5~1pxGHH~16150| (0) #f (srfi 116 ilists)) ((iunzip4) variable |\x0;iunzip4~1pxGHH~16149| (0) #f (srfi 116 ilists)) ((iunzip3) variable |\x0;iunzip3~1pxGHH~16148| (0) #f (srfi 116 ilists)) ((iunzip2) variable |\x0;iunzip2~1pxGHH~16147| (0) #f (srfi 116 ilists)) ((iunzip1) variable |\x0;iunzip1~1pxGHH~16146| (0) #f (srfi 116 ilists)) ((izip) variable |\x0;izip~1pxGHH~16097| (0) #f (srfi 116 ilists)) ((iappend-reverse) variable |\x0;iappend-reverse~1pxGHH~16152| (0) #f (srfi 116 ilists)) ((ireverse) variable |\x0;ireverse~1pxGHH~16195| (0) #f (srfi 116 ilists)) ((iconcatenate) variable |\x0;iconcatenate~1pxGHH~16153| (0) #f (srfi 116 ilists)) ((iappend) variable |\x0;iappend~1pxGHH~16151| (0) #f (srfi 116 ilists)) ((ilength) variable |\x0;ilength~1pxGHH~16096| (0) #f (srfi 116 ilists)) ((last-ipair) variable |\x0;last-ipair~1pxGHH~16145| (0) #f (srfi 116 ilists)) ((ilast) variable |\x0;ilast~1pxGHH~16144| (0) #f (srfi 116 ilists)) ((isplit-at) variable |\x0;isplit-at~1pxGHH~16143| (0) #f (srfi 116 ilists)) ((idrop-right) variable |\x0;idrop-right~1pxGHH~16141| (0) #f (srfi 116 ilists)) ((itake-right) variable |\x0;itake-right~1pxGHH~16140| (0) #f (srfi 116 ilists)) ((ilist-tail) variable |\x0;ilist-tail~1pxGHH~16138| (0) #f (srfi 116 ilists)) ((idrop) variable |\x0;idrop~1pxGHH~16139| (0) #f (srfi 116 ilists)) ((itake) variable |\x0;itake~1pxGHH~16137| (0) #f (srfi 116 ilists)) ((icar+icdr) variable |\x0;icar+icdr~1pxGHH~16136| (0) #f (srfi 116 ilists)) ((icddddr) variable |\x0;icddddr~1pxGHH~16125| (0) #f (srfi 116 ilists)) ((icdddar) variable |\x0;icdddar~1pxGHH~16124| (0) #f (srfi 116 ilists)) ((icddadr) variable |\x0;icddadr~1pxGHH~16123| (0) #f (srfi 116 ilists)) ((icddaar) variable |\x0;icddaar~1pxGHH~16122| (0) #f (srfi 116 ilists)) ((icdaddr) variable |\x0;icdaddr~1pxGHH~16121| (0) #f (srfi 116 ilists)) ((icdadar) variable |\x0;icdadar~1pxGHH~16120| (0) #f (srfi 116 ilists)) ((icdaadr) variable |\x0;icdaadr~1pxGHH~16119| (0) #f (srfi 116 ilists)) ((icdaaar) variable |\x0;icdaaar~1pxGHH~16118| (0) #f (srfi 116 ilists)) ((icadddr) variable |\x0;icadddr~1pxGHH~16117| (0) #f (srfi 116 ilists)) ((icaddar) variable |\x0;icaddar~1pxGHH~16116| (0) #f (srfi 116 ilists)) ((icadadr) variable |\x0;icadadr~1pxGHH~16115| (0) #f (srfi 116 ilists)) ((icadaar) variable |\x0;icadaar~1pxGHH~16114| (0) #f (srfi 116 ilists)) ((icaaddr) variable |\x0;icaaddr~1pxGHH~16113| (0) #f (srfi 116 ilists)) ((icaadar) variable |\x0;icaadar~1pxGHH~16112| (0) #f (srfi 116 ilists)) ((icaaadr) variable |\x0;icaaadr~1pxGHH~16111| (0) #f (srfi 116 ilists)) ((icaaaar) variable |\x0;icaaaar~1pxGHH~16110| (0) #f (srfi 116 ilists)) ((icdddr) variable |\x0;icdddr~1pxGHH~16109| (0) #f (srfi 116 ilists)) ((icddar) variable |\x0;icddar~1pxGHH~16108| (0) #f (srfi 116 ilists)) ((icdadr) variable |\x0;icdadr~1pxGHH~16107| (0) #f (srfi 116 ilists)) ((icdaar) variable |\x0;icdaar~1pxGHH~16106| (0) #f (srfi 116 ilists)) ((icaddr) variable |\x0;icaddr~1pxGHH~16105| (0) #f (srfi 116 ilists)) ((icadar) variable |\x0;icadar~1pxGHH~16104| (0) #f (srfi 116 ilists)) ((icaadr) variable |\x0;icaadr~1pxGHH~16103| (0) #f (srfi 116 ilists)) ((icaaar) variable |\x0;icaaar~1pxGHH~16102| (0) #f (srfi 116 ilists)) ((icddr) variable |\x0;icddr~1pxGHH~16101| (0) #f (srfi 116 ilists)) ((icdar) variable |\x0;icdar~1pxGHH~16100| (0) #f (srfi 116 ilists)) ((icadr) variable |\x0;icadr~1pxGHH~16099| (0) #f (srfi 116 ilists)) ((icaar) variable |\x0;icaar~1pxGHH~16098| (0) #f (srfi 116 ilists)) ((itenth) variable |\x0;itenth~1pxGHH~16135| (0) #f (srfi 116 ilists)) ((ininth) variable |\x0;ininth~1pxGHH~16134| (0) #f (srfi 116 ilists)) ((ieighth) variable |\x0;ieighth~1pxGHH~16133| (0) #f (srfi 116 ilists)) ((iseventh) variable |\x0;iseventh~1pxGHH~16132| (0) #f (srfi 116 ilists)) ((isixth) variable |\x0;isixth~1pxGHH~16131| (0) #f (srfi 116 ilists)) ((ififth) variable |\x0;ififth~1pxGHH~16130| (0) #f (srfi 116 ilists)) ((ifourth) variable |\x0;ifourth~1pxGHH~16129| (0) #f (srfi 116 ilists)) ((ithird) variable |\x0;ithird~1pxGHH~16128| (0) #f (srfi 116 ilists)) ((isecond) variable |\x0;isecond~1pxGHH~16127| (0) #f (srfi 116 ilists)) ((ifirst) variable |\x0;ifirst~1pxGHH~16126| (0) #f (srfi 116 ilists)) ((ilist-ref) variable |\x0;ilist-ref~1pxGHH~16142| (0) #f (srfi 116 ilists)) ((icdr) variable |\x0;icdr~1pxGHH~16013| (0) #f (srfi 116 ilists)) ((icar) variable |\x0;icar~1pxGHH~16012| (0) #f (srfi 116 ilists)) ((ilist=) variable |\x0;ilist=~1pxGHH~16095| (0) #f (srfi 116 ilists)) ((null-ilist?) variable |\x0;null-ilist?~1pxGHH~16094| (0) #f (srfi 116 ilists)) ((not-ipair?) variable |\x0;not-ipair?~1pxGHH~16093| (0) #f (srfi 116 ilists)) ((dotted-ilist?) variable |\x0;dotted-ilist?~1pxGHH~16092| (0) #f (srfi 116 ilists)) ((ilist?) variable |\x0;ilist?~1pxGHH~16090| (0) #f (srfi 116 ilists)) ((proper-ilist?) variable |\x0;proper-ilist?~1pxGHH~16091| (0) #f (srfi 116 ilists)) ((ipair?) variable |\x0;ipair?~1pxGHH~16011| (0) #f (srfi 116 ilists)) ((iiota) variable |\x0;iiota~1pxGHH~16089| (0) #f (srfi 116 ilists)) ((ilist-tabulate) variable |\x0;ilist-tabulate~1pxGHH~16086| (0) #f (srfi 116 ilists)) ((make-ilist) variable |\x0;make-ilist~1pxGHH~16085| (0) #f (srfi 116 ilists)) ((ipair*) variable |\x0;ipair*~1pxGHH~16087| (0) #f (srfi 116 ilists)) ((xipair) variable |\x0;xipair~1pxGHH~16084| (0) #f (srfi 116 ilists)) ((ilist) variable |\x0;ilist~1pxGHH~16051| (0) #f (srfi 116 ilists)) ((ipair) variable |\x0;ipair~1pxGHH~16010| (0) #f (srfi 116 ilists)) ((iq) macro |\x0;iq~1pxGHH~16033| (0) #f (srfi 116 ilists)) ((list->rlist) variable |\x0;ra:linear-access-list->random-access-list~1pxGHH~19523| (0) #f (srfi :101 random-access-lists)) ((rlist->list) variable |\x0;ra:random-access-list->linear-access-list~1pxGHH~19522| (0) #f (srfi :101 random-access-lists)) ((rfor-each) variable |\x0;ra:for-each~1pxGHH~19521| (0) #f (srfi :101 random-access-lists)) ((rmap) variable |\x0;ra:map~1pxGHH~19520| (0) #f (srfi :101 random-access-lists)) ((rlist-ref/update) variable |\x0;ra:list-ref/update~1pxGHH~19474| (0) #f (srfi :101 random-access-lists)) ((rlist-set) variable |\x0;ra:list-set~1pxGHH~19519| (0) #f (srfi :101 random-access-lists)) ((rlist-ref) variable |\x0;ra:list-ref~1pxGHH~19518| (0) #f (srfi :101 random-access-lists)) ((rlist-tail) variable |\x0;ra:list-tail~1pxGHH~19517| (0) #f (srfi :101 random-access-lists)) ((rreverse) variable |\x0;ra:reverse~1pxGHH~19516| (0) #f (srfi :101 random-access-lists)) ((rappend) variable |\x0;ra:append~1pxGHH~19515| (0) #f (srfi :101 random-access-lists)) ((rlength) variable |\x0;ra:length~1pxGHH~19510| (0) #f (srfi :101 random-access-lists)) ((make-rlist) variable |\x0;ra:make-list~1pxGHH~19478| (0) #f (srfi :101 random-access-lists)) ((rlist) variable |\x0;ra:list~1pxGHH~19477| (0) #f (srfi :101 random-access-lists)) ((rlist?) variable |\x0;ra:list?~1pxGHH~19481| (0) #f (srfi :101 random-access-lists)) ((rnull?) variable |\x0;ra:null?~1pxGHH~19469| (0) #f (srfi :101 random-access-lists)) ((rcdddar) variable |\x0;ra:cdddar~1pxGHH~19509| (0) #f (srfi :101 random-access-lists)) ((rcddddr) variable |\x0;ra:cddddr~1pxGHH~19508| (0) #f (srfi :101 random-access-lists)) ((rcddadr) variable |\x0;ra:cddadr~1pxGHH~19507| (0) #f (srfi :101 random-access-lists)) ((rcddaar) variable |\x0;ra:cddaar~1pxGHH~19506| (0) #f (srfi :101 random-access-lists)) ((rcdadar) variable |\x0;ra:cdadar~1pxGHH~19505| (0) #f (srfi :101 random-access-lists)) ((rcdaddr) variable |\x0;ra:cdaddr~1pxGHH~19504| (0) #f (srfi :101 random-access-lists)) ((rcdaadr) variable |\x0;ra:cdaadr~1pxGHH~19503| (0) #f (srfi :101 random-access-lists)) ((rcdaaar) variable |\x0;ra:cdaaar~1pxGHH~19502| (0) #f (srfi :101 random-access-lists)) ((rcaddar) variable |\x0;ra:caddar~1pxGHH~19501| (0) #f (srfi :101 random-access-lists)) ((rcadddr) variable |\x0;ra:cadddr~1pxGHH~19500| (0) #f (srfi :101 random-access-lists)) ((rcadadr) variable |\x0;ra:cadadr~1pxGHH~19499| (0) #f (srfi :101 random-access-lists)) ((rcadaar) variable |\x0;ra:cadaar~1pxGHH~19498| (0) #f (srfi :101 random-access-lists)) ((rcaadar) variable |\x0;ra:caadar~1pxGHH~19497| (0) #f (srfi :101 random-access-lists)) ((rcaaddr) variable |\x0;ra:caaddr~1pxGHH~19496| (0) #f (srfi :101 random-access-lists)) ((rcaaadr) variable |\x0;ra:caaadr~1pxGHH~19495| (0) #f (srfi :101 random-access-lists)) ((rcaaaar) variable |\x0;ra:caaaar~1pxGHH~19494| (0) #f (srfi :101 random-access-lists)) ((rcddar) variable |\x0;ra:cddar~1pxGHH~19493| (0) #f (srfi :101 random-access-lists)) ((rcdddr) variable |\x0;ra:cdddr~1pxGHH~19492| (0) #f (srfi :101 random-access-lists)) ((rcdadr) variable |\x0;ra:cdadr~1pxGHH~19491| (0) #f (srfi :101 random-access-lists)) ((rcdaar) variable |\x0;ra:cdaar~1pxGHH~19490| (0) #f (srfi :101 random-access-lists)) ((rcadar) variable |\x0;ra:cadar~1pxGHH~19489| (0) #f (srfi :101 random-access-lists)) ((rcaddr) variable |\x0;ra:caddr~1pxGHH~19488| (0) #f (srfi :101 random-access-lists)) ((rcaadr) variable |\x0;ra:caadr~1pxGHH~19487| (0) #f (srfi :101 random-access-lists)) ((rcaaar) variable |\x0;ra:caaar~1pxGHH~19486| (0) #f (srfi :101 random-access-lists)) ((rcdar) variable |\x0;ra:cdar~1pxGHH~19485| (0) #f (srfi :101 random-access-lists)) ((rcddr) variable |\x0;ra:cddr~1pxGHH~19484| (0) #f (srfi :101 random-access-lists)) ((rcadr) variable |\x0;ra:cadr~1pxGHH~19483| (0) #f (srfi :101 random-access-lists)) ((rcaar) variable |\x0;ra:caar~1pxGHH~19482| (0) #f (srfi :101 random-access-lists)) ((rcdr) variable |\x0;ra:cdr~1pxGHH~19473| (0) #f (srfi :101 random-access-lists)) ((rcar) variable |\x0;ra:car~1pxGHH~19472| (0) #f (srfi :101 random-access-lists)) ((rcons) variable |\x0;ra:cons~1pxGHH~19470| (0) #f (srfi :101 random-access-lists)) ((rpair?) variable |\x0;ra:pair?~1pxGHH~19468| (0) #f (srfi :101 random-access-lists)) ((rquote) macro |\x0;ra:quote~1pxGHH~19525| (0) #f (srfi :101 random-access-lists)) ((ideque->generator) variable |\x0;ideque->generator~1pxGHH~21232| (0) #f (srfi 134 ideque)) ((generator->ideque) variable |\x0;generator->ideque~1pxGHH~21233| (0) #f (srfi 134 ideque)) ((ideque->list) variable |\x0;ideque->list~1pxGHH~21230| (0) #f (srfi 134 ideque)) ((list->ideque) variable |\x0;list->ideque~1pxGHH~21231| (0) #f (srfi 134 ideque)) ((ideque-break) variable |\x0;ideque-break~1pxGHH~21227| (0) #f (srfi 134 ideque)) ((ideque-span) variable |\x0;ideque-span~1pxGHH~21226| (0) #f (srfi 134 ideque)) ((ideque-drop-while-right) variable |\x0;ideque-drop-while-right~1pxGHH~21224| (0) #f (srfi 134 ideque)) ((ideque-drop-while) variable |\x0;ideque-drop-while~1pxGHH~21223| (0) #f (srfi 134 ideque)) ((ideque-take-while-right) variable |\x0;ideque-take-while-right~1pxGHH~21222| (0) #f (srfi 134 ideque)) ((ideque-take-while) variable |\x0;ideque-take-while~1pxGHH~21221| (0) #f (srfi 134 ideque)) ((ideque-find-right) variable |\x0;ideque-find-right~1pxGHH~21220| (0) #f (srfi 134 ideque)) ((ideque-find) variable |\x0;ideque-find~1pxGHH~21219| (0) #f (srfi 134 ideque)) ((ideque-partition) variable |\x0;ideque-partition~1pxGHH~21216| (0) #f (srfi 134 ideque)) ((ideque-remove) variable |\x0;ideque-remove~1pxGHH~21215| (0) #f (srfi 134 ideque)) ((ideque-filter) variable |\x0;ideque-filter~1pxGHH~21214| (0) #f (srfi 134 ideque)) ((ideque-append-map) variable |\x0;ideque-append-map~1pxGHH~21212| (0) #f (srfi 134 ideque)) ((ideque-fold-right) variable |\x0;ideque-fold-right~1pxGHH~21211| (0) #f (srfi 134 ideque)) ((ideque-fold) variable |\x0;ideque-fold~1pxGHH~21210| (0) #f (srfi 134 ideque)) ((ideque-for-each-right) variable |\x0;ideque-for-each-right~1pxGHH~21209| (0) #f (srfi 134 ideque)) ((ideque-for-each) variable |\x0;ideque-for-each~1pxGHH~21208| (0) #f (srfi 134 ideque)) ((ideque-filter-map) variable |\x0;ideque-filter-map~1pxGHH~21207| (0) #f (srfi 134 ideque)) ((ideque-map) variable |\x0;ideque-map~1pxGHH~21206| (0) #f (srfi 134 ideque)) ((ideque-zip) variable |\x0;ideque-zip~1pxGHH~21205| (0) #f (srfi 134 ideque)) ((ideque-count) variable |\x0;ideque-count~1pxGHH~21204| (0) #f (srfi 134 ideque)) ((ideque-reverse) variable |\x0;ideque-reverse~1pxGHH~21190| (0) #f (srfi 134 ideque)) ((ideque-append) variable |\x0;ideque-append~1pxGHH~21203| (0) #f (srfi 134 ideque)) ((ideque-length) variable |\x0;ideque-length~1pxGHH~21202| (0) #f (srfi 134 ideque)) ((ideque-split-at) variable |\x0;ideque-split-at~1pxGHH~21201| (0) #f (srfi 134 ideque)) ((ideque-drop-right) variable |\x0;ideque-drop-right~1pxGHH~21200| (0) #f (srfi 134 ideque)) ((ideque-drop) variable |\x0;ideque-drop~1pxGHH~21199| (0) #f (srfi 134 ideque)) ((ideque-take-right) variable |\x0;ideque-take-right~1pxGHH~21198| (0) #f (srfi 134 ideque)) ((ideque-take) variable |\x0;ideque-take~1pxGHH~21197| (0) #f (srfi 134 ideque)) ((ideque-ref) variable |\x0;ideque-ref~1pxGHH~21193| (0) #f (srfi 134 ideque)) ((ideque-remove-back) variable |\x0;ideque-remove-back~1pxGHH~21189| (0) #f (srfi 134 ideque)) ((ideque-add-back) variable |\x0;ideque-add-back~1pxGHH~21187| (0) #f (srfi 134 ideque)) ((ideque-back) variable |\x0;ideque-back~1pxGHH~21188| (0) #f (srfi 134 ideque)) ((ideque-remove-front) variable |\x0;ideque-remove-front~1pxGHH~21186| (0) #f (srfi 134 ideque)) ((ideque-add-front) variable |\x0;ideque-add-front~1pxGHH~21184| (0) #f (srfi 134 ideque)) ((ideque-front) variable |\x0;ideque-front~1pxGHH~21185| (0) #f (srfi 134 ideque)) ((ideque-every) variable |\x0;ideque-every~1pxGHH~21229| (0) #f (srfi 134 ideque)) ((ideque-any) variable |\x0;ideque-any~1pxGHH~21228| (0) #f (srfi 134 ideque)) ((ideque=) variable |\x0;ideque=~1pxGHH~21191| (0) #f (srfi 134 ideque)) ((ideque-empty?) variable |\x0;ideque-empty?~1pxGHH~21183| (0) #f (srfi 134 ideque)) ((ideque?) variable |\x0;ideque?~1pxGHH~21170| (0) #f (srfi 134 ideque)) ((ideque-unfold-right) variable |\x0;ideque-unfold-right~1pxGHH~21180| (0) #f (srfi 134 ideque)) ((ideque-unfold) variable |\x0;ideque-unfold~1pxGHH~21179| (0) #f (srfi 134 ideque)) ((ideque-tabulate) variable |\x0;ideque-tabulate~1pxGHH~21178| (0) #f (srfi 134 ideque)) ((ideque) variable |\x0;ideque~1pxGHH~21177| (0) #f (srfi 134 ideque)) ((textual-split) variable textual-split (0) #f (larceny PRIMITIVES)) ((textual-replicate) variable textual-replicate (0) #f (larceny PRIMITIVES)) ((textual-remove) variable textual-remove (0) #f (larceny PRIMITIVES)) ((textual-filter) variable textual-filter (0) #f (larceny PRIMITIVES)) ((textual-count) variable textual-count (0) #f (larceny PRIMITIVES)) ((textual-for-each-index) variable textual-for-each-index (0) #f (larceny PRIMITIVES)) ((textual-map-index) variable textual-map-index (0) #f (larceny PRIMITIVES)) ((textual-for-each) variable textual-for-each (0) #f (larceny PRIMITIVES)) ((textual-map) variable textual-map (0) #f (larceny PRIMITIVES)) ((textual-fold-right) variable textual-fold-right (0) #f (larceny PRIMITIVES)) ((textual-fold) variable textual-fold (0) #f (larceny PRIMITIVES)) ((textual-join) variable textual-join (0) #f (larceny PRIMITIVES)) ((textual-concatenate-reverse) variable textual-concatenate-reverse (0) #f (larceny PRIMITIVES)) ((textual-concatenate) variable textual-concatenate (0) #f (larceny PRIMITIVES)) ((textual-append) variable textual-append (0) #f (larceny PRIMITIVES)) ((textual-titlecase) variable textual-titlecase (0) #f (larceny PRIMITIVES)) ((textual-foldcase) variable textual-foldcase (0) #f (larceny PRIMITIVES)) ((textual-downcase) variable textual-downcase (0) #f (larceny PRIMITIVES)) ((textual-upcase) variable textual-upcase (0) #f (larceny PRIMITIVES)) ((textual-contains-right) variable textual-contains-right (0) #f (larceny PRIMITIVES)) ((textual-contains) variable textual-contains (0) #f (larceny PRIMITIVES)) ((textual-skip-right) variable textual-skip-right (0) #f (larceny PRIMITIVES)) ((textual-skip) variable textual-skip (0) #f (larceny PRIMITIVES)) ((textual-index-right) variable textual-index-right (0) #f (larceny PRIMITIVES)) ((textual-index) variable textual-index (0) #f (larceny PRIMITIVES)) ((textual-suffix?) variable textual-suffix? (0) #f (larceny PRIMITIVES)) ((textual-prefix?) variable textual-prefix? (0) #f (larceny PRIMITIVES)) ((textual-suffix-length) variable textual-suffix-length (0) #f (larceny PRIMITIVES)) ((textual-prefix-length) variable textual-prefix-length (0) #f (larceny PRIMITIVES)) ((textual-ci>=?) variable textual-ci>=? (0) #f (larceny PRIMITIVES)) ((textual>=?) variable textual>=? (0) #f (larceny PRIMITIVES)) ((textual-ci<=?) variable textual-ci<=? (0) #f (larceny PRIMITIVES)) ((textual<=?) variable textual<=? (0) #f (larceny PRIMITIVES)) ((textual-ci>?) variable textual-ci>? (0) #f (larceny PRIMITIVES)) ((textual>?) variable textual>? (0) #f (larceny PRIMITIVES)) ((textual-ci<?) variable textual-ci<? (0) #f (larceny PRIMITIVES)) ((textual<?) variable textual<? (0) #f (larceny PRIMITIVES)) ((textual-ci=?) variable textual-ci=? (0) #f (larceny PRIMITIVES)) ((textual=?) variable textual=? (0) #f (larceny PRIMITIVES)) ((textual-replace) variable textual-replace (0) #f (larceny PRIMITIVES)) ((textual-trim-both) variable textual-trim-both (0) #f (larceny PRIMITIVES)) ((textual-trim-right) variable textual-trim-right (0) #f (larceny PRIMITIVES)) ((textual-trim) variable textual-trim (0) #f (larceny PRIMITIVES)) ((textual-pad-right) variable textual-pad-right (0) #f (larceny PRIMITIVES)) ((textual-pad) variable textual-pad (0) #f (larceny PRIMITIVES)) ((textual-drop-right) variable textual-drop-right (0) #f (larceny PRIMITIVES)) ((textual-drop) variable textual-drop (0) #f (larceny PRIMITIVES)) ((textual-take-right) variable textual-take-right (0) #f (larceny PRIMITIVES)) ((textual-take) variable textual-take (0) #f (larceny PRIMITIVES)) ((textual-copy) variable textual-copy (0) #f (larceny PRIMITIVES)) ((subtextual) variable subtextual (0) #f (larceny PRIMITIVES)) ((subtext) variable subtext (0) #f (larceny PRIMITIVES)) ((textual-ref) variable textual-ref (0) #f (larceny PRIMITIVES)) ((text-ref) variable text-ref (0) #f (larceny PRIMITIVES)) ((textual-length) variable textual-length (0) #f (larceny PRIMITIVES)) ((text-length) variable text-length (0) #f (larceny PRIMITIVES)) ((utf16le->text) variable utf16le->text (0) #f (larceny PRIMITIVES)) ((utf16->text) variable utf16->text (0) #f (larceny PRIMITIVES)) ((utf16be->text) variable utf16be->text (0) #f (larceny PRIMITIVES)) ((utf8->text) variable utf8->text (0) #f (larceny PRIMITIVES)) ((textual->utf16le) variable textual->utf16le (0) #f (larceny PRIMITIVES)) ((textual->utf16) variable textual->utf16 (0) #f (larceny PRIMITIVES)) ((textual->utf16be) variable textual->utf16be (0) #f (larceny PRIMITIVES)) ((textual->utf8) variable textual->utf8 (0) #f (larceny PRIMITIVES)) ((reverse-list->text) variable reverse-list->text (0) #f (larceny PRIMITIVES)) ((list->text) variable list->text (0) #f (larceny PRIMITIVES)) ((vector->text) variable vector->text (0) #f (larceny PRIMITIVES)) ((string->text) variable string->text (0) #f (larceny PRIMITIVES)) ((textual->list) variable textual->list (0) #f (larceny PRIMITIVES)) ((textual->vector) variable textual->vector (0) #f (larceny PRIMITIVES)) ((textual->string) variable textual->string (0) #f (larceny PRIMITIVES)) ((textual->text) variable textual->text (0) #f (larceny PRIMITIVES)) ((text-unfold-right) variable text-unfold-right (0) #f (larceny PRIMITIVES)) ((text-unfold) variable text-unfold (0) #f (larceny PRIMITIVES)) ((text-tabulate) variable text-tabulate (0) #f (larceny PRIMITIVES)) ((text) variable text (0) #f (larceny PRIMITIVES)) ((make-text) variable make-text (0) #f (larceny PRIMITIVES)) ((textual-any) variable textual-any (0) #f (larceny PRIMITIVES)) ((textual-every) variable textual-every (0) #f (larceny PRIMITIVES)) ((textual-null?) variable textual-null? (0) #f (larceny PRIMITIVES)) ((textual?) variable textual? (0) #f (larceny PRIMITIVES)) ((text?) variable text? (0) #f (larceny PRIMITIVES)) ((generator-unfold) variable |\x0;generator-unfold~1pxGHH~20283| (0) #f (srfi 121)) ((generator-every) variable |\x0;generator-every~1pxGHH~20282| (0) #f (srfi 121)) ((generator-any) variable |\x0;generator-any~1pxGHH~20281| (0) #f (srfi 121)) ((generator-count) variable |\x0;generator-count~1pxGHH~20280| (0) #f (srfi 121)) ((generator-find) variable |\x0;generator-find~1pxGHH~20279| (0) #f (srfi 121)) ((generator-for-each) variable |\x0;generator-for-each~1pxGHH~20278| (0) #f (srfi 121)) ((generator-fold) variable |\x0;generator-fold~1pxGHH~20277| (0) #f (srfi 121)) ((generator->string) variable |\x0;generator->string~1pxGHH~20276| (0) #f (srfi 121)) ((generator->vector!) variable |\x0;generator->vector!~1pxGHH~20275| (0) #f (srfi 121)) ((generator->vector) variable |\x0;generator->vector~1pxGHH~20274| (0) #f (srfi 121)) ((generator->reverse-list) variable |\x0;generator->reverse-list~1pxGHH~20273| (0) #f (srfi 121)) ((generator->list) variable |\x0;generator->list~1pxGHH~20272| (0) #f (srfi 121)) ((gselect) variable |\x0;gselect~1pxGHH~20271| (0) #f (srfi 121)) ((gindex) variable |\x0;gindex~1pxGHH~20270| (0) #f (srfi 121)) ((gdelete-neighbor-dups) variable |\x0;gdelete-neighbor-dups~1pxGHH~20269| (0) #f (srfi 121)) ((gdelete) variable |\x0;gdelete~1pxGHH~20268| (0) #f (srfi 121)) ((gdrop-while) variable |\x0;gdrop-while~1pxGHH~20266| (0) #f (srfi 121)) ((gtake-while) variable |\x0;gtake-while~1pxGHH~20267| (0) #f (srfi 121)) ((gdrop) variable |\x0;gdrop~1pxGHH~20265| (0) #f (srfi 121)) ((gtake) variable |\x0;gtake~1pxGHH~20264| (0) #f (srfi 121)) ((gremove) variable |\x0;gremove~1pxGHH~20263| (0) #f (srfi 121)) ((gfilter) variable |\x0;gfilter~1pxGHH~20262| (0) #f (srfi 121)) ((gcombine) variable |\x0;gcombine~1pxGHH~20261| (0) #f (srfi 121)) ((gappend) variable |\x0;gappend~1pxGHH~20260| (0) #f (srfi 121)) ((gcons*) variable |\x0;gcons*~1pxGHH~20259| (0) #f (srfi 121)) ((make-unfold-generator) variable |\x0;make-unfold-generator~1pxGHH~20258| (0) #f (srfi 121)) ((make-for-each-generator) variable |\x0;make-for-each-generator~1pxGHH~20257| (0) #f (srfi 121)) ((bytevector->generator) variable |\x0;bytevector->generator~1pxGHH~20256| (0) #f (srfi 121)) ((string->generator) variable |\x0;string->generator~1pxGHH~20255| (0) #f (srfi 121)) ((reverse-vector->generator) variable |\x0;reverse-vector->generator~1pxGHH~20254| (0) #f (srfi 121)) ((vector->generator) variable |\x0;vector->generator~1pxGHH~20253| (0) #f (srfi 121)) ((list->generator) variable |\x0;list->generator~1pxGHH~20252| (0) #f (srfi 121)) ((make-coroutine-generator) variable |\x0;make-coroutine-generator~1pxGHH~20251| (0) #f (srfi 121)) ((make-range-generator) variable |\x0;make-range-generator~1pxGHH~20249| (0) #f (srfi 121)) ((make-iota-generator) variable |\x0;make-iota-generator~1pxGHH~20247| (0) #f (srfi 121)) ((generator) variable |\x0;generator~1pxGHH~20246| (0) #f (srfi 121)) ((lseq-memv) variable |\x0;lseq-memv~1pxGHH~21837| (0) #f (srfi 127)) ((lseq-memq) variable |\x0;lseq-memq~1pxGHH~21838| (0) #f (srfi 127)) ((lseq-member) variable |\x0;lseq-member~1pxGHH~21836| (0) #f (srfi 127)) ((lseq-index) variable |\x0;lseq-index~1pxGHH~21835| (0) #f (srfi 127)) ((lseq-every) variable |\x0;lseq-every~1pxGHH~21834| (0) #f (srfi 127)) ((lseq-any) variable |\x0;lseq-any~1pxGHH~21833| (0) #f (srfi 127)) ((lseq-drop-while) variable |\x0;lseq-drop-while~1pxGHH~21832| (0) #f (srfi 127)) ((lseq-take-while) variable |\x0;lseq-take-while~1pxGHH~21831| (0) #f (srfi 127)) ((lseq-find-tail) variable |\x0;lseq-find-tail~1pxGHH~21830| (0) #f (srfi 127)) ((lseq-find) variable |\x0;lseq-find~1pxGHH~21829| (0) #f (srfi 127)) ((lseq-remove) variable |\x0;lseq-remove~1pxGHH~21828| (0) #f (srfi 127)) ((lseq-filter) variable |\x0;lseq-filter~1pxGHH~21827| (0) #f (srfi 127)) ((lseq-for-each) variable |\x0;lseq-for-each~1pxGHH~21826| (0) #f (srfi 127)) ((lseq-map) variable |\x0;lseq-map~1pxGHH~21824| (0) #f (srfi 127)) ((lseq-zip) variable |\x0;lseq-zip~1pxGHH~21825| (0) #f (srfi 127)) ((lseq-append) variable |\x0;lseq-append~1pxGHH~21822| (0) #f (srfi 127)) ((lseq-length) variable |\x0;lseq-length~1pxGHH~21820| (0) #f (srfi 127)) ((lseq->generator) variable |\x0;lseq->generator~1pxGHH~21821| (0) #f (srfi 127)) ((lseq-realize) variable |\x0;lseq-realize~1pxGHH~21819| (0) #f (srfi 127)) ((lseq-drop) variable |\x0;lseq-drop~1pxGHH~21817| (0) #f (srfi 127)) ((lseq-take) variable |\x0;lseq-take~1pxGHH~21816| (0) #f (srfi 127)) ((lseq-ref) variable |\x0;lseq-ref~1pxGHH~21818| (0) #f (srfi 127)) ((lseq-rest) variable |\x0;lseq-rest~1pxGHH~21813| (0) #f (srfi 127)) ((lseq-cdr) variable |\x0;lseq-cdr~1pxGHH~21812| (0) #f (srfi 127)) ((lseq-first) variable |\x0;lseq-first~1pxGHH~21811| (0) #f (srfi 127)) ((lseq-car) variable |\x0;lseq-car~1pxGHH~21810| (0) #f (srfi 127)) ((lseq=?) variable |\x0;lseq=?~1pxGHH~21815| (0) #f (srfi 127)) ((lseq?) variable |\x0;lseq?~1pxGHH~21814| (0) #f (srfi 127)) ((generator->lseq) variable |\x0;generator->lseq~1pxGHH~21809| (0) #f (srfi 127)) ((stream-zip) variable |\x0;stream-zip~1pxGHH~22723| (0) #f (srfi :41 streams derived)) ((stream-unfolds) variable |\x0;stream-unfolds~1pxGHH~22722| (0) #f (srfi :41 streams derived)) ((stream-unfold) variable |\x0;stream-unfold~1pxGHH~22721| (0) #f (srfi :41 streams derived)) ((stream-take-while) variable |\x0;stream-take-while~1pxGHH~22720| (0) #f (srfi :41 streams derived)) ((stream-take) variable |\x0;stream-take~1pxGHH~22719| (0) #f (srfi :41 streams derived)) ((stream-scan) variable |\x0;stream-scan~1pxGHH~22718| (0) #f (srfi :41 streams derived)) ((stream-reverse) variable |\x0;stream-reverse~1pxGHH~22717| (0) #f (srfi :41 streams derived)) ((stream-ref) variable |\x0;stream-ref~1pxGHH~22716| (0) #f (srfi :41 streams derived)) ((stream-range) variable |\x0;stream-range~1pxGHH~22715| (0) #f (srfi :41 streams derived)) ((stream-of) macro |\x0;stream-of~1pxGHH~22619| (0) #f (srfi :41 streams derived)) ((stream-match) macro |\x0;stream-match~1pxGHH~22451| (0) #f (srfi :41 streams derived)) ((stream-map) variable |\x0;stream-map~1pxGHH~22450| (0) #f (srfi :41 streams derived)) ((stream-let) macro |\x0;stream-let~1pxGHH~22421| (0) #f (srfi :41 streams derived)) ((stream-length) variable |\x0;stream-length~1pxGHH~22420| (0) #f (srfi :41 streams derived)) ((stream-iterate) variable |\x0;stream-iterate~1pxGHH~22419| (0) #f (srfi :41 streams derived)) ((stream-from) variable |\x0;stream-from~1pxGHH~22418| (0) #f (srfi :41 streams derived)) ((stream-for-each) variable |\x0;stream-for-each~1pxGHH~22417| (0) #f (srfi :41 streams derived)) ((stream-fold) variable |\x0;stream-fold~1pxGHH~22416| (0) #f (srfi :41 streams derived)) ((stream-filter) variable |\x0;stream-filter~1pxGHH~22415| (0) #f (srfi :41 streams derived)) ((stream-drop-while) variable |\x0;stream-drop-while~1pxGHH~22414| (0) #f (srfi :41 streams derived)) ((stream-drop) variable |\x0;stream-drop~1pxGHH~22413| (0) #f (srfi :41 streams derived)) ((stream-constant) variable |\x0;stream-constant~1pxGHH~22412| (0) #f (srfi :41 streams derived)) ((stream-concat) variable |\x0;stream-concat~1pxGHH~22411| (0) #f (srfi :41 streams derived)) ((stream-append) variable |\x0;stream-append~1pxGHH~22410| (0) #f (srfi :41 streams derived)) ((stream->list) variable |\x0;stream->list~1pxGHH~22409| (0) #f (srfi :41 streams derived)) ((stream) macro |\x0;stream~1pxGHH~22387| (0) #f (srfi :41 streams derived)) ((port->stream) variable |\x0;port->stream~1pxGHH~22386| (0) #f (srfi :41 streams derived)) ((list->stream) variable |\x0;list->stream~1pxGHH~22385| (0) #f (srfi :41 streams derived)) ((define-stream) macro |\x0;define-stream~1pxGHH~22363| (0) #f (srfi :41 streams derived)) ((stream-lambda) macro |\x0;stream-lambda~1pxGHH~22271| (0) #f (srfi :41 streams primitive)) ((stream-cdr) variable |\x0;stream-cdr~1pxGHH~22270| (0) #f (srfi :41 streams primitive)) ((stream-car) variable |\x0;stream-car~1pxGHH~22269| (0) #f (srfi :41 streams primitive)) ((stream-pair?) variable |\x0;stream-pair?~1pxGHH~22249| (0) #f (srfi :41 streams primitive)) ((stream-null?) variable |\x0;stream-null?~1pxGHH~22250| (0) #f (srfi :41 streams primitive)) ((stream?) variable |\x0;stream?~1pxGHH~22193| (0) #f (srfi :41 streams primitive)) ((stream-cons) macro |\x0;stream-cons~1pxGHH~22251| (0) #f (srfi :41 streams primitive)) ((stream-null) variable |\x0;stream-null~1pxGHH~22230| (0) #f (srfi :41 streams primitive)) ((set-box!) variable |\x0;set-box!~1pxGHH~23564| (0) #f (srfi 111)) ((unbox) variable |\x0;unbox~1pxGHH~23563| (0) #f (srfi 111)) ((box?) variable |\x0;box?~1pxGHH~23562| (0) #f (srfi 111)) ((box) variable |\x0;box~1pxGHH~23561| (0) #f (srfi 111)) ((list-queue-for-each) variable |\x0;list-queue-for-each~1pxGHH~23617| (0) #f (srfi 117)) ((list-queue-map!) variable |\x0;list-queue-map!~1pxGHH~23616| (0) #f (srfi 117)) ((list-queue-map) variable |\x0;list-queue-map~1pxGHH~23611| (0) #f (srfi 117)) ((list-queue-concatenate) variable |\x0;list-queue-concatenate~1pxGHH~23608| (0) #f (srfi 117)) ((list-queue-append!) variable |\x0;list-queue-append!~1pxGHH~23609| (0) #f (srfi 117)) ((list-queue-append) variable |\x0;list-queue-append~1pxGHH~23607| (0) #f (srfi 117)) ((list-queue-set-list!) variable |\x0;list-queue-set-list!~1pxGHH~23620| (0) #f (srfi 117)) ((list-queue-remove-all!) variable |\x0;list-queue-remove-all!~1pxGHH~23605| (0) #f (srfi 117)) ((list-queue-remove-back!) variable |\x0;list-queue-remove-back!~1pxGHH~23604| (0) #f (srfi 117)) ((list-queue-remove-front!) variable |\x0;list-queue-remove-front!~1pxGHH~23603| (0) #f (srfi 117)) ((list-queue-add-back!) variable |\x0;list-queue-add-back!~1pxGHH~23602| (0) #f (srfi 117)) ((list-queue-add-front!) variable |\x0;list-queue-add-front!~1pxGHH~23601| (0) #f (srfi 117)) ((list-queue-first-last) variable |\x0;list-queue-first-last~1pxGHH~23619| (0) #f (srfi 117)) ((list-queue-list) variable |\x0;list-queue-list~1pxGHH~23618| (0) #f (srfi 117)) ((list-queue-back) variable |\x0;list-queue-back~1pxGHH~23600| (0) #f (srfi 117)) ((list-queue-front) variable |\x0;list-queue-front~1pxGHH~23599| (0) #f (srfi 117)) ((list-queue-empty?) variable |\x0;list-queue-empty?~1pxGHH~23598| (0) #f (srfi 117)) ((list-queue?) variable |\x0;list-queue?~1pxGHH~23590| (0) #f (srfi 117)) ((list-queue-unfold-right) variable |\x0;list-queue-unfold-right~1pxGHH~23614| (0) #f (srfi 117)) ((list-queue-unfold) variable |\x0;list-queue-unfold~1pxGHH~23612| (0) #f (srfi 117)) ((list-queue-copy) variable |\x0;list-queue-copy~1pxGHH~23597| (0) #f (srfi 117)) ((list-queue) variable |\x0;list-queue~1pxGHH~23596| (0) #f (srfi 117)) ((make-list-queue) variable |\x0;make-list-queue~1pxGHH~23595| (0) #f (srfi 117)) ((reference-barrier) variable |\x0;reference-barrier~1pxGHH~23944| (0) #f (srfi 124)) ((ephemeron-datum) variable |\x0;ephemeron-datum~1pxGHH~23942| (0) #f (srfi 124)) ((ephemeron-key) variable |\x0;ephemeron-key~1pxGHH~23941| (0) #f (srfi 124)) ((ephemeron-broken?) variable |\x0;ephemeron-broken?~1pxGHH~23943| (0) #f (srfi 124)) ((make-ephemeron) variable |\x0;make-ephemeron~1pxGHH~23940| (0) #f (srfi 124)) ((ephemeron?) variable |\x0;ephemeron?~1pxGHH~23933| (0) #f (srfi 124)) ((comparator-if<=>) macro |\x0;comparator-if<=>~1pxGHH~11617| (0) #f (srfi 128)) ((>=?) variable |\x0;>=?~1pxGHH~11725| (0) #f (srfi 128)) ((<=?) variable |\x0;<=?~1pxGHH~11724| (0) #f (srfi 128)) ((>?) variable |\x0;>?~1pxGHH~11723| (0) #f (srfi 128)) ((<?) variable |\x0;<?~1pxGHH~11722| (0) #f (srfi 128)) ((=?) variable |\x0;=?~1pxGHH~11721| (0) #f (srfi 128)) ((hash-salt) macro |\x0;hash-salt~1pxGHH~11680| (0) #f (srfi 128)) ((hash-bound) macro |\x0;hash-bound~1pxGHH~11668| (0) #f (srfi 128)) ((comparator-hash) variable |\x0;comparator-hash~1pxGHH~11715| (0) #f (srfi 128)) ((comparator-check-type) variable |\x0;comparator-check-type~1pxGHH~11714| (0) #f (srfi 128)) ((comparator-test-type) variable |\x0;comparator-test-type~1pxGHH~11713| (0) #f (srfi 128)) ((comparator-hash-function) variable |\x0;comparator-hash-function~1pxGHH~11485| (0) #f (srfi 128 kernel)) ((comparator-ordering-predicate) variable |\x0;comparator-ordering-predicate~1pxGHH~11483| (0) #f (srfi 128 kernel)) ((comparator-equality-predicate) variable |\x0;comparator-equality-predicate~1pxGHH~11482| (0) #f (srfi 128 kernel)) ((comparator-type-test-predicate) variable |\x0;comparator-type-test-predicate~1pxGHH~11481| (0) #f (srfi 128 kernel)) ((comparator-register-default!) variable |\x0;comparator-register-default!~1pxGHH~11757| (0) #f (srfi 128)) ((default-hash) variable |\x0;default-hash~1pxGHH~11763| (0) #f (srfi 128)) ((make-default-comparator) variable |\x0;make-default-comparator~1pxGHH~11766| (0) #f (srfi 128)) ((number-hash) variable |\x0;number-hash~1pxGHH~11730| (0) #f (srfi 128)) ((symbol-hash) variable symbol-hash (0 1) #f (larceny PRIMITIVES)) ((string-ci-hash) variable string-ci-hash (0 1) #f (larceny PRIMITIVES)) ((string-hash) variable string-hash (0 1) #f (larceny PRIMITIVES)) ((char-ci-hash) variable |\x0;char-ci-hash~1pxGHH~11729| (0) #f (srfi 128)) ((char-hash) variable |\x0;char-hash~1pxGHH~11728| (0) #f (srfi 128)) ((boolean-hash) variable |\x0;boolean-hash~1pxGHH~11727| (0) #f (srfi 128)) ((make-equal-comparator) variable |\x0;make-equal-comparator~1pxGHH~11735| (0) #f (srfi 128)) ((make-eqv-comparator) variable |\x0;make-eqv-comparator~1pxGHH~11734| (0) #f (srfi 128)) ((make-eq-comparator) variable |\x0;make-eq-comparator~1pxGHH~11733| (0) #f (srfi 128)) ((make-vector-comparator) variable |\x0;make-vector-comparator~1pxGHH~11748| (0) #f (srfi 128)) ((make-list-comparator) variable |\x0;make-list-comparator~1pxGHH~11743| (0) #f (srfi 128)) ((make-pair-comparator) variable |\x0;make-pair-comparator~1pxGHH~11737| (0) #f (srfi 128)) ((make-comparator) variable |\x0;make-comparator~1pxGHH~11489| (0) #f (srfi 128 kernel)) ((comparator-hashable?) variable |\x0;comparator-hashable?~1pxGHH~11488| (0) #f (srfi 128 kernel)) ((comparator-ordered?) variable |\x0;comparator-ordered?~1pxGHH~11486| (0) #f (srfi 128 kernel)) ((comparator?) variable |\x0;comparator?~1pxGHH~11480| (0) #f (srfi 128 kernel)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~24039|) variable |\x0;x~1pxGHH~24041| (0) #f (larceny r7r6)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~24039|) . #f) ((bindings) . #f) ((body) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~24025|)) let (|\x0;env~1pxGHH~24033|) (larceny r7r6) #ex:syntax-rename let-syntax #ex:invalid-form)
 |\x0;r7rs:let-syntax~1pxGHH~24022| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~24041|)) let (|\x0;env~1pxGHH~24049|) (larceny r7r6) #ex:syntax-rename letrec-syntax #ex:invalid-form)
 |\x0;r7rs:letrec-syntax~1pxGHH~24038| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (larceny r7r6) ((&assertion variable &assertion (0 1) #f (larceny PRIMITIVES)) (&condition variable &condition (0 1) #f (larceny PRIMITIVES)) (&error variable &error (0 1) #f (larceny PRIMITIVES)) (&i/o variable &i/o (0 1) #f (larceny PRIMITIVES)) (&i/o-decoding variable &i/o-decoding (0 1) #f (larceny PRIMITIVES)) (&i/o-encoding variable &i/o-encoding (0 1) #f (larceny PRIMITIVES)) (&i/o-file-already-exists variable &i/o-file-already-exists (0 1) #f (larceny PRIMITIVES)) (&i/o-file-does-not-exist variable &i/o-file-does-not-exist (0 1) #f (larceny PRIMITIVES)) (&i/o-file-is-read-only variable &i/o-file-is-read-only (0 1) #f (larceny PRIMITIVES)) (&i/o-file-protection variable &i/o-file-protection (0 1) #f (larceny PRIMITIVES)) (&i/o-filename variable &i/o-filename (0 1) #f (larceny PRIMITIVES)) (&i/o-invalid-position variable &i/o-invalid-position (0 1) #f (larceny PRIMITIVES)) (&i/o-port variable &i/o-port (0 1) #f (larceny PRIMITIVES)) (&i/o-read variable &i/o-read (0 1) #f (larceny PRIMITIVES)) (&i/o-write variable &i/o-write (0 1) #f (larceny PRIMITIVES)) (&implementation-restriction variable &implementation-restriction (0 1) #f (larceny PRIMITIVES)) (&irritants variable &irritants (0 1) #f (larceny PRIMITIVES)) (&lexical variable &lexical (0 1) #f (larceny PRIMITIVES)) (&message variable &message (0 1) #f (larceny PRIMITIVES)) (&no-infinities variable &no-infinities (0 1) #f (larceny PRIMITIVES)) (&no-nans variable &no-nans (0 1) #f (larceny PRIMITIVES)) (&non-continuable variable &non-continuable (0 1) #f (larceny PRIMITIVES)) (&serious variable &serious (0 1) #f (larceny PRIMITIVES)) (&syntax variable &syntax (0 1) #f (larceny PRIMITIVES)) (&undefined variable &undefined (0 1) #f (larceny PRIMITIVES)) (&violation variable &violation (0 1) #f (larceny PRIMITIVES)) (&warning variable &warning (0 1) #f (larceny PRIMITIVES)) (&who variable &who (0 1) #f (larceny PRIMITIVES)) (* variable * (1 0) #f (larceny PRIMITIVES)) (+ variable + (1 0) #f (larceny PRIMITIVES)) (- variable - (1 0) #f (larceny PRIMITIVES)) (... macro ... (2 1 0) #f ()) (/ variable / (1 0) #f (larceny PRIMITIVES)) (< variable < (1 0) #f (larceny PRIMITIVES)) (<= variable <= (1 0) #f (larceny PRIMITIVES)) (= variable = (1 0) #f (larceny PRIMITIVES)) (=> macro |\x0;=>~1pxGHH~568| (1 0) #f (core derived)) (> variable > (1 0) #f (larceny PRIMITIVES)) (>= variable >= (1 0) #f (larceny PRIMITIVES)) (_ macro _ (2 1 0) #f ()) (abs variable abs (1 0) #f (larceny PRIMITIVES)) (acos variable acos (1 0) #f (larceny PRIMITIVES)) (and macro and (1 0) #f ()) (angle variable angle (1 0) #f (larceny PRIMITIVES)) (append variable append (1 0) #f (larceny PRIMITIVES)) (apply variable apply (1 0) #f (larceny PRIMITIVES)) (asin variable asin (1 0) #f (larceny PRIMITIVES)) (assert macro |\x0;assert~1pxGHH~1465| (0 1) #f (rnrs base)) (assertion-violation variable assertion-violation (0 1) #f (larceny PRIMITIVES)) (assertion-violation? variable assertion-violation? (0 1) #f (larceny PRIMITIVES)) (assoc variable |\x0;assoc~1pxGHH~1540| (1 0) #f (rnrs lists)) (assp variable assp (0 1) #f (larceny PRIMITIVES)) (assq variable assq (1 0) #f (larceny PRIMITIVES)) (assv variable assv (1 0) #f (larceny PRIMITIVES)) (atan variable atan (1 0) #f (larceny PRIMITIVES)) (begin macro begin (1 0) #f ()) (binary-port? variable binary-port? (1 0) #f (larceny PRIMITIVES)) (bitwise-and variable bitwise-and (0 1) #f (larceny PRIMITIVES)) (bitwise-arithmetic-shift variable bitwise-arithmetic-shift (0 1) #f (larceny PRIMITIVES)) (bitwise-arithmetic-shift-left variable bitwise-arithmetic-shift-left (0 1) #f (larceny PRIMITIVES)) (bitwise-arithmetic-shift-right variable bitwise-arithmetic-shift-right (0 1) #f (larceny PRIMITIVES)) (bitwise-bit-count variable bitwise-bit-count (0 1) #f (larceny PRIMITIVES)) (bitwise-bit-field variable bitwise-bit-field (0 1) #f (larceny PRIMITIVES)) (bitwise-bit-set? variable bitwise-bit-set? (0 1) #f (larceny PRIMITIVES)) (bitwise-copy-bit variable bitwise-copy-bit (0 1) #f (larceny PRIMITIVES)) (bitwise-copy-bit-field variable bitwise-copy-bit-field (0 1) #f (larceny PRIMITIVES)) (bitwise-first-bit-set variable bitwise-first-bit-set (0 1) #f (larceny PRIMITIVES)) (bitwise-if variable bitwise-if (0 1) #f (larceny PRIMITIVES)) (bitwise-ior variable bitwise-ior (0 1) #f (larceny PRIMITIVES)) (bitwise-length variable bitwise-length (0 1) #f (larceny PRIMITIVES)) (bitwise-not variable bitwise-not (0 1) #f (larceny PRIMITIVES)) (bitwise-reverse-bit-field variable bitwise-reverse-bit-field (0 1) #f (larceny PRIMITIVES)) (bitwise-rotate-bit-field variable bitwise-rotate-bit-field (0 1) #f (larceny PRIMITIVES)) (bitwise-xor variable bitwise-xor (0 1) #f (larceny PRIMITIVES)) (boolean=? variable boolean=? (1 0) #f (larceny PRIMITIVES)) (boolean? variable boolean? (1 0) #f (larceny PRIMITIVES)) (bound-identifier=? variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) (buffer-mode macro |\x0;buffer-mode~1pxGHH~4379| (0 1) #f (rnrs io ports)) (buffer-mode? variable buffer-mode? (0 1) #f (larceny PRIMITIVES)) (bytevector variable bytevector (0) #f (larceny PRIMITIVES)) (bytevector->sint-list variable bytevector->sint-list (0 1) #f (larceny PRIMITIVES)) (bytevector->string variable bytevector->string (0 1) #f (larceny PRIMITIVES)) (bytevector->u8-list variable bytevector->u8-list (0 1) #f (larceny PRIMITIVES)) (bytevector->uint-list variable bytevector->uint-list (0 1) #f (larceny PRIMITIVES)) (bytevector-append variable bytevector-append (0) #f (larceny PRIMITIVES)) (bytevector-copy variable bytevector-copy (1 0) #f (larceny PRIMITIVES)) (bytevector-copy! variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) (bytevector-fill! variable bytevector-fill! (0 1) #f (larceny PRIMITIVES)) (bytevector-ieee-double-native-ref variable bytevector-ieee-double-native-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-ieee-double-native-set! variable bytevector-ieee-double-native-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-ieee-double-ref variable bytevector-ieee-double-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-ieee-double-set! variable bytevector-ieee-double-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-ieee-single-native-ref variable bytevector-ieee-single-native-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-ieee-single-native-set! variable bytevector-ieee-single-native-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-ieee-single-ref variable bytevector-ieee-single-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-ieee-single-set! variable bytevector-ieee-single-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-length variable bytevector-length (1 0) #f (larceny PRIMITIVES)) (bytevector-s16-native-ref variable bytevector-s16-native-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-s16-native-set! variable bytevector-s16-native-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-s16-ref variable bytevector-s16-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-s16-set! variable bytevector-s16-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-s32-native-ref variable bytevector-s32-native-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-s32-native-set! variable bytevector-s32-native-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-s32-ref variable bytevector-s32-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-s32-set! variable bytevector-s32-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-s64-native-ref variable bytevector-s64-native-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-s64-native-set! variable bytevector-s64-native-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-s64-ref variable bytevector-s64-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-s64-set! variable bytevector-s64-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-s8-ref variable bytevector-s8-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-s8-set! variable bytevector-s8-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-sint-ref variable bytevector-sint-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-sint-set! variable bytevector-sint-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-u16-native-ref variable bytevector-u16-native-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-u16-native-set! variable bytevector-u16-native-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-u16-ref variable bytevector-u16-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-u16-set! variable bytevector-u16-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-u32-native-ref variable bytevector-u32-native-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-u32-native-set! variable bytevector-u32-native-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-u32-ref variable bytevector-u32-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-u32-set! variable bytevector-u32-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-u64-native-ref variable bytevector-u64-native-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-u64-native-set! variable bytevector-u64-native-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-u64-ref variable bytevector-u64-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-u64-set! variable bytevector-u64-set! (0 1) #f (larceny PRIMITIVES)) (bytevector-u8-ref variable bytevector-u8-ref (1 0) #f (larceny PRIMITIVES)) (bytevector-u8-set! variable bytevector-u8-set! (1 0) #f (larceny PRIMITIVES)) (bytevector-uint-ref variable bytevector-uint-ref (0 1) #f (larceny PRIMITIVES)) (bytevector-uint-set! variable bytevector-uint-set! (0 1) #f (larceny PRIMITIVES)) (bytevector=? variable bytevector=? (0 1) #f (larceny PRIMITIVES)) (bytevector? variable bytevector? (1 0) #f (larceny PRIMITIVES)) (caaaar variable caaaar (1 0) #f (larceny PRIMITIVES)) (caaadr variable caaadr (1 0) #f (larceny PRIMITIVES)) (caaar variable caaar (1 0) #f (larceny PRIMITIVES)) (caadar variable caadar (1 0) #f (larceny PRIMITIVES)) (caaddr variable caaddr (1 0) #f (larceny PRIMITIVES)) (caadr variable caadr (1 0) #f (larceny PRIMITIVES)) (caar variable caar (1 0) #f (larceny PRIMITIVES)) (cadaar variable cadaar (1 0) #f (larceny PRIMITIVES)) (cadadr variable cadadr (1 0) #f (larceny PRIMITIVES)) (cadar variable cadar (1 0) #f (larceny PRIMITIVES)) (caddar variable caddar (1 0) #f (larceny PRIMITIVES)) (cadddr variable cadddr (1 0) #f (larceny PRIMITIVES)) (caddr variable caddr (1 0) #f (larceny PRIMITIVES)) (cadr variable cadr (1 0) #f (larceny PRIMITIVES)) (call-with-bytevector-output-port variable call-with-bytevector-output-port (0 1) #f (larceny PRIMITIVES)) (call-with-current-continuation variable call-with-current-continuation (1 0) #f (larceny PRIMITIVES)) (call-with-input-file variable call-with-input-file (1 0) #f (larceny PRIMITIVES)) (call-with-output-file variable call-with-output-file (1 0) #f (larceny PRIMITIVES)) (call-with-port variable call-with-port (1 0) #f (larceny PRIMITIVES)) (call-with-string-output-port variable call-with-string-output-port (0 1) #f (larceny PRIMITIVES)) (call-with-values variable call-with-values (1 0) #f (larceny PRIMITIVES)) (call/cc variable call/cc (1 0) #f (larceny PRIMITIVES)) (car variable car (1 0) #f (larceny PRIMITIVES)) (case macro |\x0;case~1pxGHH~435| (1 0) #f (core derived)) (case-lambda macro |\x0;case-lambda~1pxGHH~3944| (1 0) #f (rnrs control)) (cdaaar variable cdaaar (1 0) #f (larceny PRIMITIVES)) (cdaadr variable cdaadr (1 0) #f (larceny PRIMITIVES)) (cdaar variable cdaar (1 0) #f (larceny PRIMITIVES)) (cdadar variable cdadar (1 0) #f (larceny PRIMITIVES)) (cdaddr variable cdaddr (1 0) #f (larceny PRIMITIVES)) (cdadr variable cdadr (1 0) #f (larceny PRIMITIVES)) (cdar variable cdar (1 0) #f (larceny PRIMITIVES)) (cddaar variable cddaar (1 0) #f (larceny PRIMITIVES)) (cddadr variable cddadr (1 0) #f (larceny PRIMITIVES)) (cddar variable cddar (1 0) #f (larceny PRIMITIVES)) (cdddar variable cdddar (1 0) #f (larceny PRIMITIVES)) (cddddr variable cddddr (1 0) #f (larceny PRIMITIVES)) (cdddr variable cdddr (1 0) #f (larceny PRIMITIVES)) (cddr variable cddr (1 0) #f (larceny PRIMITIVES)) (cdr variable cdr (1 0) #f (larceny PRIMITIVES)) (ceiling variable ceiling (1 0) #f (larceny PRIMITIVES)) (char->integer variable char->integer (1 0) #f (larceny PRIMITIVES)) (char-alphabetic? variable char-alphabetic? (1 0) #f (larceny PRIMITIVES)) (char-ci<=? variable char-ci<=? (1 0) #f (larceny PRIMITIVES)) (char-ci<? variable char-ci<? (1 0) #f (larceny PRIMITIVES)) (char-ci=? variable char-ci=? (1 0) #f (larceny PRIMITIVES)) (char-ci>=? variable char-ci>=? (1 0) #f (larceny PRIMITIVES)) (char-ci>? variable char-ci>? (1 0) #f (larceny PRIMITIVES)) (char-downcase variable char-downcase (1 0) #f (larceny PRIMITIVES)) (char-foldcase variable char-foldcase (1 0) #f (larceny PRIMITIVES)) (char-general-category variable char-general-category (0 1) #f (larceny PRIMITIVES)) (char-lower-case? variable char-lower-case? (1 0) #f (larceny PRIMITIVES)) (char-numeric? variable char-numeric? (1 0) #f (larceny PRIMITIVES)) (char-ready? variable char-ready? (0) #f (larceny PRIMITIVES)) (char-title-case? variable char-title-case? (0 1) #f (larceny PRIMITIVES)) (char-titlecase variable char-titlecase (0 1) #f (larceny PRIMITIVES)) (char-upcase variable char-upcase (1 0) #f (larceny PRIMITIVES)) (char-upper-case? variable char-upper-case? (1 0) #f (larceny PRIMITIVES)) (char-whitespace? variable char-whitespace? (1 0) #f (larceny PRIMITIVES)) (char<=? variable char<=? (1 0) #f (larceny PRIMITIVES)) (char<? variable char<? (1 0) #f (larceny PRIMITIVES)) (char=? variable char=? (1 0) #f (larceny PRIMITIVES)) (char>=? variable char>=? (1 0) #f (larceny PRIMITIVES)) (char>? variable char>? (1 0) #f (larceny PRIMITIVES)) (char? variable char? (1 0) #f (larceny PRIMITIVES)) (close-input-port variable close-input-port (1 0) #f (larceny PRIMITIVES)) (close-output-port variable close-output-port (1 0) #f (larceny PRIMITIVES)) (close-port variable close-port (1 0) #f (larceny PRIMITIVES)) (command-line variable |\x0;command-line~1pxGHH~7223| (1 0) #f (rnrs programs)) (complex? variable complex? (1 0) #f (larceny PRIMITIVES)) (cond macro |\x0;cond~1pxGHH~320| (1 0) #f (core derived)) (cond-expand macro cond-expand (0) #f ()) (condition variable condition (0 1) #f (larceny PRIMITIVES)) (condition-accessor variable condition-accessor (0 1) #f (larceny PRIMITIVES)) (condition-irritants variable condition-irritants (0 1) #f (larceny PRIMITIVES)) (condition-message variable condition-message (0 1) #f (larceny PRIMITIVES)) (condition-predicate variable condition-predicate (0 1) #f (larceny PRIMITIVES)) (condition-who variable condition-who (0 1) #f (larceny PRIMITIVES)) (condition? variable condition? (0 1) #f (larceny PRIMITIVES)) (cons variable cons (1 0) #f (larceny PRIMITIVES)) (cons* variable cons* (0 1) #f (larceny PRIMITIVES)) (cos variable cos (1 0) #f (larceny PRIMITIVES)) (current-error-port variable current-error-port (1 0) #f (larceny PRIMITIVES)) (current-input-port variable current-input-port (1 0) #f (larceny PRIMITIVES)) (current-jiffy variable |\x0;current-jiffy~1pxGHH~9055| (0) #f (scheme time)) (current-output-port variable current-output-port (1 0) #f (larceny PRIMITIVES)) (current-second variable current-second (0) #f (larceny PRIMITIVES)) (datum->syntax variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) (define macro define (1 0) #f ()) (define-condition-type macro |\x0;define-condition-type~1pxGHH~1721| (0 1) #f (rnrs conditions)) (define-enumeration macro |\x0;define-enumeration~1pxGHH~7237| (0 1) #f (rnrs enums)) (define-record-type macro |\x0;define-record-type~1pxGHH~3336| (1 0) #f (larceny r7rs macros)) (define-syntax macro define-syntax (1 0) #f ()) (define-values macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) (delay macro |\x0;delay~1pxGHH~3736| (0) #f (larceny r7rs promises)) (delay-force macro |\x0;delay-force~1pxGHH~3752| (0) #f (larceny r7rs promises)) (delete-file variable delete-file (1 0) #f (larceny PRIMITIVES)) (denominator variable denominator (1 0) #f (larceny PRIMITIVES)) (digit-value variable |\x0;digit-value~1pxGHH~8989| (0) #f (scheme char)) (display variable display (1 0) #f (larceny PRIMITIVES)) (div variable div (0 1) #f (larceny PRIMITIVES)) (div-and-mod variable div-and-mod (0 1) #f (larceny PRIMITIVES)) (div0 variable div0 (0 1) #f (larceny PRIMITIVES)) (div0-and-mod0 variable div0-and-mod0 (0 1) #f (larceny PRIMITIVES)) (do macro |\x0;do~1pxGHH~3884| (1 0) #f (rnrs control)) (dynamic-wind variable dynamic-wind (1 0) #f (larceny PRIMITIVES)) (else macro |\x0;else~1pxGHH~572| (1 0) #f (core derived)) (emergency-exit variable emergency-exit (0) #f (larceny PRIMITIVES)) (endianness macro |\x0;endianness~1pxGHH~3825| (0 1) #f (rnrs bytevectors)) (enum-set->list variable enum-set->list (0 1) #f (larceny PRIMITIVES)) (enum-set-complement variable enum-set-complement (0 1) #f (larceny PRIMITIVES)) (enum-set-constructor variable enum-set-constructor (0 1) #f (larceny PRIMITIVES)) (enum-set-difference variable enum-set-difference (0 1) #f (larceny PRIMITIVES)) (enum-set-indexer variable enum-set-indexer (0 1) #f (larceny PRIMITIVES)) (enum-set-intersection variable enum-set-intersection (0 1) #f (larceny PRIMITIVES)) (enum-set-member? variable enum-set-member? (0 1) #f (larceny PRIMITIVES)) (enum-set-projection variable enum-set-projection (0 1) #f (larceny PRIMITIVES)) (enum-set-subset? variable enum-set-subset? (0 1) #f (larceny PRIMITIVES)) (enum-set-union variable enum-set-union (0 1) #f (larceny PRIMITIVES)) (enum-set-universe variable enum-set-universe (0 1) #f (larceny PRIMITIVES)) (enum-set=? variable enum-set=? (0 1) #f (larceny PRIMITIVES)) (environment variable ex:environment (0) #f (larceny PRIMITIVES)) (eof-object variable eof-object (1 0) #f (larceny PRIMITIVES)) (eof-object? variable eof-object? (1 0) #f (larceny PRIMITIVES)) (eol-style macro |\x0;eol-style~1pxGHH~4394| (0 1) #f (rnrs io ports)) (eq? variable eq? (1 0) #f (larceny PRIMITIVES)) (equal-hash variable equal-hash (0 1) #f (larceny PRIMITIVES)) (equal? variable equal? (1 0) #f (larceny PRIMITIVES)) (eqv? variable eqv? (1 0) #f (larceny PRIMITIVES)) (error variable error (1 0) #f (larceny PRIMITIVES)) (error-handling-mode macro |\x0;error-handling-mode~1pxGHH~4409| (0 1) #f (rnrs io ports)) (error-object-irritants variable error-object-irritants (0) #f (larceny PRIMITIVES)) (error-object-message variable error-object-message (0) #f (larceny PRIMITIVES)) (error-object? variable error-object? (0) #f (larceny PRIMITIVES)) (error? variable error? (0 1) #f (larceny PRIMITIVES)) (eval variable ex:eval (0) #f (larceny PRIMITIVES)) (even? variable even? (1 0) #f (larceny PRIMITIVES)) (exact variable exact (1 0) #f (larceny PRIMITIVES)) (exact->inexact variable exact->inexact (0) #f (larceny PRIMITIVES)) (exact-integer-sqrt variable exact-integer-sqrt (1 0) #f (larceny PRIMITIVES)) (exact-integer? variable exact-integer? (0) #f (larceny PRIMITIVES)) (exact? variable exact? (1 0) #f (larceny PRIMITIVES)) (exists variable exists (0 1) #f (larceny PRIMITIVES)) (exit variable exit (1 0) #f (larceny PRIMITIVES)) (exp variable exp (1 0) #f (larceny PRIMITIVES)) (expt variable expt (1 0) #f (larceny PRIMITIVES)) (features variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) (file-error? variable file-error? (0) #f (larceny PRIMITIVES)) (file-exists? variable file-exists? (1 0) #f (larceny PRIMITIVES)) (file-options variable file-options (0 1) #f (larceny PRIMITIVES)) (filter variable filter (0 1) #f (larceny PRIMITIVES)) (find variable find (0 1) #f (larceny PRIMITIVES)) (finite? variable finite? (1 0) #f (larceny PRIMITIVES)) (fixnum->flonum variable fixnum->flonum (0 1) #f (larceny PRIMITIVES)) (fixnum-width variable fixnum-width (0 1) #f (larceny PRIMITIVES)) (fixnum? variable fixnum? (0 1) #f (larceny PRIMITIVES)) (fl* variable fl* (0 1) #f (larceny PRIMITIVES)) (fl+ variable fl+ (0 1) #f (larceny PRIMITIVES)) (fl- variable fl- (0 1) #f (larceny PRIMITIVES)) (fl/ variable fl/ (0 1) #f (larceny PRIMITIVES)) (fl<=? variable fl<=? (0 1) #f (larceny PRIMITIVES)) (fl<? variable fl<? (0 1) #f (larceny PRIMITIVES)) (fl=? variable fl=? (0 1) #f (larceny PRIMITIVES)) (fl>=? variable fl>=? (0 1) #f (larceny PRIMITIVES)) (fl>? variable fl>? (0 1) #f (larceny PRIMITIVES)) (flabs variable flabs (0 1) #f (larceny PRIMITIVES)) (flacos variable flacos (0 1) #f (larceny PRIMITIVES)) (flasin variable flasin (0 1) #f (larceny PRIMITIVES)) (flatan variable flatan (0 1) #f (larceny PRIMITIVES)) (flceiling variable flceiling (0 1) #f (larceny PRIMITIVES)) (flcos variable flcos (0 1) #f (larceny PRIMITIVES)) (fldenominator variable fldenominator (0 1) #f (larceny PRIMITIVES)) (fldiv variable fldiv (0 1) #f (larceny PRIMITIVES)) (fldiv-and-mod variable fldiv-and-mod (0 1) #f (larceny PRIMITIVES)) (fldiv0 variable fldiv0 (0 1) #f (larceny PRIMITIVES)) (fldiv0-and-mod0 variable fldiv0-and-mod0 (0 1) #f (larceny PRIMITIVES)) (fleven? variable fleven? (0 1) #f (larceny PRIMITIVES)) (flexp variable flexp (0 1) #f (larceny PRIMITIVES)) (flexpt variable flexpt (0 1) #f (larceny PRIMITIVES)) (flfinite? variable flfinite? (0 1) #f (larceny PRIMITIVES)) (flfloor variable flfloor (0 1) #f (larceny PRIMITIVES)) (flinfinite? variable flinfinite? (0 1) #f (larceny PRIMITIVES)) (flinteger? variable flinteger? (0 1) #f (larceny PRIMITIVES)) (fllog variable fllog (0 1) #f (larceny PRIMITIVES)) (flmax variable flmax (0 1) #f (larceny PRIMITIVES)) (flmin variable flmin (0 1) #f (larceny PRIMITIVES)) (flmod variable flmod (0 1) #f (larceny PRIMITIVES)) (flmod0 variable flmod0 (0 1) #f (larceny PRIMITIVES)) (flnan? variable flnan? (0 1) #f (larceny PRIMITIVES)) (flnegative? variable flnegative? (0 1) #f (larceny PRIMITIVES)) (flnumerator variable flnumerator (0 1) #f (larceny PRIMITIVES)) (flodd? variable flodd? (0 1) #f (larceny PRIMITIVES)) (flonum? variable flonum? (0 1) #f (larceny PRIMITIVES)) (floor variable floor (1 0) #f (larceny PRIMITIVES)) (floor-quotient variable floor-quotient (0) #f (larceny PRIMITIVES)) (floor-remainder variable floor-remainder (0) #f (larceny PRIMITIVES)) (floor/ variable floor/ (0) #f (larceny PRIMITIVES)) (flpositive? variable flpositive? (0 1) #f (larceny PRIMITIVES)) (flround variable flround (0 1) #f (larceny PRIMITIVES)) (flsin variable flsin (0 1) #f (larceny PRIMITIVES)) (flsqrt variable flsqrt (0 1) #f (larceny PRIMITIVES)) (fltan variable fltan (0 1) #f (larceny PRIMITIVES)) (fltruncate variable fltruncate (0 1) #f (larceny PRIMITIVES)) (flush-output-port variable flush-output-port (1 0) #f (larceny PRIMITIVES)) (flzero? variable flzero? (0 1) #f (larceny PRIMITIVES)) (fold-left variable fold-left (0 1) #f (larceny PRIMITIVES)) (fold-right variable |\x0;fold-right~1pxGHH~1537| (0 1) #f (rnrs lists)) (for-all variable for-all (0 1) #f (larceny PRIMITIVES)) (for-each variable |\x0;for-each~1pxGHH~1464| (1 0) #f (rnrs base)) (force variable |\x0;force~1pxGHH~3751| (0) #f (larceny r7rs promises)) (free-identifier=? variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) (fx* variable fx* (0 1) #f (larceny PRIMITIVES)) (fx*/carry variable fx*/carry (0 1) #f (larceny PRIMITIVES)) (fx+ variable fx+ (0 1) #f (larceny PRIMITIVES)) (fx+/carry variable fx+/carry (0 1) #f (larceny PRIMITIVES)) (fx- variable fx- (0 1) #f (larceny PRIMITIVES)) (fx-/carry variable fx-/carry (0 1) #f (larceny PRIMITIVES)) (fx<=? variable fx<=? (0 1) #f (larceny PRIMITIVES)) (fx<? variable fx<? (0 1) #f (larceny PRIMITIVES)) (fx=? variable fx=? (0 1) #f (larceny PRIMITIVES)) (fx>=? variable fx>=? (0 1) #f (larceny PRIMITIVES)) (fx>? variable fx>? (0 1) #f (larceny PRIMITIVES)) (fxand variable fxand (0 1) #f (larceny PRIMITIVES)) (fxarithmetic-shift variable fxarithmetic-shift (0 1) #f (larceny PRIMITIVES)) (fxarithmetic-shift-left variable fxarithmetic-shift-left (0 1) #f (larceny PRIMITIVES)) (fxarithmetic-shift-right variable fxarithmetic-shift-right (0 1) #f (larceny PRIMITIVES)) (fxbit-count variable fxbit-count (0 1) #f (larceny PRIMITIVES)) (fxbit-field variable fxbit-field (0 1) #f (larceny PRIMITIVES)) (fxbit-set? variable fxbit-set? (0 1) #f (larceny PRIMITIVES)) (fxcopy-bit variable fxcopy-bit (0 1) #f (larceny PRIMITIVES)) (fxcopy-bit-field variable fxcopy-bit-field (0 1) #f (larceny PRIMITIVES)) (fxdiv variable fxdiv (0 1) #f (larceny PRIMITIVES)) (fxdiv-and-mod variable fxdiv-and-mod (0 1) #f (larceny PRIMITIVES)) (fxdiv0 variable fxdiv0 (0 1) #f (larceny PRIMITIVES)) (fxdiv0-and-mod0 variable fxdiv0-and-mod0 (0 1) #f (larceny PRIMITIVES)) (fxeven? variable fxeven? (0 1) #f (larceny PRIMITIVES)) (fxfirst-bit-set variable fxfirst-bit-set (0 1) #f (larceny PRIMITIVES)) (fxif variable fxif (0 1) #f (larceny PRIMITIVES)) (fxior variable fxior (0 1) #f (larceny PRIMITIVES)) (fxlength variable fxlength (0 1) #f (larceny PRIMITIVES)) (fxmax variable fxmax (0 1) #f (larceny PRIMITIVES)) (fxmin variable fxmin (0 1) #f (larceny PRIMITIVES)) (fxmod variable fxmod (0 1) #f (larceny PRIMITIVES)) (fxmod0 variable fxmod0 (0 1) #f (larceny PRIMITIVES)) (fxnegative? variable fxnegative? (0 1) #f (larceny PRIMITIVES)) (fxnot variable fxnot (0 1) #f (larceny PRIMITIVES)) (fxodd? variable fxodd? (0 1) #f (larceny PRIMITIVES)) (fxpositive? variable fxpositive? (0 1) #f (larceny PRIMITIVES)) (fxreverse-bit-field variable fxreverse-bit-field (0 1) #f (larceny PRIMITIVES)) (fxrotate-bit-field variable fxrotate-bit-field (0 1) #f (larceny PRIMITIVES)) (fxxor variable fxxor (0 1) #f (larceny PRIMITIVES)) (fxzero? variable fxzero? (0 1) #f (larceny PRIMITIVES)) (gcd variable gcd (1 0) #f (larceny PRIMITIVES)) (generate-temporaries variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) (get-bytevector-all variable get-bytevector-all (0 1) #f (larceny PRIMITIVES)) (get-bytevector-n variable get-bytevector-n (0 1) #f (larceny PRIMITIVES)) (get-bytevector-n! variable get-bytevector-n! (0 1) #f (larceny PRIMITIVES)) (get-bytevector-some variable get-bytevector-some (0 1) #f (larceny PRIMITIVES)) (get-char variable get-char (0 1) #f (larceny PRIMITIVES)) (get-datum variable get-datum (0 1) #f (larceny PRIMITIVES)) (get-environment-variable variable |\x0;get-environment-variable~1pxGHH~7230| (0) #f (scheme process-context)) (get-environment-variables variable get-environment-variables (0) #f (larceny PRIMITIVES)) (get-line variable get-line (0 1) #f (larceny PRIMITIVES)) (get-output-bytevector variable get-output-bytevector (0) #f (larceny PRIMITIVES)) (get-output-string variable get-output-string (0) #f (larceny PRIMITIVES)) (get-string-all variable get-string-all (0 1) #f (larceny PRIMITIVES)) (get-string-n variable get-string-n (0 1) #f (larceny PRIMITIVES)) (get-string-n! variable get-string-n! (0 1) #f (larceny PRIMITIVES)) (get-u8 variable get-u8 (0 1) #f (larceny PRIMITIVES)) (greatest-fixnum variable greatest-fixnum (0 1) #f (larceny PRIMITIVES)) (guard macro |\x0;guard~1pxGHH~1548| (1 0) #f (rnrs exceptions)) (hashtable-clear! variable hashtable-clear! (0 1) #f (larceny PRIMITIVES)) (hashtable-contains? variable hashtable-contains? (0 1) #f (larceny PRIMITIVES)) (hashtable-copy variable hashtable-copy (0 1) #f (larceny PRIMITIVES)) (hashtable-delete! variable hashtable-delete! (0 1) #f (larceny PRIMITIVES)) (hashtable-entries variable hashtable-entries (0 1) #f (larceny PRIMITIVES)) (hashtable-equivalence-function variable hashtable-equivalence-function (0 1) #f (larceny PRIMITIVES)) (hashtable-hash-function variable hashtable-hash-function (0 1) #f (larceny PRIMITIVES)) (hashtable-keys variable hashtable-keys (0 1) #f (larceny PRIMITIVES)) (hashtable-mutable? variable hashtable-mutable? (0 1) #f (larceny PRIMITIVES)) (hashtable-ref variable hashtable-ref (0 1) #f (larceny PRIMITIVES)) (hashtable-set! variable hashtable-set! (0 1) #f (larceny PRIMITIVES)) (hashtable-size variable hashtable-size (0 1) #f (larceny PRIMITIVES)) (hashtable-update! variable hashtable-update! (0 1) #f (larceny PRIMITIVES)) (hashtable? variable hashtable? (0 1) #f (larceny PRIMITIVES)) (i/o-decoding-error? variable i/o-decoding-error? (0 1) #f (larceny PRIMITIVES)) (i/o-encoding-error-char variable i/o-encoding-error-char (0 1) #f (larceny PRIMITIVES)) (i/o-encoding-error? variable i/o-encoding-error? (0 1) #f (larceny PRIMITIVES)) (i/o-error-filename variable i/o-error-filename (0 1) #f (larceny PRIMITIVES)) (i/o-error-port variable i/o-error-port (0 1) #f (larceny PRIMITIVES)) (i/o-error-position variable i/o-error-position (0 1) #f (larceny PRIMITIVES)) (i/o-error? variable i/o-error? (0 1) #f (larceny PRIMITIVES)) (i/o-file-already-exists-error? variable i/o-file-already-exists-error? (0 1) #f (larceny PRIMITIVES)) (i/o-file-does-not-exist-error? variable i/o-file-does-not-exist-error? (0 1) #f (larceny PRIMITIVES)) (i/o-file-is-read-only-error? variable i/o-file-is-read-only-error? (0 1) #f (larceny PRIMITIVES)) (i/o-file-protection-error? variable i/o-file-protection-error? (0 1) #f (larceny PRIMITIVES)) (i/o-filename-error? variable i/o-filename-error? (0 1) #f (larceny PRIMITIVES)) (i/o-invalid-position-error? variable i/o-invalid-position-error? (0 1) #f (larceny PRIMITIVES)) (i/o-port-error? variable i/o-port-error? (0 1) #f (larceny PRIMITIVES)) (i/o-read-error? variable i/o-read-error? (0 1) #f (larceny PRIMITIVES)) (i/o-write-error? variable i/o-write-error? (0 1) #f (larceny PRIMITIVES)) (identifier-syntax macro |\x0;identifier-syntax~1pxGHH~577| (0 1) #f (core identifier-syntax)) (identifier? variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) (if macro if (1 0) #f ()) (imag-part variable imag-part (1 0) #f (larceny PRIMITIVES)) (implementation-restriction-violation? variable implementation-restriction-violation? (0 1) #f (larceny PRIMITIVES)) (include macro include (0) #f ()) (include-ci macro include-ci (0) #f ()) (inexact variable inexact (1 0) #f (larceny PRIMITIVES)) (inexact->exact variable inexact->exact (0) #f (larceny PRIMITIVES)) (inexact? variable inexact? (1 0) #f (larceny PRIMITIVES)) (infinite? variable infinite? (1 0) #f (larceny PRIMITIVES)) (input-port-open? variable input-port-open? (0) #f (larceny PRIMITIVES)) (input-port? variable input-port? (1 0) #f (larceny PRIMITIVES)) (integer->char variable integer->char (1 0) #f (larceny PRIMITIVES)) (integer-valued? variable integer-valued? (0 1) #f (larceny PRIMITIVES)) (integer? variable integer? (1 0) #f (larceny PRIMITIVES)) (interaction-environment variable |\x0;interaction-environment~1pxGHH~9046| (0) #f (scheme repl)) (irritants-condition? variable irritants-condition? (0 1) #f (larceny PRIMITIVES)) (jiffies-per-second variable |\x0;jiffies-per-second~1pxGHH~3654| (0) #f (larceny r7rs primitives patches)) (lambda macro lambda (1 0) #f ()) (latin-1-codec variable latin-1-codec (0 1) #f (larceny PRIMITIVES)) (lcm variable lcm (1 0) #f (larceny PRIMITIVES)) (least-fixnum variable least-fixnum (0 1) #f (larceny PRIMITIVES)) (length variable length (1 0) #f (larceny PRIMITIVES)) (let macro |\x0;let~1pxGHH~144| (1 0) #f (core let)) (let* macro |\x0;let*~1pxGHH~241| (1 0) #f (core derived)) (let*-values macro |\x0;let*-values~1pxGHH~1428| (1 0) #f (core let-values)) (let-syntax macro |\x0;let-syntax~1pxGHH~1481| (1 0) #f (rnrs base)) (let-values macro |\x0;let-values~1pxGHH~1288| (1 0) #f (core let-values)) (letrec macro |\x0;letrec~1pxGHH~192| (1 0) #f (core let)) (letrec* macro |\x0;letrec*~1pxGHH~216| (1 0) #f (core let)) (letrec-syntax macro |\x0;letrec-syntax~1pxGHH~1507| (1 0) #f (rnrs base)) (lexical-violation? variable lexical-violation? (0 1) #f (larceny PRIMITIVES)) (list variable list (1 0) #f (larceny PRIMITIVES)) (list->string variable list->string (1 0) #f (larceny PRIMITIVES)) (list->vector variable list->vector (1 0) #f (larceny PRIMITIVES)) (list-copy variable list-copy (0) #f (larceny PRIMITIVES)) (list-ref variable list-ref (1 0) #f (larceny PRIMITIVES)) (list-set! variable list-set! (0) #f (larceny PRIMITIVES)) (list-sort variable list-sort (0 1) #f (larceny PRIMITIVES)) (list-tail variable list-tail (1 0) #f (larceny PRIMITIVES)) (list? variable list? (1 0) #f (larceny PRIMITIVES)) (load variable load-r6rs-library-or-program (0) #f (larceny PRIMITIVES)) (log variable log (1 0) #f (larceny PRIMITIVES)) (lookahead-char variable lookahead-char (0 1) #f (larceny PRIMITIVES)) (lookahead-u8 variable lookahead-u8 (0 1) #f (larceny PRIMITIVES)) (magnitude variable magnitude (1 0) #f (larceny PRIMITIVES)) (make-assertion-violation variable make-assertion-violation (0 1) #f (larceny PRIMITIVES)) (make-bytevector variable make-bytevector (1 0) #f (larceny PRIMITIVES)) (make-custom-binary-input-port variable make-custom-binary-input-port (0 1) #f (larceny PRIMITIVES)) (make-custom-binary-input/output-port variable make-custom-binary-input/output-port (0 1) #f (larceny PRIMITIVES)) (make-custom-binary-output-port variable make-custom-binary-output-port (0 1) #f (larceny PRIMITIVES)) (make-custom-textual-input-port variable make-custom-textual-input-port (0 1) #f (larceny PRIMITIVES)) (make-custom-textual-input/output-port variable make-custom-textual-input/output-port (0 1) #f (larceny PRIMITIVES)) (make-custom-textual-output-port variable make-custom-textual-output-port (0 1) #f (larceny PRIMITIVES)) (make-enumeration variable make-enumeration (0 1) #f (larceny PRIMITIVES)) (make-eq-hashtable variable make-eq-hashtable (0 1) #f (larceny PRIMITIVES)) (make-eqv-hashtable variable make-eqv-hashtable (0 1) #f (larceny PRIMITIVES)) (make-error variable make-error (0 1) #f (larceny PRIMITIVES)) (make-hashtable variable |\x0;make-hashtable~1pxGHH~7276| (0 1) #f (rnrs hashtables)) (make-i/o-decoding-error variable make-i/o-decoding-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-encoding-error variable make-i/o-encoding-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-error variable make-i/o-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-file-already-exists-error variable make-i/o-file-already-exists-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-file-does-not-exist-error variable make-i/o-file-does-not-exist-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-file-is-read-only-error variable make-i/o-file-is-read-only-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-file-protection-error variable make-i/o-file-protection-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-filename-error variable make-i/o-filename-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-invalid-position-error variable make-i/o-invalid-position-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-port-error variable make-i/o-port-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-read-error variable make-i/o-read-error (0 1) #f (larceny PRIMITIVES)) (make-i/o-write-error variable make-i/o-write-error (0 1) #f (larceny PRIMITIVES)) (make-implementation-restriction-violation variable make-implementation-restriction-violation (0 1) #f (larceny PRIMITIVES)) (make-irritants-condition variable make-irritants-condition (0 1) #f (larceny PRIMITIVES)) (make-lexical-violation variable make-lexical-violation (0 1) #f (larceny PRIMITIVES)) (make-list variable make-list (0) #f (larceny PRIMITIVES)) (make-message-condition variable make-message-condition (0 1) #f (larceny PRIMITIVES)) (make-no-infinities-violation variable make-no-infinities-violation (0 1) #f (larceny PRIMITIVES)) (make-no-nans-violation variable make-no-nans-violation (0 1) #f (larceny PRIMITIVES)) (make-non-continuable-violation variable make-non-continuable-violation (0 1) #f (larceny PRIMITIVES)) (make-parameter variable make-parameter (0) #f (larceny PRIMITIVES)) (make-polar variable make-polar (1 0) #f (larceny PRIMITIVES)) (make-promise variable |\x0;make-promise~1pxGHH~3716| (0) #f (larceny r7rs promises)) (make-record-constructor-descriptor variable make-record-constructor-descriptor (0 1) #f (larceny PRIMITIVES)) (make-record-type-descriptor variable make-record-type-descriptor (0 1) #f (larceny PRIMITIVES)) (make-rectangular variable make-rectangular (1 0) #f (larceny PRIMITIVES)) (make-serious-condition variable make-serious-condition (0 1) #f (larceny PRIMITIVES)) (make-string variable make-string (1 0) #f (larceny PRIMITIVES)) (make-syntax-violation variable make-syntax-violation (0 1) #f (larceny PRIMITIVES)) (make-transcoder variable make-transcoder (0 1) #f (larceny PRIMITIVES)) (make-undefined-violation variable make-undefined-violation (0 1) #f (larceny PRIMITIVES)) (make-variable-transformer variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) (make-vector variable make-vector (1 0) #f (larceny PRIMITIVES)) (make-violation variable make-violation (0 1) #f (larceny PRIMITIVES)) (make-warning variable make-warning (0 1) #f (larceny PRIMITIVES)) (make-who-condition variable make-who-condition (0 1) #f (larceny PRIMITIVES)) (map variable |\x0;map~1pxGHH~1463| (1 0) #f (rnrs base)) (max variable max (1 0) #f (larceny PRIMITIVES)) (member variable |\x0;member~1pxGHH~1539| (1 0) #f (rnrs lists)) (memp variable memp (0 1) #f (larceny PRIMITIVES)) (memq variable memq (1 0) #f (larceny PRIMITIVES)) (memv variable memv (1 0) #f (larceny PRIMITIVES)) (message-condition? variable message-condition? (0 1) #f (larceny PRIMITIVES)) (min variable min (1 0) #f (larceny PRIMITIVES)) (mod variable mod (0 1) #f (larceny PRIMITIVES)) (mod0 variable mod0 (0 1) #f (larceny PRIMITIVES)) (modulo variable modulo (0) #f (larceny PRIMITIVES)) (nan? variable nan? (1 0) #f (larceny PRIMITIVES)) (native-endianness variable native-endianness (0 1) #f (larceny PRIMITIVES)) (native-eol-style variable native-eol-style (0 1) #f (larceny PRIMITIVES)) (native-transcoder variable native-transcoder (0 1) #f (larceny PRIMITIVES)) (negative? variable negative? (1 0) #f (larceny PRIMITIVES)) (newline variable newline (1 0) #f (larceny PRIMITIVES)) (no-create variable no-create (0 1) #f (larceny PRIMITIVES)) (no-fail variable no-fail (0 1) #f (larceny PRIMITIVES)) (no-infinities-violation? variable no-infinities-violation? (0 1) #f (larceny PRIMITIVES)) (no-nans-violation? variable no-nans-violation? (0 1) #f (larceny PRIMITIVES)) (no-truncate variable no-truncate (0 1) #f (larceny PRIMITIVES)) (non-continuable-violation? variable non-continuable-violation? (0 1) #f (larceny PRIMITIVES)) (not variable not (1 0) #f (larceny PRIMITIVES)) (null-environment variable |\x0;null-environment~1pxGHH~4440| (0) #f (rnrs r5rs)) (null? variable null? (1 0) #f (larceny PRIMITIVES)) (number->string variable number->string (1 0) #f (larceny PRIMITIVES)) (number? variable number? (1 0) #f (larceny PRIMITIVES)) (numerator variable numerator (1 0) #f (larceny PRIMITIVES)) (odd? variable odd? (1 0) #f (larceny PRIMITIVES)) (open-binary-input-file variable open-file-input-port (0) #f (larceny PRIMITIVES)) (open-binary-output-file variable open-file-output-port (0) #f (larceny PRIMITIVES)) (open-bytevector-input-port variable open-bytevector-input-port (0 1) #f (larceny PRIMITIVES)) (open-bytevector-output-port variable open-bytevector-output-port (0 1) #f (larceny PRIMITIVES)) (open-file-input-port variable open-file-input-port (0 1) #f (larceny PRIMITIVES)) (open-file-input/output-port variable open-file-input/output-port (0 1) #f (larceny PRIMITIVES)) (open-file-output-port variable open-file-output-port (0 1) #f (larceny PRIMITIVES)) (open-input-bytevector variable open-input-bytevector (0) #f (larceny PRIMITIVES)) (open-input-file variable open-input-file (1 0) #f (larceny PRIMITIVES)) (open-input-string variable open-input-string (0) #f (larceny PRIMITIVES)) (open-output-bytevector variable open-output-bytevector (0) #f (larceny PRIMITIVES)) (open-output-file variable open-output-file (1 0) #f (larceny PRIMITIVES)) (open-output-string variable open-output-string (0) #f (larceny PRIMITIVES)) (open-string-input-port variable open-string-input-port (0 1) #f (larceny PRIMITIVES)) (open-string-output-port variable open-string-output-port (0 1) #f (larceny PRIMITIVES)) (or macro or (1 0) #f ()) (output-port-buffer-mode variable output-port-buffer-mode (0 1) #f (larceny PRIMITIVES)) (output-port-open? variable output-port-open? (0) #f (larceny PRIMITIVES)) (output-port? variable output-port? (1 0) #f (larceny PRIMITIVES)) (pair? variable pair? (1 0) #f (larceny PRIMITIVES)) (parameterize macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) (partition variable partition (0 1) #f (larceny PRIMITIVES)) (peek-char variable peek-char (1 0) #f (larceny PRIMITIVES)) (peek-u8 variable peek-u8 (0) #f (larceny PRIMITIVES)) (port-eof? variable port-eof? (0 1) #f (larceny PRIMITIVES)) (port-has-port-position? variable port-has-port-position? (0 1) #f (larceny PRIMITIVES)) (port-has-set-port-position!? variable port-has-set-port-position!? (0 1) #f (larceny PRIMITIVES)) (port-position variable port-position (0 1) #f (larceny PRIMITIVES)) (port-transcoder variable port-transcoder (0 1) #f (larceny PRIMITIVES)) (port? variable port? (1 0) #f (larceny PRIMITIVES)) (positive? variable positive? (1 0) #f (larceny PRIMITIVES)) (procedure? variable procedure? (1 0) #f (larceny PRIMITIVES)) (promise? variable |\x0;promise?~1pxGHH~3713| (0) #f (larceny r7rs promises)) (put-bytevector variable put-bytevector (0 1) #f (larceny PRIMITIVES)) (put-char variable put-char (0 1) #f (larceny PRIMITIVES)) (put-datum variable put-datum (0 1) #f (larceny PRIMITIVES)) (put-string variable put-string (0 1) #f (larceny PRIMITIVES)) (put-u8 variable put-u8 (0 1) #f (larceny PRIMITIVES)) (quasiquote macro |\x0;quasiquote~1pxGHH~850| (1 0) #f (core quasiquote)) (quasisyntax macro |\x0;quasisyntax~1pxGHH~623| (0 1) #f (core quasisyntax)) (quote macro quote (1 0) #f ()) (quotient variable quotient (0) #f (larceny PRIMITIVES)) (raise variable raise (1 0) #f (larceny PRIMITIVES)) (raise-continuable variable raise-continuable (1 0) #f (larceny PRIMITIVES)) (rational-valued? variable rational-valued? (0 1) #f (larceny PRIMITIVES)) (rational? variable rational? (1 0) #f (larceny PRIMITIVES)) (rationalize variable rationalize (1 0) #f (larceny PRIMITIVES)) (read variable read (1 0) #f (larceny PRIMITIVES)) (read-bytevector variable read-bytevector (0) #f (larceny PRIMITIVES)) (read-bytevector! variable read-bytevector! (0) #f (larceny PRIMITIVES)) (read-char variable read-char (1 0) #f (larceny PRIMITIVES)) (read-error? variable read-error? (0) #f (larceny PRIMITIVES)) (read-line variable read-line (0) #f (larceny PRIMITIVES)) (read-string variable read-string (0) #f (larceny PRIMITIVES)) (read-u8 variable read-u8 (0) #f (larceny PRIMITIVES)) (real->flonum variable real->flonum (0 1) #f (larceny PRIMITIVES)) (real-part variable real-part (1 0) #f (larceny PRIMITIVES)) (real-valued? variable real-valued? (0 1) #f (larceny PRIMITIVES)) (real? variable real? (1 0) #f (larceny PRIMITIVES)) (record-accessor variable record-accessor (0 1) #f (larceny PRIMITIVES)) (record-constructor variable record-constructor (0 1) #f (larceny PRIMITIVES)) (record-constructor-descriptor variable |\x0;record-constructor-descriptor~1pxGHH~3324| (0 1) #f (rnrs records syntactic original)) (record-field-mutable? variable record-field-mutable? (0 1) #f (larceny PRIMITIVES)) (record-mutator variable record-mutator (0 1) #f (larceny PRIMITIVES)) (record-predicate variable record-predicate (0 1) #f (larceny PRIMITIVES)) (record-rtd variable record-rtd (0 1) #f (larceny PRIMITIVES)) (record-type-descriptor variable |\x0;record-type-descriptor~1pxGHH~3323| (0 1) #f (rnrs records syntactic original)) (record-type-descriptor? variable record-type-descriptor? (0 1) #f (larceny PRIMITIVES)) (record-type-field-names variable record-type-field-names (0 1) #f (larceny PRIMITIVES)) (record-type-generative? variable record-type-generative? (0 1) #f (larceny PRIMITIVES)) (record-type-name variable record-type-name (0 1) #f (larceny PRIMITIVES)) (record-type-opaque? variable record-type-opaque? (0 1) #f (larceny PRIMITIVES)) (record-type-parent variable record-type-parent (0 1) #f (larceny PRIMITIVES)) (record-type-sealed? variable record-type-sealed? (0 1) #f (larceny PRIMITIVES)) (record-type-uid variable record-type-uid (0 1) #f (larceny PRIMITIVES)) (record? variable record? (0 1) #f (larceny PRIMITIVES)) (remainder variable remainder (0) #f (larceny PRIMITIVES)) (remp variable remp (0 1) #f (larceny PRIMITIVES)) (remq variable remq (0 1) #f (larceny PRIMITIVES)) (remv variable remv (0 1) #f (larceny PRIMITIVES)) (reverse variable reverse (1 0) #f (larceny PRIMITIVES)) (round variable round (1 0) #f (larceny PRIMITIVES)) (scheme-report-environment variable |\x0;scheme-report-environment~1pxGHH~4439| (0) #f (rnrs r5rs)) (serious-condition? variable serious-condition? (0 1) #f (larceny PRIMITIVES)) (set! macro set! (2 1 0) #f ()) (set-car! variable set-car! (0) #f (larceny PRIMITIVES)) (set-cdr! variable set-cdr! (0) #f (larceny PRIMITIVES)) (set-port-position! variable set-port-position! (0 1) #f (larceny PRIMITIVES)) (simple-conditions variable simple-conditions (0 1) #f (larceny PRIMITIVES)) (sin variable sin (1 0) #f (larceny PRIMITIVES)) (sint-list->bytevector variable sint-list->bytevector (0 1) #f (larceny PRIMITIVES)) (sqrt variable sqrt (1 0) #f (larceny PRIMITIVES)) (square variable square (0) #f (larceny PRIMITIVES)) (standard-error-port variable standard-error-port (0 1) #f (larceny PRIMITIVES)) (standard-input-port variable standard-input-port (0 1) #f (larceny PRIMITIVES)) (standard-output-port variable standard-output-port (0 1) #f (larceny PRIMITIVES)) (string variable string (1 0) #f (larceny PRIMITIVES)) (string->bytevector variable string->bytevector (0 1) #f (larceny PRIMITIVES)) (string->list variable string->list (1 0) #f (larceny PRIMITIVES)) (string->number variable string->number (1 0) #f (larceny PRIMITIVES)) (string->symbol variable string->symbol (1 0) #f (larceny PRIMITIVES)) (string->utf16 variable string->utf16 (0 1) #f (larceny PRIMITIVES)) (string->utf32 variable string->utf32 (0 1) #f (larceny PRIMITIVES)) (string->utf8 variable string->utf8 (1 0) #f (larceny PRIMITIVES)) (string->vector variable string->vector (0) #f (larceny PRIMITIVES)) (string-append variable string-append (1 0) #f (larceny PRIMITIVES)) (string-ci-hash variable string-ci-hash (0 1) #f (larceny PRIMITIVES)) (string-ci<=? variable string-ci<=? (1 0) #f (larceny PRIMITIVES)) (string-ci<? variable string-ci<? (1 0) #f (larceny PRIMITIVES)) (string-ci=? variable string-ci=? (1 0) #f (larceny PRIMITIVES)) (string-ci>=? variable string-ci>=? (1 0) #f (larceny PRIMITIVES)) (string-ci>? variable string-ci>? (1 0) #f (larceny PRIMITIVES)) (string-copy variable string-copy (1 0) #f (larceny PRIMITIVES)) (string-copy! variable string-copy! (0) #f (larceny PRIMITIVES)) (string-downcase variable string-downcase (1 0) #f (larceny PRIMITIVES)) (string-fill! variable string-fill! (0) #f (larceny PRIMITIVES)) (string-foldcase variable string-foldcase (1 0) #f (larceny PRIMITIVES)) (string-for-each variable string-for-each (1 0) #f (larceny PRIMITIVES)) (string-hash variable string-hash (0 1) #f (larceny PRIMITIVES)) (string-length variable string-length (1 0) #f (larceny PRIMITIVES)) (string-map variable string-map (0) #f (larceny PRIMITIVES)) (string-normalize-nfc variable string-normalize-nfc (0 1) #f (larceny PRIMITIVES)) (string-normalize-nfd variable string-normalize-nfd (0 1) #f (larceny PRIMITIVES)) (string-normalize-nfkc variable string-normalize-nfkc (0 1) #f (larceny PRIMITIVES)) (string-normalize-nfkd variable string-normalize-nfkd (0 1) #f (larceny PRIMITIVES)) (string-ref variable string-ref (1 0) #f (larceny PRIMITIVES)) (string-set! variable string-set! (0) #f (larceny PRIMITIVES)) (string-titlecase variable string-titlecase (0 1) #f (larceny PRIMITIVES)) (string-upcase variable string-upcase (1 0) #f (larceny PRIMITIVES)) (string<=? variable string<=? (1 0) #f (larceny PRIMITIVES)) (string<? variable string<? (1 0) #f (larceny PRIMITIVES)) (string=? variable string=? (1 0) #f (larceny PRIMITIVES)) (string>=? variable string>=? (1 0) #f (larceny PRIMITIVES)) (string>? variable string>? (1 0) #f (larceny PRIMITIVES)) (string? variable string? (1 0) #f (larceny PRIMITIVES)) (substring variable substring (1 0) #f (larceny PRIMITIVES)) (symbol->string variable symbol->string (1 0) #f (larceny PRIMITIVES)) (symbol-hash variable symbol-hash (0 1) #f (larceny PRIMITIVES)) (symbol=? variable symbol=? (1 0) #f (larceny PRIMITIVES)) (symbol? variable symbol? (1 0) #f (larceny PRIMITIVES)) (syntax macro syntax (0 1) #f ()) (syntax->datum variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) (syntax-case macro syntax-case (0 1) #f ()) (syntax-error macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) (syntax-rules macro |\x0;syntax-rules~1pxGHH~58| (0 1) #f (core syntax-rules)) (syntax-violation variable |\x0;syntax-violation~1pxGHH~1758| (0 1) #f (rnrs syntax-case)) (syntax-violation-form variable syntax-violation-form (0 1) #f (larceny PRIMITIVES)) (syntax-violation-subform variable syntax-violation-subform (0 1) #f (larceny PRIMITIVES)) (syntax-violation? variable syntax-violation? (0 1) #f (larceny PRIMITIVES)) (tan variable tan (1 0) #f (larceny PRIMITIVES)) (textual-port? variable textual-port? (1 0) #f (larceny PRIMITIVES)) (transcoded-port variable transcoded-port (0 1) #f (larceny PRIMITIVES)) (transcoder-codec variable transcoder-codec (0 1) #f (larceny PRIMITIVES)) (transcoder-eol-style variable transcoder-eol-style (0 1) #f (larceny PRIMITIVES)) (transcoder-error-handling-mode variable transcoder-error-handling-mode (0 1) #f (larceny PRIMITIVES)) (truncate variable truncate (1 0) #f (larceny PRIMITIVES)) (truncate-quotient variable truncate-quotient (0) #f (larceny PRIMITIVES)) (truncate-remainder variable truncate-remainder (0) #f (larceny PRIMITIVES)) (truncate/ variable truncate/ (0) #f (larceny PRIMITIVES)) (u8-list->bytevector variable u8-list->bytevector (0 1) #f (larceny PRIMITIVES)) (u8-ready? variable u8-ready? (0) #f (larceny PRIMITIVES)) (uint-list->bytevector variable uint-list->bytevector (0 1) #f (larceny PRIMITIVES)) (undefined-violation? variable undefined-violation? (0 1) #f (larceny PRIMITIVES)) (unless macro |\x0;unless~1pxGHH~3865| (1 0) #f (rnrs control)) (unquote macro |\x0;unquote~1pxGHH~1279| (1 0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1pxGHH~1283| (1 0) #f (core quasiquote)) (unsyntax macro |\x0;unsyntax~1pxGHH~841| (0 1) #f (core quasisyntax)) (unsyntax-splicing macro |\x0;unsyntax-splicing~1pxGHH~845| (0 1) #f (core quasisyntax)) (utf-16-codec variable utf-16-codec (0 1) #f (larceny PRIMITIVES)) (utf-8-codec variable utf-8-codec (0 1) #f (larceny PRIMITIVES)) (utf16->string variable utf16->string (0 1) #f (larceny PRIMITIVES)) (utf32->string variable utf32->string (0 1) #f (larceny PRIMITIVES)) (utf8->string variable utf8->string (1 0) #f (larceny PRIMITIVES)) (values variable values (1 0) #f (larceny PRIMITIVES)) (vector variable vector (1 0) #f (larceny PRIMITIVES)) (vector->list variable vector->list (1 0) #f (larceny PRIMITIVES)) (vector->string variable vector->string (0) #f (larceny PRIMITIVES)) (vector-append variable vector-append (0) #f (larceny PRIMITIVES)) (vector-copy variable vector-copy (0) #f (larceny PRIMITIVES)) (vector-copy! variable vector-copy! (0) #f (larceny PRIMITIVES)) (vector-fill! variable vector-fill! (1 0) #f (larceny PRIMITIVES)) (vector-for-each variable vector-for-each (1 0) #f (larceny PRIMITIVES)) (vector-length variable vector-length (1 0) #f (larceny PRIMITIVES)) (vector-map variable vector-map (1 0) #f (larceny PRIMITIVES)) (vector-ref variable vector-ref (1 0) #f (larceny PRIMITIVES)) (vector-set! variable vector-set! (1 0) #f (larceny PRIMITIVES)) (vector-sort variable vector-sort (0 1) #f (larceny PRIMITIVES)) (vector-sort! variable vector-sort! (0 1) #f (larceny PRIMITIVES)) (vector? variable vector? (1 0) #f (larceny PRIMITIVES)) (violation? variable violation? (0 1) #f (larceny PRIMITIVES)) (warning? variable warning? (0 1) #f (larceny PRIMITIVES)) (when macro |\x0;when~1pxGHH~3846| (1 0) #f (rnrs control)) (who-condition? variable who-condition? (0 1) #f (larceny PRIMITIVES)) (with-exception-handler variable with-exception-handler (1 0) #f (larceny PRIMITIVES)) (with-input-from-file variable with-input-from-file (1 0) #f (larceny PRIMITIVES)) (with-output-to-file variable with-output-to-file (1 0) #f (larceny PRIMITIVES)) (with-syntax macro |\x0;with-syntax~1pxGHH~3| (0 1) #f (core with-syntax)) (write variable write (1 0) #f (larceny PRIMITIVES)) (write-bytevector variable write-bytevector (0) #f (larceny PRIMITIVES)) (write-char variable write-char (1 0) #f (larceny PRIMITIVES)) (write-shared variable write-shared (0) #f (larceny PRIMITIVES)) (write-simple variable write-simple (0) #f (larceny PRIMITIVES)) (write-string variable write-string (0) #f (larceny PRIMITIVES)) (write-u8 variable write-u8 (0) #f (larceny PRIMITIVES)) (zero? variable zero? (1 0) #f (larceny PRIMITIVES)) (r6rs:bytevector-copy! variable |\x0;bytevector-copy!~1pxGHH~3824| (0 1) #f (rnrs bytevectors)) (r6rs:remove variable |\x0;remove~1pxGHH~1538| (0 1) #f (rnrs lists)) (r7rs:let-syntax macro |\x0;r7rs:let-syntax~1pxGHH~24022| (0) #f (larceny r7r6)) (r7rs:letrec-syntax macro |\x0;r7rs:letrec-syntax~1pxGHH~24038| (0) #f (larceny r7r6)) (xcons variable |\x0;xcons~1pxGHH~5005| (0) #f (srfi :1 lists)) (list-tabulate variable |\x0;list-tabulate~1pxGHH~5006| (0) #f (srfi :1 lists)) (circular-list variable |\x0;circular-list~1pxGHH~5008| (0) #f (srfi :1 lists)) (iota variable |\x0;iota~1pxGHH~5007| (0) #f (srfi :1 lists)) (proper-list? variable |\x0;proper-list?~1pxGHH~5009| (0) #f (srfi :1 lists)) (circular-list? variable |\x0;circular-list?~1pxGHH~5011| (0) #f (srfi :1 lists)) (dotted-list? variable |\x0;dotted-list?~1pxGHH~5010| (0) #f (srfi :1 lists)) (not-pair? variable |\x0;not-pair?~1pxGHH~5012| (0) #f (srfi :1 lists)) (null-list? variable |\x0;null-list?~1pxGHH~5013| (0) #f (srfi :1 lists)) (list= variable |\x0;list=~1pxGHH~5014| (0) #f (srfi :1 lists)) (first variable |\x0;first~1pxGHH~5017| (0) #f (srfi :1 lists)) (second variable |\x0;second~1pxGHH~5018| (0) #f (srfi :1 lists)) (third variable |\x0;third~1pxGHH~5019| (0) #f (srfi :1 lists)) (fourth variable |\x0;fourth~1pxGHH~5020| (0) #f (srfi :1 lists)) (fifth variable |\x0;fifth~1pxGHH~5021| (0) #f (srfi :1 lists)) (sixth variable |\x0;sixth~1pxGHH~5022| (0) #f (srfi :1 lists)) (seventh variable |\x0;seventh~1pxGHH~5023| (0) #f (srfi :1 lists)) (eighth variable |\x0;eighth~1pxGHH~5024| (0) #f (srfi :1 lists)) (ninth variable |\x0;ninth~1pxGHH~5025| (0) #f (srfi :1 lists)) (tenth variable |\x0;tenth~1pxGHH~5026| (0) #f (srfi :1 lists)) (car+cdr variable |\x0;car+cdr~1pxGHH~5027| (0) #f (srfi :1 lists)) (take variable |\x0;take~1pxGHH~5028| (0) #f (srfi :1 lists)) (drop variable |\x0;drop~1pxGHH~5029| (0) #f (srfi :1 lists)) (take-right variable |\x0;take-right~1pxGHH~5031| (0) #f (srfi :1 lists)) (drop-right variable |\x0;drop-right~1pxGHH~5032| (0) #f (srfi :1 lists)) (take! variable |\x0;take!~1pxGHH~5030| (0) #f (srfi :1 lists)) (drop-right! variable |\x0;drop-right!~1pxGHH~5033| (0) #f (srfi :1 lists)) (split-at variable |\x0;split-at~1pxGHH~5034| (0) #f (srfi :1 lists)) (split-at! variable |\x0;split-at!~1pxGHH~5035| (0) #f (srfi :1 lists)) (last variable |\x0;last~1pxGHH~5036| (0) #f (srfi :1 lists)) (last-pair variable |\x0;last-pair~1pxGHH~5037| (0) #f (srfi :1 lists)) (length+ variable |\x0;length+~1pxGHH~5015| (0) #f (srfi :1 lists)) (concatenate variable |\x0;concatenate~1pxGHH~5046| (0) #f (srfi :1 lists)) (append! variable |\x0;append!~1pxGHH~5043| (0) #f (srfi :1 lists)) (concatenate! variable |\x0;concatenate!~1pxGHH~5047| (0) #f (srfi :1 lists)) (reverse! variable |\x0;reverse!~1pxGHH~5091| (0) #f (srfi :1 lists)) (append-reverse variable |\x0;append-reverse~1pxGHH~5044| (0) #f (srfi :1 lists)) (append-reverse! variable |\x0;append-reverse!~1pxGHH~5045| (0) #f (srfi :1 lists)) (zip variable |\x0;zip~1pxGHH~5016| (0) #f (srfi :1 lists)) (unzip1 variable |\x0;unzip1~1pxGHH~5038| (0) #f (srfi :1 lists)) (unzip2 variable |\x0;unzip2~1pxGHH~5039| (0) #f (srfi :1 lists)) (unzip3 variable |\x0;unzip3~1pxGHH~5040| (0) #f (srfi :1 lists)) (unzip4 variable |\x0;unzip4~1pxGHH~5041| (0) #f (srfi :1 lists)) (unzip5 variable |\x0;unzip5~1pxGHH~5042| (0) #f (srfi :1 lists)) (count variable |\x0;count~1pxGHH~5053| (0) #f (srfi :1 lists)) (fold variable |\x0;fold~1pxGHH~5056| (0) #f (srfi :1 lists)) (unfold variable |\x0;unfold~1pxGHH~5055| (0) #f (srfi :1 lists)) (pair-fold variable |\x0;pair-fold~1pxGHH~5058| (0) #f (srfi :1 lists)) (reduce variable |\x0;reduce~1pxGHH~5059| (0) #f (srfi :1 lists)) (unfold-right variable |\x0;unfold-right~1pxGHH~5054| (0) #f (srfi :1 lists)) (pair-fold-right variable |\x0;pair-fold-right~1pxGHH~5057| (0) #f (srfi :1 lists)) (reduce-right variable |\x0;reduce-right~1pxGHH~5060| (0) #f (srfi :1 lists)) (append-map variable |\x0;append-map~1pxGHH~5061| (0) #f (srfi :1 lists)) (append-map! variable |\x0;append-map!~1pxGHH~5062| (0) #f (srfi :1 lists)) (map! variable |\x0;map!~1pxGHH~5065| (0) #f (srfi :1 lists)) (pair-for-each variable |\x0;pair-for-each~1pxGHH~5064| (0) #f (srfi :1 lists)) (filter-map variable |\x0;filter-map~1pxGHH~5066| (0) #f (srfi :1 lists)) (map-in-order variable |\x0;map-in-order~1pxGHH~5067| (0) #f (srfi :1 lists)) (remove variable |\x0;remove~1pxGHH~5070| (0) #f (srfi :1 lists)) (filter! variable |\x0;filter!~1pxGHH~5068| (0) #f (srfi :1 lists)) (partition! variable |\x0;partition!~1pxGHH~5069| (0) #f (srfi :1 lists)) (remove! variable |\x0;remove!~1pxGHH~5071| (0) #f (srfi :1 lists)) (find-tail variable |\x0;find-tail~1pxGHH~5080| (0) #f (srfi :1 lists)) (any variable |\x0;any~1pxGHH~5088| (0) #f (srfi :1 lists)) (every variable |\x0;every~1pxGHH~5089| (0) #f (srfi :1 lists)) (list-index variable |\x0;list-index~1pxGHH~5090| (0) #f (srfi :1 lists)) (take-while variable |\x0;take-while~1pxGHH~5081| (0) #f (srfi :1 lists)) (drop-while variable |\x0;drop-while~1pxGHH~5082| (0) #f (srfi :1 lists)) (take-while! variable |\x0;take-while!~1pxGHH~5083| (0) #f (srfi :1 lists)) (span variable |\x0;span~1pxGHH~5084| (0) #f (srfi :1 lists)) (break variable |\x0;break~1pxGHH~5086| (0) #f (srfi :1 lists)) (span! variable |\x0;span!~1pxGHH~5085| (0) #f (srfi :1 lists)) (break! variable |\x0;break!~1pxGHH~5087| (0) #f (srfi :1 lists)) (delete variable |\x0;delete~1pxGHH~5072| (0) #f (srfi :1 lists)) (delete-duplicates variable |\x0;delete-duplicates~1pxGHH~5074| (0) #f (srfi :1 lists)) (delete! variable |\x0;delete!~1pxGHH~5073| (0) #f (srfi :1 lists)) (delete-duplicates! variable |\x0;delete-duplicates!~1pxGHH~5075| (0) #f (srfi :1 lists)) (alist-cons variable |\x0;alist-cons~1pxGHH~5076| (0) #f (srfi :1 lists)) (alist-copy variable |\x0;alist-copy~1pxGHH~5077| (0) #f (srfi :1 lists)) (alist-delete variable |\x0;alist-delete~1pxGHH~5078| (0) #f (srfi :1 lists)) (alist-delete! variable |\x0;alist-delete!~1pxGHH~5079| (0) #f (srfi :1 lists)) (lset<= variable |\x0;lset<=~1pxGHH~5093| (0) #f (srfi :1 lists)) (lset= variable |\x0;lset=~1pxGHH~5094| (0) #f (srfi :1 lists)) (lset-adjoin variable |\x0;lset-adjoin~1pxGHH~5095| (0) #f (srfi :1 lists)) (lset-union variable |\x0;lset-union~1pxGHH~5096| (0) #f (srfi :1 lists)) (lset-union! variable |\x0;lset-union!~1pxGHH~5097| (0) #f (srfi :1 lists)) (lset-intersection variable |\x0;lset-intersection~1pxGHH~5098| (0) #f (srfi :1 lists)) (lset-intersection! variable |\x0;lset-intersection!~1pxGHH~5099| (0) #f (srfi :1 lists)) (lset-difference variable |\x0;lset-difference~1pxGHH~5100| (0) #f (srfi :1 lists)) (lset-difference! variable |\x0;lset-difference!~1pxGHH~5101| (0) #f (srfi :1 lists)) (lset-xor variable |\x0;lset-xor~1pxGHH~5102| (0) #f (srfi :1 lists)) (lset-xor! variable |\x0;lset-xor!~1pxGHH~5103| (0) #f (srfi :1 lists)) (lset-diff+intersection variable |\x0;lset-diff+intersection~1pxGHH~5104| (0) #f (srfi :1 lists)) (lset-diff+intersection! variable |\x0;lset-diff+intersection!~1pxGHH~5105| (0) #f (srfi :1 lists)) (vector-unfold variable |\x0;vector-unfold~1pxGHH~9295| (0) #f (srfi 133 vectors)) (vector-unfold-right variable |\x0;vector-unfold-right~1pxGHH~9297| (0) #f (srfi 133 vectors)) (vector-reverse-copy variable |\x0;vector-reverse-copy~1pxGHH~9299| (0) #f (srfi 133 vectors)) (vector-concatenate variable |\x0;vector-concatenate~1pxGHH~9300| (0) #f (srfi 133 vectors)) (vector-append-subvectors variable |\x0;vector-append-subvectors~1pxGHH~9302| (0) #f (srfi 133 vectors)) (vector-empty? variable |\x0;vector-empty?~1pxGHH~9303| (0) #f (srfi 133 vectors)) (vector= variable |\x0;vector=~1pxGHH~9304| (0) #f (srfi 133 vectors)) (vector-fold variable |\x0;vector-fold~1pxGHH~9306| (0) #f (srfi 133 vectors)) (vector-fold-right variable |\x0;vector-fold-right~1pxGHH~9307| (0) #f (srfi 133 vectors)) (vector-map! variable |\x0;vector-map!~1pxGHH~9325| (0) #f (srfi 133 vectors)) (vector-count variable |\x0;vector-count~1pxGHH~9308| (0) #f (srfi 133 vectors)) (vector-cumulate variable |\x0;vector-cumulate~1pxGHH~9309| (0) #f (srfi 133 vectors)) (vector-index variable |\x0;vector-index~1pxGHH~9310| (0) #f (srfi 133 vectors)) (vector-index-right variable |\x0;vector-index-right~1pxGHH~9313| (0) #f (srfi 133 vectors)) (vector-skip variable |\x0;vector-skip~1pxGHH~9311| (0) #f (srfi 133 vectors)) (vector-skip-right variable |\x0;vector-skip-right~1pxGHH~9314| (0) #f (srfi 133 vectors)) (vector-binary-search variable |\x0;vector-binary-search~1pxGHH~9316| (0) #f (srfi 133 vectors)) (vector-any variable |\x0;vector-any~1pxGHH~9317| (0) #f (srfi 133 vectors)) (vector-every variable |\x0;vector-every~1pxGHH~9318| (0) #f (srfi 133 vectors)) (vector-partition variable |\x0;vector-partition~1pxGHH~9319| (0) #f (srfi 133 vectors)) (vector-swap! variable |\x0;vector-swap!~1pxGHH~9320| (0) #f (srfi 133 vectors)) (vector-reverse! variable |\x0;vector-reverse!~1pxGHH~9322| (0) #f (srfi 133 vectors)) (vector-reverse-copy! variable |\x0;vector-reverse-copy!~1pxGHH~9321| (0) #f (srfi 133 vectors)) (vector-unfold! variable |\x0;vector-unfold!~1pxGHH~9296| (0) #f (srfi 133 vectors)) (vector-unfold-right! variable |\x0;vector-unfold-right!~1pxGHH~9298| (0) #f (srfi 133 vectors)) (reverse-vector->list variable |\x0;reverse-vector->list~1pxGHH~9323| (0) #f (srfi 133 vectors)) (reverse-list->vector variable |\x0;reverse-list->vector~1pxGHH~9324| (0) #f (srfi 133 vectors)) (list-sorted? variable |\x0;list-sorted?~1pxGHH~10584| (0) #f (srfi 132 sorting)) (vector-sorted? variable |\x0;vector-sorted?~1pxGHH~10585| (0) #f (srfi 132 sorting)) (list-stable-sort variable |\x0;list-stable-sort~1pxGHH~10594| (0) #f (srfi 132 sorting)) (vector-stable-sort variable |\x0;vector-stable-sort~1pxGHH~10596| (0) #f (srfi 132 sorting)) (list-sort! variable |\x0;list-sort!~1pxGHH~10593| (0) #f (srfi 132 sorting)) (list-stable-sort! variable |\x0;list-stable-sort!~1pxGHH~10595| (0) #f (srfi 132 sorting)) (vector-stable-sort! variable |\x0;vector-stable-sort!~1pxGHH~10597| (0) #f (srfi 132 sorting)) (list-merge variable |\x0;list-merge~1pxGHH~10575| (0) #f (srfi 132 sorting)) (vector-merge variable |\x0;vector-merge~1pxGHH~10577| (0) #f (srfi 132 sorting)) (list-merge! variable |\x0;list-merge!~1pxGHH~10576| (0) #f (srfi 132 sorting)) (vector-merge! variable |\x0;vector-merge!~1pxGHH~10578| (0) #f (srfi 132 sorting)) (list-delete-neighbor-dups variable |\x0;list-delete-neighbor-dups~1pxGHH~10580| (0) #f (srfi 132 sorting)) (vector-delete-neighbor-dups variable |\x0;vector-delete-neighbor-dups~1pxGHH~10582| (0) #f (srfi 132 sorting)) (list-delete-neighbor-dups! variable |\x0;list-delete-neighbor-dups!~1pxGHH~10581| (0) #f (srfi 132 sorting)) (vector-delete-neighbor-dups! variable |\x0;vector-delete-neighbor-dups!~1pxGHH~10583| (0) #f (srfi 132 sorting)) (vector-find-median variable |\x0;vector-find-median~1pxGHH~10598| (0) #f (srfi 132 sorting)) (vector-find-median! variable |\x0;vector-find-median!~1pxGHH~10599| (0) #f (srfi 132 sorting)) (vector-select! variable |\x0;vector-select!~1pxGHH~10601| (0) #f (srfi 132 sorting)) (vector-separate! variable |\x0;vector-separate!~1pxGHH~10602| (0) #f (srfi 132 sorting)) (set variable |\x0;set~1pxGHH~12820| (0) #f (srfi 113 sets)) (set-unfold variable |\x0;set-unfold~1pxGHH~12823| (0) #f (srfi 113 sets)) (set? variable |\x0;set?~1pxGHH~12806| (0) #f (srfi 113 sets)) (set-contains? variable |\x0;set-contains?~1pxGHH~12826| (0) #f (srfi 113 sets)) (set-empty? variable |\x0;set-empty?~1pxGHH~12829| (0) #f (srfi 113 sets)) (set-disjoint? variable |\x0;set-disjoint?~1pxGHH~12832| (0) #f (srfi 113 sets)) (set-member variable |\x0;set-member~1pxGHH~12835| (0) #f (srfi 113 sets)) (set-element-comparator variable |\x0;set-element-comparator~1pxGHH~12837| (0) #f (srfi 113 sets)) (set-adjoin variable |\x0;set-adjoin~1pxGHH~12848| (0) #f (srfi 113 sets)) (set-adjoin! variable |\x0;set-adjoin!~1pxGHH~12846| (0) #f (srfi 113 sets)) (set-replace variable |\x0;set-replace~1pxGHH~12853| (0) #f (srfi 113 sets)) (set-replace! variable |\x0;set-replace!~1pxGHH~12851| (0) #f (srfi 113 sets)) (set-delete variable |\x0;set-delete~1pxGHH~12860| (0) #f (srfi 113 sets)) (set-delete! variable |\x0;set-delete!~1pxGHH~12856| (0) #f (srfi 113 sets)) (set-delete-all variable |\x0;set-delete-all~1pxGHH~12862| (0) #f (srfi 113 sets)) (set-delete-all! variable |\x0;set-delete-all!~1pxGHH~12858| (0) #f (srfi 113 sets)) (set-search! variable |\x0;set-search!~1pxGHH~12866| (0) #f (srfi 113 sets)) (set-size variable |\x0;set-size~1pxGHH~12869| (0) #f (srfi 113 sets)) (set-find variable |\x0;set-find~1pxGHH~12872| (0) #f (srfi 113 sets)) (set-count variable |\x0;set-count~1pxGHH~12875| (0) #f (srfi 113 sets)) (set-any? variable |\x0;set-any?~1pxGHH~12878| (0) #f (srfi 113 sets)) (set-every? variable |\x0;set-every?~1pxGHH~12881| (0) #f (srfi 113 sets)) (set-map variable |\x0;set-map~1pxGHH~12888| (0) #f (srfi 113 sets)) (set-for-each variable |\x0;set-for-each~1pxGHH~12885| (0) #f (srfi 113 sets)) (set-fold variable |\x0;set-fold~1pxGHH~12891| (0) #f (srfi 113 sets)) (set-filter variable |\x0;set-filter~1pxGHH~12894| (0) #f (srfi 113 sets)) (set-remove variable |\x0;set-remove~1pxGHH~12896| (0) #f (srfi 113 sets)) (set-partition variable |\x0;set-partition~1pxGHH~12904| (0) #f (srfi 113 sets)) (set-filter! variable |\x0;set-filter!~1pxGHH~12899| (0) #f (srfi 113 sets)) (set-remove! variable |\x0;set-remove!~1pxGHH~12901| (0) #f (srfi 113 sets)) (set-partition! variable |\x0;set-partition!~1pxGHH~12907| (0) #f (srfi 113 sets)) (set-copy variable |\x0;set-copy~1pxGHH~12817| (0) #f (srfi 113 sets)) (set->list variable |\x0;set->list~1pxGHH~12910| (0) #f (srfi 113 sets)) (list->set variable |\x0;list->set~1pxGHH~12913| (0) #f (srfi 113 sets)) (list->set! variable |\x0;list->set!~1pxGHH~12915| (0) #f (srfi 113 sets)) (set=? variable |\x0;set=?~1pxGHH~12918| (0) #f (srfi 113 sets)) (set<? variable |\x0;set<?~1pxGHH~12930| (0) #f (srfi 113 sets)) (set>? variable |\x0;set>?~1pxGHH~12926| (0) #f (srfi 113 sets)) (set<=? variable |\x0;set<=?~1pxGHH~12922| (0) #f (srfi 113 sets)) (set>=? variable |\x0;set>=?~1pxGHH~12934| (0) #f (srfi 113 sets)) (set-union variable |\x0;set-union~1pxGHH~12940| (0) #f (srfi 113 sets)) (set-intersection variable |\x0;set-intersection~1pxGHH~12947| (0) #f (srfi 113 sets)) (set-difference variable |\x0;set-difference~1pxGHH~12954| (0) #f (srfi 113 sets)) (set-xor variable |\x0;set-xor~1pxGHH~12965| (0) #f (srfi 113 sets)) (set-union! variable |\x0;set-union!~1pxGHH~12943| (0) #f (srfi 113 sets)) (set-intersection! variable |\x0;set-intersection!~1pxGHH~12950| (0) #f (srfi 113 sets)) (set-difference! variable |\x0;set-difference!~1pxGHH~12957| (0) #f (srfi 113 sets)) (set-xor! variable |\x0;set-xor!~1pxGHH~12967| (0) #f (srfi 113 sets)) (set-comparator variable |\x0;set-comparator~1pxGHH~12983| (0) #f (srfi 113 sets)) (bag variable |\x0;bag~1pxGHH~12821| (0) #f (srfi 113 sets)) (bag-unfold variable |\x0;bag-unfold~1pxGHH~12824| (0) #f (srfi 113 sets)) (bag? variable |\x0;bag?~1pxGHH~12807| (0) #f (srfi 113 sets)) (bag-contains? variable |\x0;bag-contains?~1pxGHH~12827| (0) #f (srfi 113 sets)) (bag-empty? variable |\x0;bag-empty?~1pxGHH~12830| (0) #f (srfi 113 sets)) (bag-disjoint? variable |\x0;bag-disjoint?~1pxGHH~12833| (0) #f (srfi 113 sets)) (bag-member variable |\x0;bag-member~1pxGHH~12836| (0) #f (srfi 113 sets)) (bag-element-comparator variable |\x0;bag-element-comparator~1pxGHH~12838| (0) #f (srfi 113 sets)) (bag-adjoin variable |\x0;bag-adjoin~1pxGHH~12849| (0) #f (srfi 113 sets)) (bag-adjoin! variable |\x0;bag-adjoin!~1pxGHH~12847| (0) #f (srfi 113 sets)) (bag-replace variable |\x0;bag-replace~1pxGHH~12854| (0) #f (srfi 113 sets)) (bag-replace! variable |\x0;bag-replace!~1pxGHH~12852| (0) #f (srfi 113 sets)) (bag-delete variable |\x0;bag-delete~1pxGHH~12861| (0) #f (srfi 113 sets)) (bag-delete! variable |\x0;bag-delete!~1pxGHH~12857| (0) #f (srfi 113 sets)) (bag-delete-all variable |\x0;bag-delete-all~1pxGHH~12863| (0) #f (srfi 113 sets)) (bag-delete-all! variable |\x0;bag-delete-all!~1pxGHH~12859| (0) #f (srfi 113 sets)) (bag-search! variable |\x0;bag-search!~1pxGHH~12867| (0) #f (srfi 113 sets)) (bag-size variable |\x0;bag-size~1pxGHH~12870| (0) #f (srfi 113 sets)) (bag-find variable |\x0;bag-find~1pxGHH~12873| (0) #f (srfi 113 sets)) (bag-count variable |\x0;bag-count~1pxGHH~12876| (0) #f (srfi 113 sets)) (bag-any? variable |\x0;bag-any?~1pxGHH~12879| (0) #f (srfi 113 sets)) (bag-every? variable |\x0;bag-every?~1pxGHH~12882| (0) #f (srfi 113 sets)) (bag-map variable |\x0;bag-map~1pxGHH~12889| (0) #f (srfi 113 sets)) (bag-for-each variable |\x0;bag-for-each~1pxGHH~12886| (0) #f (srfi 113 sets)) (bag-fold variable |\x0;bag-fold~1pxGHH~12892| (0) #f (srfi 113 sets)) (bag-filter variable |\x0;bag-filter~1pxGHH~12895| (0) #f (srfi 113 sets)) (bag-remove variable |\x0;bag-remove~1pxGHH~12897| (0) #f (srfi 113 sets)) (bag-partition variable |\x0;bag-partition~1pxGHH~12905| (0) #f (srfi 113 sets)) (bag-filter! variable |\x0;bag-filter!~1pxGHH~12900| (0) #f (srfi 113 sets)) (bag-remove! variable |\x0;bag-remove!~1pxGHH~12902| (0) #f (srfi 113 sets)) (bag-partition! variable |\x0;bag-partition!~1pxGHH~12908| (0) #f (srfi 113 sets)) (bag-copy variable |\x0;bag-copy~1pxGHH~12818| (0) #f (srfi 113 sets)) (bag->list variable |\x0;bag->list~1pxGHH~12911| (0) #f (srfi 113 sets)) (list->bag variable |\x0;list->bag~1pxGHH~12914| (0) #f (srfi 113 sets)) (list->bag! variable |\x0;list->bag!~1pxGHH~12916| (0) #f (srfi 113 sets)) (bag=? variable |\x0;bag=?~1pxGHH~12919| (0) #f (srfi 113 sets)) (bag<? variable |\x0;bag<?~1pxGHH~12931| (0) #f (srfi 113 sets)) (bag>? variable |\x0;bag>?~1pxGHH~12927| (0) #f (srfi 113 sets)) (bag<=? variable |\x0;bag<=?~1pxGHH~12923| (0) #f (srfi 113 sets)) (bag>=? variable |\x0;bag>=?~1pxGHH~12935| (0) #f (srfi 113 sets)) (bag-union variable |\x0;bag-union~1pxGHH~12941| (0) #f (srfi 113 sets)) (bag-intersection variable |\x0;bag-intersection~1pxGHH~12948| (0) #f (srfi 113 sets)) (bag-difference variable |\x0;bag-difference~1pxGHH~12955| (0) #f (srfi 113 sets)) (bag-xor variable |\x0;bag-xor~1pxGHH~12966| (0) #f (srfi 113 sets)) (bag-union! variable |\x0;bag-union!~1pxGHH~12944| (0) #f (srfi 113 sets)) (bag-intersection! variable |\x0;bag-intersection!~1pxGHH~12951| (0) #f (srfi 113 sets)) (bag-difference! variable |\x0;bag-difference!~1pxGHH~12958| (0) #f (srfi 113 sets)) (bag-xor! variable |\x0;bag-xor!~1pxGHH~12968| (0) #f (srfi 113 sets)) (bag-comparator variable |\x0;bag-comparator~1pxGHH~12984| (0) #f (srfi 113 sets)) (bag-sum variable |\x0;bag-sum~1pxGHH~12961| (0) #f (srfi 113 sets)) (bag-sum! variable |\x0;bag-sum!~1pxGHH~12963| (0) #f (srfi 113 sets)) (bag-product variable |\x0;bag-product~1pxGHH~12971| (0) #f (srfi 113 sets)) (bag-product! variable |\x0;bag-product!~1pxGHH~12972| (0) #f (srfi 113 sets)) (bag-unique-size variable |\x0;bag-unique-size~1pxGHH~12973| (0) #f (srfi 113 sets)) (bag-element-count variable |\x0;bag-element-count~1pxGHH~12974| (0) #f (srfi 113 sets)) (bag-for-each-unique variable |\x0;bag-for-each-unique~1pxGHH~12975| (0) #f (srfi 113 sets)) (bag-fold-unique variable |\x0;bag-fold-unique~1pxGHH~12976| (0) #f (srfi 113 sets)) (bag-increment! variable |\x0;bag-increment!~1pxGHH~12843| (0) #f (srfi 113 sets)) (bag-decrement! variable |\x0;bag-decrement!~1pxGHH~12844| (0) #f (srfi 113 sets)) (bag->set variable |\x0;bag->set~1pxGHH~12977| (0) #f (srfi 113 sets)) (set->bag variable |\x0;set->bag~1pxGHH~12978| (0) #f (srfi 113 sets)) (set->bag! variable |\x0;set->bag!~1pxGHH~12979| (0) #f (srfi 113 sets)) (bag->alist variable |\x0;bag->alist~1pxGHH~12980| (0) #f (srfi 113 sets)) (alist->bag variable |\x0;alist->bag~1pxGHH~12981| (0) #f (srfi 113 sets)) (char-set? variable |\x0;char-set?~1pxGHH~14173| (0) #f (srfi 14 unicode)) (char-set= variable |\x0;char-set=~1pxGHH~14203| (0) #f (srfi 14 unicode)) (char-set<= variable |\x0;char-set<=~1pxGHH~14204| (0) #f (srfi 14 unicode)) (char-set-hash variable |\x0;char-set-hash~1pxGHH~14205| (0) #f (srfi 14 unicode)) (char-set-cursor variable |\x0;char-set-cursor~1pxGHH~14213| (0) #f (srfi 14 unicode)) (char-set-ref variable |\x0;char-set-ref~1pxGHH~14215| (0) #f (srfi 14 unicode)) (char-set-cursor-next variable |\x0;char-set-cursor-next~1pxGHH~14216| (0) #f (srfi 14 unicode)) (end-of-char-set? variable |\x0;end-of-char-set?~1pxGHH~14214| (0) #f (srfi 14 unicode)) (char-set-fold variable |\x0;char-set-fold~1pxGHH~14220| (0) #f (srfi 14 unicode)) (char-set-unfold variable |\x0;char-set-unfold~1pxGHH~14224| (0) #f (srfi 14 unicode)) (char-set-unfold! variable |\x0;char-set-unfold!~1pxGHH~14225| (0) #f (srfi 14 unicode)) (char-set-for-each variable |\x0;char-set-for-each~1pxGHH~14218| (0) #f (srfi 14 unicode)) (char-set-map variable |\x0;char-set-map~1pxGHH~14219| (0) #f (srfi 14 unicode)) (char-set-copy variable |\x0;char-set-copy~1pxGHH~14202| (0) #f (srfi 14 unicode)) (char-set variable |\x0;char-set~1pxGHH~14227| (0) #f (srfi 14 unicode)) (list->char-set variable |\x0;list->char-set~1pxGHH~14228| (0) #f (srfi 14 unicode)) (string->char-set variable |\x0;string->char-set~1pxGHH~14232| (0) #f (srfi 14 unicode)) (list->char-set! variable |\x0;list->char-set!~1pxGHH~14229| (0) #f (srfi 14 unicode)) (string->char-set! variable |\x0;string->char-set!~1pxGHH~14233| (0) #f (srfi 14 unicode)) (char-set-filter variable |\x0;char-set-filter~1pxGHH~14239| (0) #f (srfi 14 unicode)) (char-set-filter! variable |\x0;char-set-filter!~1pxGHH~14240| (0) #f (srfi 14 unicode)) (ucs-range->char-set variable |\x0;ucs-range->char-set~1pxGHH~14236| (0) #f (srfi 14 unicode)) (ucs-range->char-set! variable |\x0;ucs-range->char-set!~1pxGHH~14237| (0) #f (srfi 14 unicode)) (->char-set variable |\x0;->char-set~1pxGHH~14241| (0) #f (srfi 14 unicode)) (char-set->list variable |\x0;char-set->list~1pxGHH~14230| (0) #f (srfi 14 unicode)) (char-set->string variable |\x0;char-set->string~1pxGHH~14234| (0) #f (srfi 14 unicode)) (char-set-size variable |\x0;char-set-size~1pxGHH~14207| (0) #f (srfi 14 unicode)) (char-set-count variable |\x0;char-set-count~1pxGHH~14208| (0) #f (srfi 14 unicode)) (char-set-contains? variable |\x0;char-set-contains?~1pxGHH~14206| (0) #f (srfi 14 unicode)) (char-set-every variable |\x0;char-set-every~1pxGHH~14221| (0) #f (srfi 14 unicode)) (char-set-any variable |\x0;char-set-any~1pxGHH~14222| (0) #f (srfi 14 unicode)) (char-set-adjoin variable |\x0;char-set-adjoin~1pxGHH~14209| (0) #f (srfi 14 unicode)) (char-set-delete variable |\x0;char-set-delete~1pxGHH~14211| (0) #f (srfi 14 unicode)) (char-set-adjoin! variable |\x0;char-set-adjoin!~1pxGHH~14210| (0) #f (srfi 14 unicode)) (char-set-delete! variable |\x0;char-set-delete!~1pxGHH~14212| (0) #f (srfi 14 unicode)) (char-set-complement variable |\x0;char-set-complement~1pxGHH~14242| (0) #f (srfi 14 unicode)) (char-set-union variable |\x0;char-set-union~1pxGHH~14245| (0) #f (srfi 14 unicode)) (char-set-intersection variable |\x0;char-set-intersection~1pxGHH~14247| (0) #f (srfi 14 unicode)) (char-set-complement! variable |\x0;char-set-complement!~1pxGHH~14243| (0) #f (srfi 14 unicode)) (char-set-union! variable |\x0;char-set-union!~1pxGHH~14244| (0) #f (srfi 14 unicode)) (char-set-intersection! variable |\x0;char-set-intersection!~1pxGHH~14246| (0) #f (srfi 14 unicode)) (char-set-difference variable |\x0;char-set-difference~1pxGHH~14249| (0) #f (srfi 14 unicode)) (char-set-xor variable |\x0;char-set-xor~1pxGHH~14251| (0) #f (srfi 14 unicode)) (char-set-diff+intersection variable |\x0;char-set-diff+intersection~1pxGHH~14253| (0) #f (srfi 14 unicode)) (char-set-difference! variable |\x0;char-set-difference!~1pxGHH~14248| (0) #f (srfi 14 unicode)) (char-set-xor! variable |\x0;char-set-xor!~1pxGHH~14250| (0) #f (srfi 14 unicode)) (char-set-diff+intersection! variable |\x0;char-set-diff+intersection!~1pxGHH~14252| (0) #f (srfi 14 unicode)) (char-set:lower-case variable |\x0;char-set:lower-case~1pxGHH~14256| (0) #f (srfi 14 unicode)) (char-set:upper-case variable |\x0;char-set:upper-case~1pxGHH~14257| (0) #f (srfi 14 unicode)) (char-set:title-case variable |\x0;char-set:title-case~1pxGHH~14258| (0) #f (srfi 14 unicode)) (char-set:letter variable |\x0;char-set:letter~1pxGHH~14259| (0) #f (srfi 14 unicode)) (char-set:digit variable |\x0;char-set:digit~1pxGHH~14260| (0) #f (srfi 14 unicode)) (char-set:letter+digit variable |\x0;char-set:letter+digit~1pxGHH~14262| (0) #f (srfi 14 unicode)) (char-set:graphic variable |\x0;char-set:graphic~1pxGHH~14265| (0) #f (srfi 14 unicode)) (char-set:printing variable |\x0;char-set:printing~1pxGHH~14267| (0) #f (srfi 14 unicode)) (char-set:whitespace variable |\x0;char-set:whitespace~1pxGHH~14266| (0) #f (srfi 14 unicode)) (char-set:iso-control variable |\x0;char-set:iso-control~1pxGHH~14269| (0) #f (srfi 14 unicode)) (char-set:punctuation variable |\x0;char-set:punctuation~1pxGHH~14263| (0) #f (srfi 14 unicode)) (char-set:symbol variable |\x0;char-set:symbol~1pxGHH~14264| (0) #f (srfi 14 unicode)) (char-set:hex-digit variable |\x0;char-set:hex-digit~1pxGHH~14261| (0) #f (srfi 14 unicode)) (char-set:blank variable |\x0;char-set:blank~1pxGHH~14268| (0) #f (srfi 14 unicode)) (char-set:ascii variable |\x0;char-set:ascii~1pxGHH~14270| (0) #f (srfi 14 unicode)) (char-set:empty variable |\x0;char-set:empty~1pxGHH~14254| (0) #f (srfi 14 unicode)) (char-set:full variable |\x0;char-set:full~1pxGHH~14255| (0) #f (srfi 14 unicode)) (make-hash-table variable |\x0;make-hash-table~1pxGHH~15418| (0) #f (srfi 125)) (hash-table variable |\x0;hash-table~1pxGHH~15420| (0) #f (srfi 125)) (hash-table-unfold variable |\x0;hash-table-unfold~1pxGHH~15421| (0) #f (srfi 125)) (alist->hash-table variable |\x0;alist->hash-table~1pxGHH~15422| (0) #f (srfi 125)) (hash-table? variable |\x0;hash-table?~1pxGHH~15423| (0) #f (srfi 125)) (hash-table-contains? variable |\x0;hash-table-contains?~1pxGHH~15424| (0) #f (srfi 125)) (hash-table-empty? variable |\x0;hash-table-empty?~1pxGHH~15425| (0) #f (srfi 125)) (hash-table=? variable |\x0;hash-table=?~1pxGHH~15426| (0) #f (srfi 125)) (hash-table-mutable? variable |\x0;hash-table-mutable?~1pxGHH~15427| (0) #f (srfi 125)) (hash-table-ref variable |\x0;hash-table-ref~1pxGHH~15428| (0) #f (srfi 125)) (hash-table-ref/default variable |\x0;hash-table-ref/default~1pxGHH~15429| (0) #f (srfi 125)) (hash-table-set! variable |\x0;hash-table-set!~1pxGHH~15430| (0) #f (srfi 125)) (hash-table-delete! variable |\x0;hash-table-delete!~1pxGHH~15431| (0) #f (srfi 125)) (hash-table-intern! variable |\x0;hash-table-intern!~1pxGHH~15432| (0) #f (srfi 125)) (hash-table-update! variable |\x0;hash-table-update!~1pxGHH~15433| (0) #f (srfi 125)) (hash-table-update!/default variable |\x0;hash-table-update!/default~1pxGHH~15434| (0) #f (srfi 125)) (hash-table-pop! variable |\x0;hash-table-pop!~1pxGHH~15435| (0) #f (srfi 125)) (hash-table-clear! variable |\x0;hash-table-clear!~1pxGHH~15436| (0) #f (srfi 125)) (hash-table-size variable |\x0;hash-table-size~1pxGHH~15437| (0) #f (srfi 125)) (hash-table-keys variable |\x0;hash-table-keys~1pxGHH~15438| (0) #f (srfi 125)) (hash-table-values variable |\x0;hash-table-values~1pxGHH~15439| (0) #f (srfi 125)) (hash-table-entries variable |\x0;hash-table-entries~1pxGHH~15440| (0) #f (srfi 125)) (hash-table-find variable |\x0;hash-table-find~1pxGHH~15441| (0) #f (srfi 125)) (hash-table-count variable |\x0;hash-table-count~1pxGHH~15442| (0) #f (srfi 125)) (hash-table-map variable |\x0;hash-table-map~1pxGHH~15443| (0) #f (srfi 125)) (hash-table-for-each variable |\x0;hash-table-for-each~1pxGHH~15445| (0) #f (srfi 125)) (hash-table-map! variable |\x0;hash-table-map!~1pxGHH~15446| (0) #f (srfi 125)) (hash-table-map->list variable |\x0;hash-table-map->list~1pxGHH~15444| (0) #f (srfi 125)) (hash-table-fold variable |\x0;hash-table-fold~1pxGHH~15447| (0) #f (srfi 125)) (hash-table-prune! variable |\x0;hash-table-prune!~1pxGHH~15448| (0) #f (srfi 125)) (hash-table-copy variable |\x0;hash-table-copy~1pxGHH~15449| (0) #f (srfi 125)) (hash-table-empty-copy variable |\x0;hash-table-empty-copy~1pxGHH~15450| (0) #f (srfi 125)) (hash-table->alist variable |\x0;hash-table->alist~1pxGHH~15451| (0) #f (srfi 125)) (hash-table-union! variable |\x0;hash-table-union!~1pxGHH~15452| (0) #f (srfi 125)) (hash-table-intersection! variable |\x0;hash-table-intersection!~1pxGHH~15453| (0) #f (srfi 125)) (hash-table-difference! variable |\x0;hash-table-difference!~1pxGHH~15454| (0) #f (srfi 125)) (hash-table-xor! variable |\x0;hash-table-xor!~1pxGHH~15455| (0) #f (srfi 125)) (hash variable |\x0;deprecated:hash~1pxGHH~15456| (0) #f (srfi 125)) (hash-by-identity variable |\x0;deprecated:hash-by-identity~1pxGHH~15459| (0) #f (srfi 125)) (hash-table-equivalence-function variable |\x0;deprecated:hash-table-equivalence-function~1pxGHH~15460| (0) #f (srfi 125)) (hash-table-hash-function variable |\x0;deprecated:hash-table-hash-function~1pxGHH~15461| (0) #f (srfi 125)) (hash-table-exists? variable |\x0;deprecated:hash-table-exists?~1pxGHH~15462| (0) #f (srfi 125)) (hash-table-walk variable |\x0;deprecated:hash-table-walk~1pxGHH~15463| (0) #f (srfi 125)) (hash-table-merge! variable |\x0;deprecated:hash-table-merge!~1pxGHH~15465| (0) #f (srfi 125)) (iq macro |\x0;iq~1pxGHH~16033| (0) #f (srfi 116 ilists)) (ipair variable |\x0;ipair~1pxGHH~16010| (0) #f (srfi 116 ilists)) (ilist variable |\x0;ilist~1pxGHH~16051| (0) #f (srfi 116 ilists)) (xipair variable |\x0;xipair~1pxGHH~16084| (0) #f (srfi 116 ilists)) (ipair* variable |\x0;ipair*~1pxGHH~16087| (0) #f (srfi 116 ilists)) (make-ilist variable |\x0;make-ilist~1pxGHH~16085| (0) #f (srfi 116 ilists)) (ilist-tabulate variable |\x0;ilist-tabulate~1pxGHH~16086| (0) #f (srfi 116 ilists)) (iiota variable |\x0;iiota~1pxGHH~16089| (0) #f (srfi 116 ilists)) (ipair? variable |\x0;ipair?~1pxGHH~16011| (0) #f (srfi 116 ilists)) (proper-ilist? variable |\x0;proper-ilist?~1pxGHH~16091| (0) #f (srfi 116 ilists)) (ilist? variable |\x0;ilist?~1pxGHH~16090| (0) #f (srfi 116 ilists)) (dotted-ilist? variable |\x0;dotted-ilist?~1pxGHH~16092| (0) #f (srfi 116 ilists)) (not-ipair? variable |\x0;not-ipair?~1pxGHH~16093| (0) #f (srfi 116 ilists)) (null-ilist? variable |\x0;null-ilist?~1pxGHH~16094| (0) #f (srfi 116 ilists)) (ilist= variable |\x0;ilist=~1pxGHH~16095| (0) #f (srfi 116 ilists)) (icar variable |\x0;icar~1pxGHH~16012| (0) #f (srfi 116 ilists)) (icdr variable |\x0;icdr~1pxGHH~16013| (0) #f (srfi 116 ilists)) (ilist-ref variable |\x0;ilist-ref~1pxGHH~16142| (0) #f (srfi 116 ilists)) (ifirst variable |\x0;ifirst~1pxGHH~16126| (0) #f (srfi 116 ilists)) (isecond variable |\x0;isecond~1pxGHH~16127| (0) #f (srfi 116 ilists)) (ithird variable |\x0;ithird~1pxGHH~16128| (0) #f (srfi 116 ilists)) (ifourth variable |\x0;ifourth~1pxGHH~16129| (0) #f (srfi 116 ilists)) (ififth variable |\x0;ififth~1pxGHH~16130| (0) #f (srfi 116 ilists)) (isixth variable |\x0;isixth~1pxGHH~16131| (0) #f (srfi 116 ilists)) (iseventh variable |\x0;iseventh~1pxGHH~16132| (0) #f (srfi 116 ilists)) (ieighth variable |\x0;ieighth~1pxGHH~16133| (0) #f (srfi 116 ilists)) (ininth variable |\x0;ininth~1pxGHH~16134| (0) #f (srfi 116 ilists)) (itenth variable |\x0;itenth~1pxGHH~16135| (0) #f (srfi 116 ilists)) (icaar variable |\x0;icaar~1pxGHH~16098| (0) #f (srfi 116 ilists)) (icadr variable |\x0;icadr~1pxGHH~16099| (0) #f (srfi 116 ilists)) (icdar variable |\x0;icdar~1pxGHH~16100| (0) #f (srfi 116 ilists)) (icddr variable |\x0;icddr~1pxGHH~16101| (0) #f (srfi 116 ilists)) (icaaar variable |\x0;icaaar~1pxGHH~16102| (0) #f (srfi 116 ilists)) (icaadr variable |\x0;icaadr~1pxGHH~16103| (0) #f (srfi 116 ilists)) (icadar variable |\x0;icadar~1pxGHH~16104| (0) #f (srfi 116 ilists)) (icaddr variable |\x0;icaddr~1pxGHH~16105| (0) #f (srfi 116 ilists)) (icdaar variable |\x0;icdaar~1pxGHH~16106| (0) #f (srfi 116 ilists)) (icdadr variable |\x0;icdadr~1pxGHH~16107| (0) #f (srfi 116 ilists)) (icddar variable |\x0;icddar~1pxGHH~16108| (0) #f (srfi 116 ilists)) (icdddr variable |\x0;icdddr~1pxGHH~16109| (0) #f (srfi 116 ilists)) (icaaaar variable |\x0;icaaaar~1pxGHH~16110| (0) #f (srfi 116 ilists)) (icaaadr variable |\x0;icaaadr~1pxGHH~16111| (0) #f (srfi 116 ilists)) (icaadar variable |\x0;icaadar~1pxGHH~16112| (0) #f (srfi 116 ilists)) (icaaddr variable |\x0;icaaddr~1pxGHH~16113| (0) #f (srfi 116 ilists)) (icadaar variable |\x0;icadaar~1pxGHH~16114| (0) #f (srfi 116 ilists)) (icadadr variable |\x0;icadadr~1pxGHH~16115| (0) #f (srfi 116 ilists)) (icaddar variable |\x0;icaddar~1pxGHH~16116| (0) #f (srfi 116 ilists)) (icadddr variable |\x0;icadddr~1pxGHH~16117| (0) #f (srfi 116 ilists)) (icdaaar variable |\x0;icdaaar~1pxGHH~16118| (0) #f (srfi 116 ilists)) (icdaadr variable |\x0;icdaadr~1pxGHH~16119| (0) #f (srfi 116 ilists)) (icdadar variable |\x0;icdadar~1pxGHH~16120| (0) #f (srfi 116 ilists)) (icdaddr variable |\x0;icdaddr~1pxGHH~16121| (0) #f (srfi 116 ilists)) (icddaar variable |\x0;icddaar~1pxGHH~16122| (0) #f (srfi 116 ilists)) (icddadr variable |\x0;icddadr~1pxGHH~16123| (0) #f (srfi 116 ilists)) (icdddar variable |\x0;icdddar~1pxGHH~16124| (0) #f (srfi 116 ilists)) (icddddr variable |\x0;icddddr~1pxGHH~16125| (0) #f (srfi 116 ilists)) (icar+icdr variable |\x0;icar+icdr~1pxGHH~16136| (0) #f (srfi 116 ilists)) (itake variable |\x0;itake~1pxGHH~16137| (0) #f (srfi 116 ilists)) (idrop variable |\x0;idrop~1pxGHH~16139| (0) #f (srfi 116 ilists)) (ilist-tail variable |\x0;ilist-tail~1pxGHH~16138| (0) #f (srfi 116 ilists)) (itake-right variable |\x0;itake-right~1pxGHH~16140| (0) #f (srfi 116 ilists)) (idrop-right variable |\x0;idrop-right~1pxGHH~16141| (0) #f (srfi 116 ilists)) (isplit-at variable |\x0;isplit-at~1pxGHH~16143| (0) #f (srfi 116 ilists)) (ilast variable |\x0;ilast~1pxGHH~16144| (0) #f (srfi 116 ilists)) (last-ipair variable |\x0;last-ipair~1pxGHH~16145| (0) #f (srfi 116 ilists)) (ilength variable |\x0;ilength~1pxGHH~16096| (0) #f (srfi 116 ilists)) (iappend variable |\x0;iappend~1pxGHH~16151| (0) #f (srfi 116 ilists)) (iconcatenate variable |\x0;iconcatenate~1pxGHH~16153| (0) #f (srfi 116 ilists)) (ireverse variable |\x0;ireverse~1pxGHH~16195| (0) #f (srfi 116 ilists)) (iappend-reverse variable |\x0;iappend-reverse~1pxGHH~16152| (0) #f (srfi 116 ilists)) (izip variable |\x0;izip~1pxGHH~16097| (0) #f (srfi 116 ilists)) (iunzip1 variable |\x0;iunzip1~1pxGHH~16146| (0) #f (srfi 116 ilists)) (iunzip2 variable |\x0;iunzip2~1pxGHH~16147| (0) #f (srfi 116 ilists)) (iunzip3 variable |\x0;iunzip3~1pxGHH~16148| (0) #f (srfi 116 ilists)) (iunzip4 variable |\x0;iunzip4~1pxGHH~16149| (0) #f (srfi 116 ilists)) (iunzip5 variable |\x0;iunzip5~1pxGHH~16150| (0) #f (srfi 116 ilists)) (icount variable |\x0;icount~1pxGHH~16159| (0) #f (srfi 116 ilists)) (imap variable |\x0;imap~1pxGHH~16173| (0) #f (srfi 116 ilists)) (ifor-each variable |\x0;ifor-each~1pxGHH~16082| (0) #f (srfi 116 ilists)) (ifold variable |\x0;ifold~1pxGHH~16162| (0) #f (srfi 116 ilists)) (iunfold variable |\x0;iunfold~1pxGHH~16161| (0) #f (srfi 116 ilists)) (ipair-fold variable |\x0;ipair-fold~1pxGHH~16165| (0) #f (srfi 116 ilists)) (ireduce variable |\x0;ireduce~1pxGHH~16166| (0) #f (srfi 116 ilists)) (ifold-right variable |\x0;ifold-right~1pxGHH~16163| (0) #f (srfi 116 ilists)) (iunfold-right variable |\x0;iunfold-right~1pxGHH~16160| (0) #f (srfi 116 ilists)) (ipair-fold-right variable |\x0;ipair-fold-right~1pxGHH~16164| (0) #f (srfi 116 ilists)) (ireduce-right variable |\x0;ireduce-right~1pxGHH~16167| (0) #f (srfi 116 ilists)) (iappend-map variable |\x0;iappend-map~1pxGHH~16168| (0) #f (srfi 116 ilists)) (ipair-for-each variable |\x0;ipair-for-each~1pxGHH~16170| (0) #f (srfi 116 ilists)) (ifilter-map variable |\x0;ifilter-map~1pxGHH~16171| (0) #f (srfi 116 ilists)) (imap-in-order variable |\x0;imap-in-order~1pxGHH~16172| (0) #f (srfi 116 ilists)) (ifilter variable |\x0;ifilter~1pxGHH~16174| (0) #f (srfi 116 ilists)) (ipartition variable |\x0;ipartition~1pxGHH~16175| (0) #f (srfi 116 ilists)) (iremove variable |\x0;iremove~1pxGHH~16176| (0) #f (srfi 116 ilists)) (imember variable |\x0;imember~1pxGHH~16178| (0) #f (srfi 116 ilists)) (imemq variable |\x0;imemq~1pxGHH~16179| (0) #f (srfi 116 ilists)) (imemv variable |\x0;imemv~1pxGHH~16180| (0) #f (srfi 116 ilists)) (ifind variable |\x0;ifind~1pxGHH~16186| (0) #f (srfi 116 ilists)) (ifind-tail variable |\x0;ifind-tail~1pxGHH~16187| (0) #f (srfi 116 ilists)) (iany variable |\x0;iany~1pxGHH~16193| (0) #f (srfi 116 ilists)) (ievery variable |\x0;ievery~1pxGHH~16192| (0) #f (srfi 116 ilists)) (ilist-index variable |\x0;ilist-index~1pxGHH~16194| (0) #f (srfi 116 ilists)) (itake-while variable |\x0;itake-while~1pxGHH~16188| (0) #f (srfi 116 ilists)) (idrop-while variable |\x0;idrop-while~1pxGHH~16189| (0) #f (srfi 116 ilists)) (ispan variable |\x0;ispan~1pxGHH~16190| (0) #f (srfi 116 ilists)) (ibreak variable |\x0;ibreak~1pxGHH~16191| (0) #f (srfi 116 ilists)) (idelete variable |\x0;idelete~1pxGHH~16177| (0) #f (srfi 116 ilists)) (idelete-duplicates variable |\x0;idelete-duplicates~1pxGHH~16181| (0) #f (srfi 116 ilists)) (iassoc variable |\x0;iassoc~1pxGHH~16182| (0) #f (srfi 116 ilists)) (iassq variable |\x0;iassq~1pxGHH~16080| (0) #f (srfi 116 ilists)) (iassv variable |\x0;iassv~1pxGHH~16081| (0) #f (srfi 116 ilists)) (ialist-cons variable |\x0;ialist-cons~1pxGHH~16183| (0) #f (srfi 116 ilists)) (ialist-delete variable |\x0;ialist-delete~1pxGHH~16185| (0) #f (srfi 116 ilists)) (replace-icar variable |\x0;replace-icar~1pxGHH~16046| (0) #f (srfi 116 ilists)) (replace-icdr variable |\x0;replace-icdr~1pxGHH~16047| (0) #f (srfi 116 ilists)) (pair->ipair variable |\x0;pair->ipair~1pxGHH~16048| (0) #f (srfi 116 ilists)) (ipair->pair variable |\x0;ipair->pair~1pxGHH~16049| (0) #f (srfi 116 ilists)) (list->ilist variable |\x0;list->ilist~1pxGHH~16050| (0) #f (srfi 116 ilists)) (ilist->list variable |\x0;ilist->list~1pxGHH~16052| (0) #f (srfi 116 ilists)) (tree->itree variable |\x0;tree->itree~1pxGHH~16053| (0) #f (srfi 116 ilists)) (itree->tree variable |\x0;itree->tree~1pxGHH~16054| (0) #f (srfi 116 ilists)) (gtree->itree variable |\x0;gtree->itree~1pxGHH~16055| (0) #f (srfi 116 ilists)) (gtree->tree variable |\x0;gtree->tree~1pxGHH~16056| (0) #f (srfi 116 ilists)) (iapply variable |\x0;iapply~1pxGHH~16060| (0) #f (srfi 116 ilists)) (ipair-comparator variable |\x0;ipair-comparator~1pxGHH~19244| (0) #f (srfi 116 comparators)) (ilist-comparator variable |\x0;ilist-comparator~1pxGHH~19246| (0) #f (srfi 116 comparators)) (make-ipair-comparator variable |\x0;make-ipair-comparator~1pxGHH~19242| (0) #f (srfi 116 comparators)) (make-ilist-comparator variable |\x0;make-ilist-comparator~1pxGHH~19245| (0) #f (srfi 116 comparators)) (make-improper-ilist-comparator variable |\x0;make-improper-ilist-comparator~1pxGHH~19249| (0) #f (srfi 116 comparators)) (make-icar-comparator variable |\x0;make-icar-comparator~1pxGHH~19247| (0) #f (srfi 116 comparators)) (make-icdr-comparator variable |\x0;make-icdr-comparator~1pxGHH~19248| (0) #f (srfi 116 comparators)) (rquote macro |\x0;ra:quote~1pxGHH~19525| (0) #f (srfi :101 random-access-lists)) (rpair? variable |\x0;ra:pair?~1pxGHH~19468| (0) #f (srfi :101 random-access-lists)) (rcons variable |\x0;ra:cons~1pxGHH~19470| (0) #f (srfi :101 random-access-lists)) (rcar variable |\x0;ra:car~1pxGHH~19472| (0) #f (srfi :101 random-access-lists)) (rcdr variable |\x0;ra:cdr~1pxGHH~19473| (0) #f (srfi :101 random-access-lists)) (rcaar variable |\x0;ra:caar~1pxGHH~19482| (0) #f (srfi :101 random-access-lists)) (rcadr variable |\x0;ra:cadr~1pxGHH~19483| (0) #f (srfi :101 random-access-lists)) (rcddr variable |\x0;ra:cddr~1pxGHH~19484| (0) #f (srfi :101 random-access-lists)) (rcdar variable |\x0;ra:cdar~1pxGHH~19485| (0) #f (srfi :101 random-access-lists)) (rcaaar variable |\x0;ra:caaar~1pxGHH~19486| (0) #f (srfi :101 random-access-lists)) (rcaadr variable |\x0;ra:caadr~1pxGHH~19487| (0) #f (srfi :101 random-access-lists)) (rcaddr variable |\x0;ra:caddr~1pxGHH~19488| (0) #f (srfi :101 random-access-lists)) (rcadar variable |\x0;ra:cadar~1pxGHH~19489| (0) #f (srfi :101 random-access-lists)) (rcdaar variable |\x0;ra:cdaar~1pxGHH~19490| (0) #f (srfi :101 random-access-lists)) (rcdadr variable |\x0;ra:cdadr~1pxGHH~19491| (0) #f (srfi :101 random-access-lists)) (rcdddr variable |\x0;ra:cdddr~1pxGHH~19492| (0) #f (srfi :101 random-access-lists)) (rcddar variable |\x0;ra:cddar~1pxGHH~19493| (0) #f (srfi :101 random-access-lists)) (rcaaaar variable |\x0;ra:caaaar~1pxGHH~19494| (0) #f (srfi :101 random-access-lists)) (rcaaadr variable |\x0;ra:caaadr~1pxGHH~19495| (0) #f (srfi :101 random-access-lists)) (rcaaddr variable |\x0;ra:caaddr~1pxGHH~19496| (0) #f (srfi :101 random-access-lists)) (rcaadar variable |\x0;ra:caadar~1pxGHH~19497| (0) #f (srfi :101 random-access-lists)) (rcadaar variable |\x0;ra:cadaar~1pxGHH~19498| (0) #f (srfi :101 random-access-lists)) (rcadadr variable |\x0;ra:cadadr~1pxGHH~19499| (0) #f (srfi :101 random-access-lists)) (rcadddr variable |\x0;ra:cadddr~1pxGHH~19500| (0) #f (srfi :101 random-access-lists)) (rcaddar variable |\x0;ra:caddar~1pxGHH~19501| (0) #f (srfi :101 random-access-lists)) (rcdaaar variable |\x0;ra:cdaaar~1pxGHH~19502| (0) #f (srfi :101 random-access-lists)) (rcdaadr variable |\x0;ra:cdaadr~1pxGHH~19503| (0) #f (srfi :101 random-access-lists)) (rcdaddr variable |\x0;ra:cdaddr~1pxGHH~19504| (0) #f (srfi :101 random-access-lists)) (rcdadar variable |\x0;ra:cdadar~1pxGHH~19505| (0) #f (srfi :101 random-access-lists)) (rcddaar variable |\x0;ra:cddaar~1pxGHH~19506| (0) #f (srfi :101 random-access-lists)) (rcddadr variable |\x0;ra:cddadr~1pxGHH~19507| (0) #f (srfi :101 random-access-lists)) (rcddddr variable |\x0;ra:cddddr~1pxGHH~19508| (0) #f (srfi :101 random-access-lists)) (rcdddar variable |\x0;ra:cdddar~1pxGHH~19509| (0) #f (srfi :101 random-access-lists)) (rnull? variable |\x0;ra:null?~1pxGHH~19469| (0) #f (srfi :101 random-access-lists)) (rlist? variable |\x0;ra:list?~1pxGHH~19481| (0) #f (srfi :101 random-access-lists)) (rlist variable |\x0;ra:list~1pxGHH~19477| (0) #f (srfi :101 random-access-lists)) (make-rlist variable |\x0;ra:make-list~1pxGHH~19478| (0) #f (srfi :101 random-access-lists)) (rlength variable |\x0;ra:length~1pxGHH~19510| (0) #f (srfi :101 random-access-lists)) (rappend variable |\x0;ra:append~1pxGHH~19515| (0) #f (srfi :101 random-access-lists)) (rreverse variable |\x0;ra:reverse~1pxGHH~19516| (0) #f (srfi :101 random-access-lists)) (rlist-tail variable |\x0;ra:list-tail~1pxGHH~19517| (0) #f (srfi :101 random-access-lists)) (rlist-ref variable |\x0;ra:list-ref~1pxGHH~19518| (0) #f (srfi :101 random-access-lists)) (rlist-set variable |\x0;ra:list-set~1pxGHH~19519| (0) #f (srfi :101 random-access-lists)) (rlist-ref/update variable |\x0;ra:list-ref/update~1pxGHH~19474| (0) #f (srfi :101 random-access-lists)) (rmap variable |\x0;ra:map~1pxGHH~19520| (0) #f (srfi :101 random-access-lists)) (rfor-each variable |\x0;ra:for-each~1pxGHH~19521| (0) #f (srfi :101 random-access-lists)) (rlist->list variable |\x0;ra:random-access-list->linear-access-list~1pxGHH~19522| (0) #f (srfi :101 random-access-lists)) (list->rlist variable |\x0;ra:linear-access-list->random-access-list~1pxGHH~19523| (0) #f (srfi :101 random-access-lists)) (ideque variable |\x0;ideque~1pxGHH~21177| (0) #f (srfi 134 ideque)) (ideque-tabulate variable |\x0;ideque-tabulate~1pxGHH~21178| (0) #f (srfi 134 ideque)) (ideque-unfold variable |\x0;ideque-unfold~1pxGHH~21179| (0) #f (srfi 134 ideque)) (ideque-unfold-right variable |\x0;ideque-unfold-right~1pxGHH~21180| (0) #f (srfi 134 ideque)) (ideque? variable |\x0;ideque?~1pxGHH~21170| (0) #f (srfi 134 ideque)) (ideque-empty? variable |\x0;ideque-empty?~1pxGHH~21183| (0) #f (srfi 134 ideque)) (ideque= variable |\x0;ideque=~1pxGHH~21191| (0) #f (srfi 134 ideque)) (ideque-any variable |\x0;ideque-any~1pxGHH~21228| (0) #f (srfi 134 ideque)) (ideque-every variable |\x0;ideque-every~1pxGHH~21229| (0) #f (srfi 134 ideque)) (ideque-front variable |\x0;ideque-front~1pxGHH~21185| (0) #f (srfi 134 ideque)) (ideque-add-front variable |\x0;ideque-add-front~1pxGHH~21184| (0) #f (srfi 134 ideque)) (ideque-remove-front variable |\x0;ideque-remove-front~1pxGHH~21186| (0) #f (srfi 134 ideque)) (ideque-back variable |\x0;ideque-back~1pxGHH~21188| (0) #f (srfi 134 ideque)) (ideque-add-back variable |\x0;ideque-add-back~1pxGHH~21187| (0) #f (srfi 134 ideque)) (ideque-remove-back variable |\x0;ideque-remove-back~1pxGHH~21189| (0) #f (srfi 134 ideque)) (ideque-ref variable |\x0;ideque-ref~1pxGHH~21193| (0) #f (srfi 134 ideque)) (ideque-take variable |\x0;ideque-take~1pxGHH~21197| (0) #f (srfi 134 ideque)) (ideque-take-right variable |\x0;ideque-take-right~1pxGHH~21198| (0) #f (srfi 134 ideque)) (ideque-drop variable |\x0;ideque-drop~1pxGHH~21199| (0) #f (srfi 134 ideque)) (ideque-drop-right variable |\x0;ideque-drop-right~1pxGHH~21200| (0) #f (srfi 134 ideque)) (ideque-split-at variable |\x0;ideque-split-at~1pxGHH~21201| (0) #f (srfi 134 ideque)) (ideque-length variable |\x0;ideque-length~1pxGHH~21202| (0) #f (srfi 134 ideque)) (ideque-append variable |\x0;ideque-append~1pxGHH~21203| (0) #f (srfi 134 ideque)) (ideque-reverse variable |\x0;ideque-reverse~1pxGHH~21190| (0) #f (srfi 134 ideque)) (ideque-count variable |\x0;ideque-count~1pxGHH~21204| (0) #f (srfi 134 ideque)) (ideque-zip variable |\x0;ideque-zip~1pxGHH~21205| (0) #f (srfi 134 ideque)) (ideque-map variable |\x0;ideque-map~1pxGHH~21206| (0) #f (srfi 134 ideque)) (ideque-filter-map variable |\x0;ideque-filter-map~1pxGHH~21207| (0) #f (srfi 134 ideque)) (ideque-for-each variable |\x0;ideque-for-each~1pxGHH~21208| (0) #f (srfi 134 ideque)) (ideque-for-each-right variable |\x0;ideque-for-each-right~1pxGHH~21209| (0) #f (srfi 134 ideque)) (ideque-fold variable |\x0;ideque-fold~1pxGHH~21210| (0) #f (srfi 134 ideque)) (ideque-fold-right variable |\x0;ideque-fold-right~1pxGHH~21211| (0) #f (srfi 134 ideque)) (ideque-append-map variable |\x0;ideque-append-map~1pxGHH~21212| (0) #f (srfi 134 ideque)) (ideque-filter variable |\x0;ideque-filter~1pxGHH~21214| (0) #f (srfi 134 ideque)) (ideque-remove variable |\x0;ideque-remove~1pxGHH~21215| (0) #f (srfi 134 ideque)) (ideque-partition variable |\x0;ideque-partition~1pxGHH~21216| (0) #f (srfi 134 ideque)) (ideque-find variable |\x0;ideque-find~1pxGHH~21219| (0) #f (srfi 134 ideque)) (ideque-find-right variable |\x0;ideque-find-right~1pxGHH~21220| (0) #f (srfi 134 ideque)) (ideque-take-while variable |\x0;ideque-take-while~1pxGHH~21221| (0) #f (srfi 134 ideque)) (ideque-take-while-right variable |\x0;ideque-take-while-right~1pxGHH~21222| (0) #f (srfi 134 ideque)) (ideque-drop-while variable |\x0;ideque-drop-while~1pxGHH~21223| (0) #f (srfi 134 ideque)) (ideque-drop-while-right variable |\x0;ideque-drop-while-right~1pxGHH~21224| (0) #f (srfi 134 ideque)) (ideque-span variable |\x0;ideque-span~1pxGHH~21226| (0) #f (srfi 134 ideque)) (ideque-break variable |\x0;ideque-break~1pxGHH~21227| (0) #f (srfi 134 ideque)) (list->ideque variable |\x0;list->ideque~1pxGHH~21231| (0) #f (srfi 134 ideque)) (ideque->list variable |\x0;ideque->list~1pxGHH~21230| (0) #f (srfi 134 ideque)) (generator->ideque variable |\x0;generator->ideque~1pxGHH~21233| (0) #f (srfi 134 ideque)) (ideque->generator variable |\x0;ideque->generator~1pxGHH~21232| (0) #f (srfi 134 ideque)) (text? variable text? (0) #f (larceny PRIMITIVES)) (textual? variable textual? (0) #f (larceny PRIMITIVES)) (textual-null? variable textual-null? (0) #f (larceny PRIMITIVES)) (textual-every variable textual-every (0) #f (larceny PRIMITIVES)) (textual-any variable textual-any (0) #f (larceny PRIMITIVES)) (make-text variable make-text (0) #f (larceny PRIMITIVES)) (text variable text (0) #f (larceny PRIMITIVES)) (text-tabulate variable text-tabulate (0) #f (larceny PRIMITIVES)) (text-unfold variable text-unfold (0) #f (larceny PRIMITIVES)) (text-unfold-right variable text-unfold-right (0) #f (larceny PRIMITIVES)) (textual->text variable textual->text (0) #f (larceny PRIMITIVES)) (textual->string variable textual->string (0) #f (larceny PRIMITIVES)) (textual->vector variable textual->vector (0) #f (larceny PRIMITIVES)) (textual->list variable textual->list (0) #f (larceny PRIMITIVES)) (string->text variable string->text (0) #f (larceny PRIMITIVES)) (vector->text variable vector->text (0) #f (larceny PRIMITIVES)) (list->text variable list->text (0) #f (larceny PRIMITIVES)) (reverse-list->text variable reverse-list->text (0) #f (larceny PRIMITIVES)) (textual->utf8 variable textual->utf8 (0) #f (larceny PRIMITIVES)) (textual->utf16be variable textual->utf16be (0) #f (larceny PRIMITIVES)) (textual->utf16 variable textual->utf16 (0) #f (larceny PRIMITIVES)) (textual->utf16le variable textual->utf16le (0) #f (larceny PRIMITIVES)) (utf8->text variable utf8->text (0) #f (larceny PRIMITIVES)) (utf16be->text variable utf16be->text (0) #f (larceny PRIMITIVES)) (utf16->text variable utf16->text (0) #f (larceny PRIMITIVES)) (utf16le->text variable utf16le->text (0) #f (larceny PRIMITIVES)) (text-length variable text-length (0) #f (larceny PRIMITIVES)) (textual-length variable textual-length (0) #f (larceny PRIMITIVES)) (text-ref variable text-ref (0) #f (larceny PRIMITIVES)) (textual-ref variable textual-ref (0) #f (larceny PRIMITIVES)) (subtext variable subtext (0) #f (larceny PRIMITIVES)) (subtextual variable subtextual (0) #f (larceny PRIMITIVES)) (textual-copy variable textual-copy (0) #f (larceny PRIMITIVES)) (textual-take variable textual-take (0) #f (larceny PRIMITIVES)) (textual-take-right variable textual-take-right (0) #f (larceny PRIMITIVES)) (textual-drop variable textual-drop (0) #f (larceny PRIMITIVES)) (textual-drop-right variable textual-drop-right (0) #f (larceny PRIMITIVES)) (textual-pad variable textual-pad (0) #f (larceny PRIMITIVES)) (textual-pad-right variable textual-pad-right (0) #f (larceny PRIMITIVES)) (textual-trim variable textual-trim (0) #f (larceny PRIMITIVES)) (textual-trim-right variable textual-trim-right (0) #f (larceny PRIMITIVES)) (textual-trim-both variable textual-trim-both (0) #f (larceny PRIMITIVES)) (textual-replace variable textual-replace (0) #f (larceny PRIMITIVES)) (textual=? variable textual=? (0) #f (larceny PRIMITIVES)) (textual-ci=? variable textual-ci=? (0) #f (larceny PRIMITIVES)) (textual<? variable textual<? (0) #f (larceny PRIMITIVES)) (textual-ci<? variable textual-ci<? (0) #f (larceny PRIMITIVES)) (textual>? variable textual>? (0) #f (larceny PRIMITIVES)) (textual-ci>? variable textual-ci>? (0) #f (larceny PRIMITIVES)) (textual<=? variable textual<=? (0) #f (larceny PRIMITIVES)) (textual-ci<=? variable textual-ci<=? (0) #f (larceny PRIMITIVES)) (textual>=? variable textual>=? (0) #f (larceny PRIMITIVES)) (textual-ci>=? variable textual-ci>=? (0) #f (larceny PRIMITIVES)) (textual-prefix-length variable textual-prefix-length (0) #f (larceny PRIMITIVES)) (textual-suffix-length variable textual-suffix-length (0) #f (larceny PRIMITIVES)) (textual-prefix? variable textual-prefix? (0) #f (larceny PRIMITIVES)) (textual-suffix? variable textual-suffix? (0) #f (larceny PRIMITIVES)) (textual-index variable textual-index (0) #f (larceny PRIMITIVES)) (textual-index-right variable textual-index-right (0) #f (larceny PRIMITIVES)) (textual-skip variable textual-skip (0) #f (larceny PRIMITIVES)) (textual-skip-right variable textual-skip-right (0) #f (larceny PRIMITIVES)) (textual-contains variable textual-contains (0) #f (larceny PRIMITIVES)) (textual-contains-right variable textual-contains-right (0) #f (larceny PRIMITIVES)) (textual-upcase variable textual-upcase (0) #f (larceny PRIMITIVES)) (textual-downcase variable textual-downcase (0) #f (larceny PRIMITIVES)) (textual-foldcase variable textual-foldcase (0) #f (larceny PRIMITIVES)) (textual-titlecase variable textual-titlecase (0) #f (larceny PRIMITIVES)) (textual-append variable textual-append (0) #f (larceny PRIMITIVES)) (textual-concatenate variable textual-concatenate (0) #f (larceny PRIMITIVES)) (textual-concatenate-reverse variable textual-concatenate-reverse (0) #f (larceny PRIMITIVES)) (textual-join variable textual-join (0) #f (larceny PRIMITIVES)) (textual-fold variable textual-fold (0) #f (larceny PRIMITIVES)) (textual-fold-right variable textual-fold-right (0) #f (larceny PRIMITIVES)) (textual-map variable textual-map (0) #f (larceny PRIMITIVES)) (textual-for-each variable textual-for-each (0) #f (larceny PRIMITIVES)) (textual-map-index variable textual-map-index (0) #f (larceny PRIMITIVES)) (textual-for-each-index variable textual-for-each-index (0) #f (larceny PRIMITIVES)) (textual-count variable textual-count (0) #f (larceny PRIMITIVES)) (textual-filter variable textual-filter (0) #f (larceny PRIMITIVES)) (textual-remove variable textual-remove (0) #f (larceny PRIMITIVES)) (textual-replicate variable textual-replicate (0) #f (larceny PRIMITIVES)) (textual-split variable textual-split (0) #f (larceny PRIMITIVES)) (generator variable |\x0;generator~1pxGHH~20246| (0) #f (srfi 121)) (make-iota-generator variable |\x0;make-iota-generator~1pxGHH~20247| (0) #f (srfi 121)) (make-range-generator variable |\x0;make-range-generator~1pxGHH~20249| (0) #f (srfi 121)) (make-coroutine-generator variable |\x0;make-coroutine-generator~1pxGHH~20251| (0) #f (srfi 121)) (list->generator variable |\x0;list->generator~1pxGHH~20252| (0) #f (srfi 121)) (vector->generator variable |\x0;vector->generator~1pxGHH~20253| (0) #f (srfi 121)) (reverse-vector->generator variable |\x0;reverse-vector->generator~1pxGHH~20254| (0) #f (srfi 121)) (string->generator variable |\x0;string->generator~1pxGHH~20255| (0) #f (srfi 121)) (bytevector->generator variable |\x0;bytevector->generator~1pxGHH~20256| (0) #f (srfi 121)) (make-for-each-generator variable |\x0;make-for-each-generator~1pxGHH~20257| (0) #f (srfi 121)) (make-unfold-generator variable |\x0;make-unfold-generator~1pxGHH~20258| (0) #f (srfi 121)) (gcons* variable |\x0;gcons*~1pxGHH~20259| (0) #f (srfi 121)) (gappend variable |\x0;gappend~1pxGHH~20260| (0) #f (srfi 121)) (gcombine variable |\x0;gcombine~1pxGHH~20261| (0) #f (srfi 121)) (gfilter variable |\x0;gfilter~1pxGHH~20262| (0) #f (srfi 121)) (gremove variable |\x0;gremove~1pxGHH~20263| (0) #f (srfi 121)) (gtake variable |\x0;gtake~1pxGHH~20264| (0) #f (srfi 121)) (gdrop variable |\x0;gdrop~1pxGHH~20265| (0) #f (srfi 121)) (gtake-while variable |\x0;gtake-while~1pxGHH~20267| (0) #f (srfi 121)) (gdrop-while variable |\x0;gdrop-while~1pxGHH~20266| (0) #f (srfi 121)) (gdelete variable |\x0;gdelete~1pxGHH~20268| (0) #f (srfi 121)) (gdelete-neighbor-dups variable |\x0;gdelete-neighbor-dups~1pxGHH~20269| (0) #f (srfi 121)) (gindex variable |\x0;gindex~1pxGHH~20270| (0) #f (srfi 121)) (gselect variable |\x0;gselect~1pxGHH~20271| (0) #f (srfi 121)) (generator->list variable |\x0;generator->list~1pxGHH~20272| (0) #f (srfi 121)) (generator->reverse-list variable |\x0;generator->reverse-list~1pxGHH~20273| (0) #f (srfi 121)) (generator->vector variable |\x0;generator->vector~1pxGHH~20274| (0) #f (srfi 121)) (generator->vector! variable |\x0;generator->vector!~1pxGHH~20275| (0) #f (srfi 121)) (generator->string variable |\x0;generator->string~1pxGHH~20276| (0) #f (srfi 121)) (generator-fold variable |\x0;generator-fold~1pxGHH~20277| (0) #f (srfi 121)) (generator-for-each variable |\x0;generator-for-each~1pxGHH~20278| (0) #f (srfi 121)) (generator-find variable |\x0;generator-find~1pxGHH~20279| (0) #f (srfi 121)) (generator-count variable |\x0;generator-count~1pxGHH~20280| (0) #f (srfi 121)) (generator-any variable |\x0;generator-any~1pxGHH~20281| (0) #f (srfi 121)) (generator-every variable |\x0;generator-every~1pxGHH~20282| (0) #f (srfi 121)) (generator-unfold variable |\x0;generator-unfold~1pxGHH~20283| (0) #f (srfi 121)) (generator->lseq variable |\x0;generator->lseq~1pxGHH~21809| (0) #f (srfi 127)) (lseq? variable |\x0;lseq?~1pxGHH~21814| (0) #f (srfi 127)) (lseq=? variable |\x0;lseq=?~1pxGHH~21815| (0) #f (srfi 127)) (lseq-car variable |\x0;lseq-car~1pxGHH~21810| (0) #f (srfi 127)) (lseq-first variable |\x0;lseq-first~1pxGHH~21811| (0) #f (srfi 127)) (lseq-cdr variable |\x0;lseq-cdr~1pxGHH~21812| (0) #f (srfi 127)) (lseq-rest variable |\x0;lseq-rest~1pxGHH~21813| (0) #f (srfi 127)) (lseq-ref variable |\x0;lseq-ref~1pxGHH~21818| (0) #f (srfi 127)) (lseq-take variable |\x0;lseq-take~1pxGHH~21816| (0) #f (srfi 127)) (lseq-drop variable |\x0;lseq-drop~1pxGHH~21817| (0) #f (srfi 127)) (lseq-realize variable |\x0;lseq-realize~1pxGHH~21819| (0) #f (srfi 127)) (lseq->generator variable |\x0;lseq->generator~1pxGHH~21821| (0) #f (srfi 127)) (lseq-length variable |\x0;lseq-length~1pxGHH~21820| (0) #f (srfi 127)) (lseq-append variable |\x0;lseq-append~1pxGHH~21822| (0) #f (srfi 127)) (lseq-zip variable |\x0;lseq-zip~1pxGHH~21825| (0) #f (srfi 127)) (lseq-map variable |\x0;lseq-map~1pxGHH~21824| (0) #f (srfi 127)) (lseq-for-each variable |\x0;lseq-for-each~1pxGHH~21826| (0) #f (srfi 127)) (lseq-filter variable |\x0;lseq-filter~1pxGHH~21827| (0) #f (srfi 127)) (lseq-remove variable |\x0;lseq-remove~1pxGHH~21828| (0) #f (srfi 127)) (lseq-find variable |\x0;lseq-find~1pxGHH~21829| (0) #f (srfi 127)) (lseq-find-tail variable |\x0;lseq-find-tail~1pxGHH~21830| (0) #f (srfi 127)) (lseq-take-while variable |\x0;lseq-take-while~1pxGHH~21831| (0) #f (srfi 127)) (lseq-drop-while variable |\x0;lseq-drop-while~1pxGHH~21832| (0) #f (srfi 127)) (lseq-any variable |\x0;lseq-any~1pxGHH~21833| (0) #f (srfi 127)) (lseq-every variable |\x0;lseq-every~1pxGHH~21834| (0) #f (srfi 127)) (lseq-index variable |\x0;lseq-index~1pxGHH~21835| (0) #f (srfi 127)) (lseq-member variable |\x0;lseq-member~1pxGHH~21836| (0) #f (srfi 127)) (lseq-memq variable |\x0;lseq-memq~1pxGHH~21838| (0) #f (srfi 127)) (lseq-memv variable |\x0;lseq-memv~1pxGHH~21837| (0) #f (srfi 127)) (stream-null variable |\x0;stream-null~1pxGHH~22230| (0) #f (srfi :41 streams primitive)) (stream-cons macro |\x0;stream-cons~1pxGHH~22251| (0) #f (srfi :41 streams primitive)) (stream? variable |\x0;stream?~1pxGHH~22193| (0) #f (srfi :41 streams primitive)) (stream-null? variable |\x0;stream-null?~1pxGHH~22250| (0) #f (srfi :41 streams primitive)) (stream-pair? variable |\x0;stream-pair?~1pxGHH~22249| (0) #f (srfi :41 streams primitive)) (stream-car variable |\x0;stream-car~1pxGHH~22269| (0) #f (srfi :41 streams primitive)) (stream-cdr variable |\x0;stream-cdr~1pxGHH~22270| (0) #f (srfi :41 streams primitive)) (stream-lambda macro |\x0;stream-lambda~1pxGHH~22271| (0) #f (srfi :41 streams primitive)) (define-stream macro |\x0;define-stream~1pxGHH~22363| (0) #f (srfi :41 streams derived)) (list->stream variable |\x0;list->stream~1pxGHH~22385| (0) #f (srfi :41 streams derived)) (port->stream variable |\x0;port->stream~1pxGHH~22386| (0) #f (srfi :41 streams derived)) (stream macro |\x0;stream~1pxGHH~22387| (0) #f (srfi :41 streams derived)) (stream->list variable |\x0;stream->list~1pxGHH~22409| (0) #f (srfi :41 streams derived)) (stream-append variable |\x0;stream-append~1pxGHH~22410| (0) #f (srfi :41 streams derived)) (stream-concat variable |\x0;stream-concat~1pxGHH~22411| (0) #f (srfi :41 streams derived)) (stream-constant variable |\x0;stream-constant~1pxGHH~22412| (0) #f (srfi :41 streams derived)) (stream-drop variable |\x0;stream-drop~1pxGHH~22413| (0) #f (srfi :41 streams derived)) (stream-drop-while variable |\x0;stream-drop-while~1pxGHH~22414| (0) #f (srfi :41 streams derived)) (stream-filter variable |\x0;stream-filter~1pxGHH~22415| (0) #f (srfi :41 streams derived)) (stream-fold variable |\x0;stream-fold~1pxGHH~22416| (0) #f (srfi :41 streams derived)) (stream-for-each variable |\x0;stream-for-each~1pxGHH~22417| (0) #f (srfi :41 streams derived)) (stream-from variable |\x0;stream-from~1pxGHH~22418| (0) #f (srfi :41 streams derived)) (stream-iterate variable |\x0;stream-iterate~1pxGHH~22419| (0) #f (srfi :41 streams derived)) (stream-length variable |\x0;stream-length~1pxGHH~22420| (0) #f (srfi :41 streams derived)) (stream-let macro |\x0;stream-let~1pxGHH~22421| (0) #f (srfi :41 streams derived)) (stream-map variable |\x0;stream-map~1pxGHH~22450| (0) #f (srfi :41 streams derived)) (stream-match macro |\x0;stream-match~1pxGHH~22451| (0) #f (srfi :41 streams derived)) (stream-of macro |\x0;stream-of~1pxGHH~22619| (0) #f (srfi :41 streams derived)) (stream-range variable |\x0;stream-range~1pxGHH~22715| (0) #f (srfi :41 streams derived)) (stream-ref variable |\x0;stream-ref~1pxGHH~22716| (0) #f (srfi :41 streams derived)) (stream-reverse variable |\x0;stream-reverse~1pxGHH~22717| (0) #f (srfi :41 streams derived)) (stream-scan variable |\x0;stream-scan~1pxGHH~22718| (0) #f (srfi :41 streams derived)) (stream-take variable |\x0;stream-take~1pxGHH~22719| (0) #f (srfi :41 streams derived)) (stream-take-while variable |\x0;stream-take-while~1pxGHH~22720| (0) #f (srfi :41 streams derived)) (stream-unfold variable |\x0;stream-unfold~1pxGHH~22721| (0) #f (srfi :41 streams derived)) (stream-unfolds variable |\x0;stream-unfolds~1pxGHH~22722| (0) #f (srfi :41 streams derived)) (stream-zip variable |\x0;stream-zip~1pxGHH~22723| (0) #f (srfi :41 streams derived)) (box variable |\x0;box~1pxGHH~23561| (0) #f (srfi 111)) (box? variable |\x0;box?~1pxGHH~23562| (0) #f (srfi 111)) (unbox variable |\x0;unbox~1pxGHH~23563| (0) #f (srfi 111)) (set-box! variable |\x0;set-box!~1pxGHH~23564| (0) #f (srfi 111)) (make-list-queue variable |\x0;make-list-queue~1pxGHH~23595| (0) #f (srfi 117)) (list-queue variable |\x0;list-queue~1pxGHH~23596| (0) #f (srfi 117)) (list-queue-copy variable |\x0;list-queue-copy~1pxGHH~23597| (0) #f (srfi 117)) (list-queue-unfold variable |\x0;list-queue-unfold~1pxGHH~23612| (0) #f (srfi 117)) (list-queue-unfold-right variable |\x0;list-queue-unfold-right~1pxGHH~23614| (0) #f (srfi 117)) (list-queue? variable |\x0;list-queue?~1pxGHH~23590| (0) #f (srfi 117)) (list-queue-empty? variable |\x0;list-queue-empty?~1pxGHH~23598| (0) #f (srfi 117)) (list-queue-front variable |\x0;list-queue-front~1pxGHH~23599| (0) #f (srfi 117)) (list-queue-back variable |\x0;list-queue-back~1pxGHH~23600| (0) #f (srfi 117)) (list-queue-list variable |\x0;list-queue-list~1pxGHH~23618| (0) #f (srfi 117)) (list-queue-first-last variable |\x0;list-queue-first-last~1pxGHH~23619| (0) #f (srfi 117)) (list-queue-add-front! variable |\x0;list-queue-add-front!~1pxGHH~23601| (0) #f (srfi 117)) (list-queue-add-back! variable |\x0;list-queue-add-back!~1pxGHH~23602| (0) #f (srfi 117)) (list-queue-remove-front! variable |\x0;list-queue-remove-front!~1pxGHH~23603| (0) #f (srfi 117)) (list-queue-remove-back! variable |\x0;list-queue-remove-back!~1pxGHH~23604| (0) #f (srfi 117)) (list-queue-remove-all! variable |\x0;list-queue-remove-all!~1pxGHH~23605| (0) #f (srfi 117)) (list-queue-set-list! variable |\x0;list-queue-set-list!~1pxGHH~23620| (0) #f (srfi 117)) (list-queue-append variable |\x0;list-queue-append~1pxGHH~23607| (0) #f (srfi 117)) (list-queue-append! variable |\x0;list-queue-append!~1pxGHH~23609| (0) #f (srfi 117)) (list-queue-concatenate variable |\x0;list-queue-concatenate~1pxGHH~23608| (0) #f (srfi 117)) (list-queue-map variable |\x0;list-queue-map~1pxGHH~23611| (0) #f (srfi 117)) (list-queue-map! variable |\x0;list-queue-map!~1pxGHH~23616| (0) #f (srfi 117)) (list-queue-for-each variable |\x0;list-queue-for-each~1pxGHH~23617| (0) #f (srfi 117)) (ephemeron? variable |\x0;ephemeron?~1pxGHH~23933| (0) #f (srfi 124)) (make-ephemeron variable |\x0;make-ephemeron~1pxGHH~23940| (0) #f (srfi 124)) (ephemeron-broken? variable |\x0;ephemeron-broken?~1pxGHH~23943| (0) #f (srfi 124)) (ephemeron-key variable |\x0;ephemeron-key~1pxGHH~23941| (0) #f (srfi 124)) (ephemeron-datum variable |\x0;ephemeron-datum~1pxGHH~23942| (0) #f (srfi 124)) (reference-barrier variable |\x0;reference-barrier~1pxGHH~23944| (0) #f (srfi 124)) (comparator? variable |\x0;comparator?~1pxGHH~11480| (0) #f (srfi 128 kernel)) (comparator-ordered? variable |\x0;comparator-ordered?~1pxGHH~11486| (0) #f (srfi 128 kernel)) (comparator-hashable? variable |\x0;comparator-hashable?~1pxGHH~11488| (0) #f (srfi 128 kernel)) (make-comparator variable |\x0;make-comparator~1pxGHH~11489| (0) #f (srfi 128 kernel)) (make-pair-comparator variable |\x0;make-pair-comparator~1pxGHH~11737| (0) #f (srfi 128)) (make-list-comparator variable |\x0;make-list-comparator~1pxGHH~11743| (0) #f (srfi 128)) (make-vector-comparator variable |\x0;make-vector-comparator~1pxGHH~11748| (0) #f (srfi 128)) (make-eq-comparator variable |\x0;make-eq-comparator~1pxGHH~11733| (0) #f (srfi 128)) (make-eqv-comparator variable |\x0;make-eqv-comparator~1pxGHH~11734| (0) #f (srfi 128)) (make-equal-comparator variable |\x0;make-equal-comparator~1pxGHH~11735| (0) #f (srfi 128)) (boolean-hash variable |\x0;boolean-hash~1pxGHH~11727| (0) #f (srfi 128)) (char-hash variable |\x0;char-hash~1pxGHH~11728| (0) #f (srfi 128)) (char-ci-hash variable |\x0;char-ci-hash~1pxGHH~11729| (0) #f (srfi 128)) (number-hash variable |\x0;number-hash~1pxGHH~11730| (0) #f (srfi 128)) (make-default-comparator variable |\x0;make-default-comparator~1pxGHH~11766| (0) #f (srfi 128)) (default-hash variable |\x0;default-hash~1pxGHH~11763| (0) #f (srfi 128)) (comparator-register-default! variable |\x0;comparator-register-default!~1pxGHH~11757| (0) #f (srfi 128)) (comparator-type-test-predicate variable |\x0;comparator-type-test-predicate~1pxGHH~11481| (0) #f (srfi 128 kernel)) (comparator-equality-predicate variable |\x0;comparator-equality-predicate~1pxGHH~11482| (0) #f (srfi 128 kernel)) (comparator-ordering-predicate variable |\x0;comparator-ordering-predicate~1pxGHH~11483| (0) #f (srfi 128 kernel)) (comparator-hash-function variable |\x0;comparator-hash-function~1pxGHH~11485| (0) #f (srfi 128 kernel)) (comparator-test-type variable |\x0;comparator-test-type~1pxGHH~11713| (0) #f (srfi 128)) (comparator-check-type variable |\x0;comparator-check-type~1pxGHH~11714| (0) #f (srfi 128)) (comparator-hash variable |\x0;comparator-hash~1pxGHH~11715| (0) #f (srfi 128)) (hash-bound macro |\x0;hash-bound~1pxGHH~11668| (0) #f (srfi 128)) (hash-salt macro |\x0;hash-salt~1pxGHH~11680| (0) #f (srfi 128)) (=? variable |\x0;=?~1pxGHH~11721| (0) #f (srfi 128)) (<? variable |\x0;<?~1pxGHH~11722| (0) #f (srfi 128)) (>? variable |\x0;>?~1pxGHH~11723| (0) #f (srfi 128)) (<=? variable |\x0;<=?~1pxGHH~11724| (0) #f (srfi 128)) (>=? variable |\x0;>=?~1pxGHH~11725| (0) #f (srfi 128)) (comparator-if<=> macro |\x0;comparator-if<=>~1pxGHH~11617| (0) #f (srfi 128))) (((scheme comparator) 0) ((scheme ephemeron) 0) ((scheme list-queue) 0) ((scheme box) 0) ((scheme stream) 0) ((scheme lseq) 0) ((scheme generator) 0) ((scheme text) 0) ((scheme ideque) 0) ((scheme rlist) 0) ((scheme ilist) 0) ((scheme hash-table) 0) ((scheme charset) 0) ((scheme set) 0) ((scheme sort) 0) ((scheme vector) 0) ((scheme list) 0) ((rnrs) 0) ((scheme r5rs) 0) ((scheme write) 0) ((scheme time) 0) ((scheme repl) 0) ((scheme read) 0) ((scheme process-context) 0) ((scheme load) 0) ((scheme lazy) 0) ((scheme inexact) 0) ((scheme file) 0) ((scheme eval) 0) ((scheme cxr) 0) ((scheme complex) 0) ((scheme char) 0) ((scheme case-lambda) 0) ((scheme base) 0)) (|\x0;build~1pxGHH~24017| |\x0;build~1pxGHH~24011| |\x0;build~1pxGHH~23919| |\x0;build~1pxGHH~23575| |\x0;build~1pxGHH~23549| |\x0;build~1pxGHH~22174| |\x0;build~1pxGHH~21800| |\x0;build~1pxGHH~7209| |\x0;build~1pxGHH~21794| |\x0;build~1pxGHH~20227| |\x0;build~1pxGHH~19403| |\x0;build~1pxGHH~15991| |\x0;build~1pxGHH~15400| |\x0;build~1pxGHH~14144| |\x0;build~1pxGHH~11465| |\x0;build~1pxGHH~10566| |\x0;build~1pxGHH~7197| |\x0;build~1pxGHH~9116| |\x0;build~1pxGHH~9098| |\x0;build~1pxGHH~4493| |\x0;build~1pxGHH~9086| |\x0;build~1pxGHH~9048| |\x0;build~1pxGHH~4935| |\x0;build~1pxGHH~7231| |\x0;build~1pxGHH~9040| |\x0;build~1pxGHH~9028| |\x0;build~1pxGHH~4499| |\x0;build~1pxGHH~4517| |\x0;build~1pxGHH~9022| |\x0;build~1pxGHH~4487| |\x0;build~1pxGHH~4505| |\x0;build~1pxGHH~9016| |\x0;build~1pxGHH~7216| |\x0;build~1pxGHH~4481|) |\x0;build~1pxGHH~24054| #ex:make-library #ex:register-library! #values)
 #f)
))
