#!fasl
(define .petit-bootstrap-id-0b69e7a7ebd49b2c6a3271247e16de20 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/larceny/r7rs/macros.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-0b69e7a7ebd49b2c6a3271247e16de20 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~3613| 0 1 2 3) (|\x0;env~1pxGHH~3593| 4 5 6 3) (|\x0;env~1pxGHH~3581| 7 5 6 3) (|\x0;env~1pxGHH~3564| 8 5 6 3) (|\x0;env~1pxGHH~3547| 9 5 6 3) (|\x0;env~1pxGHH~3534| 10 5 6 3) (|\x0;env~1pxGHH~3508| 11 12 13 3) (|\x0;env~1pxGHH~3493| 14 12 13 3) (|\x0;env~1pxGHH~3477| 15 12 13 3) (|\x0;env~1pxGHH~3461| 16 12 13 3) (|\x0;env~1pxGHH~3445| 17 12 13 3) (|\x0;env~1pxGHH~3429| 18 12 13 3) (|\x0;env~1pxGHH~3415| 19 12 13 3) (|\x0;env~1pxGHH~3400| 20 12 13 3) (|\x0;env~1pxGHH~3382| 21 12 13 3) (|\x0;env~1pxGHH~3371| 22 12 13 3) (|\x0;env~1pxGHH~3359| 23 12 13 3)) (23 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<constructor>) . #f) ((<pred>) . #f) ((<field>) . #f))) (22 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f))) (21 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<rtd>) . #f) ((<cd>) . #f) ((stuff) . #f))) (20 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<uid>) . #f) ((stuff) . #f))) (19 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((stuff) . #f))) (18 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<boolean>) . #f) ((stuff) . #f))) (17 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<boolean>) . #f) ((stuff) . #f))) (16 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<exp>) . #f) ((stuff) . #f))) (15 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<pname>) . #f) ((stuff) . #f))) (14 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<spec>) . #f) ((stuff) . #f))) (13 (((x |\x0;c~1pxGHH~3337|) variable |\x0;x~1pxGHH~3339| (0) #f (larceny r7rs macros)))) (12 ()) (11 (((dummy |\x0;c~1pxGHH~3337|) . #f) ((<name>) . #f) ((<constructor>) . #f) ((<predicate>) . #f) ((stuff) . #f))) (10 (((dummy |\x0;c~1pxGHH~3520|) . #f) ((var) . #f) ((expr) . #f))) (9 (((dummy |\x0;c~1pxGHH~3520|) . #f) ((var0) . #f) ((var1) . #f) ((varn) . #f) ((expr) . #f))) (8 (((dummy |\x0;c~1pxGHH~3520|) . #f) ((var0) . #f) ((var1) . #f) ((varn) . #f) ((expr) . #f))) (7 (((dummy |\x0;c~1pxGHH~3520|) . #f) ((var) . #f) ((expr) . #f))) (6 (((x |\x0;c~1pxGHH~3520|) variable |\x0;x~1pxGHH~3522| (0) #f (larceny r7rs macros)))) (5 ()) (4 (((dummy |\x0;c~1pxGHH~3520|) . #f) ((expr) . #f))) (3 (((parameterize) macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) ((define-values) macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) ((define-record-type) macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0) #f (larceny PRIMITIVES)) ((div0) variable div0 (0) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0) #f (larceny PRIMITIVES)) ((mod) variable mod (0) #f (larceny PRIMITIVES)) ((div) variable div (0) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((tan) variable tan (0) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0) #f (larceny PRIMITIVES)) ((sin) variable sin (0) #f (larceny PRIMITIVES)) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0) #f (larceny PRIMITIVES)) ((log) variable log (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exp) variable exp (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((cos) variable cos (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((atan) variable atan (0) #f (larceny PRIMITIVES)) ((asin) variable asin (0) #f (larceny PRIMITIVES)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((angle) variable angle (0) #f (larceny PRIMITIVES)) ((acos) variable acos (0) #f (larceny PRIMITIVES)) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((set-cdr!) variable set-cdr! (0) #f (larceny PRIMITIVES)) ((set-car!) variable set-car! (0) #f (larceny PRIMITIVES)) ((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) ((r6rs-define-record-type) macro |\x0;define-record-type~1pxGHH~2349| (0) #f (rnrs records syntactic original)) ((r7rs-define-record-type) macro |\x0;define-record-type~1pxGHH~1805| (0) #f (err5rs records syntactic original)) ((parameter?) variable parameter? (0) #f (larceny PRIMITIVES)) ((program) macro program (0) #f ()) ((library) macro library (0) #f ()) ((define-library) macro define-library (0) #f ()) ((export) macro export (0) #f ()) ((import) macro import (0) #f ()) ((only) macro only (0) #f ()) ((except) macro except (0) #f ()) ((prefix) macro prefix (0) #f ()) ((rename) macro rename (0) #f ()) ((primitives) macro primitives (0) #f ()) ((begin) macro begin (0) #f ()) ((cond-expand) macro cond-expand (0) #f ()) ((include) macro include (0) #f ()) ((include-ci) macro include-ci (0) #f ()) ((include-library-declarations) macro include-library-declarations (0) #f ()))) (2 (((x |\x0;c~1pxGHH~3601|) variable |\x0;x~1pxGHH~3603| (0) #f (larceny r7rs macros)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~3601|) . #f) ((p1) . #f) ((e1) . #f) ((b1) . #f) ((b2) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3339|))) (3444 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (6275 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (7850 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (13627 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (18910 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (23640 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (28923 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (34206 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (39489 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (44772 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? r6rs-define-record-type (|\x0;env~1pxGHH~3508|) (larceny r7rs macros) #ex:syntax-rename r7rs-define-record-type (|\x0;env~1pxGHH~3359|) #ex:invalid-form (|\x0;env~1pxGHH~3371|) #ex:identifier? parent-rtd (|\x0;env~1pxGHH~3382|) #ex:free-identifier=? nongenerative (|\x0;env~1pxGHH~3400|) (|\x0;env~1pxGHH~3415|) opaque (|\x0;env~1pxGHH~3429|) sealed (|\x0;env~1pxGHH~3445|) protocol (|\x0;env~1pxGHH~3461|) parent (|\x0;env~1pxGHH~3477|) fields (|\x0;env~1pxGHH~3493|))
 |\x0;define-record-type~1pxGHH~3336| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3522|))) (5530 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2008\|2009| |.results\|2008\|2012|))) (11301 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (15391 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1738\|1739| |.results\|1738\|1742|))) (21162 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (33412 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (46261 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) define (|\x0;env~1pxGHH~3593|) (larceny r7rs macros) #ex:syntax-rename dummy call-with-values lambda args #reverse (|\x0;env~1pxGHH~3547|) let v cadr set-cdr! cddr (|\x0;env~1pxGHH~3534|) list #ex:invalid-form (|\x0;env~1pxGHH~3564|) #ex:dotted-length #ex:dotted-butlast #list? #ex:dotted-last begin cdr set! car #append (|\x0;env~1pxGHH~3581|))
 |\x0;define-values~1pxGHH~3519| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~3603|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~3618|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~3620| |\x0;rest~1pxGHH~3619|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p1~1pxGHH~3608| |\x0;e1~1pxGHH~3609|))) (64115 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2657\|2659| |.y1\|2657\|2658| |.results\|2657\|2662|)))) #list? letrec-syntax (|\x0;env~1pxGHH~3613|) (larceny r7rs macros) #ex:syntax-rename parameterize-aux syntax-rules t ... p0 e0 x body1 body2 let tempE tempP first-time? tE tP let-syntax swap! var param tmp set! flag if parameter? dynamic-wind lambda begin quote no-conversion #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((p1 e1) ...) #ex:syntax-violation #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p1~1pxGHH~3608| |\x0;e1~1pxGHH~3609|)))
 #larceny:map #reverse #append)
 (() ()) #map #list #apply #ex:invalid-form)
 #ex:map-while #ex:invalid-form)
 |\x0;parameterize~1pxGHH~3600| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (larceny r7rs macros) ((define-record-type macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) (define-values macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) (parameterize macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) (syntax-error macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules))) (((err5rs records syntactic original) 0) ((rnrs records syntactic original) 0) ((core syntax-rules) 1 0) ((rnrs mutable-pairs) 0) ((rnrs base) 0)) (|\x0;build~1pxGHH~2311| |\x0;build~1pxGHH~3329| |\x0;build~1pxGHH~143| |\x0;build~1pxGHH~2319| |\x0;build~1pxGHH~1533|) |\x0;build~1pxGHH~3626| #ex:make-library #ex:register-library! #values)
 #f)
))
