(begin #\L (ex:register-library! (ex:make-library '(core primitives) (lambda () '()) '((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (_ macro _ (0) #f ()) (... macro ... (0) #f ()) (syntax macro syntax (0) #f ()) (syntax-case macro syntax-case (0) #f ()) (make-variable-transformer variable ex:make-variable-transformer (0) #f (larceny PRIMITIVES)) (identifier? variable ex:identifier? (0) #f (larceny PRIMITIVES)) (bound-identifier=? variable ex:bound-identifier=? (0) #f (larceny PRIMITIVES)) (free-identifier=? variable ex:free-identifier=? (0) #f (larceny PRIMITIVES)) (generate-temporaries variable ex:generate-temporaries (0) #f (larceny PRIMITIVES)) (datum->syntax variable ex:datum->syntax (0) #f (larceny PRIMITIVES)) (syntax->datum variable ex:syntax->datum (0) #f (larceny PRIMITIVES)) (syntax-violation variable ex:syntax-violation (0) #f (larceny PRIMITIVES)) (environment variable ex:environment (0) #f (larceny PRIMITIVES)) (environment-bindings variable ex:environment-bindings (0) #f (larceny PRIMITIVES)) (eval variable ex:eval (0) #f (larceny PRIMITIVES)) (undefined variable ex:undefined (0) #f (larceny PRIMITIVES))) '(((core primitive-macros) 0)) '(system) (lambda () (values)) (lambda () (values)) '|\x0;build~1pxGHH~2|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core with-syntax) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~50| 0 1 2 3) (|\x0;env~1pxGHH~34| 4 1 2 3) (|\x0;env~1pxGHH~16| 5 1 2 3)) (5 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (4 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (3 (((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (0) #f (core with-syntax)) ((undefined) variable ex:undefined (0 1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0 1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0 1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0 1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0 1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((list) variable list (0) #f (larceny PRIMITIVES)))) (2 (((x) variable |\x0;x~1pxGHH~5| (1) #f (core with-syntax)))) (1 ()) (0 (((e1) . #f) ((e2) . #f)))))) '((with-syntax macro |\x0;with-syntax~1pxGHH~3| (0) #f (core with-syntax))) '(((core primitives) 0 1)) '(|\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;with-syntax~1pxGHH~3| (lambda (|\x0;x~1pxGHH~5|) (let ((|\x0;input~1pxGHH~7| |\x0;x~1pxGHH~5|)) (let ((|\x0;fail~1pxGHH~8| (lambda () (let ((|\x0;fail~1pxGHH~9| (lambda () (let ((|\x0;fail~1pxGHH~10| (lambda () (ex:invalid-form |\x0;input~1pxGHH~7|)))) (if (pair? |\x0;input~1pxGHH~7|) (let ((|\x0;temp~1pxGHH~28| (car |\x0;input~1pxGHH~7|))) (let ((|\x0;temp~1pxGHH~17| (cdr |\x0;input~1pxGHH~7|))) (if (pair? |\x0;temp~1pxGHH~17|) (let ((|\x0;temp~1pxGHH~21| (car |\x0;temp~1pxGHH~17|))) (ex:map-while (lambda (|\x0;temp~1pxGHH~21|) (if (pair? |\x0;temp~1pxGHH~21|) (let ((|\x0;temp~1pxGHH~27| (car |\x0;temp~1pxGHH~21|))) (let ((|\x0;out~1pxGHH~11| |\x0;temp~1pxGHH~27|)) (let ((|\x0;temp~1pxGHH~24| (cdr |\x0;temp~1pxGHH~21|))) (if (pair? |\x0;temp~1pxGHH~24|) (let ((|\x0;temp~1pxGHH~26| (car |\x0;temp~1pxGHH~24|))) (let ((|\x0;in~1pxGHH~12| |\x0;temp~1pxGHH~26|)) (let ((|\x0;temp~1pxGHH~25| (cdr |\x0;temp~1pxGHH~24|))) (if (null? |\x0;temp~1pxGHH~25|) (list |\x0;out~1pxGHH~11| |\x0;in~1pxGHH~12|) #f)))) #f)))) #f)) |\x0;temp~1pxGHH~21| (lambda (|\x0;cols~1pxGHH~23| |\x0;rest~1pxGHH~22|) (if (null? |\x0;rest~1pxGHH~22|) (apply (lambda (|\x0;out~1pxGHH~11| |\x0;in~1pxGHH~12|) (let ((|\x0;temp~1pxGHH~18| (cdr |\x0;temp~1pxGHH~17|))) (if (pair? |\x0;temp~1pxGHH~18|) (let ((|\x0;temp~1pxGHH~20| (car |\x0;temp~1pxGHH~18|))) (let ((|\x0;e1~1pxGHH~13| |\x0;temp~1pxGHH~20|)) (let ((|\x0;temp~1pxGHH~19| (cdr |\x0;temp~1pxGHH~18|))) (if (list? |\x0;temp~1pxGHH~19|) (let ((|\x0;e2~1pxGHH~14| |\x0;temp~1pxGHH~19|)) (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1pxGHH~16|) 0 '(core with-syntax)) (cons (cons (ex:syntax-rename 'list '() '(|\x0;env~1pxGHH~16|) 0 '(core with-syntax)) |\x0;in~1pxGHH~12|) (cons '() (cons (cons |\x0;out~1pxGHH~11| (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~16|) 0 '(core with-syntax)) (cons |\x0;e1~1pxGHH~13| |\x0;e2~1pxGHH~14|)) '())) '()))))) (|\x0;fail~1pxGHH~10|))))) (|\x0;fail~1pxGHH~10|)))) (if (null? |\x0;cols~1pxGHH~23|) '(() ()) (apply map list |\x0;cols~1pxGHH~23|))) (|\x0;fail~1pxGHH~10|))))) (|\x0;fail~1pxGHH~10|)))) (|\x0;fail~1pxGHH~10|)))))) (if (pair? |\x0;input~1pxGHH~7|) (let ((|\x0;temp~1pxGHH~46| (car |\x0;input~1pxGHH~7|))) (let ((|\x0;temp~1pxGHH~35| (cdr |\x0;input~1pxGHH~7|))) (if (pair? |\x0;temp~1pxGHH~35|) (let ((|\x0;temp~1pxGHH~39| (car |\x0;temp~1pxGHH~35|))) (if (pair? |\x0;temp~1pxGHH~39|) (let ((|\x0;temp~1pxGHH~41| (car |\x0;temp~1pxGHH~39|))) (if (pair? |\x0;temp~1pxGHH~41|) (let ((|\x0;temp~1pxGHH~45| (car |\x0;temp~1pxGHH~41|))) (let ((|\x0;out~1pxGHH~29| |\x0;temp~1pxGHH~45|)) (let ((|\x0;temp~1pxGHH~42| (cdr |\x0;temp~1pxGHH~41|))) (if (pair? |\x0;temp~1pxGHH~42|) (let ((|\x0;temp~1pxGHH~44| (car |\x0;temp~1pxGHH~42|))) (let ((|\x0;in~1pxGHH~30| |\x0;temp~1pxGHH~44|)) (let ((|\x0;temp~1pxGHH~43| (cdr |\x0;temp~1pxGHH~42|))) (if (null? |\x0;temp~1pxGHH~43|) (let ((|\x0;temp~1pxGHH~40| (cdr |\x0;temp~1pxGHH~39|))) (if (null? |\x0;temp~1pxGHH~40|) (let ((|\x0;temp~1pxGHH~36| (cdr |\x0;temp~1pxGHH~35|))) (if (pair? |\x0;temp~1pxGHH~36|) (let ((|\x0;temp~1pxGHH~38| (car |\x0;temp~1pxGHH~36|))) (let ((|\x0;e1~1pxGHH~31| |\x0;temp~1pxGHH~38|)) (let ((|\x0;temp~1pxGHH~37| (cdr |\x0;temp~1pxGHH~36|))) (if (list? |\x0;temp~1pxGHH~37|) (let ((|\x0;e2~1pxGHH~32| |\x0;temp~1pxGHH~37|)) (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1pxGHH~34|) 0 '(core with-syntax)) (cons |\x0;in~1pxGHH~30| (cons '() (cons (cons |\x0;out~1pxGHH~29| (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~34|) 0 '(core with-syntax)) (cons |\x0;e1~1pxGHH~31| |\x0;e2~1pxGHH~32|)) '())) '()))))) (|\x0;fail~1pxGHH~9|))))) (|\x0;fail~1pxGHH~9|))) (|\x0;fail~1pxGHH~9|))) (|\x0;fail~1pxGHH~9|))))) (|\x0;fail~1pxGHH~9|))))) (|\x0;fail~1pxGHH~9|))) (|\x0;fail~1pxGHH~9|))) (|\x0;fail~1pxGHH~9|)))) (|\x0;fail~1pxGHH~9|)))))) (if (pair? |\x0;input~1pxGHH~7|) (let ((|\x0;temp~1pxGHH~56| (car |\x0;input~1pxGHH~7|))) (let ((|\x0;temp~1pxGHH~51| (cdr |\x0;input~1pxGHH~7|))) (if (pair? |\x0;temp~1pxGHH~51|) (let ((|\x0;temp~1pxGHH~55| (car |\x0;temp~1pxGHH~51|))) (if (null? |\x0;temp~1pxGHH~55|) (let ((|\x0;temp~1pxGHH~52| (cdr |\x0;temp~1pxGHH~51|))) (if (pair? |\x0;temp~1pxGHH~52|) (let ((|\x0;temp~1pxGHH~54| (car |\x0;temp~1pxGHH~52|))) (let ((|\x0;e1~1pxGHH~47| |\x0;temp~1pxGHH~54|)) (let ((|\x0;temp~1pxGHH~53| (cdr |\x0;temp~1pxGHH~52|))) (if (list? |\x0;temp~1pxGHH~53|) (let ((|\x0;e2~1pxGHH~48| |\x0;temp~1pxGHH~53|)) (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~50|) 0 '(core with-syntax)) (cons |\x0;e1~1pxGHH~47| |\x0;e2~1pxGHH~48|))) (|\x0;fail~1pxGHH~8|))))) (|\x0;fail~1pxGHH~8|))) (|\x0;fail~1pxGHH~8|))) (|\x0;fail~1pxGHH~8|)))) (|\x0;fail~1pxGHH~8|)))))) (values)) (lambda () (values)) '|\x0;build~1pxGHH~57|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core syntax-rules) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~128| 0 1 2 3 4 5) (|\x0;env~1pxGHH~116| 6 1 2 3 4 5) (|\x0;env~1pxGHH~99| 7 8 3 4 5) (|\x0;env~1pxGHH~81| 9 10 3 4 5)) (10 (((ellipsis) . #f) ((k) . #f) ((cl) . #f))) (9 (((cl) . #f))) (8 (((k) . #f) ((cl) . #f))) (7 (((cl) . #f))) (6 (((keyword) . #f) ((pattern) . #f) ((template) . #f))) (5 (((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (0) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (0) #f (core syntax-rules)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((map) variable map (1) #f (larceny PRIMITIVES)) ((for-all) variable for-all (1) #f (larceny PRIMITIVES)))) (4 (((x) variable |\x0;x~1pxGHH~60| (1) #f (core syntax-rules)))) (3 (((clause) variable |\x0;clause~1pxGHH~61| (1) #f (core syntax-rules)))) (2 (((y) variable |\x0;y~1pxGHH~105| (1) #f (core syntax-rules)))) (1 ()) (0 (((keyword) . #f) ((pattern) . #f) ((msg) . #f) ((irritant1) . #f)))))) '((syntax-rules macro |\x0;syntax-rules~1pxGHH~58| (0) #f (core syntax-rules)) (r7rs:syntax-error macro |\x0;syntax-error~1pxGHH~139| (0) #f (core syntax-rules))) '(((core with-syntax) 1) ((core primitives) 1 0)) '(|\x0;build~1pxGHH~57| |\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;syntax-rules~1pxGHH~58| (lambda (|\x0;x~1pxGHH~60|) ((lambda (|\x0;clause~1pxGHH~61|) (set! |\x0;clause~1pxGHH~61| (lambda (|\x0;y~1pxGHH~105|) (let ((|\x0;input~1pxGHH~107| |\x0;y~1pxGHH~105|)) (let ((|\x0;fail~1pxGHH~108| (lambda () (let ((|\x0;fail~1pxGHH~109| (lambda () (let ((|\x0;fail~1pxGHH~110| (lambda () (ex:invalid-form |\x0;input~1pxGHH~107|)))) (ex:syntax-violation 'syntax-rules "Invalid expression" |\x0;x~1pxGHH~60|))))) (if (pair? |\x0;input~1pxGHH~107|) (let ((|\x0;temp~1pxGHH~120| (car |\x0;input~1pxGHH~107|))) (if (pair? |\x0;temp~1pxGHH~120|) (let ((|\x0;temp~1pxGHH~122| (car |\x0;temp~1pxGHH~120|))) (let ((|\x0;keyword~1pxGHH~112| |\x0;temp~1pxGHH~122|)) (let ((|\x0;temp~1pxGHH~121| (cdr |\x0;temp~1pxGHH~120|))) (let ((|\x0;pattern~1pxGHH~113| |\x0;temp~1pxGHH~121|)) (let ((|\x0;temp~1pxGHH~117| (cdr |\x0;input~1pxGHH~107|))) (if (pair? |\x0;temp~1pxGHH~117|) (let ((|\x0;temp~1pxGHH~119| (car |\x0;temp~1pxGHH~117|))) (let ((|\x0;template~1pxGHH~114| |\x0;temp~1pxGHH~119|)) (let ((|\x0;temp~1pxGHH~118| (cdr |\x0;temp~1pxGHH~117|))) (if (null? |\x0;temp~1pxGHH~118|) (cons (cons (ex:syntax-rename 'dummy '() '(|\x0;env~1pxGHH~116|) 0 '(core syntax-rules)) |\x0;pattern~1pxGHH~113|) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~116|) 0 '(core syntax-rules)) (cons |\x0;template~1pxGHH~114| '())) '())) (|\x0;fail~1pxGHH~109|))))) (|\x0;fail~1pxGHH~109|))))))) (|\x0;fail~1pxGHH~109|))) (|\x0;fail~1pxGHH~109|)))))) (if (pair? |\x0;input~1pxGHH~107|) (let ((|\x0;temp~1pxGHH~136| (car |\x0;input~1pxGHH~107|))) (if (pair? |\x0;temp~1pxGHH~136|) (let ((|\x0;temp~1pxGHH~138| (car |\x0;temp~1pxGHH~136|))) (let ((|\x0;keyword~1pxGHH~123| |\x0;temp~1pxGHH~138|)) (let ((|\x0;temp~1pxGHH~137| (cdr |\x0;temp~1pxGHH~136|))) (let ((|\x0;pattern~1pxGHH~124| |\x0;temp~1pxGHH~137|)) (let ((|\x0;temp~1pxGHH~129| (cdr |\x0;input~1pxGHH~107|))) (if (pair? |\x0;temp~1pxGHH~129|) (let ((|\x0;temp~1pxGHH~131| (car |\x0;temp~1pxGHH~129|))) (if (pair? |\x0;temp~1pxGHH~131|) (let ((|\x0;temp~1pxGHH~135| (car |\x0;temp~1pxGHH~131|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~135|) (ex:free-identifier=? |\x0;temp~1pxGHH~135| (ex:syntax-rename 'syntax-error '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)))) (let ((|\x0;temp~1pxGHH~132| (cdr |\x0;temp~1pxGHH~131|))) (if (pair? |\x0;temp~1pxGHH~132|) (let ((|\x0;temp~1pxGHH~134| (car |\x0;temp~1pxGHH~132|))) (let ((|\x0;msg~1pxGHH~125| |\x0;temp~1pxGHH~134|)) (let ((|\x0;temp~1pxGHH~133| (cdr |\x0;temp~1pxGHH~132|))) (if (list? |\x0;temp~1pxGHH~133|) (let ((|\x0;irritant1~1pxGHH~126| |\x0;temp~1pxGHH~133|)) (let ((|\x0;temp~1pxGHH~130| (cdr |\x0;temp~1pxGHH~129|))) (if (null? |\x0;temp~1pxGHH~130|) (cons (cons (ex:syntax-rename 'dummy '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) |\x0;pattern~1pxGHH~124|) (cons (cons (ex:syntax-rename 'syntax-violation '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) (cons (ex:syntax-rename 'syntax-error '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) (cons |\x0;msg~1pxGHH~125| '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'dummy '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) |\x0;pattern~1pxGHH~124|) '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'irritants: '() '(|\x0;env~1pxGHH~128|) 0 '(core syntax-rules)) |\x0;irritant1~1pxGHH~126|) '())) '()))))) '())) (|\x0;fail~1pxGHH~108|)))) (|\x0;fail~1pxGHH~108|))))) (|\x0;fail~1pxGHH~108|))) (|\x0;fail~1pxGHH~108|))) (|\x0;fail~1pxGHH~108|))) (|\x0;fail~1pxGHH~108|))))))) (|\x0;fail~1pxGHH~108|))) (|\x0;fail~1pxGHH~108|)))))) (let ((|\x0;input~1pxGHH~63| |\x0;x~1pxGHH~60|)) (let ((|\x0;fail~1pxGHH~64| (lambda () (let ((|\x0;fail~1pxGHH~65| (lambda () (ex:invalid-form |\x0;input~1pxGHH~63|)))) (if (pair? |\x0;input~1pxGHH~63|) (let ((|\x0;temp~1pxGHH~87| (car |\x0;input~1pxGHH~63|))) (let ((|\x0;temp~1pxGHH~82| (cdr |\x0;input~1pxGHH~63|))) (if (pair? |\x0;temp~1pxGHH~82|) (let ((|\x0;temp~1pxGHH~86| (car |\x0;temp~1pxGHH~82|))) (let ((|\x0;ellipsis~1pxGHH~66| |\x0;temp~1pxGHH~86|)) (let ((|\x0;temp~1pxGHH~83| (cdr |\x0;temp~1pxGHH~82|))) (if (pair? |\x0;temp~1pxGHH~83|) (let ((|\x0;temp~1pxGHH~85| (car |\x0;temp~1pxGHH~83|))) (if (list? |\x0;temp~1pxGHH~85|) (let ((|\x0;k~1pxGHH~67| |\x0;temp~1pxGHH~85|)) (let ((|\x0;temp~1pxGHH~84| (cdr |\x0;temp~1pxGHH~83|))) (if (list? |\x0;temp~1pxGHH~84|) (let ((|\x0;cl~1pxGHH~68| |\x0;temp~1pxGHH~84|)) (if (if (ex:identifier? |\x0;ellipsis~1pxGHH~66|) (for-all ex:identifier? |\x0;k~1pxGHH~67|) #f) (let ((|\x0;input~1pxGHH~75| (map |\x0;clause~1pxGHH~61| |\x0;cl~1pxGHH~68|))) (let ((|\x0;fail~1pxGHH~77| (lambda () (ex:invalid-form |\x0;input~1pxGHH~75|)))) (if (list? |\x0;input~1pxGHH~75|) (let ((|\x0;cl~1pxGHH~78| |\x0;input~1pxGHH~75|)) (begin (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~81|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~81|) 0 '(core syntax-rules)) '()) (cons (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1pxGHH~81|) 0 '(core syntax-rules)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~81|) 0 '(core syntax-rules)) (cons |\x0;ellipsis~1pxGHH~66| (cons |\x0;k~1pxGHH~67| |\x0;cl~1pxGHH~78|)))) '()))))) (|\x0;fail~1pxGHH~77|)))) (|\x0;fail~1pxGHH~65|))) (|\x0;fail~1pxGHH~65|)))) (|\x0;fail~1pxGHH~65|))) (|\x0;fail~1pxGHH~65|))))) (|\x0;fail~1pxGHH~65|)))) (|\x0;fail~1pxGHH~65|)))))) (if (pair? |\x0;input~1pxGHH~63|) (let ((|\x0;temp~1pxGHH~103| (car |\x0;input~1pxGHH~63|))) (let ((|\x0;temp~1pxGHH~100| (cdr |\x0;input~1pxGHH~63|))) (if (pair? |\x0;temp~1pxGHH~100|) (let ((|\x0;temp~1pxGHH~102| (car |\x0;temp~1pxGHH~100|))) (if (list? |\x0;temp~1pxGHH~102|) (let ((|\x0;k~1pxGHH~88| |\x0;temp~1pxGHH~102|)) (let ((|\x0;temp~1pxGHH~101| (cdr |\x0;temp~1pxGHH~100|))) (if (list? |\x0;temp~1pxGHH~101|) (let ((|\x0;cl~1pxGHH~89| |\x0;temp~1pxGHH~101|)) (if (for-all ex:identifier? |\x0;k~1pxGHH~88|) (let ((|\x0;input~1pxGHH~93| (map |\x0;clause~1pxGHH~61| |\x0;cl~1pxGHH~89|))) (let ((|\x0;fail~1pxGHH~95| (lambda () (ex:invalid-form |\x0;input~1pxGHH~93|)))) (if (list? |\x0;input~1pxGHH~93|) (let ((|\x0;cl~1pxGHH~96| |\x0;input~1pxGHH~93|)) (begin (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~99|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~99|) 0 '(core syntax-rules)) '()) (cons (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1pxGHH~99|) 0 '(core syntax-rules)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~99|) 0 '(core syntax-rules)) (cons |\x0;k~1pxGHH~88| |\x0;cl~1pxGHH~96|))) '()))))) (|\x0;fail~1pxGHH~95|)))) (|\x0;fail~1pxGHH~64|))) (|\x0;fail~1pxGHH~64|)))) (|\x0;fail~1pxGHH~64|))) (|\x0;fail~1pxGHH~64|)))) (|\x0;fail~1pxGHH~64|))))) ex:undefined))) (ex:register-macro! '|\x0;syntax-error~1pxGHH~139| (lambda (|\x0;exp~1pxGHH~141|) (ex:syntax-violation 'syntax-error "R7RS syntax-error used outside template position" |\x0;exp~1pxGHH~141|))) (values)) (lambda () (values)) '|\x0;build~1pxGHH~143|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core let) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~227| 0 1 2 3) (|\x0;env~1pxGHH~203| 4 5 6 3) (|\x0;env~1pxGHH~179| 7 8 9 3) (|\x0;env~1pxGHH~158| 10 8 9 3)) (10 (((f) . #f) ((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (9 (((x) variable |\x0;x~1pxGHH~146| (1) #f (core let)))) (8 ()) (7 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (6 (((x) variable |\x0;x~1pxGHH~194| (1) #f (core let)))) (5 ()) (4 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (3 (((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((for-all) variable for-all (1) #f (larceny PRIMITIVES)))) (2 (((x) variable |\x0;x~1pxGHH~218| (1) #f (core let)))) (1 ()) (0 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f)))))) '((let macro |\x0;let~1pxGHH~144| (0) #f (core let)) (letrec macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) (letrec* macro |\x0;letrec*~1pxGHH~216| (0) #f (core let))) '(((core with-syntax) 1) ((core primitives) 1 0)) '(|\x0;build~1pxGHH~57| |\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;let~1pxGHH~144| (lambda (|\x0;x~1pxGHH~146|) (let ((|\x0;input~1pxGHH~148| |\x0;x~1pxGHH~146|)) (let ((|\x0;fail~1pxGHH~149| (lambda () (let ((|\x0;fail~1pxGHH~150| (lambda () (ex:invalid-form |\x0;input~1pxGHH~148|)))) (if (pair? |\x0;input~1pxGHH~148|) (let ((|\x0;temp~1pxGHH~172| (car |\x0;input~1pxGHH~148|))) (let ((|\x0;temp~1pxGHH~159| (cdr |\x0;input~1pxGHH~148|))) (if (pair? |\x0;temp~1pxGHH~159|) (let ((|\x0;temp~1pxGHH~171| (car |\x0;temp~1pxGHH~159|))) (let ((|\x0;f~1pxGHH~151| |\x0;temp~1pxGHH~171|)) (let ((|\x0;temp~1pxGHH~160| (cdr |\x0;temp~1pxGHH~159|))) (if (pair? |\x0;temp~1pxGHH~160|) (let ((|\x0;temp~1pxGHH~164| (car |\x0;temp~1pxGHH~160|))) (ex:map-while (lambda (|\x0;temp~1pxGHH~164|) (if (pair? |\x0;temp~1pxGHH~164|) (let ((|\x0;temp~1pxGHH~170| (car |\x0;temp~1pxGHH~164|))) (let ((|\x0;x~1pxGHH~152| |\x0;temp~1pxGHH~170|)) (let ((|\x0;temp~1pxGHH~167| (cdr |\x0;temp~1pxGHH~164|))) (if (pair? |\x0;temp~1pxGHH~167|) (let ((|\x0;temp~1pxGHH~169| (car |\x0;temp~1pxGHH~167|))) (let ((|\x0;v~1pxGHH~153| |\x0;temp~1pxGHH~169|)) (let ((|\x0;temp~1pxGHH~168| (cdr |\x0;temp~1pxGHH~167|))) (if (null? |\x0;temp~1pxGHH~168|) (list |\x0;x~1pxGHH~152| |\x0;v~1pxGHH~153|) #f)))) #f)))) #f)) |\x0;temp~1pxGHH~164| (lambda (|\x0;cols~1pxGHH~166| |\x0;rest~1pxGHH~165|) (if (null? |\x0;rest~1pxGHH~165|) (apply (lambda (|\x0;x~1pxGHH~152| |\x0;v~1pxGHH~153|) (let ((|\x0;temp~1pxGHH~161| (cdr |\x0;temp~1pxGHH~160|))) (if (pair? |\x0;temp~1pxGHH~161|) (let ((|\x0;temp~1pxGHH~163| (car |\x0;temp~1pxGHH~161|))) (let ((|\x0;e1~1pxGHH~154| |\x0;temp~1pxGHH~163|)) (let ((|\x0;temp~1pxGHH~162| (cdr |\x0;temp~1pxGHH~161|))) (if (list? |\x0;temp~1pxGHH~162|) (let ((|\x0;e2~1pxGHH~155| |\x0;temp~1pxGHH~162|)) (if (for-all ex:identifier? (cons |\x0;f~1pxGHH~151| |\x0;x~1pxGHH~152|)) (cons (ex:syntax-rename 'letrec '() '(|\x0;env~1pxGHH~158|) 0 '(core let)) (cons (cons (cons |\x0;f~1pxGHH~151| (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~158|) 0 '(core let)) (cons |\x0;x~1pxGHH~152| (cons |\x0;e1~1pxGHH~154| |\x0;e2~1pxGHH~155|))) '())) '()) (cons (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~158|) 0 '(core let)) (cons |\x0;x~1pxGHH~152| (cons (cons |\x0;f~1pxGHH~151| |\x0;x~1pxGHH~152|) '()))) |\x0;v~1pxGHH~153|) '()))) (|\x0;fail~1pxGHH~150|))) (|\x0;fail~1pxGHH~150|))))) (|\x0;fail~1pxGHH~150|)))) (if (null? |\x0;cols~1pxGHH~166|) '(() ()) (apply map list |\x0;cols~1pxGHH~166|))) (|\x0;fail~1pxGHH~150|))))) (|\x0;fail~1pxGHH~150|))))) (|\x0;fail~1pxGHH~150|)))) (|\x0;fail~1pxGHH~150|)))))) (if (pair? |\x0;input~1pxGHH~148|) (let ((|\x0;temp~1pxGHH~191| (car |\x0;input~1pxGHH~148|))) (let ((|\x0;temp~1pxGHH~180| (cdr |\x0;input~1pxGHH~148|))) (if (pair? |\x0;temp~1pxGHH~180|) (let ((|\x0;temp~1pxGHH~184| (car |\x0;temp~1pxGHH~180|))) (ex:map-while (lambda (|\x0;temp~1pxGHH~184|) (if (pair? |\x0;temp~1pxGHH~184|) (let ((|\x0;temp~1pxGHH~190| (car |\x0;temp~1pxGHH~184|))) (let ((|\x0;x~1pxGHH~173| |\x0;temp~1pxGHH~190|)) (let ((|\x0;temp~1pxGHH~187| (cdr |\x0;temp~1pxGHH~184|))) (if (pair? |\x0;temp~1pxGHH~187|) (let ((|\x0;temp~1pxGHH~189| (car |\x0;temp~1pxGHH~187|))) (let ((|\x0;v~1pxGHH~174| |\x0;temp~1pxGHH~189|)) (let ((|\x0;temp~1pxGHH~188| (cdr |\x0;temp~1pxGHH~187|))) (if (null? |\x0;temp~1pxGHH~188|) (list |\x0;x~1pxGHH~173| |\x0;v~1pxGHH~174|) #f)))) #f)))) #f)) |\x0;temp~1pxGHH~184| (lambda (|\x0;cols~1pxGHH~186| |\x0;rest~1pxGHH~185|) (if (null? |\x0;rest~1pxGHH~185|) (apply (lambda (|\x0;x~1pxGHH~173| |\x0;v~1pxGHH~174|) (let ((|\x0;temp~1pxGHH~181| (cdr |\x0;temp~1pxGHH~180|))) (if (pair? |\x0;temp~1pxGHH~181|) (let ((|\x0;temp~1pxGHH~183| (car |\x0;temp~1pxGHH~181|))) (let ((|\x0;e1~1pxGHH~175| |\x0;temp~1pxGHH~183|)) (let ((|\x0;temp~1pxGHH~182| (cdr |\x0;temp~1pxGHH~181|))) (if (list? |\x0;temp~1pxGHH~182|) (let ((|\x0;e2~1pxGHH~176| |\x0;temp~1pxGHH~182|)) (if (for-all ex:identifier? |\x0;x~1pxGHH~173|) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~179|) 0 '(core let)) (cons |\x0;x~1pxGHH~173| (cons |\x0;e1~1pxGHH~175| |\x0;e2~1pxGHH~176|))) |\x0;v~1pxGHH~174|) (|\x0;fail~1pxGHH~149|))) (|\x0;fail~1pxGHH~149|))))) (|\x0;fail~1pxGHH~149|)))) (if (null? |\x0;cols~1pxGHH~186|) '(() ()) (apply map list |\x0;cols~1pxGHH~186|))) (|\x0;fail~1pxGHH~149|))))) (|\x0;fail~1pxGHH~149|)))) (|\x0;fail~1pxGHH~149|)))))) (ex:register-macro! '|\x0;letrec~1pxGHH~192| (lambda (|\x0;x~1pxGHH~194|) (let ((|\x0;input~1pxGHH~196| |\x0;x~1pxGHH~194|)) (let ((|\x0;fail~1pxGHH~197| (lambda () (ex:invalid-form |\x0;input~1pxGHH~196|)))) (if (pair? |\x0;input~1pxGHH~196|) (let ((|\x0;temp~1pxGHH~215| (car |\x0;input~1pxGHH~196|))) (let ((|\x0;temp~1pxGHH~204| (cdr |\x0;input~1pxGHH~196|))) (if (pair? |\x0;temp~1pxGHH~204|) (let ((|\x0;temp~1pxGHH~208| (car |\x0;temp~1pxGHH~204|))) (ex:map-while (lambda (|\x0;temp~1pxGHH~208|) (if (pair? |\x0;temp~1pxGHH~208|) (let ((|\x0;temp~1pxGHH~214| (car |\x0;temp~1pxGHH~208|))) (let ((|\x0;i~1pxGHH~198| |\x0;temp~1pxGHH~214|)) (let ((|\x0;temp~1pxGHH~211| (cdr |\x0;temp~1pxGHH~208|))) (if (pair? |\x0;temp~1pxGHH~211|) (let ((|\x0;temp~1pxGHH~213| (car |\x0;temp~1pxGHH~211|))) (let ((|\x0;v~1pxGHH~199| |\x0;temp~1pxGHH~213|)) (let ((|\x0;temp~1pxGHH~212| (cdr |\x0;temp~1pxGHH~211|))) (if (null? |\x0;temp~1pxGHH~212|) (list |\x0;i~1pxGHH~198| |\x0;v~1pxGHH~199|) #f)))) #f)))) #f)) |\x0;temp~1pxGHH~208| (lambda (|\x0;cols~1pxGHH~210| |\x0;rest~1pxGHH~209|) (if (null? |\x0;rest~1pxGHH~209|) (apply (lambda (|\x0;i~1pxGHH~198| |\x0;v~1pxGHH~199|) (let ((|\x0;temp~1pxGHH~205| (cdr |\x0;temp~1pxGHH~204|))) (if (pair? |\x0;temp~1pxGHH~205|) (let ((|\x0;temp~1pxGHH~207| (car |\x0;temp~1pxGHH~205|))) (let ((|\x0;e1~1pxGHH~200| |\x0;temp~1pxGHH~207|)) (let ((|\x0;temp~1pxGHH~206| (cdr |\x0;temp~1pxGHH~205|))) (if (list? |\x0;temp~1pxGHH~206|) (let ((|\x0;e2~1pxGHH~201| |\x0;temp~1pxGHH~206|)) (cons (ex:syntax-rename 'letrec* '() '(|\x0;env~1pxGHH~203|) 0 '(core let)) (cons (if (= (length |\x0;i~1pxGHH~198|) (length |\x0;v~1pxGHH~199|)) (map (lambda (|\x0;i~1pxGHH~198| |\x0;v~1pxGHH~199|) (cons |\x0;i~1pxGHH~198| (cons |\x0;v~1pxGHH~199| '()))) |\x0;i~1pxGHH~198| |\x0;v~1pxGHH~199|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '((i v) ...) (list |\x0;i~1pxGHH~198| |\x0;v~1pxGHH~199|))) (cons |\x0;e1~1pxGHH~200| |\x0;e2~1pxGHH~201|)))) (|\x0;fail~1pxGHH~197|))))) (|\x0;fail~1pxGHH~197|)))) (if (null? |\x0;cols~1pxGHH~210|) '(() ()) (apply map list |\x0;cols~1pxGHH~210|))) (|\x0;fail~1pxGHH~197|))))) (|\x0;fail~1pxGHH~197|)))) (|\x0;fail~1pxGHH~197|)))))) (ex:register-macro! '|\x0;letrec*~1pxGHH~216| (lambda (|\x0;x~1pxGHH~218|) (let ((|\x0;input~1pxGHH~220| |\x0;x~1pxGHH~218|)) (let ((|\x0;fail~1pxGHH~221| (lambda () (ex:invalid-form |\x0;input~1pxGHH~220|)))) (if (pair? |\x0;input~1pxGHH~220|) (let ((|\x0;temp~1pxGHH~239| (car |\x0;input~1pxGHH~220|))) (let ((|\x0;temp~1pxGHH~228| (cdr |\x0;input~1pxGHH~220|))) (if (pair? |\x0;temp~1pxGHH~228|) (let ((|\x0;temp~1pxGHH~232| (car |\x0;temp~1pxGHH~228|))) (ex:map-while (lambda (|\x0;temp~1pxGHH~232|) (if (pair? |\x0;temp~1pxGHH~232|) (let ((|\x0;temp~1pxGHH~238| (car |\x0;temp~1pxGHH~232|))) (let ((|\x0;i~1pxGHH~222| |\x0;temp~1pxGHH~238|)) (let ((|\x0;temp~1pxGHH~235| (cdr |\x0;temp~1pxGHH~232|))) (if (pair? |\x0;temp~1pxGHH~235|) (let ((|\x0;temp~1pxGHH~237| (car |\x0;temp~1pxGHH~235|))) (let ((|\x0;v~1pxGHH~223| |\x0;temp~1pxGHH~237|)) (let ((|\x0;temp~1pxGHH~236| (cdr |\x0;temp~1pxGHH~235|))) (if (null? |\x0;temp~1pxGHH~236|) (list |\x0;i~1pxGHH~222| |\x0;v~1pxGHH~223|) #f)))) #f)))) #f)) |\x0;temp~1pxGHH~232| (lambda (|\x0;cols~1pxGHH~234| |\x0;rest~1pxGHH~233|) (if (null? |\x0;rest~1pxGHH~233|) (apply (lambda (|\x0;i~1pxGHH~222| |\x0;v~1pxGHH~223|) (let ((|\x0;temp~1pxGHH~229| (cdr |\x0;temp~1pxGHH~228|))) (if (pair? |\x0;temp~1pxGHH~229|) (let ((|\x0;temp~1pxGHH~231| (car |\x0;temp~1pxGHH~229|))) (let ((|\x0;e1~1pxGHH~224| |\x0;temp~1pxGHH~231|)) (let ((|\x0;temp~1pxGHH~230| (cdr |\x0;temp~1pxGHH~229|))) (if (list? |\x0;temp~1pxGHH~230|) (let ((|\x0;e2~1pxGHH~225| |\x0;temp~1pxGHH~230|)) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~227|) 0 '(core let)) (cons '() (append (if (= (length |\x0;i~1pxGHH~222|) (length |\x0;v~1pxGHH~223|)) (map (lambda (|\x0;i~1pxGHH~222| |\x0;v~1pxGHH~223|) (cons (ex:syntax-rename 'define '() '(|\x0;env~1pxGHH~227|) 0 '(core let)) (cons |\x0;i~1pxGHH~222| (cons |\x0;v~1pxGHH~223| '())))) |\x0;i~1pxGHH~222| |\x0;v~1pxGHH~223|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '((define i v) ... (let () e1 e2 ...)) (list |\x0;i~1pxGHH~222| |\x0;v~1pxGHH~223|))) (cons (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~227|) 0 '(core let)) (cons '() (cons |\x0;e1~1pxGHH~224| |\x0;e2~1pxGHH~225|))) '()))))) (|\x0;fail~1pxGHH~221|))))) (|\x0;fail~1pxGHH~221|)))) (if (null? |\x0;cols~1pxGHH~234|) '(() ()) (apply map list |\x0;cols~1pxGHH~234|))) (|\x0;fail~1pxGHH~221|))))) (|\x0;fail~1pxGHH~221|)))) (|\x0;fail~1pxGHH~221|)))))) (values)) (lambda () (values)) '|\x0;build~1pxGHH~240|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core derived) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~563| 0 1 2 3) (|\x0;env~1pxGHH~555| 4 1 2 3) (|\x0;env~1pxGHH~531| 5 1 2 3) (|\x0;env~1pxGHH~513| 6 1 2 3) (|\x0;env~1pxGHH~493| 7 1 2 3) (|\x0;env~1pxGHH~475| 8 1 2 3) (|\x0;env~1pxGHH~456| 9 1 2 3) (|\x0;env~1pxGHH~426| 10 11 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~420| 19 11 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~411| 20 11 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~403| 21 11 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~386| 22 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~377| 25 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~369| 26 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~313| 27 28 29 3) (|\x0;env~1pxGHH~291| 30 31 32 33 34 35 28 29 3) (|\x0;env~1pxGHH~281| 36 37 31 32 33 34 35 28 29 3)) (37 (((x) . #f) ((v) . #f) ((rest) . #f))) (36 (((body) . #f))) (35 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (34 ()) (33 (((f) variable |\x0;f~1pxGHH~258| (1) #f (core derived)))) (32 (((bindings) variable |\x0;bindings~1pxGHH~265| (1) #f (core derived)))) (31 ()) (30 (((x) . #f) ((v) . #f))) (29 (((x) variable |\x0;x~1pxGHH~243| (1) #f (core derived)))) (28 ()) (27 (((e1) . #f) ((e2) . #f))) (26 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (25 (((e0) . #f) ((e1) . #f))) (24 (((c2) . #f) ((c3) . #f))) (23 (((rest) . #f))) (22 (((e0) . #f))) (21 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (20 (((e0) . #f) ((e1) . #f))) (19 (((e0) . #f))) (18 (((x) variable |\x0;x~1pxGHH~322| (1) #f (core derived)))) (17 ()) (16 (((c1) . #f) ((c2) . #f))) (15 ()) (14 (((f) variable |\x0;f~1pxGHH~333| (1) #f (core derived)))) (13 (((c1) variable |\x0;c1~1pxGHH~342| (1) #f (core derived)) ((c2*) variable |\x0;c2*~1pxGHH~343| (1) #f (core derived)))) (12 ()) (11 ()) (10 (((e1) . #f) ((e2) . #f))) (9 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((atoms) . #f) ((result1) . #f) ((result2) . #f) ((clause) . #f) ((clauses) . #f))) (8 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((atoms) . #f) ((result1) . #f) ((result2) . #f))) (7 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((atoms) . #f) ((result) . #f) ((clause) . #f) ((clauses) . #f))) (6 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((atoms) . #f) ((result) . #f))) (5 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((result1) . #f) ((result2) . #f))) (4 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((result) . #f))) (3 (((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (1 0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (1 0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (1 0) #f (core let)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((cdr) variable cdr (1 0) #f (larceny PRIMITIVES)) ((car) variable car (1 0) #f (larceny PRIMITIVES)) ((memv) variable memv (1 0) #f (larceny PRIMITIVES)) ((null?) variable null? (1 0) #f (larceny PRIMITIVES)) ((for-all) variable for-all (1 0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~436|) variable |\x0;x~1pxGHH~438| (0) #f (core derived)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((clauses) . #f)))))) '((let* macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) (cond macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) (case macro |\x0;case~1pxGHH~435| (0) #f (core derived)) (else macro |\x0;else~1pxGHH~572| (0) #f (core derived)) (=> macro |\x0;=>~1pxGHH~568| (0) #f (core derived))) '(((core syntax-rules) 1) ((core with-syntax) 1) ((core let) 1 0) ((core primitives) 1 0)) '(|\x0;build~1pxGHH~143| |\x0;build~1pxGHH~57| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;let*~1pxGHH~241| (lambda (|\x0;x~1pxGHH~243|) (let ((|\x0;input~1pxGHH~245| |\x0;x~1pxGHH~243|)) (let ((|\x0;fail~1pxGHH~246| (lambda () (let ((|\x0;fail~1pxGHH~247| (lambda () (ex:invalid-form |\x0;input~1pxGHH~245|)))) (if (pair? |\x0;input~1pxGHH~245|) (let ((|\x0;temp~1pxGHH~309| (car |\x0;input~1pxGHH~245|))) (let ((|\x0;temp~1pxGHH~298| (cdr |\x0;input~1pxGHH~245|))) (if (pair? |\x0;temp~1pxGHH~298|) (let ((|\x0;temp~1pxGHH~302| (car |\x0;temp~1pxGHH~298|))) (ex:map-while (lambda (|\x0;temp~1pxGHH~302|) (if (pair? |\x0;temp~1pxGHH~302|) (let ((|\x0;temp~1pxGHH~308| (car |\x0;temp~1pxGHH~302|))) (let ((|\x0;x~1pxGHH~248| |\x0;temp~1pxGHH~308|)) (let ((|\x0;temp~1pxGHH~305| (cdr |\x0;temp~1pxGHH~302|))) (if (pair? |\x0;temp~1pxGHH~305|) (let ((|\x0;temp~1pxGHH~307| (car |\x0;temp~1pxGHH~305|))) (let ((|\x0;v~1pxGHH~249| |\x0;temp~1pxGHH~307|)) (let ((|\x0;temp~1pxGHH~306| (cdr |\x0;temp~1pxGHH~305|))) (if (null? |\x0;temp~1pxGHH~306|) (list |\x0;x~1pxGHH~248| |\x0;v~1pxGHH~249|) #f)))) #f)))) #f)) |\x0;temp~1pxGHH~302| (lambda (|\x0;cols~1pxGHH~304| |\x0;rest~1pxGHH~303|) (if (null? |\x0;rest~1pxGHH~303|) (apply (lambda (|\x0;x~1pxGHH~248| |\x0;v~1pxGHH~249|) (let ((|\x0;temp~1pxGHH~299| (cdr |\x0;temp~1pxGHH~298|))) (if (pair? |\x0;temp~1pxGHH~299|) (let ((|\x0;temp~1pxGHH~301| (car |\x0;temp~1pxGHH~299|))) (let ((|\x0;e1~1pxGHH~250| |\x0;temp~1pxGHH~301|)) (let ((|\x0;temp~1pxGHH~300| (cdr |\x0;temp~1pxGHH~299|))) (if (list? |\x0;temp~1pxGHH~300|) (let ((|\x0;e2~1pxGHH~251| |\x0;temp~1pxGHH~300|)) (if (for-all ex:identifier? |\x0;x~1pxGHH~248|) ((lambda () ((lambda (|\x0;f~1pxGHH~258|) (set! |\x0;f~1pxGHH~258| (lambda (|\x0;bindings~1pxGHH~265|) (let ((|\x0;input~1pxGHH~267| |\x0;bindings~1pxGHH~265|)) (let ((|\x0;fail~1pxGHH~268| (lambda () (let ((|\x0;fail~1pxGHH~269| (lambda () (ex:invalid-form |\x0;input~1pxGHH~267|)))) (if (pair? |\x0;input~1pxGHH~267|) (let ((|\x0;temp~1pxGHH~283| (car |\x0;input~1pxGHH~267|))) (if (pair? |\x0;temp~1pxGHH~283|) (let ((|\x0;temp~1pxGHH~287| (car |\x0;temp~1pxGHH~283|))) (let ((|\x0;x~1pxGHH~270| |\x0;temp~1pxGHH~287|)) (let ((|\x0;temp~1pxGHH~284| (cdr |\x0;temp~1pxGHH~283|))) (if (pair? |\x0;temp~1pxGHH~284|) (let ((|\x0;temp~1pxGHH~286| (car |\x0;temp~1pxGHH~284|))) (let ((|\x0;v~1pxGHH~271| |\x0;temp~1pxGHH~286|)) (let ((|\x0;temp~1pxGHH~285| (cdr |\x0;temp~1pxGHH~284|))) (if (null? |\x0;temp~1pxGHH~285|) (let ((|\x0;temp~1pxGHH~282| (cdr |\x0;input~1pxGHH~267|))) (let ((|\x0;rest~1pxGHH~272| |\x0;temp~1pxGHH~282|)) (let ((|\x0;input~1pxGHH~275| (|\x0;f~1pxGHH~258| |\x0;rest~1pxGHH~272|))) (let ((|\x0;fail~1pxGHH~277| (lambda () (ex:invalid-form |\x0;input~1pxGHH~275|)))) (let ((|\x0;body~1pxGHH~278| |\x0;input~1pxGHH~275|)) (begin (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~281|) 0 '(core derived)) (cons (cons (cons |\x0;x~1pxGHH~270| (cons |\x0;v~1pxGHH~271| '())) '()) (cons |\x0;body~1pxGHH~278| '()))))))))) (|\x0;fail~1pxGHH~269|))))) (|\x0;fail~1pxGHH~269|))))) (|\x0;fail~1pxGHH~269|))) (|\x0;fail~1pxGHH~269|)))))) (if (pair? |\x0;input~1pxGHH~267|) (let ((|\x0;temp~1pxGHH~293| (car |\x0;input~1pxGHH~267|))) (if (pair? |\x0;temp~1pxGHH~293|) (let ((|\x0;temp~1pxGHH~297| (car |\x0;temp~1pxGHH~293|))) (let ((|\x0;x~1pxGHH~288| |\x0;temp~1pxGHH~297|)) (let ((|\x0;temp~1pxGHH~294| (cdr |\x0;temp~1pxGHH~293|))) (if (pair? |\x0;temp~1pxGHH~294|) (let ((|\x0;temp~1pxGHH~296| (car |\x0;temp~1pxGHH~294|))) (let ((|\x0;v~1pxGHH~289| |\x0;temp~1pxGHH~296|)) (let ((|\x0;temp~1pxGHH~295| (cdr |\x0;temp~1pxGHH~294|))) (if (null? |\x0;temp~1pxGHH~295|) (let ((|\x0;temp~1pxGHH~292| (cdr |\x0;input~1pxGHH~267|))) (if (null? |\x0;temp~1pxGHH~292|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~291|) 0 '(core derived)) (cons (cons (cons |\x0;x~1pxGHH~288| (cons |\x0;v~1pxGHH~289| '())) '()) (cons |\x0;e1~1pxGHH~250| |\x0;e2~1pxGHH~251|))) (|\x0;fail~1pxGHH~268|))) (|\x0;fail~1pxGHH~268|))))) (|\x0;fail~1pxGHH~268|))))) (|\x0;fail~1pxGHH~268|))) (|\x0;fail~1pxGHH~268|)))))) ((lambda () ((lambda (|\x0;bindings~1pxGHH~262|) (|\x0;f~1pxGHH~258| |\x0;bindings~1pxGHH~262|)) (if (= (length |\x0;x~1pxGHH~248|) (length |\x0;v~1pxGHH~249|)) (map (lambda (|\x0;x~1pxGHH~248| |\x0;v~1pxGHH~249|) (cons |\x0;x~1pxGHH~248| (cons |\x0;v~1pxGHH~249| '()))) |\x0;x~1pxGHH~248| |\x0;v~1pxGHH~249|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '((x v) ...) (list |\x0;x~1pxGHH~248| |\x0;v~1pxGHH~249|))))))) ex:undefined))) (|\x0;fail~1pxGHH~247|))) (|\x0;fail~1pxGHH~247|))))) (|\x0;fail~1pxGHH~247|)))) (if (null? |\x0;cols~1pxGHH~304|) '(() ()) (apply map list |\x0;cols~1pxGHH~304|))) (|\x0;fail~1pxGHH~247|))))) (|\x0;fail~1pxGHH~247|)))) (|\x0;fail~1pxGHH~247|)))))) (if (pair? |\x0;input~1pxGHH~245|) (let ((|\x0;temp~1pxGHH~319| (car |\x0;input~1pxGHH~245|))) (let ((|\x0;temp~1pxGHH~314| (cdr |\x0;input~1pxGHH~245|))) (if (pair? |\x0;temp~1pxGHH~314|) (let ((|\x0;temp~1pxGHH~318| (car |\x0;temp~1pxGHH~314|))) (if (null? |\x0;temp~1pxGHH~318|) (let ((|\x0;temp~1pxGHH~315| (cdr |\x0;temp~1pxGHH~314|))) (if (pair? |\x0;temp~1pxGHH~315|) (let ((|\x0;temp~1pxGHH~317| (car |\x0;temp~1pxGHH~315|))) (let ((|\x0;e1~1pxGHH~310| |\x0;temp~1pxGHH~317|)) (let ((|\x0;temp~1pxGHH~316| (cdr |\x0;temp~1pxGHH~315|))) (if (list? |\x0;temp~1pxGHH~316|) (let ((|\x0;e2~1pxGHH~311| |\x0;temp~1pxGHH~316|)) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~313|) 0 '(core derived)) (cons '() (cons |\x0;e1~1pxGHH~310| |\x0;e2~1pxGHH~311|)))) (|\x0;fail~1pxGHH~246|))))) (|\x0;fail~1pxGHH~246|))) (|\x0;fail~1pxGHH~246|))) (|\x0;fail~1pxGHH~246|)))) (|\x0;fail~1pxGHH~246|)))))) (ex:register-macro! '|\x0;cond~1pxGHH~320| (lambda (|\x0;x~1pxGHH~322|) (let ((|\x0;input~1pxGHH~324| |\x0;x~1pxGHH~322|)) (let ((|\x0;fail~1pxGHH~325| (lambda () (ex:invalid-form |\x0;input~1pxGHH~324|)))) (if (pair? |\x0;input~1pxGHH~324|) (let ((|\x0;temp~1pxGHH~434| (car |\x0;input~1pxGHH~324|))) (let ((|\x0;temp~1pxGHH~431| (cdr |\x0;input~1pxGHH~324|))) (if (pair? |\x0;temp~1pxGHH~431|) (let ((|\x0;temp~1pxGHH~433| (car |\x0;temp~1pxGHH~431|))) (let ((|\x0;c1~1pxGHH~326| |\x0;temp~1pxGHH~433|)) (let ((|\x0;temp~1pxGHH~432| (cdr |\x0;temp~1pxGHH~431|))) (if (list? |\x0;temp~1pxGHH~432|) (let ((|\x0;c2~1pxGHH~327| |\x0;temp~1pxGHH~432|)) ((lambda () ((lambda (|\x0;f~1pxGHH~333|) (set! |\x0;f~1pxGHH~333| (lambda (|\x0;c1~1pxGHH~342| |\x0;c2*~1pxGHH~343|) (let ((|\x0;input~1pxGHH~345| |\x0;c2*~1pxGHH~343|)) (let ((|\x0;fail~1pxGHH~346| (lambda () (let ((|\x0;fail~1pxGHH~347| (lambda () (ex:invalid-form |\x0;input~1pxGHH~345|)))) (if (pair? |\x0;input~1pxGHH~345|) (let ((|\x0;temp~1pxGHH~390| (car |\x0;input~1pxGHH~345|))) (let ((|\x0;c2~1pxGHH~348| |\x0;temp~1pxGHH~390|)) (let ((|\x0;temp~1pxGHH~389| (cdr |\x0;input~1pxGHH~345|))) (if (list? |\x0;temp~1pxGHH~389|) (let ((|\x0;c3~1pxGHH~349| |\x0;temp~1pxGHH~389|)) (let ((|\x0;input~1pxGHH~352| (|\x0;f~1pxGHH~333| |\x0;c2~1pxGHH~348| |\x0;c3~1pxGHH~349|))) (let ((|\x0;fail~1pxGHH~355| (lambda () (ex:invalid-form |\x0;input~1pxGHH~352|)))) (let ((|\x0;rest~1pxGHH~356| |\x0;input~1pxGHH~352|)) (begin (let ((|\x0;input~1pxGHH~359| |\x0;c1~1pxGHH~342|)) (let ((|\x0;fail~1pxGHH~360| (lambda () (let ((|\x0;fail~1pxGHH~361| (lambda () (let ((|\x0;fail~1pxGHH~362| (lambda () (let ((|\x0;fail~1pxGHH~363| (lambda () (ex:invalid-form |\x0;input~1pxGHH~359|)))) (ex:syntax-violation 'cond "Invalid expression" |\x0;x~1pxGHH~322|))))) (if (pair? |\x0;input~1pxGHH~359|) (let ((|\x0;temp~1pxGHH~373| (car |\x0;input~1pxGHH~359|))) (let ((|\x0;e0~1pxGHH~365| |\x0;temp~1pxGHH~373|)) (let ((|\x0;temp~1pxGHH~370| (cdr |\x0;input~1pxGHH~359|))) (if (pair? |\x0;temp~1pxGHH~370|) (let ((|\x0;temp~1pxGHH~372| (car |\x0;temp~1pxGHH~370|))) (let ((|\x0;e1~1pxGHH~366| |\x0;temp~1pxGHH~372|)) (let ((|\x0;temp~1pxGHH~371| (cdr |\x0;temp~1pxGHH~370|))) (if (list? |\x0;temp~1pxGHH~371|) (let ((|\x0;e2~1pxGHH~367| |\x0;temp~1pxGHH~371|)) (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~369|) 0 '(core derived)) (cons |\x0;e0~1pxGHH~365| (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~369|) 0 '(core derived)) (cons |\x0;e1~1pxGHH~366| |\x0;e2~1pxGHH~367|)) (cons |\x0;rest~1pxGHH~356| '()))))) (|\x0;fail~1pxGHH~362|))))) (|\x0;fail~1pxGHH~362|))))) (|\x0;fail~1pxGHH~362|)))))) (if (pair? |\x0;input~1pxGHH~359|) (let ((|\x0;temp~1pxGHH~383| (car |\x0;input~1pxGHH~359|))) (let ((|\x0;e0~1pxGHH~374| |\x0;temp~1pxGHH~383|)) (let ((|\x0;temp~1pxGHH~378| (cdr |\x0;input~1pxGHH~359|))) (if (pair? |\x0;temp~1pxGHH~378|) (let ((|\x0;temp~1pxGHH~382| (car |\x0;temp~1pxGHH~378|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~382|) (ex:free-identifier=? |\x0;temp~1pxGHH~382| (ex:syntax-rename '=> '() '(|\x0;env~1pxGHH~377|) 0 '(core derived)))) (let ((|\x0;temp~1pxGHH~379| (cdr |\x0;temp~1pxGHH~378|))) (if (pair? |\x0;temp~1pxGHH~379|) (let ((|\x0;temp~1pxGHH~381| (car |\x0;temp~1pxGHH~379|))) (let ((|\x0;e1~1pxGHH~375| |\x0;temp~1pxGHH~381|)) (let ((|\x0;temp~1pxGHH~380| (cdr |\x0;temp~1pxGHH~379|))) (if (null? |\x0;temp~1pxGHH~380|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~377|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~377|) 0 '(core derived)) (cons |\x0;e0~1pxGHH~374| '())) '()) (cons (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~377|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~377|) 0 '(core derived)) (cons (cons |\x0;e1~1pxGHH~375| (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~377|) 0 '(core derived)) '())) (cons |\x0;rest~1pxGHH~356| '())))) '()))) (|\x0;fail~1pxGHH~361|))))) (|\x0;fail~1pxGHH~361|))) (|\x0;fail~1pxGHH~361|))) (|\x0;fail~1pxGHH~361|))))) (|\x0;fail~1pxGHH~361|)))))) (if (pair? |\x0;input~1pxGHH~359|) (let ((|\x0;temp~1pxGHH~388| (car |\x0;input~1pxGHH~359|))) (let ((|\x0;e0~1pxGHH~384| |\x0;temp~1pxGHH~388|)) (let ((|\x0;temp~1pxGHH~387| (cdr |\x0;input~1pxGHH~359|))) (if (null? |\x0;temp~1pxGHH~387|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~386|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~386|) 0 '(core derived)) (cons |\x0;e0~1pxGHH~384| '())) '()) (cons (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~386|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~386|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~386|) 0 '(core derived)) (cons |\x0;rest~1pxGHH~356| '())))) '()))) (|\x0;fail~1pxGHH~360|))))) (|\x0;fail~1pxGHH~360|))))))))) (|\x0;fail~1pxGHH~347|))))) (|\x0;fail~1pxGHH~347|)))))) (if (null? |\x0;input~1pxGHH~345|) (let ((|\x0;input~1pxGHH~392| |\x0;c1~1pxGHH~342|)) (let ((|\x0;fail~1pxGHH~393| (lambda () (let ((|\x0;fail~1pxGHH~394| (lambda () (let ((|\x0;fail~1pxGHH~395| (lambda () (let ((|\x0;fail~1pxGHH~396| (lambda () (let ((|\x0;fail~1pxGHH~397| (lambda () (ex:invalid-form |\x0;input~1pxGHH~392|)))) (ex:syntax-violation 'cond "Invalid expression" |\x0;x~1pxGHH~322|))))) (if (pair? |\x0;input~1pxGHH~392|) (let ((|\x0;temp~1pxGHH~407| (car |\x0;input~1pxGHH~392|))) (let ((|\x0;e0~1pxGHH~399| |\x0;temp~1pxGHH~407|)) (let ((|\x0;temp~1pxGHH~404| (cdr |\x0;input~1pxGHH~392|))) (if (pair? |\x0;temp~1pxGHH~404|) (let ((|\x0;temp~1pxGHH~406| (car |\x0;temp~1pxGHH~404|))) (let ((|\x0;e1~1pxGHH~400| |\x0;temp~1pxGHH~406|)) (let ((|\x0;temp~1pxGHH~405| (cdr |\x0;temp~1pxGHH~404|))) (if (list? |\x0;temp~1pxGHH~405|) (let ((|\x0;e2~1pxGHH~401| |\x0;temp~1pxGHH~405|)) (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~403|) 0 '(core derived)) (cons |\x0;e0~1pxGHH~399| (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~403|) 0 '(core derived)) (cons |\x0;e1~1pxGHH~400| |\x0;e2~1pxGHH~401|)) '())))) (|\x0;fail~1pxGHH~396|))))) (|\x0;fail~1pxGHH~396|))))) (|\x0;fail~1pxGHH~396|)))))) (if (pair? |\x0;input~1pxGHH~392|) (let ((|\x0;temp~1pxGHH~417| (car |\x0;input~1pxGHH~392|))) (let ((|\x0;e0~1pxGHH~408| |\x0;temp~1pxGHH~417|)) (let ((|\x0;temp~1pxGHH~412| (cdr |\x0;input~1pxGHH~392|))) (if (pair? |\x0;temp~1pxGHH~412|) (let ((|\x0;temp~1pxGHH~416| (car |\x0;temp~1pxGHH~412|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~416|) (ex:free-identifier=? |\x0;temp~1pxGHH~416| (ex:syntax-rename '=> '() '(|\x0;env~1pxGHH~411|) 0 '(core derived)))) (let ((|\x0;temp~1pxGHH~413| (cdr |\x0;temp~1pxGHH~412|))) (if (pair? |\x0;temp~1pxGHH~413|) (let ((|\x0;temp~1pxGHH~415| (car |\x0;temp~1pxGHH~413|))) (let ((|\x0;e1~1pxGHH~409| |\x0;temp~1pxGHH~415|)) (let ((|\x0;temp~1pxGHH~414| (cdr |\x0;temp~1pxGHH~413|))) (if (null? |\x0;temp~1pxGHH~414|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~411|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~411|) 0 '(core derived)) (cons |\x0;e0~1pxGHH~408| '())) '()) (cons (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~411|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~411|) 0 '(core derived)) (cons (cons |\x0;e1~1pxGHH~409| (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~411|) 0 '(core derived)) '())) '()))) '()))) (|\x0;fail~1pxGHH~395|))))) (|\x0;fail~1pxGHH~395|))) (|\x0;fail~1pxGHH~395|))) (|\x0;fail~1pxGHH~395|))))) (|\x0;fail~1pxGHH~395|)))))) (if (pair? |\x0;input~1pxGHH~392|) (let ((|\x0;temp~1pxGHH~422| (car |\x0;input~1pxGHH~392|))) (let ((|\x0;e0~1pxGHH~418| |\x0;temp~1pxGHH~422|)) (let ((|\x0;temp~1pxGHH~421| (cdr |\x0;input~1pxGHH~392|))) (if (null? |\x0;temp~1pxGHH~421|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~420|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~420|) 0 '(core derived)) (cons |\x0;e0~1pxGHH~418| '())) '()) (cons (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~420|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~420|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1pxGHH~420|) 0 '(core derived)) '()))) '()))) (|\x0;fail~1pxGHH~394|))))) (|\x0;fail~1pxGHH~394|)))))) (if (pair? |\x0;input~1pxGHH~392|) (let ((|\x0;temp~1pxGHH~430| (car |\x0;input~1pxGHH~392|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~430|) (ex:free-identifier=? |\x0;temp~1pxGHH~430| (ex:syntax-rename 'else '() '(|\x0;env~1pxGHH~426|) 0 '(core derived)))) (let ((|\x0;temp~1pxGHH~427| (cdr |\x0;input~1pxGHH~392|))) (if (pair? |\x0;temp~1pxGHH~427|) (let ((|\x0;temp~1pxGHH~429| (car |\x0;temp~1pxGHH~427|))) (let ((|\x0;e1~1pxGHH~423| |\x0;temp~1pxGHH~429|)) (let ((|\x0;temp~1pxGHH~428| (cdr |\x0;temp~1pxGHH~427|))) (if (list? |\x0;temp~1pxGHH~428|) (let ((|\x0;e2~1pxGHH~424| |\x0;temp~1pxGHH~428|)) (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~426|) 0 '(core derived)) (cons |\x0;e1~1pxGHH~423| |\x0;e2~1pxGHH~424|))) (|\x0;fail~1pxGHH~393|))))) (|\x0;fail~1pxGHH~393|))) (|\x0;fail~1pxGHH~393|))) (|\x0;fail~1pxGHH~393|)))) (|\x0;fail~1pxGHH~346|)))))) ((lambda () ((lambda (|\x0;c1~1pxGHH~337| |\x0;c2*~1pxGHH~338|) (|\x0;f~1pxGHH~333| |\x0;c1~1pxGHH~337| |\x0;c2*~1pxGHH~338|)) |\x0;c1~1pxGHH~326| |\x0;c2~1pxGHH~327|)))) ex:undefined)))) (|\x0;fail~1pxGHH~325|))))) (|\x0;fail~1pxGHH~325|)))) (|\x0;fail~1pxGHH~325|)))))) (ex:register-macro! '|\x0;case~1pxGHH~435| (lambda (|\x0;x~1pxGHH~438|) (let ((|\x0;input~1pxGHH~440| |\x0;x~1pxGHH~438|)) (let ((|\x0;fail~1pxGHH~441| (lambda () (let ((|\x0;fail~1pxGHH~442| (lambda () (let ((|\x0;fail~1pxGHH~443| (lambda () (let ((|\x0;fail~1pxGHH~444| (lambda () (let ((|\x0;fail~1pxGHH~445| (lambda () (let ((|\x0;fail~1pxGHH~446| (lambda () (let ((|\x0;fail~1pxGHH~447| (lambda () (ex:invalid-form |\x0;input~1pxGHH~440|)))) (if (pair? |\x0;input~1pxGHH~440|) (let ((|\x0;temp~1pxGHH~468| (car |\x0;input~1pxGHH~440|))) (let ((|\x0;dummy~1pxGHH~448| |\x0;temp~1pxGHH~468|)) (let ((|\x0;temp~1pxGHH~457| (cdr |\x0;input~1pxGHH~440|))) (if (pair? |\x0;temp~1pxGHH~457|) (let ((|\x0;temp~1pxGHH~467| (car |\x0;temp~1pxGHH~457|))) (let ((|\x0;key~1pxGHH~449| |\x0;temp~1pxGHH~467|)) (let ((|\x0;temp~1pxGHH~458| (cdr |\x0;temp~1pxGHH~457|))) (if (pair? |\x0;temp~1pxGHH~458|) (let ((|\x0;temp~1pxGHH~462| (car |\x0;temp~1pxGHH~458|))) (if (pair? |\x0;temp~1pxGHH~462|) (let ((|\x0;temp~1pxGHH~466| (car |\x0;temp~1pxGHH~462|))) (if (list? |\x0;temp~1pxGHH~466|) (let ((|\x0;atoms~1pxGHH~450| |\x0;temp~1pxGHH~466|)) (let ((|\x0;temp~1pxGHH~463| (cdr |\x0;temp~1pxGHH~462|))) (if (pair? |\x0;temp~1pxGHH~463|) (let ((|\x0;temp~1pxGHH~465| (car |\x0;temp~1pxGHH~463|))) (let ((|\x0;result1~1pxGHH~451| |\x0;temp~1pxGHH~465|)) (let ((|\x0;temp~1pxGHH~464| (cdr |\x0;temp~1pxGHH~463|))) (if (list? |\x0;temp~1pxGHH~464|) (let ((|\x0;result2~1pxGHH~452| |\x0;temp~1pxGHH~464|)) (let ((|\x0;temp~1pxGHH~459| (cdr |\x0;temp~1pxGHH~458|))) (if (pair? |\x0;temp~1pxGHH~459|) (let ((|\x0;temp~1pxGHH~461| (car |\x0;temp~1pxGHH~459|))) (let ((|\x0;clause~1pxGHH~453| |\x0;temp~1pxGHH~461|)) (let ((|\x0;temp~1pxGHH~460| (cdr |\x0;temp~1pxGHH~459|))) (if (list? |\x0;temp~1pxGHH~460|) (let ((|\x0;clauses~1pxGHH~454| |\x0;temp~1pxGHH~460|)) (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~456|) 0 '(core derived)) (cons (cons (ex:syntax-rename 'memv '() '(|\x0;env~1pxGHH~456|) 0 '(core derived)) (cons |\x0;key~1pxGHH~449| (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1pxGHH~456|) 0 '(core derived)) (cons |\x0;atoms~1pxGHH~450| '())) '()))) (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~456|) 0 '(core derived)) (cons |\x0;result1~1pxGHH~451| |\x0;result2~1pxGHH~452|)) (cons (cons (ex:syntax-rename 'case '() '(|\x0;env~1pxGHH~456|) 0 '(core derived)) (cons |\x0;key~1pxGHH~449| (cons |\x0;clause~1pxGHH~453| |\x0;clauses~1pxGHH~454|))) '()))))) (|\x0;fail~1pxGHH~447|))))) (|\x0;fail~1pxGHH~447|)))) (|\x0;fail~1pxGHH~447|))))) (|\x0;fail~1pxGHH~447|)))) (|\x0;fail~1pxGHH~447|))) (|\x0;fail~1pxGHH~447|))) (|\x0;fail~1pxGHH~447|))))) (|\x0;fail~1pxGHH~447|))))) (|\x0;fail~1pxGHH~447|)))))) (if (pair? |\x0;input~1pxGHH~440|) (let ((|\x0;temp~1pxGHH~485| (car |\x0;input~1pxGHH~440|))) (let ((|\x0;dummy~1pxGHH~469| |\x0;temp~1pxGHH~485|)) (let ((|\x0;temp~1pxGHH~476| (cdr |\x0;input~1pxGHH~440|))) (if (pair? |\x0;temp~1pxGHH~476|) (let ((|\x0;temp~1pxGHH~484| (car |\x0;temp~1pxGHH~476|))) (let ((|\x0;key~1pxGHH~470| |\x0;temp~1pxGHH~484|)) (let ((|\x0;temp~1pxGHH~477| (cdr |\x0;temp~1pxGHH~476|))) (if (pair? |\x0;temp~1pxGHH~477|) (let ((|\x0;temp~1pxGHH~479| (car |\x0;temp~1pxGHH~477|))) (if (pair? |\x0;temp~1pxGHH~479|) (let ((|\x0;temp~1pxGHH~483| (car |\x0;temp~1pxGHH~479|))) (if (list? |\x0;temp~1pxGHH~483|) (let ((|\x0;atoms~1pxGHH~471| |\x0;temp~1pxGHH~483|)) (let ((|\x0;temp~1pxGHH~480| (cdr |\x0;temp~1pxGHH~479|))) (if (pair? |\x0;temp~1pxGHH~480|) (let ((|\x0;temp~1pxGHH~482| (car |\x0;temp~1pxGHH~480|))) (let ((|\x0;result1~1pxGHH~472| |\x0;temp~1pxGHH~482|)) (let ((|\x0;temp~1pxGHH~481| (cdr |\x0;temp~1pxGHH~480|))) (if (list? |\x0;temp~1pxGHH~481|) (let ((|\x0;result2~1pxGHH~473| |\x0;temp~1pxGHH~481|)) (let ((|\x0;temp~1pxGHH~478| (cdr |\x0;temp~1pxGHH~477|))) (if (null? |\x0;temp~1pxGHH~478|) (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~475|) 0 '(core derived)) (cons (cons (ex:syntax-rename 'memv '() '(|\x0;env~1pxGHH~475|) 0 '(core derived)) (cons |\x0;key~1pxGHH~470| (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1pxGHH~475|) 0 '(core derived)) (cons |\x0;atoms~1pxGHH~471| '())) '()))) (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~475|) 0 '(core derived)) (cons |\x0;result1~1pxGHH~472| |\x0;result2~1pxGHH~473|)) '()))) (|\x0;fail~1pxGHH~446|)))) (|\x0;fail~1pxGHH~446|))))) (|\x0;fail~1pxGHH~446|)))) (|\x0;fail~1pxGHH~446|))) (|\x0;fail~1pxGHH~446|))) (|\x0;fail~1pxGHH~446|))))) (|\x0;fail~1pxGHH~446|))))) (|\x0;fail~1pxGHH~446|)))))) (if (pair? |\x0;input~1pxGHH~440|) (let ((|\x0;temp~1pxGHH~507| (car |\x0;input~1pxGHH~440|))) (let ((|\x0;dummy~1pxGHH~486| |\x0;temp~1pxGHH~507|)) (let ((|\x0;temp~1pxGHH~494| (cdr |\x0;input~1pxGHH~440|))) (if (pair? |\x0;temp~1pxGHH~494|) (let ((|\x0;temp~1pxGHH~506| (car |\x0;temp~1pxGHH~494|))) (let ((|\x0;key~1pxGHH~487| |\x0;temp~1pxGHH~506|)) (let ((|\x0;temp~1pxGHH~495| (cdr |\x0;temp~1pxGHH~494|))) (if (pair? |\x0;temp~1pxGHH~495|) (let ((|\x0;temp~1pxGHH~499| (car |\x0;temp~1pxGHH~495|))) (if (pair? |\x0;temp~1pxGHH~499|) (let ((|\x0;temp~1pxGHH~505| (car |\x0;temp~1pxGHH~499|))) (if (list? |\x0;temp~1pxGHH~505|) (let ((|\x0;atoms~1pxGHH~488| |\x0;temp~1pxGHH~505|)) (let ((|\x0;temp~1pxGHH~500| (cdr |\x0;temp~1pxGHH~499|))) (if (pair? |\x0;temp~1pxGHH~500|) (let ((|\x0;temp~1pxGHH~504| (car |\x0;temp~1pxGHH~500|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~504|) (ex:free-identifier=? |\x0;temp~1pxGHH~504| (ex:syntax-rename '=> '() '(|\x0;env~1pxGHH~493|) 0 '(core derived)))) (let ((|\x0;temp~1pxGHH~501| (cdr |\x0;temp~1pxGHH~500|))) (if (pair? |\x0;temp~1pxGHH~501|) (let ((|\x0;temp~1pxGHH~503| (car |\x0;temp~1pxGHH~501|))) (let ((|\x0;result~1pxGHH~489| |\x0;temp~1pxGHH~503|)) (let ((|\x0;temp~1pxGHH~502| (cdr |\x0;temp~1pxGHH~501|))) (if (null? |\x0;temp~1pxGHH~502|) (let ((|\x0;temp~1pxGHH~496| (cdr |\x0;temp~1pxGHH~495|))) (if (pair? |\x0;temp~1pxGHH~496|) (let ((|\x0;temp~1pxGHH~498| (car |\x0;temp~1pxGHH~496|))) (let ((|\x0;clause~1pxGHH~490| |\x0;temp~1pxGHH~498|)) (let ((|\x0;temp~1pxGHH~497| (cdr |\x0;temp~1pxGHH~496|))) (if (list? |\x0;temp~1pxGHH~497|) (let ((|\x0;clauses~1pxGHH~491| |\x0;temp~1pxGHH~497|)) (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~493|) 0 '(core derived)) (cons (cons (ex:syntax-rename 'memv '() '(|\x0;env~1pxGHH~493|) 0 '(core derived)) (cons |\x0;key~1pxGHH~487| (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1pxGHH~493|) 0 '(core derived)) (cons |\x0;atoms~1pxGHH~488| '())) '()))) (cons (cons |\x0;result~1pxGHH~489| (cons |\x0;key~1pxGHH~487| '())) (cons (cons (ex:syntax-rename 'case '() '(|\x0;env~1pxGHH~493|) 0 '(core derived)) (cons |\x0;key~1pxGHH~487| (cons |\x0;clause~1pxGHH~490| |\x0;clauses~1pxGHH~491|))) '()))))) (|\x0;fail~1pxGHH~445|))))) (|\x0;fail~1pxGHH~445|))) (|\x0;fail~1pxGHH~445|))))) (|\x0;fail~1pxGHH~445|))) (|\x0;fail~1pxGHH~445|))) (|\x0;fail~1pxGHH~445|)))) (|\x0;fail~1pxGHH~445|))) (|\x0;fail~1pxGHH~445|))) (|\x0;fail~1pxGHH~445|))))) (|\x0;fail~1pxGHH~445|))))) (|\x0;fail~1pxGHH~445|)))))) (if (pair? |\x0;input~1pxGHH~440|) (let ((|\x0;temp~1pxGHH~525| (car |\x0;input~1pxGHH~440|))) (let ((|\x0;dummy~1pxGHH~508| |\x0;temp~1pxGHH~525|)) (let ((|\x0;temp~1pxGHH~514| (cdr |\x0;input~1pxGHH~440|))) (if (pair? |\x0;temp~1pxGHH~514|) (let ((|\x0;temp~1pxGHH~524| (car |\x0;temp~1pxGHH~514|))) (let ((|\x0;key~1pxGHH~509| |\x0;temp~1pxGHH~524|)) (let ((|\x0;temp~1pxGHH~515| (cdr |\x0;temp~1pxGHH~514|))) (if (pair? |\x0;temp~1pxGHH~515|) (let ((|\x0;temp~1pxGHH~517| (car |\x0;temp~1pxGHH~515|))) (if (pair? |\x0;temp~1pxGHH~517|) (let ((|\x0;temp~1pxGHH~523| (car |\x0;temp~1pxGHH~517|))) (if (list? |\x0;temp~1pxGHH~523|) (let ((|\x0;atoms~1pxGHH~510| |\x0;temp~1pxGHH~523|)) (let ((|\x0;temp~1pxGHH~518| (cdr |\x0;temp~1pxGHH~517|))) (if (pair? |\x0;temp~1pxGHH~518|) (let ((|\x0;temp~1pxGHH~522| (car |\x0;temp~1pxGHH~518|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~522|) (ex:free-identifier=? |\x0;temp~1pxGHH~522| (ex:syntax-rename '=> '() '(|\x0;env~1pxGHH~513|) 0 '(core derived)))) (let ((|\x0;temp~1pxGHH~519| (cdr |\x0;temp~1pxGHH~518|))) (if (pair? |\x0;temp~1pxGHH~519|) (let ((|\x0;temp~1pxGHH~521| (car |\x0;temp~1pxGHH~519|))) (let ((|\x0;result~1pxGHH~511| |\x0;temp~1pxGHH~521|)) (let ((|\x0;temp~1pxGHH~520| (cdr |\x0;temp~1pxGHH~519|))) (if (null? |\x0;temp~1pxGHH~520|) (let ((|\x0;temp~1pxGHH~516| (cdr |\x0;temp~1pxGHH~515|))) (if (null? |\x0;temp~1pxGHH~516|) (cons (ex:syntax-rename 'if '() '(|\x0;env~1pxGHH~513|) 0 '(core derived)) (cons (cons (ex:syntax-rename 'memv '() '(|\x0;env~1pxGHH~513|) 0 '(core derived)) (cons |\x0;key~1pxGHH~509| (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1pxGHH~513|) 0 '(core derived)) (cons |\x0;atoms~1pxGHH~510| '())) '()))) (cons (cons |\x0;result~1pxGHH~511| (cons |\x0;key~1pxGHH~509| '())) '()))) (|\x0;fail~1pxGHH~444|))) (|\x0;fail~1pxGHH~444|))))) (|\x0;fail~1pxGHH~444|))) (|\x0;fail~1pxGHH~444|))) (|\x0;fail~1pxGHH~444|)))) (|\x0;fail~1pxGHH~444|))) (|\x0;fail~1pxGHH~444|))) (|\x0;fail~1pxGHH~444|))))) (|\x0;fail~1pxGHH~444|))))) (|\x0;fail~1pxGHH~444|)))))) (if (pair? |\x0;input~1pxGHH~440|) (let ((|\x0;temp~1pxGHH~541| (car |\x0;input~1pxGHH~440|))) (let ((|\x0;dummy~1pxGHH~526| |\x0;temp~1pxGHH~541|)) (let ((|\x0;temp~1pxGHH~532| (cdr |\x0;input~1pxGHH~440|))) (if (pair? |\x0;temp~1pxGHH~532|) (let ((|\x0;temp~1pxGHH~540| (car |\x0;temp~1pxGHH~532|))) (let ((|\x0;key~1pxGHH~527| |\x0;temp~1pxGHH~540|)) (let ((|\x0;temp~1pxGHH~533| (cdr |\x0;temp~1pxGHH~532|))) (if (pair? |\x0;temp~1pxGHH~533|) (let ((|\x0;temp~1pxGHH~535| (car |\x0;temp~1pxGHH~533|))) (if (pair? |\x0;temp~1pxGHH~535|) (let ((|\x0;temp~1pxGHH~539| (car |\x0;temp~1pxGHH~535|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~539|) (ex:free-identifier=? |\x0;temp~1pxGHH~539| (ex:syntax-rename 'else '() '(|\x0;env~1pxGHH~531|) 0 '(core derived)))) (let ((|\x0;temp~1pxGHH~536| (cdr |\x0;temp~1pxGHH~535|))) (if (pair? |\x0;temp~1pxGHH~536|) (let ((|\x0;temp~1pxGHH~538| (car |\x0;temp~1pxGHH~536|))) (let ((|\x0;result1~1pxGHH~528| |\x0;temp~1pxGHH~538|)) (let ((|\x0;temp~1pxGHH~537| (cdr |\x0;temp~1pxGHH~536|))) (if (list? |\x0;temp~1pxGHH~537|) (let ((|\x0;result2~1pxGHH~529| |\x0;temp~1pxGHH~537|)) (let ((|\x0;temp~1pxGHH~534| (cdr |\x0;temp~1pxGHH~533|))) (if (null? |\x0;temp~1pxGHH~534|) (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~531|) 0 '(core derived)) (cons |\x0;result1~1pxGHH~528| |\x0;result2~1pxGHH~529|)) (|\x0;fail~1pxGHH~443|)))) (|\x0;fail~1pxGHH~443|))))) (|\x0;fail~1pxGHH~443|))) (|\x0;fail~1pxGHH~443|))) (|\x0;fail~1pxGHH~443|))) (|\x0;fail~1pxGHH~443|))))) (|\x0;fail~1pxGHH~443|))))) (|\x0;fail~1pxGHH~443|)))))) (if (pair? |\x0;input~1pxGHH~440|) (let ((|\x0;temp~1pxGHH~558| (car |\x0;input~1pxGHH~440|))) (let ((|\x0;dummy~1pxGHH~542| |\x0;temp~1pxGHH~558|)) (let ((|\x0;temp~1pxGHH~546| (cdr |\x0;input~1pxGHH~440|))) (if (pair? |\x0;temp~1pxGHH~546|) (let ((|\x0;temp~1pxGHH~557| (car |\x0;temp~1pxGHH~546|))) (let ((|\x0;key~1pxGHH~543| |\x0;temp~1pxGHH~557|)) (let ((|\x0;temp~1pxGHH~547| (cdr |\x0;temp~1pxGHH~546|))) (if (pair? |\x0;temp~1pxGHH~547|) (let ((|\x0;temp~1pxGHH~549| (car |\x0;temp~1pxGHH~547|))) (if (pair? |\x0;temp~1pxGHH~549|) (let ((|\x0;temp~1pxGHH~556| (car |\x0;temp~1pxGHH~549|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~556|) (ex:free-identifier=? |\x0;temp~1pxGHH~556| (ex:syntax-rename 'else '() '(|\x0;env~1pxGHH~555|) 0 '(core derived)))) (let ((|\x0;temp~1pxGHH~550| (cdr |\x0;temp~1pxGHH~549|))) (if (pair? |\x0;temp~1pxGHH~550|) (let ((|\x0;temp~1pxGHH~554| (car |\x0;temp~1pxGHH~550|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~554|) (ex:free-identifier=? |\x0;temp~1pxGHH~554| (ex:syntax-rename '=> '() '(|\x0;env~1pxGHH~555|) 0 '(core derived)))) (let ((|\x0;temp~1pxGHH~551| (cdr |\x0;temp~1pxGHH~550|))) (if (pair? |\x0;temp~1pxGHH~551|) (let ((|\x0;temp~1pxGHH~553| (car |\x0;temp~1pxGHH~551|))) (let ((|\x0;result~1pxGHH~544| |\x0;temp~1pxGHH~553|)) (let ((|\x0;temp~1pxGHH~552| (cdr |\x0;temp~1pxGHH~551|))) (if (null? |\x0;temp~1pxGHH~552|) (let ((|\x0;temp~1pxGHH~548| (cdr |\x0;temp~1pxGHH~547|))) (if (null? |\x0;temp~1pxGHH~548|) (cons |\x0;result~1pxGHH~544| (cons |\x0;key~1pxGHH~543| '())) (|\x0;fail~1pxGHH~442|))) (|\x0;fail~1pxGHH~442|))))) (|\x0;fail~1pxGHH~442|))) (|\x0;fail~1pxGHH~442|))) (|\x0;fail~1pxGHH~442|))) (|\x0;fail~1pxGHH~442|))) (|\x0;fail~1pxGHH~442|))) (|\x0;fail~1pxGHH~442|))))) (|\x0;fail~1pxGHH~442|))))) (|\x0;fail~1pxGHH~442|)))))) (if (pair? |\x0;input~1pxGHH~440|) (let ((|\x0;temp~1pxGHH~567| (car |\x0;input~1pxGHH~440|))) (let ((|\x0;dummy~1pxGHH~559| |\x0;temp~1pxGHH~567|)) (let ((|\x0;temp~1pxGHH~564| (cdr |\x0;input~1pxGHH~440|))) (if (pair? |\x0;temp~1pxGHH~564|) (let ((|\x0;temp~1pxGHH~566| (car |\x0;temp~1pxGHH~564|))) (if (list? |\x0;temp~1pxGHH~566|) (let ((|\x0;key~1pxGHH~560| |\x0;temp~1pxGHH~566|)) (let ((|\x0;temp~1pxGHH~565| (cdr |\x0;temp~1pxGHH~564|))) (if (list? |\x0;temp~1pxGHH~565|) (let ((|\x0;clauses~1pxGHH~561| |\x0;temp~1pxGHH~565|)) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~563|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 'atom-key '() '(|\x0;env~1pxGHH~563|) 0 '(core derived)) (cons |\x0;key~1pxGHH~560| '())) '()) (cons (cons (ex:syntax-rename 'case '() '(|\x0;env~1pxGHH~563|) 0 '(core derived)) (cons (ex:syntax-rename 'atom-key '() '(|\x0;env~1pxGHH~563|) 0 '(core derived)) |\x0;clauses~1pxGHH~561|)) '())))) (|\x0;fail~1pxGHH~441|)))) (|\x0;fail~1pxGHH~441|))) (|\x0;fail~1pxGHH~441|))))) (|\x0;fail~1pxGHH~441|)))))) (ex:register-macro! '|\x0;=>~1pxGHH~568| (lambda (|\x0;x~1pxGHH~570|) (ex:syntax-violation '=> "Invalid expression" |\x0;x~1pxGHH~570|))) (ex:register-macro! '|\x0;else~1pxGHH~572| (lambda (|\x0;x~1pxGHH~574|) (ex:syntax-violation 'else "Invalid expression" |\x0;x~1pxGHH~574|))) (values)) (lambda () (values)) '|\x0;build~1pxGHH~576|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core identifier-syntax) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~617| 0 1 2 3) (|\x0;env~1pxGHH~594| 4 1 2 3)) (4 (((id) . #f) ((exp1) . #f) ((var) . #f) ((val) . #f) ((exp2) . #f))) (3 (((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (0) #f (core identifier-syntax)) ((undefined) variable ex:undefined (1 0 -1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0 -1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0 -1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0 -1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0 -1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0 -1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0 -1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0 -1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0 -1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0 -1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0 -1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0 -1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0 -1) #f ()) ((syntax) macro syntax (1 0 -1) #f ()) ((...) macro ... (1 0 -1) #f ()) ((_) macro _ (1 0 -1) #f ()) ((letrec-syntax) macro letrec-syntax (1 0 -1) #f ()) ((let-syntax) macro let-syntax (1 0 -1) #f ()) ((define-syntax) macro define-syntax (1 0 -1) #f ()) ((define) macro define (1 0 -1) #f ()) ((or) macro or (1 0 -1) #f ()) ((and) macro and (1 0 -1) #f ()) ((set!) macro set! (1 0 -1) #f ()) ((quote) macro quote (1 0 -1) #f ()) ((lambda) macro lambda (1 0 -1) #f ()) ((if) macro if (1 0 -1) #f ()) ((begin) macro begin (1 0 -1) #f ()))) (2 (((x) variable |\x0;x~1pxGHH~579| (1) #f (core identifier-syntax)))) (1 ()) (0 (((e) . #f)))))) '((identifier-syntax macro |\x0;identifier-syntax~1pxGHH~577| (0) #f (core identifier-syntax))) '(((core primitives) 1 0 -1)) '(|\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;identifier-syntax~1pxGHH~577| (lambda (|\x0;x~1pxGHH~579|) (let ((|\x0;input~1pxGHH~581| |\x0;x~1pxGHH~579|)) (let ((|\x0;fail~1pxGHH~582| (lambda () (let ((|\x0;fail~1pxGHH~583| (lambda () (ex:invalid-form |\x0;input~1pxGHH~581|)))) (if (pair? |\x0;input~1pxGHH~581|) (let ((|\x0;temp~1pxGHH~614| (car |\x0;input~1pxGHH~581|))) (let ((|\x0;temp~1pxGHH~595| (cdr |\x0;input~1pxGHH~581|))) (if (pair? |\x0;temp~1pxGHH~595|) (let ((|\x0;temp~1pxGHH~609| (car |\x0;temp~1pxGHH~595|))) (if (pair? |\x0;temp~1pxGHH~609|) (let ((|\x0;temp~1pxGHH~613| (car |\x0;temp~1pxGHH~609|))) (let ((|\x0;id~1pxGHH~584| |\x0;temp~1pxGHH~613|)) (let ((|\x0;temp~1pxGHH~610| (cdr |\x0;temp~1pxGHH~609|))) (if (pair? |\x0;temp~1pxGHH~610|) (let ((|\x0;temp~1pxGHH~612| (car |\x0;temp~1pxGHH~610|))) (let ((|\x0;exp1~1pxGHH~585| |\x0;temp~1pxGHH~612|)) (let ((|\x0;temp~1pxGHH~611| (cdr |\x0;temp~1pxGHH~610|))) (if (null? |\x0;temp~1pxGHH~611|) (let ((|\x0;temp~1pxGHH~596| (cdr |\x0;temp~1pxGHH~595|))) (if (pair? |\x0;temp~1pxGHH~596|) (let ((|\x0;temp~1pxGHH~598| (car |\x0;temp~1pxGHH~596|))) (if (pair? |\x0;temp~1pxGHH~598|) (let ((|\x0;temp~1pxGHH~602| (car |\x0;temp~1pxGHH~598|))) (if (pair? |\x0;temp~1pxGHH~602|) (let ((|\x0;temp~1pxGHH~608| (car |\x0;temp~1pxGHH~602|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~608|) (ex:free-identifier=? |\x0;temp~1pxGHH~608| (ex:syntax-rename 'set! '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)))) (let ((|\x0;temp~1pxGHH~603| (cdr |\x0;temp~1pxGHH~602|))) (if (pair? |\x0;temp~1pxGHH~603|) (let ((|\x0;temp~1pxGHH~607| (car |\x0;temp~1pxGHH~603|))) (let ((|\x0;var~1pxGHH~586| |\x0;temp~1pxGHH~607|)) (let ((|\x0;temp~1pxGHH~604| (cdr |\x0;temp~1pxGHH~603|))) (if (pair? |\x0;temp~1pxGHH~604|) (let ((|\x0;temp~1pxGHH~606| (car |\x0;temp~1pxGHH~604|))) (let ((|\x0;val~1pxGHH~587| |\x0;temp~1pxGHH~606|)) (let ((|\x0;temp~1pxGHH~605| (cdr |\x0;temp~1pxGHH~604|))) (if (null? |\x0;temp~1pxGHH~605|) (let ((|\x0;temp~1pxGHH~599| (cdr |\x0;temp~1pxGHH~598|))) (if (pair? |\x0;temp~1pxGHH~599|) (let ((|\x0;temp~1pxGHH~601| (car |\x0;temp~1pxGHH~599|))) (let ((|\x0;exp2~1pxGHH~588| |\x0;temp~1pxGHH~601|)) (let ((|\x0;temp~1pxGHH~600| (cdr |\x0;temp~1pxGHH~599|))) (if (null? |\x0;temp~1pxGHH~600|) (let ((|\x0;temp~1pxGHH~597| (cdr |\x0;temp~1pxGHH~596|))) (if (null? |\x0;temp~1pxGHH~597|) (if (if (ex:identifier? |\x0;id~1pxGHH~584|) (ex:identifier? |\x0;var~1pxGHH~586|) #f) (cons (ex:syntax-rename 'make-variable-transformer '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) '()) (cons (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'set! '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) '()) (cons (cons (cons (ex:syntax-rename 'set! '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons |\x0;var~1pxGHH~586| (cons |\x0;val~1pxGHH~587| '()))) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons |\x0;exp2~1pxGHH~588| '())) '())) (cons (cons (cons |\x0;id~1pxGHH~584| (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename '... '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) '()))) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons (cons |\x0;exp1~1pxGHH~585| (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename '... '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) '()))) '())) '())) (cons (cons |\x0;id~1pxGHH~584| (cons (cons (ex:syntax-rename 'identifier? '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons |\x0;id~1pxGHH~584| '())) '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~594|) 0 '(core identifier-syntax)) (cons |\x0;exp1~1pxGHH~585| '())) '()))) '())))))) '()))) '())) (|\x0;fail~1pxGHH~583|)) (|\x0;fail~1pxGHH~583|))) (|\x0;fail~1pxGHH~583|))))) (|\x0;fail~1pxGHH~583|))) (|\x0;fail~1pxGHH~583|))))) (|\x0;fail~1pxGHH~583|))))) (|\x0;fail~1pxGHH~583|))) (|\x0;fail~1pxGHH~583|))) (|\x0;fail~1pxGHH~583|))) (|\x0;fail~1pxGHH~583|))) (|\x0;fail~1pxGHH~583|))) (|\x0;fail~1pxGHH~583|))))) (|\x0;fail~1pxGHH~583|))))) (|\x0;fail~1pxGHH~583|))) (|\x0;fail~1pxGHH~583|)))) (|\x0;fail~1pxGHH~583|)))))) (if (pair? |\x0;input~1pxGHH~581|) (let ((|\x0;temp~1pxGHH~621| (car |\x0;input~1pxGHH~581|))) (let ((|\x0;temp~1pxGHH~618| (cdr |\x0;input~1pxGHH~581|))) (if (pair? |\x0;temp~1pxGHH~618|) (let ((|\x0;temp~1pxGHH~620| (car |\x0;temp~1pxGHH~618|))) (let ((|\x0;e~1pxGHH~615| |\x0;temp~1pxGHH~620|)) (let ((|\x0;temp~1pxGHH~619| (cdr |\x0;temp~1pxGHH~618|))) (if (null? |\x0;temp~1pxGHH~619|) (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) '()) (cons (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons '() (cons (cons (ex:syntax-rename 'id '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'identifier? '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename 'id '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) '())) '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons |\x0;e~1pxGHH~615| '())) '()))) (cons (cons (cons (ex:syntax-rename '_ '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename '... '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) '()))) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (cons |\x0;e~1pxGHH~615| (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename '... '() '(|\x0;env~1pxGHH~617|) 0 '(core identifier-syntax)) '()))) '())) '())) '()))))) '()))) (|\x0;fail~1pxGHH~582|))))) (|\x0;fail~1pxGHH~582|)))) (|\x0;fail~1pxGHH~582|)))))) (values)) (lambda () (values)) '|\x0;build~1pxGHH~622|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core quasisyntax) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~840| 0 1 2 3 4 5) (|\x0;env~1pxGHH~812| 6 1 2 3 4 5) (|\x0;env~1pxGHH~796| 7 1 2 3 4 5) (|\x0;env~1pxGHH~770| 8 1 2 3 4 5) (|\x0;env~1pxGHH~751| 9 8 1 2 3 4 5) (|\x0;env~1pxGHH~716| 10 1 2 3 4 5) (|\x0;env~1pxGHH~640| 11 12 3 4 5)) (12 (((template) . #f))) (11 (((template*) . #f) ((replacements) . #f))) (10 (((k) . #f) ((r) . #f))) (9 (((r*) . #f) ((rep) . #f) ((t) . #f))) (8 (((e) . #f) ((r) . #f))) (7 (((e) . #f) ((r) . #f))) (6 (((e) . #f))) (5 (((unsyntax-splicing) macro |\x0;unsyntax-splicing~1pxGHH~845| (0) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (0) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (0) #f (core quasisyntax)) ((undefined) variable ex:undefined (0 1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0 1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0 1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0 1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0 1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0 1) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0 1) #f (core let)) ((=>) macro |\x0;=>~1pxGHH~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0 1) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0 1) #f (core derived)) ((let*) macro |\x0;let*~1pxGHH~241| (0 1) #f (core derived)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (0 1) #f (core with-syntax)) ((vector->list) variable vector->list (0 1) #f (larceny PRIMITIVES)) ((-) variable - (0 1) #f (larceny PRIMITIVES)) ((+) variable + (0 1) #f (larceny PRIMITIVES)) ((>) variable > (0 1) #f (larceny PRIMITIVES)) ((=) variable = (0 1) #f (larceny PRIMITIVES)))) (4 (((e) variable |\x0;e~1pxGHH~625| (1) #f (core quasisyntax)))) (3 (((expand) variable |\x0;expand~1pxGHH~626| (1) #f (core quasisyntax)))) (2 (((x) variable |\x0;x~1pxGHH~650| (1) #f (core quasisyntax)) ((level) variable |\x0;level~1pxGHH~651| (1) #f (core quasisyntax)))) (1 ()) (0 (((e) . #f)))))) '((quasisyntax macro |\x0;quasisyntax~1pxGHH~623| (0) #f (core quasisyntax)) (unsyntax macro |\x0;unsyntax~1pxGHH~841| (0) #f (core quasisyntax)) (unsyntax-splicing macro |\x0;unsyntax-splicing~1pxGHH~845| (0) #f (core quasisyntax))) '(((core with-syntax) 0 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1)) '(|\x0;build~1pxGHH~57| |\x0;build~1pxGHH~576| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;quasisyntax~1pxGHH~623| (lambda (|\x0;e~1pxGHH~625|) ((lambda (|\x0;expand~1pxGHH~626|) (set! |\x0;expand~1pxGHH~626| (lambda (|\x0;x~1pxGHH~650| |\x0;level~1pxGHH~651|) (let ((|\x0;input~1pxGHH~653| |\x0;x~1pxGHH~650|)) (let ((|\x0;fail~1pxGHH~654| (lambda () (let ((|\x0;fail~1pxGHH~655| (lambda () (let ((|\x0;fail~1pxGHH~656| (lambda () (let ((|\x0;fail~1pxGHH~657| (lambda () (let ((|\x0;fail~1pxGHH~658| (lambda () (let ((|\x0;fail~1pxGHH~659| (lambda () (let ((|\x0;fail~1pxGHH~660| (lambda () (let ((|\x0;fail~1pxGHH~661| (lambda () (ex:invalid-form |\x0;input~1pxGHH~653|)))) (let ((|\x0;other~1pxGHH~662| |\x0;input~1pxGHH~653|)) (cons |\x0;other~1pxGHH~662| (cons '() '()))))))) (if (vector? |\x0;input~1pxGHH~653|) (let ((|\x0;temp~1pxGHH~678| (vector->list |\x0;input~1pxGHH~653|))) (if (list? |\x0;temp~1pxGHH~678|) (let ((|\x0;e~1pxGHH~664| |\x0;temp~1pxGHH~678|)) (let ((|\x0;input~1pxGHH~667| (|\x0;expand~1pxGHH~626| (vector->list (list->vector |\x0;e~1pxGHH~664|)) |\x0;level~1pxGHH~651|))) (let ((|\x0;fail~1pxGHH~669| (lambda () (ex:invalid-form |\x0;input~1pxGHH~667|)))) (if (pair? |\x0;input~1pxGHH~667|) (let ((|\x0;temp~1pxGHH~677| (car |\x0;input~1pxGHH~667|))) (if (list? |\x0;temp~1pxGHH~677|) (let ((|\x0;e*~1pxGHH~670| |\x0;temp~1pxGHH~677|)) (let ((|\x0;temp~1pxGHH~674| (cdr |\x0;input~1pxGHH~667|))) (if (pair? |\x0;temp~1pxGHH~674|) (let ((|\x0;temp~1pxGHH~676| (car |\x0;temp~1pxGHH~674|))) (let ((|\x0;reps~1pxGHH~671| |\x0;temp~1pxGHH~676|)) (let ((|\x0;temp~1pxGHH~675| (cdr |\x0;temp~1pxGHH~674|))) (if (null? |\x0;temp~1pxGHH~675|) (begin (cons (list->vector |\x0;e*~1pxGHH~670|) (cons |\x0;reps~1pxGHH~671| '()))) (|\x0;fail~1pxGHH~669|))))) (|\x0;fail~1pxGHH~669|)))) (|\x0;fail~1pxGHH~669|))) (|\x0;fail~1pxGHH~669|))))) (|\x0;fail~1pxGHH~660|))) (|\x0;fail~1pxGHH~660|)))))) (if (pair? |\x0;input~1pxGHH~653|) (let ((|\x0;temp~1pxGHH~706| (car |\x0;input~1pxGHH~653|))) (let ((|\x0;h~1pxGHH~679| |\x0;temp~1pxGHH~706|)) (let ((|\x0;temp~1pxGHH~705| (cdr |\x0;input~1pxGHH~653|))) (let ((|\x0;t~1pxGHH~680| |\x0;temp~1pxGHH~705|)) (let ((|\x0;input~1pxGHH~683| (list (|\x0;expand~1pxGHH~626| |\x0;h~1pxGHH~679| |\x0;level~1pxGHH~651|) (|\x0;expand~1pxGHH~626| |\x0;t~1pxGHH~680| |\x0;level~1pxGHH~651|)))) (let ((|\x0;fail~1pxGHH~686| (lambda () (ex:invalid-form |\x0;input~1pxGHH~683|)))) (if (pair? |\x0;input~1pxGHH~683|) (let ((|\x0;temp~1pxGHH~700| (car |\x0;input~1pxGHH~683|))) (if (pair? |\x0;temp~1pxGHH~700|) (let ((|\x0;temp~1pxGHH~704| (car |\x0;temp~1pxGHH~700|))) (let ((|\x0;h*~1pxGHH~687| |\x0;temp~1pxGHH~704|)) (let ((|\x0;temp~1pxGHH~701| (cdr |\x0;temp~1pxGHH~700|))) (if (pair? |\x0;temp~1pxGHH~701|) (let ((|\x0;temp~1pxGHH~703| (car |\x0;temp~1pxGHH~701|))) (if (list? |\x0;temp~1pxGHH~703|) (let ((|\x0;rep1~1pxGHH~688| |\x0;temp~1pxGHH~703|)) (let ((|\x0;temp~1pxGHH~702| (cdr |\x0;temp~1pxGHH~701|))) (if (null? |\x0;temp~1pxGHH~702|) (let ((|\x0;temp~1pxGHH~693| (cdr |\x0;input~1pxGHH~683|))) (if (pair? |\x0;temp~1pxGHH~693|) (let ((|\x0;temp~1pxGHH~695| (car |\x0;temp~1pxGHH~693|))) (if (pair? |\x0;temp~1pxGHH~695|) (let ((|\x0;temp~1pxGHH~699| (car |\x0;temp~1pxGHH~695|))) (let ((|\x0;t*~1pxGHH~689| |\x0;temp~1pxGHH~699|)) (let ((|\x0;temp~1pxGHH~696| (cdr |\x0;temp~1pxGHH~695|))) (if (pair? |\x0;temp~1pxGHH~696|) (let ((|\x0;temp~1pxGHH~698| (car |\x0;temp~1pxGHH~696|))) (if (list? |\x0;temp~1pxGHH~698|) (let ((|\x0;rep2~1pxGHH~690| |\x0;temp~1pxGHH~698|)) (let ((|\x0;temp~1pxGHH~697| (cdr |\x0;temp~1pxGHH~696|))) (if (null? |\x0;temp~1pxGHH~697|) (let ((|\x0;temp~1pxGHH~694| (cdr |\x0;temp~1pxGHH~693|))) (if (null? |\x0;temp~1pxGHH~694|) (begin (cons (cons |\x0;h*~1pxGHH~687| |\x0;t*~1pxGHH~689|) (cons (append |\x0;rep1~1pxGHH~688| |\x0;rep2~1pxGHH~690|) '()))) (|\x0;fail~1pxGHH~686|))) (|\x0;fail~1pxGHH~686|)))) (|\x0;fail~1pxGHH~686|))) (|\x0;fail~1pxGHH~686|))))) (|\x0;fail~1pxGHH~686|))) (|\x0;fail~1pxGHH~686|))) (|\x0;fail~1pxGHH~686|)))) (|\x0;fail~1pxGHH~686|))) (|\x0;fail~1pxGHH~686|))))) (|\x0;fail~1pxGHH~686|))) (|\x0;fail~1pxGHH~686|)))))))) (|\x0;fail~1pxGHH~659|)))))) (if (pair? |\x0;input~1pxGHH~653|) (let ((|\x0;temp~1pxGHH~734| (car |\x0;input~1pxGHH~653|))) (let ((|\x0;k~1pxGHH~707| |\x0;temp~1pxGHH~734|)) (let ((|\x0;temp~1pxGHH~733| (cdr |\x0;input~1pxGHH~653|))) (let ((|\x0;r~1pxGHH~708| |\x0;temp~1pxGHH~733|)) (if (if (> |\x0;level~1pxGHH~651| 0) (if (ex:identifier? |\x0;k~1pxGHH~707|) (let ((x (ex:free-identifier=? |\x0;k~1pxGHH~707| (ex:syntax-rename 'unsyntax '() '(|\x0;env~1pxGHH~716|) 0 '(core quasisyntax))))) (if x x (ex:free-identifier=? |\x0;k~1pxGHH~707| (ex:syntax-rename 'unsyntax-splicing '() '(|\x0;env~1pxGHH~716|) 0 '(core quasisyntax))))) #f) #f) (let ((|\x0;input~1pxGHH~722| (|\x0;expand~1pxGHH~626| |\x0;r~1pxGHH~708| (- |\x0;level~1pxGHH~651| 1)))) (let ((|\x0;fail~1pxGHH~724| (lambda () (ex:invalid-form |\x0;input~1pxGHH~722|)))) (if (pair? |\x0;input~1pxGHH~722|) (let ((|\x0;temp~1pxGHH~732| (car |\x0;input~1pxGHH~722|))) (let ((|\x0;r*~1pxGHH~725| |\x0;temp~1pxGHH~732|)) (let ((|\x0;temp~1pxGHH~729| (cdr |\x0;input~1pxGHH~722|))) (if (pair? |\x0;temp~1pxGHH~729|) (let ((|\x0;temp~1pxGHH~731| (car |\x0;temp~1pxGHH~729|))) (let ((|\x0;reps~1pxGHH~726| |\x0;temp~1pxGHH~731|)) (let ((|\x0;temp~1pxGHH~730| (cdr |\x0;temp~1pxGHH~729|))) (if (null? |\x0;temp~1pxGHH~730|) (begin (cons (cons |\x0;k~1pxGHH~707| |\x0;r*~1pxGHH~725|) (cons |\x0;reps~1pxGHH~726| '()))) (|\x0;fail~1pxGHH~724|))))) (|\x0;fail~1pxGHH~724|))))) (|\x0;fail~1pxGHH~724|)))) (|\x0;fail~1pxGHH~658|)))))) (|\x0;fail~1pxGHH~658|)))))) (if (pair? |\x0;input~1pxGHH~653|) (let ((|\x0;temp~1pxGHH~767| (car |\x0;input~1pxGHH~653|))) (if (pair? |\x0;temp~1pxGHH~767|) (let ((|\x0;temp~1pxGHH~769| (car |\x0;temp~1pxGHH~767|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~769|) (ex:free-identifier=? |\x0;temp~1pxGHH~769| (ex:syntax-rename 'unsyntax-splicing '() '(|\x0;env~1pxGHH~770|) 0 '(core quasisyntax)))) (let ((|\x0;temp~1pxGHH~768| (cdr |\x0;temp~1pxGHH~767|))) (if (list? |\x0;temp~1pxGHH~768|) (let ((|\x0;e~1pxGHH~735| |\x0;temp~1pxGHH~768|)) (let ((|\x0;temp~1pxGHH~766| (cdr |\x0;input~1pxGHH~653|))) (let ((|\x0;r~1pxGHH~736| |\x0;temp~1pxGHH~766|)) (if (= |\x0;level~1pxGHH~651| 0) (let ((|\x0;input~1pxGHH~739| (list (|\x0;expand~1pxGHH~626| |\x0;r~1pxGHH~736| 0) (ex:generate-temporaries |\x0;e~1pxGHH~735|)))) (let ((|\x0;fail~1pxGHH~742| (lambda () (ex:invalid-form |\x0;input~1pxGHH~739|)))) (if (pair? |\x0;input~1pxGHH~739|) (let ((|\x0;temp~1pxGHH~761| (car |\x0;input~1pxGHH~739|))) (if (pair? |\x0;temp~1pxGHH~761|) (let ((|\x0;temp~1pxGHH~765| (car |\x0;temp~1pxGHH~761|))) (let ((|\x0;r*~1pxGHH~743| |\x0;temp~1pxGHH~765|)) (let ((|\x0;temp~1pxGHH~762| (cdr |\x0;temp~1pxGHH~761|))) (if (pair? |\x0;temp~1pxGHH~762|) (let ((|\x0;temp~1pxGHH~764| (car |\x0;temp~1pxGHH~762|))) (if (list? |\x0;temp~1pxGHH~764|) (let ((|\x0;rep~1pxGHH~744| |\x0;temp~1pxGHH~764|)) (let ((|\x0;temp~1pxGHH~763| (cdr |\x0;temp~1pxGHH~762|))) (if (null? |\x0;temp~1pxGHH~763|) (let ((|\x0;temp~1pxGHH~758| (cdr |\x0;input~1pxGHH~739|))) (if (pair? |\x0;temp~1pxGHH~758|) (let ((|\x0;temp~1pxGHH~760| (car |\x0;temp~1pxGHH~758|))) (if (list? |\x0;temp~1pxGHH~760|) (let ((|\x0;t~1pxGHH~745| |\x0;temp~1pxGHH~760|)) (let ((|\x0;temp~1pxGHH~759| (cdr |\x0;temp~1pxGHH~758|))) (if (null? |\x0;temp~1pxGHH~759|) (begin (let ((|\x0;input~1pxGHH~749| (map (lambda (|\x0;t~1pxGHH~745|) (cons |\x0;t~1pxGHH~745| (cons (ex:syntax-rename '... '() '(|\x0;env~1pxGHH~751|) 0 '(core quasisyntax)) '()))) |\x0;t~1pxGHH~745|))) (let ((|\x0;fail~1pxGHH~752| (lambda () (ex:invalid-form |\x0;input~1pxGHH~749|)))) (ex:map-while (lambda (|\x0;input~1pxGHH~749|) (if (list? |\x0;input~1pxGHH~749|) (let ((|\x0;t~1pxGHH~753| |\x0;input~1pxGHH~749|)) (list |\x0;t~1pxGHH~753|)) #f)) |\x0;input~1pxGHH~749| (lambda (|\x0;cols~1pxGHH~757| |\x0;rest~1pxGHH~756|) (if (null? |\x0;rest~1pxGHH~756|) (apply (lambda (|\x0;t~1pxGHH~753|) (begin (cons (append (apply append |\x0;t~1pxGHH~753|) |\x0;r*~1pxGHH~743|) (cons (append (if (= (length |\x0;t~1pxGHH~753|) (length |\x0;e~1pxGHH~735|)) (map (lambda (|\x0;t~1pxGHH~753| |\x0;e~1pxGHH~735|) (cons |\x0;t~1pxGHH~753| (cons |\x0;e~1pxGHH~735| '()))) |\x0;t~1pxGHH~753| |\x0;e~1pxGHH~735|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '(((t ...) e) ... rep ...) (list |\x0;t~1pxGHH~753| |\x0;e~1pxGHH~735|))) |\x0;rep~1pxGHH~744|) '())))) (if (null? |\x0;cols~1pxGHH~757|) '(()) (apply map list |\x0;cols~1pxGHH~757|))) (|\x0;fail~1pxGHH~752|))))))) (|\x0;fail~1pxGHH~742|)))) (|\x0;fail~1pxGHH~742|))) (|\x0;fail~1pxGHH~742|))) (|\x0;fail~1pxGHH~742|)))) (|\x0;fail~1pxGHH~742|))) (|\x0;fail~1pxGHH~742|))))) (|\x0;fail~1pxGHH~742|))) (|\x0;fail~1pxGHH~742|)))) (|\x0;fail~1pxGHH~657|))))) (|\x0;fail~1pxGHH~657|))) (|\x0;fail~1pxGHH~657|))) (|\x0;fail~1pxGHH~657|))) (|\x0;fail~1pxGHH~657|)))))) (if (pair? |\x0;input~1pxGHH~653|) (let ((|\x0;temp~1pxGHH~793| (car |\x0;input~1pxGHH~653|))) (if (pair? |\x0;temp~1pxGHH~793|) (let ((|\x0;temp~1pxGHH~795| (car |\x0;temp~1pxGHH~793|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~795|) (ex:free-identifier=? |\x0;temp~1pxGHH~795| (ex:syntax-rename 'unsyntax '() '(|\x0;env~1pxGHH~796|) 0 '(core quasisyntax)))) (let ((|\x0;temp~1pxGHH~794| (cdr |\x0;temp~1pxGHH~793|))) (if (list? |\x0;temp~1pxGHH~794|) (let ((|\x0;e~1pxGHH~771| |\x0;temp~1pxGHH~794|)) (let ((|\x0;temp~1pxGHH~792| (cdr |\x0;input~1pxGHH~653|))) (let ((|\x0;r~1pxGHH~772| |\x0;temp~1pxGHH~792|)) (if (= |\x0;level~1pxGHH~651| 0) (let ((|\x0;input~1pxGHH~775| (list (|\x0;expand~1pxGHH~626| |\x0;r~1pxGHH~772| 0) (ex:generate-temporaries |\x0;e~1pxGHH~771|)))) (let ((|\x0;fail~1pxGHH~778| (lambda () (ex:invalid-form |\x0;input~1pxGHH~775|)))) (if (pair? |\x0;input~1pxGHH~775|) (let ((|\x0;temp~1pxGHH~787| (car |\x0;input~1pxGHH~775|))) (if (pair? |\x0;temp~1pxGHH~787|) (let ((|\x0;temp~1pxGHH~791| (car |\x0;temp~1pxGHH~787|))) (let ((|\x0;r*~1pxGHH~779| |\x0;temp~1pxGHH~791|)) (let ((|\x0;temp~1pxGHH~788| (cdr |\x0;temp~1pxGHH~787|))) (if (pair? |\x0;temp~1pxGHH~788|) (let ((|\x0;temp~1pxGHH~790| (car |\x0;temp~1pxGHH~788|))) (if (list? |\x0;temp~1pxGHH~790|) (let ((|\x0;rep~1pxGHH~780| |\x0;temp~1pxGHH~790|)) (let ((|\x0;temp~1pxGHH~789| (cdr |\x0;temp~1pxGHH~788|))) (if (null? |\x0;temp~1pxGHH~789|) (let ((|\x0;temp~1pxGHH~784| (cdr |\x0;input~1pxGHH~775|))) (if (pair? |\x0;temp~1pxGHH~784|) (let ((|\x0;temp~1pxGHH~786| (car |\x0;temp~1pxGHH~784|))) (if (list? |\x0;temp~1pxGHH~786|) (let ((|\x0;t~1pxGHH~781| |\x0;temp~1pxGHH~786|)) (let ((|\x0;temp~1pxGHH~785| (cdr |\x0;temp~1pxGHH~784|))) (if (null? |\x0;temp~1pxGHH~785|) (begin (cons (append |\x0;t~1pxGHH~781| |\x0;r*~1pxGHH~779|) (cons (append (if (= (length |\x0;t~1pxGHH~781|) (length |\x0;e~1pxGHH~771|)) (map (lambda (|\x0;t~1pxGHH~781| |\x0;e~1pxGHH~771|) (cons |\x0;t~1pxGHH~781| (cons |\x0;e~1pxGHH~771| '()))) |\x0;t~1pxGHH~781| |\x0;e~1pxGHH~771|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '((t e) ... rep ...) (list |\x0;t~1pxGHH~781| |\x0;e~1pxGHH~771|))) |\x0;rep~1pxGHH~780|) '()))) (|\x0;fail~1pxGHH~778|)))) (|\x0;fail~1pxGHH~778|))) (|\x0;fail~1pxGHH~778|))) (|\x0;fail~1pxGHH~778|)))) (|\x0;fail~1pxGHH~778|))) (|\x0;fail~1pxGHH~778|))))) (|\x0;fail~1pxGHH~778|))) (|\x0;fail~1pxGHH~778|)))) (|\x0;fail~1pxGHH~656|))))) (|\x0;fail~1pxGHH~656|))) (|\x0;fail~1pxGHH~656|))) (|\x0;fail~1pxGHH~656|))) (|\x0;fail~1pxGHH~656|)))))) (if (pair? |\x0;input~1pxGHH~653|) (let ((|\x0;temp~1pxGHH~811| (car |\x0;input~1pxGHH~653|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~811|) (ex:free-identifier=? |\x0;temp~1pxGHH~811| (ex:syntax-rename 'unsyntax '() '(|\x0;env~1pxGHH~812|) 0 '(core quasisyntax)))) (let ((|\x0;temp~1pxGHH~808| (cdr |\x0;input~1pxGHH~653|))) (if (pair? |\x0;temp~1pxGHH~808|) (let ((|\x0;temp~1pxGHH~810| (car |\x0;temp~1pxGHH~808|))) (let ((|\x0;e~1pxGHH~797| |\x0;temp~1pxGHH~810|)) (let ((|\x0;temp~1pxGHH~809| (cdr |\x0;temp~1pxGHH~808|))) (if (null? |\x0;temp~1pxGHH~809|) (if (= |\x0;level~1pxGHH~651| 0) (let ((|\x0;input~1pxGHH~800| (ex:generate-temporaries '(t)))) (let ((|\x0;fail~1pxGHH~802| (lambda () (ex:invalid-form |\x0;input~1pxGHH~800|)))) (if (pair? |\x0;input~1pxGHH~800|) (let ((|\x0;temp~1pxGHH~807| (car |\x0;input~1pxGHH~800|))) (let ((|\x0;t~1pxGHH~803| |\x0;temp~1pxGHH~807|)) (let ((|\x0;temp~1pxGHH~806| (cdr |\x0;input~1pxGHH~800|))) (if (null? |\x0;temp~1pxGHH~806|) (begin (cons |\x0;t~1pxGHH~803| (cons (cons (cons |\x0;t~1pxGHH~803| (cons |\x0;e~1pxGHH~797| '())) '()) '()))) (|\x0;fail~1pxGHH~802|))))) (|\x0;fail~1pxGHH~802|)))) (|\x0;fail~1pxGHH~655|)) (|\x0;fail~1pxGHH~655|))))) (|\x0;fail~1pxGHH~655|))) (|\x0;fail~1pxGHH~655|))) (|\x0;fail~1pxGHH~655|)))))) (if (pair? |\x0;input~1pxGHH~653|) (let ((|\x0;temp~1pxGHH~839| (car |\x0;input~1pxGHH~653|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~839|) (ex:free-identifier=? |\x0;temp~1pxGHH~839| (ex:syntax-rename 'quasisyntax '() '(|\x0;env~1pxGHH~840|) 0 '(core quasisyntax)))) (let ((|\x0;temp~1pxGHH~836| (cdr |\x0;input~1pxGHH~653|))) (if (pair? |\x0;temp~1pxGHH~836|) (let ((|\x0;temp~1pxGHH~838| (car |\x0;temp~1pxGHH~836|))) (let ((|\x0;e~1pxGHH~813| |\x0;temp~1pxGHH~838|)) (let ((|\x0;temp~1pxGHH~837| (cdr |\x0;temp~1pxGHH~836|))) (if (null? |\x0;temp~1pxGHH~837|) (let ((|\x0;input~1pxGHH~816| (list |\x0;x~1pxGHH~650| (|\x0;expand~1pxGHH~626| |\x0;e~1pxGHH~813| (+ |\x0;level~1pxGHH~651| 1))))) (let ((|\x0;fail~1pxGHH~818| (lambda () (ex:invalid-form |\x0;input~1pxGHH~816|)))) (if (pair? |\x0;input~1pxGHH~816|) (let ((|\x0;temp~1pxGHH~831| (car |\x0;input~1pxGHH~816|))) (if (pair? |\x0;temp~1pxGHH~831|) (let ((|\x0;temp~1pxGHH~835| (car |\x0;temp~1pxGHH~831|))) (let ((|\x0;k~1pxGHH~819| |\x0;temp~1pxGHH~835|)) (let ((|\x0;temp~1pxGHH~832| (cdr |\x0;temp~1pxGHH~831|))) (if (pair? |\x0;temp~1pxGHH~832|) (let ((|\x0;temp~1pxGHH~834| (car |\x0;temp~1pxGHH~832|))) (let ((|\x0;temp~1pxGHH~833| (cdr |\x0;temp~1pxGHH~832|))) (if (null? |\x0;temp~1pxGHH~833|) (let ((|\x0;temp~1pxGHH~824| (cdr |\x0;input~1pxGHH~816|))) (if (pair? |\x0;temp~1pxGHH~824|) (let ((|\x0;temp~1pxGHH~826| (car |\x0;temp~1pxGHH~824|))) (if (pair? |\x0;temp~1pxGHH~826|) (let ((|\x0;temp~1pxGHH~830| (car |\x0;temp~1pxGHH~826|))) (let ((|\x0;e*~1pxGHH~820| |\x0;temp~1pxGHH~830|)) (let ((|\x0;temp~1pxGHH~827| (cdr |\x0;temp~1pxGHH~826|))) (if (pair? |\x0;temp~1pxGHH~827|) (let ((|\x0;temp~1pxGHH~829| (car |\x0;temp~1pxGHH~827|))) (let ((|\x0;reps~1pxGHH~821| |\x0;temp~1pxGHH~829|)) (let ((|\x0;temp~1pxGHH~828| (cdr |\x0;temp~1pxGHH~827|))) (if (null? |\x0;temp~1pxGHH~828|) (let ((|\x0;temp~1pxGHH~825| (cdr |\x0;temp~1pxGHH~824|))) (if (null? |\x0;temp~1pxGHH~825|) (begin (cons (cons |\x0;k~1pxGHH~819| (cons |\x0;e*~1pxGHH~820| '())) (cons |\x0;reps~1pxGHH~821| '()))) (|\x0;fail~1pxGHH~818|))) (|\x0;fail~1pxGHH~818|))))) (|\x0;fail~1pxGHH~818|))))) (|\x0;fail~1pxGHH~818|))) (|\x0;fail~1pxGHH~818|))) (|\x0;fail~1pxGHH~818|)))) (|\x0;fail~1pxGHH~818|))))) (|\x0;fail~1pxGHH~818|))) (|\x0;fail~1pxGHH~818|)))) (|\x0;fail~1pxGHH~654|))))) (|\x0;fail~1pxGHH~654|))) (|\x0;fail~1pxGHH~654|))) (|\x0;fail~1pxGHH~654|)))))) (let ((|\x0;input~1pxGHH~628| |\x0;e~1pxGHH~625|)) (let ((|\x0;fail~1pxGHH~629| (lambda () (ex:invalid-form |\x0;input~1pxGHH~628|)))) (if (pair? |\x0;input~1pxGHH~628|) (let ((|\x0;temp~1pxGHH~648| (car |\x0;input~1pxGHH~628|))) (let ((|\x0;temp~1pxGHH~645| (cdr |\x0;input~1pxGHH~628|))) (if (pair? |\x0;temp~1pxGHH~645|) (let ((|\x0;temp~1pxGHH~647| (car |\x0;temp~1pxGHH~645|))) (let ((|\x0;template~1pxGHH~630| |\x0;temp~1pxGHH~647|)) (let ((|\x0;temp~1pxGHH~646| (cdr |\x0;temp~1pxGHH~645|))) (if (null? |\x0;temp~1pxGHH~646|) (let ((|\x0;input~1pxGHH~633| (|\x0;expand~1pxGHH~626| |\x0;template~1pxGHH~630| 0))) (let ((|\x0;fail~1pxGHH~635| (lambda () (ex:invalid-form |\x0;input~1pxGHH~633|)))) (if (pair? |\x0;input~1pxGHH~633|) (let ((|\x0;temp~1pxGHH~644| (car |\x0;input~1pxGHH~633|))) (let ((|\x0;template*~1pxGHH~636| |\x0;temp~1pxGHH~644|)) (let ((|\x0;temp~1pxGHH~641| (cdr |\x0;input~1pxGHH~633|))) (if (pair? |\x0;temp~1pxGHH~641|) (let ((|\x0;temp~1pxGHH~643| (car |\x0;temp~1pxGHH~641|))) (let ((|\x0;replacements~1pxGHH~637| |\x0;temp~1pxGHH~643|)) (let ((|\x0;temp~1pxGHH~642| (cdr |\x0;temp~1pxGHH~641|))) (if (null? |\x0;temp~1pxGHH~642|) (begin (cons (ex:syntax-rename 'with-syntax '() '(|\x0;env~1pxGHH~640|) 0 '(core quasisyntax)) (cons |\x0;replacements~1pxGHH~637| (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1pxGHH~640|) 0 '(core quasisyntax)) (cons |\x0;template*~1pxGHH~636| '())) '())))) (|\x0;fail~1pxGHH~635|))))) (|\x0;fail~1pxGHH~635|))))) (|\x0;fail~1pxGHH~635|)))) (|\x0;fail~1pxGHH~629|))))) (|\x0;fail~1pxGHH~629|)))) (|\x0;fail~1pxGHH~629|))))) ex:undefined))) (ex:register-macro! '|\x0;unsyntax~1pxGHH~841| (lambda (|\x0;e~1pxGHH~843|) (ex:syntax-violation 'unsyntax "Invalid expression" |\x0;e~1pxGHH~843|))) (ex:register-macro! '|\x0;unsyntax-splicing~1pxGHH~845| (lambda (|\x0;e~1pxGHH~847|) (ex:syntax-violation 'unsyntax "Invalid expression" |\x0;e~1pxGHH~847|))) (values)) (lambda () (values)) '|\x0;build~1pxGHH~849|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core quasiquote) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~1273| 0 1 2 3 4 5) (|\x0;env~1pxGHH~1263| 6 1 2 3 4 5) (|\x0;env~1pxGHH~1254| 7 8 1 2 3 4 5) (|\x0;env~1pxGHH~1244| 9 8 1 2 3 4 5) (|\x0;env~1pxGHH~1207| 10 11 12 13 3 4 5) (|\x0;env~1pxGHH~1197| 14 11 12 13 3 4 5) (|\x0;env~1pxGHH~987| 15 16 17 3 4 5) (|\x0;env~1pxGHH~982| 18 19 16 17 3 4 5) (|\x0;env~1pxGHH~960| 20 21 22 23 24 25 16 17 3 4 5) (|\x0;env~1pxGHH~929| 26 27 16 17 3 4 5) (|\x0;env~1pxGHH~915| 28 29 16 17 3 4 5) (|\x0;env~1pxGHH~899| 30 31 16 17 3 4 5)) (31 (((x) . #f))) (30 (((temp |\x0;c~1pxGHH~890|) . #f))) (29 (((x) . #f))) (28 (((temp |\x0;c~1pxGHH~906|) . #f))) (27 (((x) . #f))) (26 (((temp |\x0;c~1pxGHH~920|) . #f))) (25 (((x) . #f) ((y) . #f))) (24 ()) (23 (((f) variable |\x0;f~1pxGHH~939| (1) #f (core quasiquote)))) (22 (((x*) variable |\x0;x*~1pxGHH~946| (1) #f (core quasiquote)))) (21 ()) (20 (((temp |\x0;c~1pxGHH~950|) . #f) ((temp |\x0;c~1pxGHH~951|) . #f))) (19 (((x) . #f))) (18 (((temp |\x0;c~1pxGHH~973|) . #f))) (17 (((x) variable |\x0;x~1pxGHH~872| (1) #f (core quasiquote)))) (16 ()) (15 (((x) . #f))) (14 (((p) . #f))) (13 (((p) variable |\x0;p~1pxGHH~1175| (1) #f (core quasiquote)) ((lev) variable |\x0;lev~1pxGHH~1176| (1) #f (core quasiquote)))) (12 ()) (11 (((p) . #f) ((q) . #f))) (10 (((p) . #f))) (9 (((p) . #f))) (8 (((p) . #f) ((q) . #f))) (7 (((p) . #f))) (6 (((p) . #f))) (5 (((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((undefined) variable ex:undefined (0 1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0 1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0 1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0 1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0 1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0 1) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0 1) #f (core let)) ((=>) macro |\x0;=>~1pxGHH~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0 1) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0 1) #f (core derived)) ((let*) macro |\x0;let*~1pxGHH~241| (0 1) #f (core derived)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((unsyntax-splicing) macro |\x0;unsyntax-splicing~1pxGHH~845| (1) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (1) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (1) #f (core quasisyntax)) ((list->vector) variable list->vector (0 1) #f (larceny PRIMITIVES)) ((vector) variable vector (0 1) #f (larceny PRIMITIVES)) ((list) variable list (0 1) #f (larceny PRIMITIVES)) ((map) variable map (0 1) #f (larceny PRIMITIVES)) ((append) variable append (0 1) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0 1) #f (larceny PRIMITIVES)) ((car) variable car (0 1) #f (larceny PRIMITIVES)) ((cons) variable cons (0 1) #f (larceny PRIMITIVES)) ((null?) variable null? (0 1) #f (larceny PRIMITIVES)) ((-) variable - (0 1) #f (larceny PRIMITIVES)) ((+) variable + (0 1) #f (larceny PRIMITIVES)) ((=) variable = (0 1) #f (larceny PRIMITIVES)))) (4 ()) (3 (((emit) variable |\x0;emit~1pxGHH~859| (1) #f (core quasiquote)) ((quasivector) variable |\x0;quasivector~1pxGHH~858| (1) #f (core quasiquote)) ((quasilist*) variable |\x0;quasilist*~1pxGHH~857| (1) #f (core quasiquote)) ((quasiappend) variable |\x0;quasiappend~1pxGHH~856| (1) #f (core quasiquote)) ((quasicons) variable |\x0;quasicons~1pxGHH~855| (1) #f (core quasiquote)) ((vquasi) variable |\x0;vquasi~1pxGHH~854| (1) #f (core quasiquote)) ((quasi) variable |\x0;quasi~1pxGHH~853| (1) #f (core quasiquote)))) (2 (((p) variable |\x0;p~1pxGHH~1215| (1) #f (core quasiquote)) ((lev) variable |\x0;lev~1pxGHH~1216| (1) #f (core quasiquote)))) (1 ()) (0 (((p) . #f)))))) '((quasiquote macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) (unquote macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote))) '(((core quasisyntax) 1) ((core with-syntax) 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1)) '(|\x0;build~1pxGHH~849| |\x0;build~1pxGHH~57| |\x0;build~1pxGHH~576| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;quasiquote~1pxGHH~850| ((lambda () ((lambda (|\x0;emit~1pxGHH~859| |\x0;quasivector~1pxGHH~858| |\x0;quasilist*~1pxGHH~857| |\x0;quasiappend~1pxGHH~856| |\x0;quasicons~1pxGHH~855| |\x0;vquasi~1pxGHH~854| |\x0;quasi~1pxGHH~853|) (set! |\x0;quasi~1pxGHH~853| (lambda (|\x0;p~1pxGHH~1215| |\x0;lev~1pxGHH~1216|) (let ((|\x0;input~1pxGHH~1218| |\x0;p~1pxGHH~1215|)) (let ((|\x0;fail~1pxGHH~1219| (lambda () (let ((|\x0;fail~1pxGHH~1220| (lambda () (let ((|\x0;fail~1pxGHH~1221| (lambda () (let ((|\x0;fail~1pxGHH~1222| (lambda () (let ((|\x0;fail~1pxGHH~1223| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1218|)))) (let ((|\x0;p~1pxGHH~1224| |\x0;input~1pxGHH~1218|)) (cons '"quote" (cons |\x0;p~1pxGHH~1224| '()))))))) (if (vector? |\x0;input~1pxGHH~1218|) (let ((|\x0;temp~1pxGHH~1228| (vector->list |\x0;input~1pxGHH~1218|))) (if (list? |\x0;temp~1pxGHH~1228|) (let ((|\x0;x~1pxGHH~1226| |\x0;temp~1pxGHH~1228|)) (|\x0;quasivector~1pxGHH~858| (|\x0;vquasi~1pxGHH~854| |\x0;x~1pxGHH~1226| |\x0;lev~1pxGHH~1216|))) (|\x0;fail~1pxGHH~1222|))) (|\x0;fail~1pxGHH~1222|)))))) (if (pair? |\x0;input~1pxGHH~1218|) (let ((|\x0;temp~1pxGHH~1260| (car |\x0;input~1pxGHH~1218|))) (let ((|\x0;p~1pxGHH~1229| |\x0;temp~1pxGHH~1260|)) (let ((|\x0;temp~1pxGHH~1259| (cdr |\x0;input~1pxGHH~1218|))) (let ((|\x0;q~1pxGHH~1230| |\x0;temp~1pxGHH~1259|)) (let ((|\x0;input~1pxGHH~1232| |\x0;p~1pxGHH~1229|)) (let ((|\x0;fail~1pxGHH~1234| (lambda () (let ((|\x0;fail~1pxGHH~1235| (lambda () (let ((|\x0;fail~1pxGHH~1236| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1232|)))) (|\x0;quasicons~1pxGHH~855| (|\x0;quasi~1pxGHH~853| |\x0;p~1pxGHH~1229| |\x0;lev~1pxGHH~1216|) (|\x0;quasi~1pxGHH~853| |\x0;q~1pxGHH~1230| |\x0;lev~1pxGHH~1216|)))))) (if (pair? |\x0;input~1pxGHH~1232|) (let ((|\x0;temp~1pxGHH~1248| (car |\x0;input~1pxGHH~1232|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~1248|) (ex:free-identifier=? |\x0;temp~1pxGHH~1248| (ex:syntax-rename 'unquote-splicing '() '(|\x0;env~1pxGHH~1244|) 0 '(core quasiquote)))) (let ((|\x0;temp~1pxGHH~1247| (cdr |\x0;input~1pxGHH~1232|))) (if (list? |\x0;temp~1pxGHH~1247|) (let ((|\x0;p~1pxGHH~1239| |\x0;temp~1pxGHH~1247|)) (if (= |\x0;lev~1pxGHH~1216| 0) (|\x0;quasiappend~1pxGHH~856| (map (lambda (|\x0;p~1pxGHH~1239|) (cons '"value" (cons |\x0;p~1pxGHH~1239| '()))) |\x0;p~1pxGHH~1239|) (|\x0;quasi~1pxGHH~853| |\x0;q~1pxGHH~1230| |\x0;lev~1pxGHH~1216|)) (|\x0;quasicons~1pxGHH~855| (|\x0;quasicons~1pxGHH~855| (cons '"quote" (cons (ex:syntax-rename 'unquote-splicing '() '(|\x0;env~1pxGHH~1244|) 0 '(core quasiquote)) '())) (|\x0;quasi~1pxGHH~853| |\x0;p~1pxGHH~1239| (- |\x0;lev~1pxGHH~1216| 1))) (|\x0;quasi~1pxGHH~853| |\x0;q~1pxGHH~1230| |\x0;lev~1pxGHH~1216|)))) (|\x0;fail~1pxGHH~1235|))) (|\x0;fail~1pxGHH~1235|))) (|\x0;fail~1pxGHH~1235|)))))) (if (pair? |\x0;input~1pxGHH~1232|) (let ((|\x0;temp~1pxGHH~1258| (car |\x0;input~1pxGHH~1232|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~1258|) (ex:free-identifier=? |\x0;temp~1pxGHH~1258| (ex:syntax-rename 'unquote '() '(|\x0;env~1pxGHH~1254|) 0 '(core quasiquote)))) (let ((|\x0;temp~1pxGHH~1257| (cdr |\x0;input~1pxGHH~1232|))) (if (list? |\x0;temp~1pxGHH~1257|) (let ((|\x0;p~1pxGHH~1249| |\x0;temp~1pxGHH~1257|)) (if (= |\x0;lev~1pxGHH~1216| 0) (|\x0;quasilist*~1pxGHH~857| (map (lambda (|\x0;p~1pxGHH~1249|) (cons '"value" (cons |\x0;p~1pxGHH~1249| '()))) |\x0;p~1pxGHH~1249|) (|\x0;quasi~1pxGHH~853| |\x0;q~1pxGHH~1230| |\x0;lev~1pxGHH~1216|)) (|\x0;quasicons~1pxGHH~855| (|\x0;quasicons~1pxGHH~855| (cons '"quote" (cons (ex:syntax-rename 'unquote '() '(|\x0;env~1pxGHH~1254|) 0 '(core quasiquote)) '())) (|\x0;quasi~1pxGHH~853| |\x0;p~1pxGHH~1249| (- |\x0;lev~1pxGHH~1216| 1))) (|\x0;quasi~1pxGHH~853| |\x0;q~1pxGHH~1230| |\x0;lev~1pxGHH~1216|)))) (|\x0;fail~1pxGHH~1234|))) (|\x0;fail~1pxGHH~1234|))) (|\x0;fail~1pxGHH~1234|)))))))) (|\x0;fail~1pxGHH~1221|)))))) (if (pair? |\x0;input~1pxGHH~1218|) (let ((|\x0;temp~1pxGHH~1268| (car |\x0;input~1pxGHH~1218|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~1268|) (ex:free-identifier=? |\x0;temp~1pxGHH~1268| (ex:syntax-rename 'quasiquote '() '(|\x0;env~1pxGHH~1263|) 0 '(core quasiquote)))) (let ((|\x0;temp~1pxGHH~1265| (cdr |\x0;input~1pxGHH~1218|))) (if (pair? |\x0;temp~1pxGHH~1265|) (let ((|\x0;temp~1pxGHH~1267| (car |\x0;temp~1pxGHH~1265|))) (let ((|\x0;p~1pxGHH~1261| |\x0;temp~1pxGHH~1267|)) (let ((|\x0;temp~1pxGHH~1266| (cdr |\x0;temp~1pxGHH~1265|))) (if (null? |\x0;temp~1pxGHH~1266|) (|\x0;quasicons~1pxGHH~855| (cons '"quote" (cons (ex:syntax-rename 'quasiquote '() '(|\x0;env~1pxGHH~1263|) 0 '(core quasiquote)) '())) (|\x0;quasi~1pxGHH~853| (cons |\x0;p~1pxGHH~1261| '()) (+ |\x0;lev~1pxGHH~1216| 1))) (|\x0;fail~1pxGHH~1220|))))) (|\x0;fail~1pxGHH~1220|))) (|\x0;fail~1pxGHH~1220|))) (|\x0;fail~1pxGHH~1220|)))))) (if (pair? |\x0;input~1pxGHH~1218|) (let ((|\x0;temp~1pxGHH~1278| (car |\x0;input~1pxGHH~1218|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~1278|) (ex:free-identifier=? |\x0;temp~1pxGHH~1278| (ex:syntax-rename 'unquote '() '(|\x0;env~1pxGHH~1273|) 0 '(core quasiquote)))) (let ((|\x0;temp~1pxGHH~1275| (cdr |\x0;input~1pxGHH~1218|))) (if (pair? |\x0;temp~1pxGHH~1275|) (let ((|\x0;temp~1pxGHH~1277| (car |\x0;temp~1pxGHH~1275|))) (let ((|\x0;p~1pxGHH~1269| |\x0;temp~1pxGHH~1277|)) (let ((|\x0;temp~1pxGHH~1276| (cdr |\x0;temp~1pxGHH~1275|))) (if (null? |\x0;temp~1pxGHH~1276|) (if (= |\x0;lev~1pxGHH~1216| 0) (cons '"value" (cons |\x0;p~1pxGHH~1269| '())) (|\x0;quasicons~1pxGHH~855| (cons '"quote" (cons (ex:syntax-rename 'unquote '() '(|\x0;env~1pxGHH~1273|) 0 '(core quasiquote)) '())) (|\x0;quasi~1pxGHH~853| (cons |\x0;p~1pxGHH~1269| '()) (- |\x0;lev~1pxGHH~1216| 1)))) (|\x0;fail~1pxGHH~1219|))))) (|\x0;fail~1pxGHH~1219|))) (|\x0;fail~1pxGHH~1219|))) (|\x0;fail~1pxGHH~1219|)))))) (set! |\x0;vquasi~1pxGHH~854| (lambda (|\x0;p~1pxGHH~1175| |\x0;lev~1pxGHH~1176|) (let ((|\x0;input~1pxGHH~1178| |\x0;p~1pxGHH~1175|)) (let ((|\x0;fail~1pxGHH~1179| (lambda () (let ((|\x0;fail~1pxGHH~1180| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1178|)))) (if (null? |\x0;input~1pxGHH~1178|) (cons '"quote" (cons '() '())) (|\x0;fail~1pxGHH~1180|)))))) (if (pair? |\x0;input~1pxGHH~1178|) (let ((|\x0;temp~1pxGHH~1213| (car |\x0;input~1pxGHH~1178|))) (let ((|\x0;p~1pxGHH~1182| |\x0;temp~1pxGHH~1213|)) (let ((|\x0;temp~1pxGHH~1212| (cdr |\x0;input~1pxGHH~1178|))) (let ((|\x0;q~1pxGHH~1183| |\x0;temp~1pxGHH~1212|)) (let ((|\x0;input~1pxGHH~1185| |\x0;p~1pxGHH~1182|)) (let ((|\x0;fail~1pxGHH~1187| (lambda () (let ((|\x0;fail~1pxGHH~1188| (lambda () (let ((|\x0;fail~1pxGHH~1189| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1185|)))) (|\x0;quasicons~1pxGHH~855| (|\x0;quasi~1pxGHH~853| |\x0;p~1pxGHH~1182| |\x0;lev~1pxGHH~1176|) (|\x0;vquasi~1pxGHH~854| |\x0;q~1pxGHH~1183| |\x0;lev~1pxGHH~1176|)))))) (if (pair? |\x0;input~1pxGHH~1185|) (let ((|\x0;temp~1pxGHH~1201| (car |\x0;input~1pxGHH~1185|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~1201|) (ex:free-identifier=? |\x0;temp~1pxGHH~1201| (ex:syntax-rename 'unquote-splicing '() '(|\x0;env~1pxGHH~1197|) 0 '(core quasiquote)))) (let ((|\x0;temp~1pxGHH~1200| (cdr |\x0;input~1pxGHH~1185|))) (if (list? |\x0;temp~1pxGHH~1200|) (let ((|\x0;p~1pxGHH~1192| |\x0;temp~1pxGHH~1200|)) (if (= |\x0;lev~1pxGHH~1176| 0) (|\x0;quasiappend~1pxGHH~856| (map (lambda (|\x0;p~1pxGHH~1192|) (cons '"value" (cons |\x0;p~1pxGHH~1192| '()))) |\x0;p~1pxGHH~1192|) (|\x0;vquasi~1pxGHH~854| |\x0;q~1pxGHH~1183| |\x0;lev~1pxGHH~1176|)) (|\x0;quasicons~1pxGHH~855| (|\x0;quasicons~1pxGHH~855| (cons '"quote" (cons (ex:syntax-rename 'unquote-splicing '() '(|\x0;env~1pxGHH~1197|) 0 '(core quasiquote)) '())) (|\x0;quasi~1pxGHH~853| |\x0;p~1pxGHH~1192| (- |\x0;lev~1pxGHH~1176| 1))) (|\x0;vquasi~1pxGHH~854| |\x0;q~1pxGHH~1183| |\x0;lev~1pxGHH~1176|)))) (|\x0;fail~1pxGHH~1188|))) (|\x0;fail~1pxGHH~1188|))) (|\x0;fail~1pxGHH~1188|)))))) (if (pair? |\x0;input~1pxGHH~1185|) (let ((|\x0;temp~1pxGHH~1211| (car |\x0;input~1pxGHH~1185|))) (if (and (ex:identifier? |\x0;temp~1pxGHH~1211|) (ex:free-identifier=? |\x0;temp~1pxGHH~1211| (ex:syntax-rename 'unquote '() '(|\x0;env~1pxGHH~1207|) 0 '(core quasiquote)))) (let ((|\x0;temp~1pxGHH~1210| (cdr |\x0;input~1pxGHH~1185|))) (if (list? |\x0;temp~1pxGHH~1210|) (let ((|\x0;p~1pxGHH~1202| |\x0;temp~1pxGHH~1210|)) (if (= |\x0;lev~1pxGHH~1176| 0) (|\x0;quasilist*~1pxGHH~857| (map (lambda (|\x0;p~1pxGHH~1202|) (cons '"value" (cons |\x0;p~1pxGHH~1202| '()))) |\x0;p~1pxGHH~1202|) (|\x0;vquasi~1pxGHH~854| |\x0;q~1pxGHH~1183| |\x0;lev~1pxGHH~1176|)) (|\x0;quasicons~1pxGHH~855| (|\x0;quasicons~1pxGHH~855| (cons '"quote" (cons (ex:syntax-rename 'unquote '() '(|\x0;env~1pxGHH~1207|) 0 '(core quasiquote)) '())) (|\x0;quasi~1pxGHH~853| |\x0;p~1pxGHH~1202| (- |\x0;lev~1pxGHH~1176| 1))) (|\x0;vquasi~1pxGHH~854| |\x0;q~1pxGHH~1183| |\x0;lev~1pxGHH~1176|)))) (|\x0;fail~1pxGHH~1187|))) (|\x0;fail~1pxGHH~1187|))) (|\x0;fail~1pxGHH~1187|)))))))) (|\x0;fail~1pxGHH~1179|)))))) (set! |\x0;quasicons~1pxGHH~855| (lambda (|\x0;x~1pxGHH~1125| |\x0;y~1pxGHH~1126|) (let ((|\x0;input~1pxGHH~1129| (list |\x0;x~1pxGHH~1125| |\x0;y~1pxGHH~1126|))) (let ((|\x0;fail~1pxGHH~1130| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1129|)))) (if (pair? |\x0;input~1pxGHH~1129|) (let ((|\x0;temp~1pxGHH~1173| (car |\x0;input~1pxGHH~1129|))) (let ((|\x0;x~1pxGHH~1131| |\x0;temp~1pxGHH~1173|)) (let ((|\x0;temp~1pxGHH~1170| (cdr |\x0;input~1pxGHH~1129|))) (if (pair? |\x0;temp~1pxGHH~1170|) (let ((|\x0;temp~1pxGHH~1172| (car |\x0;temp~1pxGHH~1170|))) (let ((|\x0;y~1pxGHH~1132| |\x0;temp~1pxGHH~1172|)) (let ((|\x0;temp~1pxGHH~1171| (cdr |\x0;temp~1pxGHH~1170|))) (if (null? |\x0;temp~1pxGHH~1171|) (begin (let ((|\x0;input~1pxGHH~1135| |\x0;y~1pxGHH~1132|)) (let ((|\x0;fail~1pxGHH~1137| (lambda () (let ((|\x0;fail~1pxGHH~1138| (lambda () (let ((|\x0;fail~1pxGHH~1139| (lambda () (let ((|\x0;fail~1pxGHH~1140| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1135|)))) (cons '"list*" (cons |\x0;x~1pxGHH~1131| (cons |\x0;y~1pxGHH~1132| '()))))))) (if (pair? |\x0;input~1pxGHH~1135|) (let ((|\x0;temp~1pxGHH~1145| (car |\x0;input~1pxGHH~1135|))) (if (equal? |\x0;temp~1pxGHH~1145| '"list*") (let ((|\x0;temp~1pxGHH~1144| (cdr |\x0;input~1pxGHH~1135|))) (let ((|\x0;stuff~1pxGHH~1142| |\x0;temp~1pxGHH~1144|)) (cons '"list*" (cons |\x0;x~1pxGHH~1131| |\x0;stuff~1pxGHH~1142|)))) (|\x0;fail~1pxGHH~1139|))) (|\x0;fail~1pxGHH~1139|)))))) (if (pair? |\x0;input~1pxGHH~1135|) (let ((|\x0;temp~1pxGHH~1149| (car |\x0;input~1pxGHH~1135|))) (if (equal? |\x0;temp~1pxGHH~1149| '"list") (let ((|\x0;temp~1pxGHH~1148| (cdr |\x0;input~1pxGHH~1135|))) (let ((|\x0;stuff~1pxGHH~1146| |\x0;temp~1pxGHH~1148|)) (cons '"list" (cons |\x0;x~1pxGHH~1131| |\x0;stuff~1pxGHH~1146|)))) (|\x0;fail~1pxGHH~1138|))) (|\x0;fail~1pxGHH~1138|)))))) (if (pair? |\x0;input~1pxGHH~1135|) (let ((|\x0;temp~1pxGHH~1169| (car |\x0;input~1pxGHH~1135|))) (if (equal? |\x0;temp~1pxGHH~1169| '"quote") (let ((|\x0;temp~1pxGHH~1166| (cdr |\x0;input~1pxGHH~1135|))) (if (pair? |\x0;temp~1pxGHH~1166|) (let ((|\x0;temp~1pxGHH~1168| (car |\x0;temp~1pxGHH~1166|))) (let ((|\x0;dy~1pxGHH~1150| |\x0;temp~1pxGHH~1168|)) (let ((|\x0;temp~1pxGHH~1167| (cdr |\x0;temp~1pxGHH~1166|))) (if (null? |\x0;temp~1pxGHH~1167|) (let ((|\x0;input~1pxGHH~1152| |\x0;x~1pxGHH~1131|)) (let ((|\x0;fail~1pxGHH~1154| (lambda () (let ((|\x0;fail~1pxGHH~1155| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1152|)))) (if (null? |\x0;dy~1pxGHH~1150|) (cons '"list" (cons |\x0;x~1pxGHH~1131| '())) (cons '"list*" (cons |\x0;x~1pxGHH~1131| (cons |\x0;y~1pxGHH~1132| '())))))))) (if (pair? |\x0;input~1pxGHH~1152|) (let ((|\x0;temp~1pxGHH~1165| (car |\x0;input~1pxGHH~1152|))) (if (equal? |\x0;temp~1pxGHH~1165| '"quote") (let ((|\x0;temp~1pxGHH~1162| (cdr |\x0;input~1pxGHH~1152|))) (if (pair? |\x0;temp~1pxGHH~1162|) (let ((|\x0;temp~1pxGHH~1164| (car |\x0;temp~1pxGHH~1162|))) (let ((|\x0;dx~1pxGHH~1160| |\x0;temp~1pxGHH~1164|)) (let ((|\x0;temp~1pxGHH~1163| (cdr |\x0;temp~1pxGHH~1162|))) (if (null? |\x0;temp~1pxGHH~1163|) (cons '"quote" (cons (cons |\x0;dx~1pxGHH~1160| |\x0;dy~1pxGHH~1150|) '())) (|\x0;fail~1pxGHH~1154|))))) (|\x0;fail~1pxGHH~1154|))) (|\x0;fail~1pxGHH~1154|))) (|\x0;fail~1pxGHH~1154|)))) (|\x0;fail~1pxGHH~1137|))))) (|\x0;fail~1pxGHH~1137|))) (|\x0;fail~1pxGHH~1137|))) (|\x0;fail~1pxGHH~1137|))))) (|\x0;fail~1pxGHH~1130|))))) (|\x0;fail~1pxGHH~1130|))))) (|\x0;fail~1pxGHH~1130|)))))) (set! |\x0;quasiappend~1pxGHH~856| (lambda (|\x0;x~1pxGHH~1084| |\x0;y~1pxGHH~1085|) (let ((|\x0;input~1pxGHH~1087| |\x0;y~1pxGHH~1085|)) (let ((|\x0;fail~1pxGHH~1088| (lambda () (let ((|\x0;fail~1pxGHH~1089| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1087|)))) (if (null? |\x0;x~1pxGHH~1084|) (begin |\x0;y~1pxGHH~1085|) (begin (let ((|\x0;input~1pxGHH~1096| (list |\x0;x~1pxGHH~1084| |\x0;y~1pxGHH~1085|))) (let ((|\x0;fail~1pxGHH~1097| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1096|)))) (if (pair? |\x0;input~1pxGHH~1096|) (let ((|\x0;temp~1pxGHH~1105| (car |\x0;input~1pxGHH~1096|))) (if (list? |\x0;temp~1pxGHH~1105|) (let ((|\x0;p~1pxGHH~1098| |\x0;temp~1pxGHH~1105|)) (let ((|\x0;temp~1pxGHH~1102| (cdr |\x0;input~1pxGHH~1096|))) (if (pair? |\x0;temp~1pxGHH~1102|) (let ((|\x0;temp~1pxGHH~1104| (car |\x0;temp~1pxGHH~1102|))) (let ((|\x0;y~1pxGHH~1099| |\x0;temp~1pxGHH~1104|)) (let ((|\x0;temp~1pxGHH~1103| (cdr |\x0;temp~1pxGHH~1102|))) (if (null? |\x0;temp~1pxGHH~1103|) (begin (cons '"append" (append |\x0;p~1pxGHH~1098| (cons |\x0;y~1pxGHH~1099| '())))) (|\x0;fail~1pxGHH~1097|))))) (|\x0;fail~1pxGHH~1097|)))) (|\x0;fail~1pxGHH~1097|))) (|\x0;fail~1pxGHH~1097|)))))))))) (if (pair? |\x0;input~1pxGHH~1087|) (let ((|\x0;temp~1pxGHH~1123| (car |\x0;input~1pxGHH~1087|))) (if (equal? |\x0;temp~1pxGHH~1123| '"quote") (let ((|\x0;temp~1pxGHH~1120| (cdr |\x0;input~1pxGHH~1087|))) (if (pair? |\x0;temp~1pxGHH~1120|) (let ((|\x0;temp~1pxGHH~1122| (car |\x0;temp~1pxGHH~1120|))) (if (null? |\x0;temp~1pxGHH~1122|) (let ((|\x0;temp~1pxGHH~1121| (cdr |\x0;temp~1pxGHH~1120|))) (if (null? |\x0;temp~1pxGHH~1121|) (if (null? |\x0;x~1pxGHH~1084|) (begin (cons '"quote" (cons '() '()))) (if (null? (cdr |\x0;x~1pxGHH~1084|)) (begin (car |\x0;x~1pxGHH~1084|)) (begin (let ((|\x0;input~1pxGHH~1115| |\x0;x~1pxGHH~1084|)) (let ((|\x0;fail~1pxGHH~1116| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1115|)))) (if (list? |\x0;input~1pxGHH~1115|) (let ((|\x0;p~1pxGHH~1117| |\x0;input~1pxGHH~1115|)) (begin (cons '"append" |\x0;p~1pxGHH~1117|))) (|\x0;fail~1pxGHH~1116|))))))) (|\x0;fail~1pxGHH~1088|))) (|\x0;fail~1pxGHH~1088|))) (|\x0;fail~1pxGHH~1088|))) (|\x0;fail~1pxGHH~1088|))) (|\x0;fail~1pxGHH~1088|)))))) (set! |\x0;quasilist*~1pxGHH~857| (lambda (|\x0;x~1pxGHH~1068| |\x0;y~1pxGHH~1069|) ((lambda () ((lambda (|\x0;f~1pxGHH~1075|) (set! |\x0;f~1pxGHH~1075| (lambda (|\x0;x~1pxGHH~1081|) (if (null? |\x0;x~1pxGHH~1081|) |\x0;y~1pxGHH~1069| (|\x0;quasicons~1pxGHH~855| (car |\x0;x~1pxGHH~1081|) (|\x0;f~1pxGHH~1075| (cdr |\x0;x~1pxGHH~1081|)))))) ((lambda () ((lambda (|\x0;x~1pxGHH~1079|) (|\x0;f~1pxGHH~1075| |\x0;x~1pxGHH~1079|)) |\x0;x~1pxGHH~1068|)))) ex:undefined))))) (set! |\x0;quasivector~1pxGHH~858| (lambda (|\x0;x~1pxGHH~993|) (let ((|\x0;input~1pxGHH~995| |\x0;x~1pxGHH~993|)) (let ((|\x0;fail~1pxGHH~996| (lambda () (let ((|\x0;fail~1pxGHH~997| (lambda () (ex:invalid-form |\x0;input~1pxGHH~995|)))) ((lambda () ((lambda (|\x0;f~1pxGHH~1003|) (set! |\x0;f~1pxGHH~1003| (lambda (|\x0;y~1pxGHH~1021| |\x0;k~1pxGHH~1022|) (let ((|\x0;input~1pxGHH~1024| |\x0;y~1pxGHH~1021|)) (let ((|\x0;fail~1pxGHH~1025| (lambda () (let ((|\x0;fail~1pxGHH~1026| (lambda () (let ((|\x0;fail~1pxGHH~1027| (lambda () (let ((|\x0;fail~1pxGHH~1028| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1024|)))) (let ((|\x0;else~1pxGHH~1029| |\x0;input~1pxGHH~1024|)) (let ((|\x0;input~1pxGHH~1034| |\x0;x~1pxGHH~993|)) (let ((|\x0;fail~1pxGHH~1035| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1034|)))) (let ((|\x0;temp~1pxGHH~1036| |\x0;input~1pxGHH~1034|)) (begin (cons '"list->vector" (cons |\x0;temp~1pxGHH~1036| '()))))))))))) (if (pair? |\x0;input~1pxGHH~1024|) (let ((|\x0;temp~1pxGHH~1050| (car |\x0;input~1pxGHH~1024|))) (if (equal? |\x0;temp~1pxGHH~1050| '"list*") (let ((|\x0;temp~1pxGHH~1045| (cdr |\x0;input~1pxGHH~1024|))) (if (>= (ex:dotted-length |\x0;temp~1pxGHH~1045|) 1) (let ((|\x0;temp~1pxGHH~1049| (ex:dotted-butlast |\x0;temp~1pxGHH~1045| 1))) (if (list? |\x0;temp~1pxGHH~1049|) (let ((|\x0;y~1pxGHH~1039| |\x0;temp~1pxGHH~1049|)) (let ((|\x0;temp~1pxGHH~1046| (ex:dotted-last |\x0;temp~1pxGHH~1045| 1))) (if (pair? |\x0;temp~1pxGHH~1046|) (let ((|\x0;temp~1pxGHH~1048| (car |\x0;temp~1pxGHH~1046|))) (let ((|\x0;z~1pxGHH~1040| |\x0;temp~1pxGHH~1048|)) (let ((|\x0;temp~1pxGHH~1047| (cdr |\x0;temp~1pxGHH~1046|))) (if (null? |\x0;temp~1pxGHH~1047|) (|\x0;f~1pxGHH~1003| |\x0;z~1pxGHH~1040| (lambda (|\x0;ls~1pxGHH~1043|) (|\x0;k~1pxGHH~1022| (append |\x0;y~1pxGHH~1039| |\x0;ls~1pxGHH~1043|)))) (|\x0;fail~1pxGHH~1027|))))) (|\x0;fail~1pxGHH~1027|)))) (|\x0;fail~1pxGHH~1027|))) (|\x0;fail~1pxGHH~1027|))) (|\x0;fail~1pxGHH~1027|))) (|\x0;fail~1pxGHH~1027|)))))) (if (pair? |\x0;input~1pxGHH~1024|) (let ((|\x0;temp~1pxGHH~1054| (car |\x0;input~1pxGHH~1024|))) (if (equal? |\x0;temp~1pxGHH~1054| '"list") (let ((|\x0;temp~1pxGHH~1053| (cdr |\x0;input~1pxGHH~1024|))) (if (list? |\x0;temp~1pxGHH~1053|) (let ((|\x0;y~1pxGHH~1051| |\x0;temp~1pxGHH~1053|)) (|\x0;k~1pxGHH~1022| |\x0;y~1pxGHH~1051|)) (|\x0;fail~1pxGHH~1026|))) (|\x0;fail~1pxGHH~1026|))) (|\x0;fail~1pxGHH~1026|)))))) (if (pair? |\x0;input~1pxGHH~1024|) (let ((|\x0;temp~1pxGHH~1060| (car |\x0;input~1pxGHH~1024|))) (if (equal? |\x0;temp~1pxGHH~1060| '"quote") (let ((|\x0;temp~1pxGHH~1057| (cdr |\x0;input~1pxGHH~1024|))) (if (pair? |\x0;temp~1pxGHH~1057|) (let ((|\x0;temp~1pxGHH~1059| (car |\x0;temp~1pxGHH~1057|))) (if (list? |\x0;temp~1pxGHH~1059|) (let ((|\x0;y~1pxGHH~1055| |\x0;temp~1pxGHH~1059|)) (let ((|\x0;temp~1pxGHH~1058| (cdr |\x0;temp~1pxGHH~1057|))) (if (null? |\x0;temp~1pxGHH~1058|) (|\x0;k~1pxGHH~1022| (map (lambda (|\x0;y~1pxGHH~1055|) (cons '"quote" (cons |\x0;y~1pxGHH~1055| '()))) |\x0;y~1pxGHH~1055|)) (|\x0;fail~1pxGHH~1025|)))) (|\x0;fail~1pxGHH~1025|))) (|\x0;fail~1pxGHH~1025|))) (|\x0;fail~1pxGHH~1025|))) (|\x0;fail~1pxGHH~1025|)))))) ((lambda () ((lambda (|\x0;y~1pxGHH~1007| |\x0;k~1pxGHH~1008|) (|\x0;f~1pxGHH~1003| |\x0;y~1pxGHH~1007| |\x0;k~1pxGHH~1008|)) |\x0;x~1pxGHH~993| (lambda (|\x0;ls~1pxGHH~1010|) (let ((|\x0;input~1pxGHH~1015| |\x0;ls~1pxGHH~1010|)) (let ((|\x0;fail~1pxGHH~1016| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1015|)))) (if (list? |\x0;input~1pxGHH~1015|) (let ((|\x0;temp~1pxGHH~1017| |\x0;input~1pxGHH~1015|)) (begin (cons '"vector" |\x0;temp~1pxGHH~1017|))) (|\x0;fail~1pxGHH~1016|))))))))) ex:undefined))))))) (if (pair? |\x0;input~1pxGHH~995|) (let ((|\x0;temp~1pxGHH~1066| (car |\x0;input~1pxGHH~995|))) (if (equal? |\x0;temp~1pxGHH~1066| '"quote") (let ((|\x0;temp~1pxGHH~1063| (cdr |\x0;input~1pxGHH~995|))) (if (pair? |\x0;temp~1pxGHH~1063|) (let ((|\x0;temp~1pxGHH~1065| (car |\x0;temp~1pxGHH~1063|))) (if (list? |\x0;temp~1pxGHH~1065|) (let ((|\x0;x~1pxGHH~1061| |\x0;temp~1pxGHH~1065|)) (let ((|\x0;temp~1pxGHH~1064| (cdr |\x0;temp~1pxGHH~1063|))) (if (null? |\x0;temp~1pxGHH~1064|) (cons '"quote" (cons (list->vector |\x0;x~1pxGHH~1061|) '())) (|\x0;fail~1pxGHH~996|)))) (|\x0;fail~1pxGHH~996|))) (|\x0;fail~1pxGHH~996|))) (|\x0;fail~1pxGHH~996|))) (|\x0;fail~1pxGHH~996|)))))) (set! |\x0;emit~1pxGHH~859| (lambda (|\x0;x~1pxGHH~872|) (let ((|\x0;input~1pxGHH~874| |\x0;x~1pxGHH~872|)) (let ((|\x0;fail~1pxGHH~875| (lambda () (let ((|\x0;fail~1pxGHH~876| (lambda () (let ((|\x0;fail~1pxGHH~877| (lambda () (let ((|\x0;fail~1pxGHH~878| (lambda () (let ((|\x0;fail~1pxGHH~879| (lambda () (let ((|\x0;fail~1pxGHH~880| (lambda () (let ((|\x0;fail~1pxGHH~881| (lambda () (ex:invalid-form |\x0;input~1pxGHH~874|)))) (if (pair? |\x0;input~1pxGHH~874|) (let ((|\x0;temp~1pxGHH~887| (car |\x0;input~1pxGHH~874|))) (if (equal? |\x0;temp~1pxGHH~887| '"value") (let ((|\x0;temp~1pxGHH~884| (cdr |\x0;input~1pxGHH~874|))) (if (pair? |\x0;temp~1pxGHH~884|) (let ((|\x0;temp~1pxGHH~886| (car |\x0;temp~1pxGHH~884|))) (let ((|\x0;x~1pxGHH~882| |\x0;temp~1pxGHH~886|)) (let ((|\x0;temp~1pxGHH~885| (cdr |\x0;temp~1pxGHH~884|))) (if (null? |\x0;temp~1pxGHH~885|) |\x0;x~1pxGHH~882| (|\x0;fail~1pxGHH~881|))))) (|\x0;fail~1pxGHH~881|))) (|\x0;fail~1pxGHH~881|))) (|\x0;fail~1pxGHH~881|)))))) (if (pair? |\x0;input~1pxGHH~874|) (let ((|\x0;temp~1pxGHH~903| (car |\x0;input~1pxGHH~874|))) (if (equal? |\x0;temp~1pxGHH~903| '"list->vector") (let ((|\x0;temp~1pxGHH~900| (cdr |\x0;input~1pxGHH~874|))) (if (pair? |\x0;temp~1pxGHH~900|) (let ((|\x0;temp~1pxGHH~902| (car |\x0;temp~1pxGHH~900|))) (let ((|\x0;x~1pxGHH~888| |\x0;temp~1pxGHH~902|)) (let ((|\x0;temp~1pxGHH~901| (cdr |\x0;temp~1pxGHH~900|))) (if (null? |\x0;temp~1pxGHH~901|) (let ((|\x0;input~1pxGHH~893| (|\x0;emit~1pxGHH~859| |\x0;x~1pxGHH~888|))) (let ((|\x0;fail~1pxGHH~895| (lambda () (ex:invalid-form |\x0;input~1pxGHH~893|)))) (let ((|\x0;temp~1pxGHH~896| |\x0;input~1pxGHH~893|)) (begin (cons (ex:syntax-rename 'list->vector '() '(|\x0;env~1pxGHH~899|) 0 '(core quasiquote)) (cons |\x0;temp~1pxGHH~896| '())))))) (|\x0;fail~1pxGHH~880|))))) (|\x0;fail~1pxGHH~880|))) (|\x0;fail~1pxGHH~880|))) (|\x0;fail~1pxGHH~880|)))))) (if (pair? |\x0;input~1pxGHH~874|) (let ((|\x0;temp~1pxGHH~917| (car |\x0;input~1pxGHH~874|))) (if (equal? |\x0;temp~1pxGHH~917| '"vector") (let ((|\x0;temp~1pxGHH~916| (cdr |\x0;input~1pxGHH~874|))) (if (list? |\x0;temp~1pxGHH~916|) (let ((|\x0;x~1pxGHH~904| |\x0;temp~1pxGHH~916|)) (let ((|\x0;input~1pxGHH~909| (map |\x0;emit~1pxGHH~859| |\x0;x~1pxGHH~904|))) (let ((|\x0;fail~1pxGHH~911| (lambda () (ex:invalid-form |\x0;input~1pxGHH~909|)))) (if (list? |\x0;input~1pxGHH~909|) (let ((|\x0;temp~1pxGHH~912| |\x0;input~1pxGHH~909|)) (begin (cons (ex:syntax-rename 'vector '() '(|\x0;env~1pxGHH~915|) 0 '(core quasiquote)) |\x0;temp~1pxGHH~912|))) (|\x0;fail~1pxGHH~911|))))) (|\x0;fail~1pxGHH~879|))) (|\x0;fail~1pxGHH~879|))) (|\x0;fail~1pxGHH~879|)))))) (if (pair? |\x0;input~1pxGHH~874|) (let ((|\x0;temp~1pxGHH~931| (car |\x0;input~1pxGHH~874|))) (if (equal? |\x0;temp~1pxGHH~931| '"append") (let ((|\x0;temp~1pxGHH~930| (cdr |\x0;input~1pxGHH~874|))) (if (list? |\x0;temp~1pxGHH~930|) (let ((|\x0;x~1pxGHH~918| |\x0;temp~1pxGHH~930|)) (let ((|\x0;input~1pxGHH~923| (map |\x0;emit~1pxGHH~859| |\x0;x~1pxGHH~918|))) (let ((|\x0;fail~1pxGHH~925| (lambda () (ex:invalid-form |\x0;input~1pxGHH~923|)))) (if (list? |\x0;input~1pxGHH~923|) (let ((|\x0;temp~1pxGHH~926| |\x0;input~1pxGHH~923|)) (begin (cons (ex:syntax-rename 'append '() '(|\x0;env~1pxGHH~929|) 0 '(core quasiquote)) |\x0;temp~1pxGHH~926|))) (|\x0;fail~1pxGHH~925|))))) (|\x0;fail~1pxGHH~878|))) (|\x0;fail~1pxGHH~878|))) (|\x0;fail~1pxGHH~878|)))))) (if (pair? |\x0;input~1pxGHH~874|) (let ((|\x0;temp~1pxGHH~970| (car |\x0;input~1pxGHH~874|))) (if (equal? |\x0;temp~1pxGHH~970| '"list*") (let ((|\x0;temp~1pxGHH~965| (cdr |\x0;input~1pxGHH~874|))) (if (>= (ex:dotted-length |\x0;temp~1pxGHH~965|) 1) (let ((|\x0;temp~1pxGHH~969| (ex:dotted-butlast |\x0;temp~1pxGHH~965| 1))) (if (list? |\x0;temp~1pxGHH~969|) (let ((|\x0;x~1pxGHH~932| |\x0;temp~1pxGHH~969|)) (let ((|\x0;temp~1pxGHH~966| (ex:dotted-last |\x0;temp~1pxGHH~965| 1))) (if (pair? |\x0;temp~1pxGHH~966|) (let ((|\x0;temp~1pxGHH~968| (car |\x0;temp~1pxGHH~966|))) (let ((|\x0;y~1pxGHH~933| |\x0;temp~1pxGHH~968|)) (let ((|\x0;temp~1pxGHH~967| (cdr |\x0;temp~1pxGHH~966|))) (if (null? |\x0;temp~1pxGHH~967|) ((lambda () ((lambda (|\x0;f~1pxGHH~939|) (set! |\x0;f~1pxGHH~939| (lambda (|\x0;x*~1pxGHH~946|) (if (null? |\x0;x*~1pxGHH~946|) (|\x0;emit~1pxGHH~859| |\x0;y~1pxGHH~933|) (let ((|\x0;input~1pxGHH~954| (list (|\x0;emit~1pxGHH~859| (car |\x0;x*~1pxGHH~946|)) (|\x0;f~1pxGHH~939| (cdr |\x0;x*~1pxGHH~946|))))) (let ((|\x0;fail~1pxGHH~955| (lambda () (ex:invalid-form |\x0;input~1pxGHH~954|)))) (if (pair? |\x0;input~1pxGHH~954|) (let ((|\x0;temp~1pxGHH~964| (car |\x0;input~1pxGHH~954|))) (let ((|\x0;temp~1pxGHH~956| |\x0;temp~1pxGHH~964|)) (let ((|\x0;temp~1pxGHH~961| (cdr |\x0;input~1pxGHH~954|))) (if (pair? |\x0;temp~1pxGHH~961|) (let ((|\x0;temp~1pxGHH~963| (car |\x0;temp~1pxGHH~961|))) (let ((|\x0;temp~1pxGHH~957| |\x0;temp~1pxGHH~963|)) (let ((|\x0;temp~1pxGHH~962| (cdr |\x0;temp~1pxGHH~961|))) (if (null? |\x0;temp~1pxGHH~962|) (begin (cons (ex:syntax-rename 'cons '() '(|\x0;env~1pxGHH~960|) 0 '(core quasiquote)) (cons |\x0;temp~1pxGHH~956| (cons |\x0;temp~1pxGHH~957| '())))) (|\x0;fail~1pxGHH~955|))))) (|\x0;fail~1pxGHH~955|))))) (|\x0;fail~1pxGHH~955|))))))) ((lambda () ((lambda (|\x0;x*~1pxGHH~943|) (|\x0;f~1pxGHH~939| |\x0;x*~1pxGHH~943|)) |\x0;x~1pxGHH~932|)))) ex:undefined))) (|\x0;fail~1pxGHH~877|))))) (|\x0;fail~1pxGHH~877|)))) (|\x0;fail~1pxGHH~877|))) (|\x0;fail~1pxGHH~877|))) (|\x0;fail~1pxGHH~877|))) (|\x0;fail~1pxGHH~877|)))))) (if (pair? |\x0;input~1pxGHH~874|) (let ((|\x0;temp~1pxGHH~984| (car |\x0;input~1pxGHH~874|))) (if (equal? |\x0;temp~1pxGHH~984| '"list") (let ((|\x0;temp~1pxGHH~983| (cdr |\x0;input~1pxGHH~874|))) (if (list? |\x0;temp~1pxGHH~983|) (let ((|\x0;x~1pxGHH~971| |\x0;temp~1pxGHH~983|)) (let ((|\x0;input~1pxGHH~976| (map |\x0;emit~1pxGHH~859| |\x0;x~1pxGHH~971|))) (let ((|\x0;fail~1pxGHH~978| (lambda () (ex:invalid-form |\x0;input~1pxGHH~976|)))) (if (list? |\x0;input~1pxGHH~976|) (let ((|\x0;temp~1pxGHH~979| |\x0;input~1pxGHH~976|)) (begin (cons (ex:syntax-rename 'list '() '(|\x0;env~1pxGHH~982|) 0 '(core quasiquote)) |\x0;temp~1pxGHH~979|))) (|\x0;fail~1pxGHH~978|))))) (|\x0;fail~1pxGHH~876|))) (|\x0;fail~1pxGHH~876|))) (|\x0;fail~1pxGHH~876|)))))) (if (pair? |\x0;input~1pxGHH~874|) (let ((|\x0;temp~1pxGHH~991| (car |\x0;input~1pxGHH~874|))) (if (equal? |\x0;temp~1pxGHH~991| '"quote") (let ((|\x0;temp~1pxGHH~988| (cdr |\x0;input~1pxGHH~874|))) (if (pair? |\x0;temp~1pxGHH~988|) (let ((|\x0;temp~1pxGHH~990| (car |\x0;temp~1pxGHH~988|))) (let ((|\x0;x~1pxGHH~985| |\x0;temp~1pxGHH~990|)) (let ((|\x0;temp~1pxGHH~989| (cdr |\x0;temp~1pxGHH~988|))) (if (null? |\x0;temp~1pxGHH~989|) (cons (ex:syntax-rename 'quote '() '(|\x0;env~1pxGHH~987|) 0 '(core quasiquote)) (cons |\x0;x~1pxGHH~985| '())) (|\x0;fail~1pxGHH~875|))))) (|\x0;fail~1pxGHH~875|))) (|\x0;fail~1pxGHH~875|))) (|\x0;fail~1pxGHH~875|)))))) (lambda (|\x0;x~1pxGHH~861|) (let ((|\x0;input~1pxGHH~863| |\x0;x~1pxGHH~861|)) (let ((|\x0;fail~1pxGHH~864| (lambda () (ex:invalid-form |\x0;input~1pxGHH~863|)))) (if (pair? |\x0;input~1pxGHH~863|) (let ((|\x0;temp~1pxGHH~870| (car |\x0;input~1pxGHH~863|))) (let ((|\x0;temp~1pxGHH~867| (cdr |\x0;input~1pxGHH~863|))) (if (pair? |\x0;temp~1pxGHH~867|) (let ((|\x0;temp~1pxGHH~869| (car |\x0;temp~1pxGHH~867|))) (let ((|\x0;e~1pxGHH~865| |\x0;temp~1pxGHH~869|)) (let ((|\x0;temp~1pxGHH~868| (cdr |\x0;temp~1pxGHH~867|))) (if (null? |\x0;temp~1pxGHH~868|) (|\x0;emit~1pxGHH~859| (|\x0;quasi~1pxGHH~853| |\x0;e~1pxGHH~865| 0)) (|\x0;fail~1pxGHH~864|))))) (|\x0;fail~1pxGHH~864|)))) (|\x0;fail~1pxGHH~864|)))))) ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined)))) (ex:register-macro! '|\x0;unquote~1pxGHH~1279| (lambda (|\x0;e~1pxGHH~1281|) (ex:syntax-violation 'unquote "Invalid expression" |\x0;e~1pxGHH~1281|))) (ex:register-macro! '|\x0;unquote-splicing~1pxGHH~1283| (lambda (|\x0;e~1pxGHH~1285|) (ex:syntax-violation 'unquote-splicing "Invalid expression" |\x0;e~1pxGHH~1285|))) (values)) (lambda () (values)) '|\x0;build~1pxGHH~1287|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core let-values) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~1455| 0 1 2 3) (|\x0;env~1pxGHH~1442| 4 1 2 3) (|\x0;env~1pxGHH~1421| 5 6 7 3) (|\x0;env~1pxGHH~1405| 8 6 7 3) (|\x0;env~1pxGHH~1384| 9 6 7 3) (|\x0;env~1pxGHH~1360| 10 6 7 3) (|\x0;env~1pxGHH~1334| 11 6 7 3) (|\x0;env~1pxGHH~1308| 12 6 7 3)) (12 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?a) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (11 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?a) . #f) ((?b) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (10 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?e0) . #f) ((?args) . #f) ((?bindings) . #f) ((?tmps) . #f) ((?body) . #f))) (9 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?b0) . #f) ((?e0) . #f) ((?binding) . #f) ((?tmps) . #f) ((?body) . #f))) (8 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?tmps) . #f) ((?body) . #f))) (7 (((x |\x0;c~1pxGHH~1289|) variable |\x0;x~1pxGHH~1291| (0) #f (core let-values)))) (6 ()) (5 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?binding) . #f) ((?body0) . #f) ((?body1) . #f))) (4 (((dummy |\x0;c~1pxGHH~1429|) . #f) ((?binding0) . #f) ((?binding1) . #f) ((?body0) . #f) ((?body1) . #f))) (3 (((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~1429|) variable |\x0;x~1pxGHH~1431| (0) #f (core let-values)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~1429|) . #f) ((?body0) . #f) ((?body1) . #f)))))) '((let-values macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) (let*-values macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values))) '(((core let) 0) ((core syntax-rules) 1) ((core primitives) 1 0)) '(|\x0;build~1pxGHH~240| |\x0;build~1pxGHH~143| |\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;let-values~1pxGHH~1288| (lambda (|\x0;x~1pxGHH~1291|) (let ((|\x0;input~1pxGHH~1293| |\x0;x~1pxGHH~1291|)) (let ((|\x0;fail~1pxGHH~1294| (lambda () (let ((|\x0;fail~1pxGHH~1295| (lambda () (let ((|\x0;fail~1pxGHH~1296| (lambda () (let ((|\x0;fail~1pxGHH~1297| (lambda () (let ((|\x0;fail~1pxGHH~1298| (lambda () (let ((|\x0;fail~1pxGHH~1299| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1293|)))) (if (pair? |\x0;input~1pxGHH~1293|) (let ((|\x0;temp~1pxGHH~1324| (car |\x0;input~1pxGHH~1293|))) (let ((|\x0;dummy~1pxGHH~1300| |\x0;temp~1pxGHH~1324|)) (let ((|\x0;temp~1pxGHH~1309| (cdr |\x0;input~1pxGHH~1293|))) (if (pair? |\x0;temp~1pxGHH~1309|) (let ((|\x0;temp~1pxGHH~1323| (car |\x0;temp~1pxGHH~1309|))) (if (equal? |\x0;temp~1pxGHH~1323| '"mktmp") (let ((|\x0;temp~1pxGHH~1310| (cdr |\x0;temp~1pxGHH~1309|))) (if (pair? |\x0;temp~1pxGHH~1310|) (let ((|\x0;temp~1pxGHH~1322| (car |\x0;temp~1pxGHH~1310|))) (let ((|\x0;?a~1pxGHH~1301| |\x0;temp~1pxGHH~1322|)) (let ((|\x0;temp~1pxGHH~1311| (cdr |\x0;temp~1pxGHH~1310|))) (if (pair? |\x0;temp~1pxGHH~1311|) (let ((|\x0;temp~1pxGHH~1321| (car |\x0;temp~1pxGHH~1311|))) (let ((|\x0;?e0~1pxGHH~1302| |\x0;temp~1pxGHH~1321|)) (let ((|\x0;temp~1pxGHH~1312| (cdr |\x0;temp~1pxGHH~1311|))) (if (pair? |\x0;temp~1pxGHH~1312|) (let ((|\x0;temp~1pxGHH~1320| (car |\x0;temp~1pxGHH~1312|))) (if (list? |\x0;temp~1pxGHH~1320|) (let ((|\x0;?arg~1pxGHH~1303| |\x0;temp~1pxGHH~1320|)) (let ((|\x0;temp~1pxGHH~1313| (cdr |\x0;temp~1pxGHH~1312|))) (if (pair? |\x0;temp~1pxGHH~1313|) (let ((|\x0;temp~1pxGHH~1319| (car |\x0;temp~1pxGHH~1313|))) (let ((|\x0;?bindings~1pxGHH~1304| |\x0;temp~1pxGHH~1319|)) (let ((|\x0;temp~1pxGHH~1314| (cdr |\x0;temp~1pxGHH~1313|))) (if (pair? |\x0;temp~1pxGHH~1314|) (let ((|\x0;temp~1pxGHH~1318| (car |\x0;temp~1pxGHH~1314|))) (if (list? |\x0;temp~1pxGHH~1318|) (let ((|\x0;?tmp~1pxGHH~1305| |\x0;temp~1pxGHH~1318|)) (let ((|\x0;temp~1pxGHH~1315| (cdr |\x0;temp~1pxGHH~1314|))) (if (pair? |\x0;temp~1pxGHH~1315|) (let ((|\x0;temp~1pxGHH~1317| (car |\x0;temp~1pxGHH~1315|))) (let ((|\x0;?body~1pxGHH~1306| |\x0;temp~1pxGHH~1317|)) (let ((|\x0;temp~1pxGHH~1316| (cdr |\x0;temp~1pxGHH~1315|))) (if (null? |\x0;temp~1pxGHH~1316|) (cons (ex:syntax-rename 'call-with-values '() '(|\x0;env~1pxGHH~1308|) 0 '(core let-values)) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~1308|) 0 '(core let-values)) (cons '() (cons |\x0;?e0~1pxGHH~1302| '()))) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~1308|) 0 '(core let-values)) (cons (append |\x0;?arg~1pxGHH~1303| (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~1308|) 0 '(core let-values))) (cons (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1pxGHH~1308|) 0 '(core let-values)) (cons '"bind" (cons |\x0;?bindings~1pxGHH~1304| (cons (append |\x0;?tmp~1pxGHH~1305| (cons (cons |\x0;?a~1pxGHH~1301| (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~1308|) 0 '(core let-values)) '())) '())) (cons |\x0;?body~1pxGHH~1306| '()))))) '()))) '()))) (|\x0;fail~1pxGHH~1299|))))) (|\x0;fail~1pxGHH~1299|)))) (|\x0;fail~1pxGHH~1299|))) (|\x0;fail~1pxGHH~1299|))))) (|\x0;fail~1pxGHH~1299|)))) (|\x0;fail~1pxGHH~1299|))) (|\x0;fail~1pxGHH~1299|))))) (|\x0;fail~1pxGHH~1299|))))) (|\x0;fail~1pxGHH~1299|))) (|\x0;fail~1pxGHH~1299|))) (|\x0;fail~1pxGHH~1299|))))) (|\x0;fail~1pxGHH~1299|)))))) (if (pair? |\x0;input~1pxGHH~1293|) (let ((|\x0;temp~1pxGHH~1352| (car |\x0;input~1pxGHH~1293|))) (let ((|\x0;dummy~1pxGHH~1325| |\x0;temp~1pxGHH~1352|)) (let ((|\x0;temp~1pxGHH~1335| (cdr |\x0;input~1pxGHH~1293|))) (if (pair? |\x0;temp~1pxGHH~1335|) (let ((|\x0;temp~1pxGHH~1351| (car |\x0;temp~1pxGHH~1335|))) (if (equal? |\x0;temp~1pxGHH~1351| '"mktmp") (let ((|\x0;temp~1pxGHH~1336| (cdr |\x0;temp~1pxGHH~1335|))) (if (pair? |\x0;temp~1pxGHH~1336|) (let ((|\x0;temp~1pxGHH~1348| (car |\x0;temp~1pxGHH~1336|))) (if (pair? |\x0;temp~1pxGHH~1348|) (let ((|\x0;temp~1pxGHH~1350| (car |\x0;temp~1pxGHH~1348|))) (let ((|\x0;?a~1pxGHH~1326| |\x0;temp~1pxGHH~1350|)) (let ((|\x0;temp~1pxGHH~1349| (cdr |\x0;temp~1pxGHH~1348|))) (let ((|\x0;?b~1pxGHH~1327| |\x0;temp~1pxGHH~1349|)) (let ((|\x0;temp~1pxGHH~1337| (cdr |\x0;temp~1pxGHH~1336|))) (if (pair? |\x0;temp~1pxGHH~1337|) (let ((|\x0;temp~1pxGHH~1347| (car |\x0;temp~1pxGHH~1337|))) (let ((|\x0;?e0~1pxGHH~1328| |\x0;temp~1pxGHH~1347|)) (let ((|\x0;temp~1pxGHH~1338| (cdr |\x0;temp~1pxGHH~1337|))) (if (pair? |\x0;temp~1pxGHH~1338|) (let ((|\x0;temp~1pxGHH~1346| (car |\x0;temp~1pxGHH~1338|))) (if (list? |\x0;temp~1pxGHH~1346|) (let ((|\x0;?arg~1pxGHH~1329| |\x0;temp~1pxGHH~1346|)) (let ((|\x0;temp~1pxGHH~1339| (cdr |\x0;temp~1pxGHH~1338|))) (if (pair? |\x0;temp~1pxGHH~1339|) (let ((|\x0;temp~1pxGHH~1345| (car |\x0;temp~1pxGHH~1339|))) (let ((|\x0;?bindings~1pxGHH~1330| |\x0;temp~1pxGHH~1345|)) (let ((|\x0;temp~1pxGHH~1340| (cdr |\x0;temp~1pxGHH~1339|))) (if (pair? |\x0;temp~1pxGHH~1340|) (let ((|\x0;temp~1pxGHH~1344| (car |\x0;temp~1pxGHH~1340|))) (if (list? |\x0;temp~1pxGHH~1344|) (let ((|\x0;?tmp~1pxGHH~1331| |\x0;temp~1pxGHH~1344|)) (let ((|\x0;temp~1pxGHH~1341| (cdr |\x0;temp~1pxGHH~1340|))) (if (pair? |\x0;temp~1pxGHH~1341|) (let ((|\x0;temp~1pxGHH~1343| (car |\x0;temp~1pxGHH~1341|))) (let ((|\x0;?body~1pxGHH~1332| |\x0;temp~1pxGHH~1343|)) (let ((|\x0;temp~1pxGHH~1342| (cdr |\x0;temp~1pxGHH~1341|))) (if (null? |\x0;temp~1pxGHH~1342|) (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1pxGHH~1334|) 0 '(core let-values)) (cons '"mktmp" (cons |\x0;?b~1pxGHH~1327| (cons |\x0;?e0~1pxGHH~1328| (cons (append |\x0;?arg~1pxGHH~1329| (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~1334|) 0 '(core let-values)) '())) (cons |\x0;?bindings~1pxGHH~1330| (cons (append |\x0;?tmp~1pxGHH~1331| (cons (cons |\x0;?a~1pxGHH~1326| (cons (ex:syntax-rename 'x '() '(|\x0;env~1pxGHH~1334|) 0 '(core let-values)) '())) '())) (cons |\x0;?body~1pxGHH~1332| '())))))))) (|\x0;fail~1pxGHH~1298|))))) (|\x0;fail~1pxGHH~1298|)))) (|\x0;fail~1pxGHH~1298|))) (|\x0;fail~1pxGHH~1298|))))) (|\x0;fail~1pxGHH~1298|)))) (|\x0;fail~1pxGHH~1298|))) (|\x0;fail~1pxGHH~1298|))))) (|\x0;fail~1pxGHH~1298|))))))) (|\x0;fail~1pxGHH~1298|))) (|\x0;fail~1pxGHH~1298|))) (|\x0;fail~1pxGHH~1298|))) (|\x0;fail~1pxGHH~1298|))))) (|\x0;fail~1pxGHH~1298|)))))) (if (pair? |\x0;input~1pxGHH~1293|) (let ((|\x0;temp~1pxGHH~1376| (car |\x0;input~1pxGHH~1293|))) (let ((|\x0;dummy~1pxGHH~1353| |\x0;temp~1pxGHH~1376|)) (let ((|\x0;temp~1pxGHH~1361| (cdr |\x0;input~1pxGHH~1293|))) (if (pair? |\x0;temp~1pxGHH~1361|) (let ((|\x0;temp~1pxGHH~1375| (car |\x0;temp~1pxGHH~1361|))) (if (equal? |\x0;temp~1pxGHH~1375| '"mktmp") (let ((|\x0;temp~1pxGHH~1362| (cdr |\x0;temp~1pxGHH~1361|))) (if (pair? |\x0;temp~1pxGHH~1362|) (let ((|\x0;temp~1pxGHH~1374| (car |\x0;temp~1pxGHH~1362|))) (if (null? |\x0;temp~1pxGHH~1374|) (let ((|\x0;temp~1pxGHH~1363| (cdr |\x0;temp~1pxGHH~1362|))) (if (pair? |\x0;temp~1pxGHH~1363|) (let ((|\x0;temp~1pxGHH~1373| (car |\x0;temp~1pxGHH~1363|))) (let ((|\x0;?e0~1pxGHH~1354| |\x0;temp~1pxGHH~1373|)) (let ((|\x0;temp~1pxGHH~1364| (cdr |\x0;temp~1pxGHH~1363|))) (if (pair? |\x0;temp~1pxGHH~1364|) (let ((|\x0;temp~1pxGHH~1372| (car |\x0;temp~1pxGHH~1364|))) (let ((|\x0;?args~1pxGHH~1355| |\x0;temp~1pxGHH~1372|)) (let ((|\x0;temp~1pxGHH~1365| (cdr |\x0;temp~1pxGHH~1364|))) (if (pair? |\x0;temp~1pxGHH~1365|) (let ((|\x0;temp~1pxGHH~1371| (car |\x0;temp~1pxGHH~1365|))) (let ((|\x0;?bindings~1pxGHH~1356| |\x0;temp~1pxGHH~1371|)) (let ((|\x0;temp~1pxGHH~1366| (cdr |\x0;temp~1pxGHH~1365|))) (if (pair? |\x0;temp~1pxGHH~1366|) (let ((|\x0;temp~1pxGHH~1370| (car |\x0;temp~1pxGHH~1366|))) (let ((|\x0;?tmps~1pxGHH~1357| |\x0;temp~1pxGHH~1370|)) (let ((|\x0;temp~1pxGHH~1367| (cdr |\x0;temp~1pxGHH~1366|))) (if (pair? |\x0;temp~1pxGHH~1367|) (let ((|\x0;temp~1pxGHH~1369| (car |\x0;temp~1pxGHH~1367|))) (let ((|\x0;?body~1pxGHH~1358| |\x0;temp~1pxGHH~1369|)) (let ((|\x0;temp~1pxGHH~1368| (cdr |\x0;temp~1pxGHH~1367|))) (if (null? |\x0;temp~1pxGHH~1368|) (cons (ex:syntax-rename 'call-with-values '() '(|\x0;env~1pxGHH~1360|) 0 '(core let-values)) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~1360|) 0 '(core let-values)) (cons '() (cons |\x0;?e0~1pxGHH~1354| '()))) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1pxGHH~1360|) 0 '(core let-values)) (cons |\x0;?args~1pxGHH~1355| (cons (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1pxGHH~1360|) 0 '(core let-values)) (cons '"bind" (cons |\x0;?bindings~1pxGHH~1356| (cons |\x0;?tmps~1pxGHH~1357| (cons |\x0;?body~1pxGHH~1358| '()))))) '()))) '()))) (|\x0;fail~1pxGHH~1297|))))) (|\x0;fail~1pxGHH~1297|))))) (|\x0;fail~1pxGHH~1297|))))) (|\x0;fail~1pxGHH~1297|))))) (|\x0;fail~1pxGHH~1297|))))) (|\x0;fail~1pxGHH~1297|))) (|\x0;fail~1pxGHH~1297|))) (|\x0;fail~1pxGHH~1297|))) (|\x0;fail~1pxGHH~1297|))) (|\x0;fail~1pxGHH~1297|))))) (|\x0;fail~1pxGHH~1297|)))))) (if (pair? |\x0;input~1pxGHH~1293|) (let ((|\x0;temp~1pxGHH~1400| (car |\x0;input~1pxGHH~1293|))) (let ((|\x0;dummy~1pxGHH~1377| |\x0;temp~1pxGHH~1400|)) (let ((|\x0;temp~1pxGHH~1385| (cdr |\x0;input~1pxGHH~1293|))) (if (pair? |\x0;temp~1pxGHH~1385|) (let ((|\x0;temp~1pxGHH~1399| (car |\x0;temp~1pxGHH~1385|))) (if (equal? |\x0;temp~1pxGHH~1399| '"bind") (let ((|\x0;temp~1pxGHH~1386| (cdr |\x0;temp~1pxGHH~1385|))) (if (pair? |\x0;temp~1pxGHH~1386|) (let ((|\x0;temp~1pxGHH~1392| (car |\x0;temp~1pxGHH~1386|))) (if (pair? |\x0;temp~1pxGHH~1392|) (let ((|\x0;temp~1pxGHH~1394| (car |\x0;temp~1pxGHH~1392|))) (if (pair? |\x0;temp~1pxGHH~1394|) (let ((|\x0;temp~1pxGHH~1398| (car |\x0;temp~1pxGHH~1394|))) (let ((|\x0;?b0~1pxGHH~1378| |\x0;temp~1pxGHH~1398|)) (let ((|\x0;temp~1pxGHH~1395| (cdr |\x0;temp~1pxGHH~1394|))) (if (pair? |\x0;temp~1pxGHH~1395|) (let ((|\x0;temp~1pxGHH~1397| (car |\x0;temp~1pxGHH~1395|))) (let ((|\x0;?e0~1pxGHH~1379| |\x0;temp~1pxGHH~1397|)) (let ((|\x0;temp~1pxGHH~1396| (cdr |\x0;temp~1pxGHH~1395|))) (if (null? |\x0;temp~1pxGHH~1396|) (let ((|\x0;temp~1pxGHH~1393| (cdr |\x0;temp~1pxGHH~1392|))) (if (list? |\x0;temp~1pxGHH~1393|) (let ((|\x0;?binding~1pxGHH~1380| |\x0;temp~1pxGHH~1393|)) (let ((|\x0;temp~1pxGHH~1387| (cdr |\x0;temp~1pxGHH~1386|))) (if (pair? |\x0;temp~1pxGHH~1387|) (let ((|\x0;temp~1pxGHH~1391| (car |\x0;temp~1pxGHH~1387|))) (let ((|\x0;?tmps~1pxGHH~1381| |\x0;temp~1pxGHH~1391|)) (let ((|\x0;temp~1pxGHH~1388| (cdr |\x0;temp~1pxGHH~1387|))) (if (pair? |\x0;temp~1pxGHH~1388|) (let ((|\x0;temp~1pxGHH~1390| (car |\x0;temp~1pxGHH~1388|))) (let ((|\x0;?body~1pxGHH~1382| |\x0;temp~1pxGHH~1390|)) (let ((|\x0;temp~1pxGHH~1389| (cdr |\x0;temp~1pxGHH~1388|))) (if (null? |\x0;temp~1pxGHH~1389|) (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1pxGHH~1384|) 0 '(core let-values)) (cons '"mktmp" (cons |\x0;?b0~1pxGHH~1378| (cons |\x0;?e0~1pxGHH~1379| (cons '() (cons |\x0;?binding~1pxGHH~1380| (cons |\x0;?tmps~1pxGHH~1381| (cons |\x0;?body~1pxGHH~1382| '())))))))) (|\x0;fail~1pxGHH~1296|))))) (|\x0;fail~1pxGHH~1296|))))) (|\x0;fail~1pxGHH~1296|)))) (|\x0;fail~1pxGHH~1296|))) (|\x0;fail~1pxGHH~1296|))))) (|\x0;fail~1pxGHH~1296|))))) (|\x0;fail~1pxGHH~1296|))) (|\x0;fail~1pxGHH~1296|))) (|\x0;fail~1pxGHH~1296|))) (|\x0;fail~1pxGHH~1296|))) (|\x0;fail~1pxGHH~1296|))))) (|\x0;fail~1pxGHH~1296|)))))) (if (pair? |\x0;input~1pxGHH~1293|) (let ((|\x0;temp~1pxGHH~1415| (car |\x0;input~1pxGHH~1293|))) (let ((|\x0;dummy~1pxGHH~1401| |\x0;temp~1pxGHH~1415|)) (let ((|\x0;temp~1pxGHH~1406| (cdr |\x0;input~1pxGHH~1293|))) (if (pair? |\x0;temp~1pxGHH~1406|) (let ((|\x0;temp~1pxGHH~1414| (car |\x0;temp~1pxGHH~1406|))) (if (equal? |\x0;temp~1pxGHH~1414| '"bind") (let ((|\x0;temp~1pxGHH~1407| (cdr |\x0;temp~1pxGHH~1406|))) (if (pair? |\x0;temp~1pxGHH~1407|) (let ((|\x0;temp~1pxGHH~1413| (car |\x0;temp~1pxGHH~1407|))) (if (null? |\x0;temp~1pxGHH~1413|) (let ((|\x0;temp~1pxGHH~1408| (cdr |\x0;temp~1pxGHH~1407|))) (if (pair? |\x0;temp~1pxGHH~1408|) (let ((|\x0;temp~1pxGHH~1412| (car |\x0;temp~1pxGHH~1408|))) (let ((|\x0;?tmps~1pxGHH~1402| |\x0;temp~1pxGHH~1412|)) (let ((|\x0;temp~1pxGHH~1409| (cdr |\x0;temp~1pxGHH~1408|))) (if (pair? |\x0;temp~1pxGHH~1409|) (let ((|\x0;temp~1pxGHH~1411| (car |\x0;temp~1pxGHH~1409|))) (let ((|\x0;?body~1pxGHH~1403| |\x0;temp~1pxGHH~1411|)) (let ((|\x0;temp~1pxGHH~1410| (cdr |\x0;temp~1pxGHH~1409|))) (if (null? |\x0;temp~1pxGHH~1410|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~1405|) 0 '(core let-values)) (cons |\x0;?tmps~1pxGHH~1402| (cons |\x0;?body~1pxGHH~1403| '()))) (|\x0;fail~1pxGHH~1295|))))) (|\x0;fail~1pxGHH~1295|))))) (|\x0;fail~1pxGHH~1295|))) (|\x0;fail~1pxGHH~1295|))) (|\x0;fail~1pxGHH~1295|))) (|\x0;fail~1pxGHH~1295|))) (|\x0;fail~1pxGHH~1295|))))) (|\x0;fail~1pxGHH~1295|)))))) (if (pair? |\x0;input~1pxGHH~1293|) (let ((|\x0;temp~1pxGHH~1427| (car |\x0;input~1pxGHH~1293|))) (let ((|\x0;dummy~1pxGHH~1416| |\x0;temp~1pxGHH~1427|)) (let ((|\x0;temp~1pxGHH~1422| (cdr |\x0;input~1pxGHH~1293|))) (if (pair? |\x0;temp~1pxGHH~1422|) (let ((|\x0;temp~1pxGHH~1426| (car |\x0;temp~1pxGHH~1422|))) (if (list? |\x0;temp~1pxGHH~1426|) (let ((|\x0;?binding~1pxGHH~1417| |\x0;temp~1pxGHH~1426|)) (let ((|\x0;temp~1pxGHH~1423| (cdr |\x0;temp~1pxGHH~1422|))) (if (pair? |\x0;temp~1pxGHH~1423|) (let ((|\x0;temp~1pxGHH~1425| (car |\x0;temp~1pxGHH~1423|))) (let ((|\x0;?body0~1pxGHH~1418| |\x0;temp~1pxGHH~1425|)) (let ((|\x0;temp~1pxGHH~1424| (cdr |\x0;temp~1pxGHH~1423|))) (if (list? |\x0;temp~1pxGHH~1424|) (let ((|\x0;?body1~1pxGHH~1419| |\x0;temp~1pxGHH~1424|)) (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1pxGHH~1421|) 0 '(core let-values)) (cons '"bind" (cons |\x0;?binding~1pxGHH~1417| (cons '() (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~1421|) 0 '(core let-values)) (cons |\x0;?body0~1pxGHH~1418| |\x0;?body1~1pxGHH~1419|)) '())))))) (|\x0;fail~1pxGHH~1294|))))) (|\x0;fail~1pxGHH~1294|)))) (|\x0;fail~1pxGHH~1294|))) (|\x0;fail~1pxGHH~1294|))))) (|\x0;fail~1pxGHH~1294|)))))) (ex:register-macro! '|\x0;let*-values~1pxGHH~1428| (lambda (|\x0;x~1pxGHH~1431|) (let ((|\x0;input~1pxGHH~1433| |\x0;x~1pxGHH~1431|)) (let ((|\x0;fail~1pxGHH~1434| (lambda () (let ((|\x0;fail~1pxGHH~1435| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1433|)))) (if (pair? |\x0;input~1pxGHH~1433|) (let ((|\x0;temp~1pxGHH~1450| (car |\x0;input~1pxGHH~1433|))) (let ((|\x0;dummy~1pxGHH~1436| |\x0;temp~1pxGHH~1450|)) (let ((|\x0;temp~1pxGHH~1443| (cdr |\x0;input~1pxGHH~1433|))) (if (pair? |\x0;temp~1pxGHH~1443|) (let ((|\x0;temp~1pxGHH~1447| (car |\x0;temp~1pxGHH~1443|))) (if (pair? |\x0;temp~1pxGHH~1447|) (let ((|\x0;temp~1pxGHH~1449| (car |\x0;temp~1pxGHH~1447|))) (let ((|\x0;?binding0~1pxGHH~1437| |\x0;temp~1pxGHH~1449|)) (let ((|\x0;temp~1pxGHH~1448| (cdr |\x0;temp~1pxGHH~1447|))) (if (list? |\x0;temp~1pxGHH~1448|) (let ((|\x0;?binding1~1pxGHH~1438| |\x0;temp~1pxGHH~1448|)) (let ((|\x0;temp~1pxGHH~1444| (cdr |\x0;temp~1pxGHH~1443|))) (if (pair? |\x0;temp~1pxGHH~1444|) (let ((|\x0;temp~1pxGHH~1446| (car |\x0;temp~1pxGHH~1444|))) (let ((|\x0;?body0~1pxGHH~1439| |\x0;temp~1pxGHH~1446|)) (let ((|\x0;temp~1pxGHH~1445| (cdr |\x0;temp~1pxGHH~1444|))) (if (list? |\x0;temp~1pxGHH~1445|) (let ((|\x0;?body1~1pxGHH~1440| |\x0;temp~1pxGHH~1445|)) (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1pxGHH~1442|) 0 '(core let-values)) (cons (cons |\x0;?binding0~1pxGHH~1437| '()) (cons (cons (ex:syntax-rename 'let*-values '() '(|\x0;env~1pxGHH~1442|) 0 '(core let-values)) (cons |\x0;?binding1~1pxGHH~1438| (cons |\x0;?body0~1pxGHH~1439| |\x0;?body1~1pxGHH~1440|))) '())))) (|\x0;fail~1pxGHH~1435|))))) (|\x0;fail~1pxGHH~1435|)))) (|\x0;fail~1pxGHH~1435|))))) (|\x0;fail~1pxGHH~1435|))) (|\x0;fail~1pxGHH~1435|))))) (|\x0;fail~1pxGHH~1435|)))))) (if (pair? |\x0;input~1pxGHH~1433|) (let ((|\x0;temp~1pxGHH~1461| (car |\x0;input~1pxGHH~1433|))) (let ((|\x0;dummy~1pxGHH~1451| |\x0;temp~1pxGHH~1461|)) (let ((|\x0;temp~1pxGHH~1456| (cdr |\x0;input~1pxGHH~1433|))) (if (pair? |\x0;temp~1pxGHH~1456|) (let ((|\x0;temp~1pxGHH~1460| (car |\x0;temp~1pxGHH~1456|))) (if (null? |\x0;temp~1pxGHH~1460|) (let ((|\x0;temp~1pxGHH~1457| (cdr |\x0;temp~1pxGHH~1456|))) (if (pair? |\x0;temp~1pxGHH~1457|) (let ((|\x0;temp~1pxGHH~1459| (car |\x0;temp~1pxGHH~1457|))) (let ((|\x0;?body0~1pxGHH~1452| |\x0;temp~1pxGHH~1459|)) (let ((|\x0;temp~1pxGHH~1458| (cdr |\x0;temp~1pxGHH~1457|))) (if (list? |\x0;temp~1pxGHH~1458|) (let ((|\x0;?body1~1pxGHH~1453| |\x0;temp~1pxGHH~1458|)) (cons (ex:syntax-rename 'begin '() '(|\x0;env~1pxGHH~1455|) 0 '(core let-values)) (cons |\x0;?body0~1pxGHH~1452| |\x0;?body1~1pxGHH~1453|))) (|\x0;fail~1pxGHH~1434|))))) (|\x0;fail~1pxGHH~1434|))) (|\x0;fail~1pxGHH~1434|))) (|\x0;fail~1pxGHH~1434|))))) (|\x0;fail~1pxGHH~1434|)))))) (values)) (lambda () (values)) '|\x0;build~1pxGHH~1462|)) (values))
(begin #\L (define |\x0;r7strict?~1pxGHH~1480| ex:unspecified) (define |\x0;for-each~1pxGHH~1464| ex:unspecified) (define |\x0;map~1pxGHH~1463| ex:unspecified) (ex:register-library! (ex:make-library '(rnrs base) (lambda () (ex:uncompress '(((|\x0;env~1pxGHH~1528| 0 1 2 3) (|\x0;env~1pxGHH~1517| 4 1 2 3) (|\x0;env~1pxGHH~1502| 5 6 7 3) (|\x0;env~1pxGHH~1491| 8 6 7 3) (|\x0;env~1pxGHH~1475| 9 10 11 3)) (11 (((x |\x0;c~1pxGHH~1466|) variable |\x0;x~1pxGHH~1468| (0) #f (rnrs base)))) (10 ()) (9 (((dummy |\x0;c~1pxGHH~1466|) . #f) ((expression) . #f))) (8 (((bindings) . #f) ((body) . #f))) (7 (((x) variable |\x0;x~1pxGHH~1483| (1) #f (rnrs base)))) (6 ()) (5 (((bindings) . #f) ((body) . #f))) (4 (((bindings) . #f) ((body) . #f))) (3 (((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((r7strict?) variable |\x0;r7strict?~1pxGHH~1480| (0) #f (rnrs base)) ((assert) macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((undefined) variable ex:undefined (0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0) #f ()) ((syntax) macro syntax (0) #f ()) ((r6rs:letrec-syntax) macro letrec-syntax (0) #f ()) ((r6rs:let-syntax) macro let-syntax (0) #f ()) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1) #f (core identifier-syntax)) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((larceny:r7strict) variable larceny:r7strict (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0) #f (larceny PRIMITIVES)) ((div0) variable div0 (0) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0) #f (larceny PRIMITIVES)) ((mod) variable mod (0) #f (larceny PRIMITIVES)) ((div) variable div (0) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((tan) variable tan (0) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0) #f (larceny PRIMITIVES)) ((sin) variable sin (0) #f (larceny PRIMITIVES)) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((larceny:map) variable larceny:map (0) #f (larceny PRIMITIVES)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0) #f (larceny PRIMITIVES)) ((log) variable log (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((larceny:for-each) variable larceny:for-each (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exp) variable exp (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((cos) variable cos (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((atan) variable atan (0) #f (larceny PRIMITIVES)) ((asin) variable asin (0) #f (larceny PRIMITIVES)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((angle) variable angle (0) #f (larceny PRIMITIVES)) ((acos) variable acos (0) #f (larceny PRIMITIVES)) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)))) (2 (((x) variable |\x0;x~1pxGHH~1509| (1) #f (rnrs base)))) (1 ()) (0 (((bindings) . #f) ((body) . #f)))))) '((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (1 0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) (letrec-syntax macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) (_ macro _ (1 0) #f ()) (... macro ... (1 0) #f ()) (let macro |\x0;let~1pxGHH~144| (0) #f (core let)) (let* macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) (letrec macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) (letrec* macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) (let-values macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) (let*-values macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) (case macro |\x0;case~1pxGHH~435| (0) #f (core derived)) (cond macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) (else macro |\x0;else~1pxGHH~572| (0) #f (core derived)) (=> macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) (assert macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) (quasiquote macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) (unquote macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) (syntax-rules macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) (identifier-syntax macro |\x0;identifier-syntax~1pxGHH~577| (1) #f (core identifier-syntax)) (* variable * (0) #f (larceny PRIMITIVES)) (+ variable + (0) #f (larceny PRIMITIVES)) (- variable - (0) #f (larceny PRIMITIVES)) (/ variable / (0) #f (larceny PRIMITIVES)) (< variable < (0) #f (larceny PRIMITIVES)) (<= variable <= (0) #f (larceny PRIMITIVES)) (= variable = (0) #f (larceny PRIMITIVES)) (> variable > (0) #f (larceny PRIMITIVES)) (>= variable >= (0) #f (larceny PRIMITIVES)) (abs variable abs (0) #f (larceny PRIMITIVES)) (acos variable acos (0) #f (larceny PRIMITIVES)) (angle variable angle (0) #f (larceny PRIMITIVES)) (append variable append (0) #f (larceny PRIMITIVES)) (apply variable apply (0) #f (larceny PRIMITIVES)) (asin variable asin (0) #f (larceny PRIMITIVES)) (atan variable atan (0) #f (larceny PRIMITIVES)) (boolean? variable boolean? (0) #f (larceny PRIMITIVES)) (call-with-current-continuation variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) (call-with-values variable call-with-values (0) #f (larceny PRIMITIVES)) (car variable car (0) #f (larceny PRIMITIVES)) (cdr variable cdr (0) #f (larceny PRIMITIVES)) (caar variable caar (0) #f (larceny PRIMITIVES)) (cadr variable cadr (0) #f (larceny PRIMITIVES)) (cdar variable cdar (0) #f (larceny PRIMITIVES)) (cddr variable cddr (0) #f (larceny PRIMITIVES)) (caaar variable caaar (0) #f (larceny PRIMITIVES)) (caadr variable caadr (0) #f (larceny PRIMITIVES)) (cadar variable cadar (0) #f (larceny PRIMITIVES)) (caddr variable caddr (0) #f (larceny PRIMITIVES)) (cdaar variable cdaar (0) #f (larceny PRIMITIVES)) (cdadr variable cdadr (0) #f (larceny PRIMITIVES)) (cddar variable cddar (0) #f (larceny PRIMITIVES)) (cdddr variable cdddr (0) #f (larceny PRIMITIVES)) (caaaar variable caaaar (0) #f (larceny PRIMITIVES)) (caaadr variable caaadr (0) #f (larceny PRIMITIVES)) (caadar variable caadar (0) #f (larceny PRIMITIVES)) (caaddr variable caaddr (0) #f (larceny PRIMITIVES)) (cadaar variable cadaar (0) #f (larceny PRIMITIVES)) (cadadr variable cadadr (0) #f (larceny PRIMITIVES)) (caddar variable caddar (0) #f (larceny PRIMITIVES)) (cadddr variable cadddr (0) #f (larceny PRIMITIVES)) (cdaaar variable cdaaar (0) #f (larceny PRIMITIVES)) (cdaadr variable cdaadr (0) #f (larceny PRIMITIVES)) (cdadar variable cdadar (0) #f (larceny PRIMITIVES)) (cdaddr variable cdaddr (0) #f (larceny PRIMITIVES)) (cddaar variable cddaar (0) #f (larceny PRIMITIVES)) (cddadr variable cddadr (0) #f (larceny PRIMITIVES)) (cdddar variable cdddar (0) #f (larceny PRIMITIVES)) (cddddr variable cddddr (0) #f (larceny PRIMITIVES)) (ceiling variable ceiling (0) #f (larceny PRIMITIVES)) (char? variable char? (0) #f (larceny PRIMITIVES)) (char->integer variable char->integer (0) #f (larceny PRIMITIVES)) (char=? variable char=? (0) #f (larceny PRIMITIVES)) (char<? variable char<? (0) #f (larceny PRIMITIVES)) (char>? variable char>? (0) #f (larceny PRIMITIVES)) (char<=? variable char<=? (0) #f (larceny PRIMITIVES)) (char>=? variable char>=? (0) #f (larceny PRIMITIVES)) (complex? variable complex? (0) #f (larceny PRIMITIVES)) (cons variable cons (0) #f (larceny PRIMITIVES)) (cos variable cos (0) #f (larceny PRIMITIVES)) (denominator variable denominator (0) #f (larceny PRIMITIVES)) (dynamic-wind variable dynamic-wind (0) #f (larceny PRIMITIVES)) (eq? variable eq? (0) #f (larceny PRIMITIVES)) (equal? variable equal? (0) #f (larceny PRIMITIVES)) (eqv? variable eqv? (0) #f (larceny PRIMITIVES)) (even? variable even? (0) #f (larceny PRIMITIVES)) (exact? variable exact? (0) #f (larceny PRIMITIVES)) (exp variable exp (0) #f (larceny PRIMITIVES)) (expt variable expt (0) #f (larceny PRIMITIVES)) (floor variable floor (0) #f (larceny PRIMITIVES)) (for-each variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) (gcd variable gcd (0) #f (larceny PRIMITIVES)) (imag-part variable imag-part (0) #f (larceny PRIMITIVES)) (inexact? variable inexact? (0) #f (larceny PRIMITIVES)) (integer->char variable integer->char (0) #f (larceny PRIMITIVES)) (integer? variable integer? (0) #f (larceny PRIMITIVES)) (lcm variable lcm (0) #f (larceny PRIMITIVES)) (length variable length (0) #f (larceny PRIMITIVES)) (list variable list (0) #f (larceny PRIMITIVES)) (list->string variable list->string (0) #f (larceny PRIMITIVES)) (list->vector variable list->vector (0) #f (larceny PRIMITIVES)) (list-ref variable list-ref (0) #f (larceny PRIMITIVES)) (list-tail variable list-tail (0) #f (larceny PRIMITIVES)) (list? variable list? (0) #f (larceny PRIMITIVES)) (log variable log (0) #f (larceny PRIMITIVES)) (magnitude variable magnitude (0) #f (larceny PRIMITIVES)) (make-polar variable make-polar (0) #f (larceny PRIMITIVES)) (make-rectangular variable make-rectangular (0) #f (larceny PRIMITIVES)) (make-string variable make-string (0) #f (larceny PRIMITIVES)) (make-vector variable make-vector (0) #f (larceny PRIMITIVES)) (map variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) (max variable max (0) #f (larceny PRIMITIVES)) (min variable min (0) #f (larceny PRIMITIVES)) (negative? variable negative? (0) #f (larceny PRIMITIVES)) (not variable not (0) #f (larceny PRIMITIVES)) (null? variable null? (0) #f (larceny PRIMITIVES)) (number->string variable number->string (0) #f (larceny PRIMITIVES)) (number? variable number? (0) #f (larceny PRIMITIVES)) (numerator variable numerator (0) #f (larceny PRIMITIVES)) (odd? variable odd? (0) #f (larceny PRIMITIVES)) (pair? variable pair? (0) #f (larceny PRIMITIVES)) (positive? variable positive? (0) #f (larceny PRIMITIVES)) (procedure? variable procedure? (0) #f (larceny PRIMITIVES)) (rational? variable rational? (0) #f (larceny PRIMITIVES)) (rationalize variable rationalize (0) #f (larceny PRIMITIVES)) (real-part variable real-part (0) #f (larceny PRIMITIVES)) (real? variable real? (0) #f (larceny PRIMITIVES)) (reverse variable reverse (0) #f (larceny PRIMITIVES)) (round variable round (0) #f (larceny PRIMITIVES)) (sin variable sin (0) #f (larceny PRIMITIVES)) (sqrt variable sqrt (0) #f (larceny PRIMITIVES)) (string variable string (0) #f (larceny PRIMITIVES)) (string->list variable string->list (0) #f (larceny PRIMITIVES)) (string->number variable string->number (0) #f (larceny PRIMITIVES)) (string->symbol variable string->symbol (0) #f (larceny PRIMITIVES)) (string-append variable string-append (0) #f (larceny PRIMITIVES)) (string-copy variable string-copy (0) #f (larceny PRIMITIVES)) (string-length variable string-length (0) #f (larceny PRIMITIVES)) (string-ref variable string-ref (0) #f (larceny PRIMITIVES)) (string<=? variable string<=? (0) #f (larceny PRIMITIVES)) (string<? variable string<? (0) #f (larceny PRIMITIVES)) (string=? variable string=? (0) #f (larceny PRIMITIVES)) (string>=? variable string>=? (0) #f (larceny PRIMITIVES)) (string>? variable string>? (0) #f (larceny PRIMITIVES)) (string? variable string? (0) #f (larceny PRIMITIVES)) (substring variable substring (0) #f (larceny PRIMITIVES)) (symbol->string variable symbol->string (0) #f (larceny PRIMITIVES)) (symbol? variable symbol? (0) #f (larceny PRIMITIVES)) (tan variable tan (0) #f (larceny PRIMITIVES)) (truncate variable truncate (0) #f (larceny PRIMITIVES)) (values variable values (0) #f (larceny PRIMITIVES)) (vector variable vector (0) #f (larceny PRIMITIVES)) (vector->list variable vector->list (0) #f (larceny PRIMITIVES)) (vector-fill! variable vector-fill! (0) #f (larceny PRIMITIVES)) (vector-length variable vector-length (0) #f (larceny PRIMITIVES)) (vector-ref variable vector-ref (0) #f (larceny PRIMITIVES)) (vector-set! variable vector-set! (0) #f (larceny PRIMITIVES)) (vector? variable vector? (0) #f (larceny PRIMITIVES)) (zero? variable zero? (0) #f (larceny PRIMITIVES)) (real-valued? variable real-valued? (0) #f (larceny PRIMITIVES)) (rational-valued? variable rational-valued? (0) #f (larceny PRIMITIVES)) (integer-valued? variable integer-valued? (0) #f (larceny PRIMITIVES)) (exact variable exact (0) #f (larceny PRIMITIVES)) (inexact variable inexact (0) #f (larceny PRIMITIVES)) (finite? variable finite? (0) #f (larceny PRIMITIVES)) (infinite? variable infinite? (0) #f (larceny PRIMITIVES)) (nan? variable nan? (0) #f (larceny PRIMITIVES)) (div variable div (0) #f (larceny PRIMITIVES)) (mod variable mod (0) #f (larceny PRIMITIVES)) (div-and-mod variable div-and-mod (0) #f (larceny PRIMITIVES)) (div0 variable div0 (0) #f (larceny PRIMITIVES)) (mod0 variable mod0 (0) #f (larceny PRIMITIVES)) (div0-and-mod0 variable div0-and-mod0 (0) #f (larceny PRIMITIVES)) (exact-integer-sqrt variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) (boolean=? variable boolean=? (0) #f (larceny PRIMITIVES)) (symbol=? variable symbol=? (0) #f (larceny PRIMITIVES)) (string-for-each variable string-for-each (0) #f (larceny PRIMITIVES)) (vector-map variable vector-map (0) #f (larceny PRIMITIVES)) (vector-for-each variable vector-for-each (0) #f (larceny PRIMITIVES)) (error variable error (0) #f (larceny PRIMITIVES)) (assertion-violation variable assertion-violation (0) #f (larceny PRIMITIVES)) (call/cc variable call/cc (0) #f (larceny PRIMITIVES))) '(((core primitives) 1) ((core identifier-syntax) 1) ((core syntax-rules) 1) ((core let-values) 0) ((core quasiquote) 0) ((core derived) 0) ((core let) 0) ((core primitives) 0) ((core primitives) 0)) '(|\x0;build~1pxGHH~2| |\x0;build~1pxGHH~622| |\x0;build~1pxGHH~143| |\x0;build~1pxGHH~1462| |\x0;build~1pxGHH~1287| |\x0;build~1pxGHH~576| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2| |\x0;build~1pxGHH~2|) (lambda () (ex:register-macro! '|\x0;assert~1pxGHH~1465| (lambda (|\x0;x~1pxGHH~1468|) (let ((|\x0;input~1pxGHH~1470| |\x0;x~1pxGHH~1468|)) (let ((|\x0;fail~1pxGHH~1471| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1470|)))) (if (pair? |\x0;input~1pxGHH~1470|) (let ((|\x0;temp~1pxGHH~1479| (car |\x0;input~1pxGHH~1470|))) (let ((|\x0;dummy~1pxGHH~1472| |\x0;temp~1pxGHH~1479|)) (let ((|\x0;temp~1pxGHH~1476| (cdr |\x0;input~1pxGHH~1470|))) (if (pair? |\x0;temp~1pxGHH~1476|) (let ((|\x0;temp~1pxGHH~1478| (car |\x0;temp~1pxGHH~1476|))) (let ((|\x0;expression~1pxGHH~1473| |\x0;temp~1pxGHH~1478|)) (let ((|\x0;temp~1pxGHH~1477| (cdr |\x0;temp~1pxGHH~1476|))) (if (null? |\x0;temp~1pxGHH~1477|) (cons (ex:syntax-rename 'or '() '(|\x0;env~1pxGHH~1475|) 0 '(rnrs base)) (cons |\x0;expression~1pxGHH~1473| (cons (cons (ex:syntax-rename 'assertion-violation '() '(|\x0;env~1pxGHH~1475|) 0 '(rnrs base)) (cons '#f (cons '"assertion failed" (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1pxGHH~1475|) 0 '(rnrs base)) (cons |\x0;expression~1pxGHH~1473| '())) '())))) '()))) (|\x0;fail~1pxGHH~1471|))))) (|\x0;fail~1pxGHH~1471|))))) (|\x0;fail~1pxGHH~1471|)))))) (ex:register-macro! '|\x0;let-syntax~1pxGHH~1481| (lambda (|\x0;x~1pxGHH~1483|) (if |\x0;r7strict?~1pxGHH~1480| (let ((|\x0;input~1pxGHH~1486| |\x0;x~1pxGHH~1483|)) (let ((|\x0;fail~1pxGHH~1487| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1486|)))) (if (pair? |\x0;input~1pxGHH~1486|) (let ((|\x0;temp~1pxGHH~1495| (car |\x0;input~1pxGHH~1486|))) (let ((|\x0;temp~1pxGHH~1492| (cdr |\x0;input~1pxGHH~1486|))) (if (pair? |\x0;temp~1pxGHH~1492|) (let ((|\x0;temp~1pxGHH~1494| (car |\x0;temp~1pxGHH~1492|))) (let ((|\x0;bindings~1pxGHH~1488| |\x0;temp~1pxGHH~1494|)) (let ((|\x0;temp~1pxGHH~1493| (cdr |\x0;temp~1pxGHH~1492|))) (let ((|\x0;body~1pxGHH~1489| |\x0;temp~1pxGHH~1493|)) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~1491|) 0 '(rnrs base)) (cons '() (cons (cons (ex:syntax-rename 'r6rs:let-syntax '() '(|\x0;env~1pxGHH~1491|) 0 '(rnrs base)) (cons |\x0;bindings~1pxGHH~1488| |\x0;body~1pxGHH~1489|)) '()))))))) (|\x0;fail~1pxGHH~1487|)))) (|\x0;fail~1pxGHH~1487|)))) (let ((|\x0;input~1pxGHH~1497| |\x0;x~1pxGHH~1483|)) (let ((|\x0;fail~1pxGHH~1498| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1497|)))) (if (pair? |\x0;input~1pxGHH~1497|) (let ((|\x0;temp~1pxGHH~1506| (car |\x0;input~1pxGHH~1497|))) (let ((|\x0;temp~1pxGHH~1503| (cdr |\x0;input~1pxGHH~1497|))) (if (pair? |\x0;temp~1pxGHH~1503|) (let ((|\x0;temp~1pxGHH~1505| (car |\x0;temp~1pxGHH~1503|))) (let ((|\x0;bindings~1pxGHH~1499| |\x0;temp~1pxGHH~1505|)) (let ((|\x0;temp~1pxGHH~1504| (cdr |\x0;temp~1pxGHH~1503|))) (let ((|\x0;body~1pxGHH~1500| |\x0;temp~1pxGHH~1504|)) (cons (ex:syntax-rename 'r6rs:let-syntax '() '(|\x0;env~1pxGHH~1502|) 0 '(rnrs base)) (cons |\x0;bindings~1pxGHH~1499| |\x0;body~1pxGHH~1500|)))))) (|\x0;fail~1pxGHH~1498|)))) (|\x0;fail~1pxGHH~1498|))))))) (ex:register-macro! '|\x0;letrec-syntax~1pxGHH~1507| (lambda (|\x0;x~1pxGHH~1509|) (if |\x0;r7strict?~1pxGHH~1480| (let ((|\x0;input~1pxGHH~1512| |\x0;x~1pxGHH~1509|)) (let ((|\x0;fail~1pxGHH~1513| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1512|)))) (if (pair? |\x0;input~1pxGHH~1512|) (let ((|\x0;temp~1pxGHH~1521| (car |\x0;input~1pxGHH~1512|))) (let ((|\x0;temp~1pxGHH~1518| (cdr |\x0;input~1pxGHH~1512|))) (if (pair? |\x0;temp~1pxGHH~1518|) (let ((|\x0;temp~1pxGHH~1520| (car |\x0;temp~1pxGHH~1518|))) (let ((|\x0;bindings~1pxGHH~1514| |\x0;temp~1pxGHH~1520|)) (let ((|\x0;temp~1pxGHH~1519| (cdr |\x0;temp~1pxGHH~1518|))) (let ((|\x0;body~1pxGHH~1515| |\x0;temp~1pxGHH~1519|)) (cons (ex:syntax-rename 'let '() '(|\x0;env~1pxGHH~1517|) 0 '(rnrs base)) (cons '() (cons (cons (ex:syntax-rename 'r6rs:letrec-syntax '() '(|\x0;env~1pxGHH~1517|) 0 '(rnrs base)) (cons |\x0;bindings~1pxGHH~1514| |\x0;body~1pxGHH~1515|)) '()))))))) (|\x0;fail~1pxGHH~1513|)))) (|\x0;fail~1pxGHH~1513|)))) (let ((|\x0;input~1pxGHH~1523| |\x0;x~1pxGHH~1509|)) (let ((|\x0;fail~1pxGHH~1524| (lambda () (ex:invalid-form |\x0;input~1pxGHH~1523|)))) (if (pair? |\x0;input~1pxGHH~1523|) (let ((|\x0;temp~1pxGHH~1532| (car |\x0;input~1pxGHH~1523|))) (let ((|\x0;temp~1pxGHH~1529| (cdr |\x0;input~1pxGHH~1523|))) (if (pair? |\x0;temp~1pxGHH~1529|) (let ((|\x0;temp~1pxGHH~1531| (car |\x0;temp~1pxGHH~1529|))) (let ((|\x0;bindings~1pxGHH~1525| |\x0;temp~1pxGHH~1531|)) (let ((|\x0;temp~1pxGHH~1530| (cdr |\x0;temp~1pxGHH~1529|))) (let ((|\x0;body~1pxGHH~1526| |\x0;temp~1pxGHH~1530|)) (cons (ex:syntax-rename 'r6rs:letrec-syntax '() '(|\x0;env~1pxGHH~1528|) 0 '(rnrs base)) (cons |\x0;bindings~1pxGHH~1525| |\x0;body~1pxGHH~1526|)))))) (|\x0;fail~1pxGHH~1524|)))) (|\x0;fail~1pxGHH~1524|))))))) (values)) (lambda () (set! |\x0;r7strict?~1pxGHH~1480| ex:undefined) (set! |\x0;for-each~1pxGHH~1464| ex:undefined) (set! |\x0;map~1pxGHH~1463| ex:undefined) (set! |\x0;map~1pxGHH~1463| larceny:map) (set! |\x0;for-each~1pxGHH~1464| larceny:for-each) (set! |\x0;r7strict?~1pxGHH~1480| (larceny:r7strict)) (values)) '|\x0;build~1pxGHH~1533|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(rnrs io simple) (lambda () '()) '((&i/o variable &i/o (0) #f (larceny PRIMITIVES)) (make-i/o-error variable make-i/o-error (0) #f (larceny PRIMITIVES)) (i/o-error? variable i/o-error? (0) #f (larceny PRIMITIVES)) (&i/o-read variable &i/o-read (0) #f (larceny PRIMITIVES)) (make-i/o-read-error variable make-i/o-read-error (0) #f (larceny PRIMITIVES)) (i/o-read-error? variable i/o-read-error? (0) #f (larceny PRIMITIVES)) (&i/o-write variable &i/o-write (0) #f (larceny PRIMITIVES)) (make-i/o-write-error variable make-i/o-write-error (0) #f (larceny PRIMITIVES)) (i/o-write-error? variable i/o-write-error? (0) #f (larceny PRIMITIVES)) (&i/o-invalid-position variable &i/o-invalid-position (0) #f (larceny PRIMITIVES)) (make-i/o-invalid-position-error variable make-i/o-invalid-position-error (0) #f (larceny PRIMITIVES)) (i/o-invalid-position-error? variable i/o-invalid-position-error? (0) #f (larceny PRIMITIVES)) (i/o-error-position variable i/o-error-position (0) #f (larceny PRIMITIVES)) (&i/o-filename variable &i/o-filename (0) #f (larceny PRIMITIVES)) (make-i/o-filename-error variable make-i/o-filename-error (0) #f (larceny PRIMITIVES)) (i/o-filename-error? variable i/o-filename-error? (0) #f (larceny PRIMITIVES)) (i/o-error-filename variable i/o-error-filename (0) #f (larceny PRIMITIVES)) (&i/o-file-protection variable &i/o-file-protection (0) #f (larceny PRIMITIVES)) (make-i/o-file-protection-error variable make-i/o-file-protection-error (0) #f (larceny PRIMITIVES)) (i/o-file-protection-error? variable i/o-file-protection-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-is-read-only variable &i/o-file-is-read-only (0) #f (larceny PRIMITIVES)) (make-i/o-file-is-read-only-error variable make-i/o-file-is-read-only-error (0) #f (larceny PRIMITIVES)) (i/o-file-is-read-only-error? variable i/o-file-is-read-only-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-already-exists variable &i/o-file-already-exists (0) #f (larceny PRIMITIVES)) (make-i/o-file-already-exists-error variable make-i/o-file-already-exists-error (0) #f (larceny PRIMITIVES)) (i/o-file-already-exists-error? variable i/o-file-already-exists-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-does-not-exist variable &i/o-file-does-not-exist (0) #f (larceny PRIMITIVES)) (make-i/o-file-does-not-exist-error variable make-i/o-file-does-not-exist-error (0) #f (larceny PRIMITIVES)) (i/o-file-does-not-exist-error? variable i/o-file-does-not-exist-error? (0) #f (larceny PRIMITIVES)) (&i/o-port variable &i/o-port (0) #f (larceny PRIMITIVES)) (make-i/o-port-error variable make-i/o-port-error (0) #f (larceny PRIMITIVES)) (i/o-port-error? variable i/o-port-error? (0) #f (larceny PRIMITIVES)) (i/o-error-port variable i/o-error-port (0) #f (larceny PRIMITIVES)) (eof-object variable eof-object (0) #f (larceny PRIMITIVES)) (eof-object? variable eof-object? (0) #f (larceny PRIMITIVES)) (call-with-input-file variable call-with-input-file (0) #f (larceny PRIMITIVES)) (call-with-output-file variable call-with-output-file (0) #f (larceny PRIMITIVES)) (input-port? variable input-port? (0) #f (larceny PRIMITIVES)) (output-port? variable output-port? (0) #f (larceny PRIMITIVES)) (current-input-port variable current-input-port (0) #f (larceny PRIMITIVES)) (current-output-port variable current-output-port (0) #f (larceny PRIMITIVES)) (current-error-port variable current-error-port (0) #f (larceny PRIMITIVES)) (with-input-from-file variable with-input-from-file (0) #f (larceny PRIMITIVES)) (with-output-to-file variable with-output-to-file (0) #f (larceny PRIMITIVES)) (open-input-file variable open-input-file (0) #f (larceny PRIMITIVES)) (open-output-file variable open-output-file (0) #f (larceny PRIMITIVES)) (close-input-port variable close-input-port (0) #f (larceny PRIMITIVES)) (close-output-port variable close-output-port (0) #f (larceny PRIMITIVES)) (read-char variable read-char (0) #f (larceny PRIMITIVES)) (peek-char variable peek-char (0) #f (larceny PRIMITIVES)) (read variable read (0) #f (larceny PRIMITIVES)) (write-char variable write-char (0) #f (larceny PRIMITIVES)) (newline variable newline (0) #f (larceny PRIMITIVES)) (display variable display (0) #f (larceny PRIMITIVES)) (write variable write (0) #f (larceny PRIMITIVES))) '() '() (lambda () (values)) (lambda () (values)) '|\x0;build~1pxGHH~1534|)) (values))
