#!fasl
(define .petit-bootstrap-id-f5ae736fc35d92296d87760ab6b66e22 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/r5rs.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-f5ae736fc35d92296d87760ab6b66e22 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (r5rs) ((set! macro set! (0) #f ()) (begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) (letrec-syntax macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) (... macro ... (1 0) #f ()) (let macro |\x0;let~1pxGHH~144| (0) #f (core let)) (let* macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) (letrec macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) (case macro |\x0;case~1pxGHH~435| (0) #f (core derived)) (cond macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) (else macro |\x0;else~1pxGHH~572| (0) #f (core derived)) (=> macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) (quasiquote macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) (unquote macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) (syntax-rules macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) (* variable * (0) #f (larceny PRIMITIVES)) (+ variable + (0) #f (larceny PRIMITIVES)) (- variable - (0) #f (larceny PRIMITIVES)) (/ variable / (0) #f (larceny PRIMITIVES)) (< variable < (0) #f (larceny PRIMITIVES)) (<= variable <= (0) #f (larceny PRIMITIVES)) (= variable = (0) #f (larceny PRIMITIVES)) (> variable > (0) #f (larceny PRIMITIVES)) (>= variable >= (0) #f (larceny PRIMITIVES)) (abs variable abs (0) #f (larceny PRIMITIVES)) (acos variable acos (0) #f (larceny PRIMITIVES)) (append variable append (0) #f (larceny PRIMITIVES)) (apply variable apply (0) #f (larceny PRIMITIVES)) (asin variable asin (0) #f (larceny PRIMITIVES)) (atan variable atan (0) #f (larceny PRIMITIVES)) (boolean? variable boolean? (0) #f (larceny PRIMITIVES)) (call-with-current-continuation variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) (call-with-values variable call-with-values (0) #f (larceny PRIMITIVES)) (car variable car (0) #f (larceny PRIMITIVES)) (cdr variable cdr (0) #f (larceny PRIMITIVES)) (caar variable caar (0) #f (larceny PRIMITIVES)) (cadr variable cadr (0) #f (larceny PRIMITIVES)) (cdar variable cdar (0) #f (larceny PRIMITIVES)) (cddr variable cddr (0) #f (larceny PRIMITIVES)) (caaar variable caaar (0) #f (larceny PRIMITIVES)) (caadr variable caadr (0) #f (larceny PRIMITIVES)) (cadar variable cadar (0) #f (larceny PRIMITIVES)) (caddr variable caddr (0) #f (larceny PRIMITIVES)) (cdaar variable cdaar (0) #f (larceny PRIMITIVES)) (cdadr variable cdadr (0) #f (larceny PRIMITIVES)) (cddar variable cddar (0) #f (larceny PRIMITIVES)) (cdddr variable cdddr (0) #f (larceny PRIMITIVES)) (caaaar variable caaaar (0) #f (larceny PRIMITIVES)) (caaadr variable caaadr (0) #f (larceny PRIMITIVES)) (caadar variable caadar (0) #f (larceny PRIMITIVES)) (caaddr variable caaddr (0) #f (larceny PRIMITIVES)) (cadaar variable cadaar (0) #f (larceny PRIMITIVES)) (cadadr variable cadadr (0) #f (larceny PRIMITIVES)) (caddar variable caddar (0) #f (larceny PRIMITIVES)) (cadddr variable cadddr (0) #f (larceny PRIMITIVES)) (cdaaar variable cdaaar (0) #f (larceny PRIMITIVES)) (cdaadr variable cdaadr (0) #f (larceny PRIMITIVES)) (cdadar variable cdadar (0) #f (larceny PRIMITIVES)) (cdaddr variable cdaddr (0) #f (larceny PRIMITIVES)) (cddaar variable cddaar (0) #f (larceny PRIMITIVES)) (cddadr variable cddadr (0) #f (larceny PRIMITIVES)) (cdddar variable cdddar (0) #f (larceny PRIMITIVES)) (cddddr variable cddddr (0) #f (larceny PRIMITIVES)) (ceiling variable ceiling (0) #f (larceny PRIMITIVES)) (char? variable char? (0) #f (larceny PRIMITIVES)) (char->integer variable char->integer (0) #f (larceny PRIMITIVES)) (char=? variable char=? (0) #f (larceny PRIMITIVES)) (char<? variable char<? (0) #f (larceny PRIMITIVES)) (char>? variable char>? (0) #f (larceny PRIMITIVES)) (char<=? variable char<=? (0) #f (larceny PRIMITIVES)) (char>=? variable char>=? (0) #f (larceny PRIMITIVES)) (complex? variable complex? (0) #f (larceny PRIMITIVES)) (cons variable cons (0) #f (larceny PRIMITIVES)) (cos variable cos (0) #f (larceny PRIMITIVES)) (denominator variable denominator (0) #f (larceny PRIMITIVES)) (dynamic-wind variable dynamic-wind (0) #f (larceny PRIMITIVES)) (eq? variable eq? (0) #f (larceny PRIMITIVES)) (equal? variable equal? (0) #f (larceny PRIMITIVES)) (eqv? variable eqv? (0) #f (larceny PRIMITIVES)) (even? variable even? (0) #f (larceny PRIMITIVES)) (exact? variable exact? (0) #f (larceny PRIMITIVES)) (exp variable exp (0) #f (larceny PRIMITIVES)) (expt variable expt (0) #f (larceny PRIMITIVES)) (floor variable floor (0) #f (larceny PRIMITIVES)) (for-each variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) (gcd variable gcd (0) #f (larceny PRIMITIVES)) (imag-part variable imag-part (0) #f (larceny PRIMITIVES)) (inexact? variable inexact? (0) #f (larceny PRIMITIVES)) (integer->char variable integer->char (0) #f (larceny PRIMITIVES)) (integer? variable integer? (0) #f (larceny PRIMITIVES)) (lcm variable lcm (0) #f (larceny PRIMITIVES)) (length variable length (0) #f (larceny PRIMITIVES)) (list variable list (0) #f (larceny PRIMITIVES)) (list->string variable list->string (0) #f (larceny PRIMITIVES)) (list->vector variable list->vector (0) #f (larceny PRIMITIVES)) (list-ref variable list-ref (0) #f (larceny PRIMITIVES)) (list-tail variable list-tail (0) #f (larceny PRIMITIVES)) (list? variable list? (0) #f (larceny PRIMITIVES)) (log variable log (0) #f (larceny PRIMITIVES)) (magnitude variable magnitude (0) #f (larceny PRIMITIVES)) (make-polar variable make-polar (0) #f (larceny PRIMITIVES)) (make-rectangular variable make-rectangular (0) #f (larceny PRIMITIVES)) (make-string variable make-string (0) #f (larceny PRIMITIVES)) (make-vector variable make-vector (0) #f (larceny PRIMITIVES)) (map variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) (max variable max (0) #f (larceny PRIMITIVES)) (min variable min (0) #f (larceny PRIMITIVES)) (negative? variable negative? (0) #f (larceny PRIMITIVES)) (not variable not (0) #f (larceny PRIMITIVES)) (null? variable null? (0) #f (larceny PRIMITIVES)) (number->string variable number->string (0) #f (larceny PRIMITIVES)) (number? variable number? (0) #f (larceny PRIMITIVES)) (numerator variable numerator (0) #f (larceny PRIMITIVES)) (odd? variable odd? (0) #f (larceny PRIMITIVES)) (pair? variable pair? (0) #f (larceny PRIMITIVES)) (positive? variable positive? (0) #f (larceny PRIMITIVES)) (procedure? variable procedure? (0) #f (larceny PRIMITIVES)) (rational? variable rational? (0) #f (larceny PRIMITIVES)) (rationalize variable rationalize (0) #f (larceny PRIMITIVES)) (real-part variable real-part (0) #f (larceny PRIMITIVES)) (real? variable real? (0) #f (larceny PRIMITIVES)) (reverse variable reverse (0) #f (larceny PRIMITIVES)) (round variable round (0) #f (larceny PRIMITIVES)) (sin variable sin (0) #f (larceny PRIMITIVES)) (sqrt variable sqrt (0) #f (larceny PRIMITIVES)) (string variable string (0) #f (larceny PRIMITIVES)) (string->list variable string->list (0) #f (larceny PRIMITIVES)) (string->number variable string->number (0) #f (larceny PRIMITIVES)) (string->symbol variable string->symbol (0) #f (larceny PRIMITIVES)) (string-append variable string-append (0) #f (larceny PRIMITIVES)) (string-copy variable string-copy (0) #f (larceny PRIMITIVES)) (string-length variable string-length (0) #f (larceny PRIMITIVES)) (string-ref variable string-ref (0) #f (larceny PRIMITIVES)) (string<=? variable string<=? (0) #f (larceny PRIMITIVES)) (string<? variable string<? (0) #f (larceny PRIMITIVES)) (string=? variable string=? (0) #f (larceny PRIMITIVES)) (string>=? variable string>=? (0) #f (larceny PRIMITIVES)) (string>? variable string>? (0) #f (larceny PRIMITIVES)) (string? variable string? (0) #f (larceny PRIMITIVES)) (substring variable substring (0) #f (larceny PRIMITIVES)) (symbol->string variable symbol->string (0) #f (larceny PRIMITIVES)) (symbol? variable symbol? (0) #f (larceny PRIMITIVES)) (tan variable tan (0) #f (larceny PRIMITIVES)) (truncate variable truncate (0) #f (larceny PRIMITIVES)) (values variable values (0) #f (larceny PRIMITIVES)) (vector variable vector (0) #f (larceny PRIMITIVES)) (vector->list variable vector->list (0) #f (larceny PRIMITIVES)) (vector-fill! variable vector-fill! (0) #f (larceny PRIMITIVES)) (vector-length variable vector-length (0) #f (larceny PRIMITIVES)) (vector-ref variable vector-ref (0) #f (larceny PRIMITIVES)) (vector-set! variable vector-set! (0) #f (larceny PRIMITIVES)) (vector? variable vector? (0) #f (larceny PRIMITIVES)) (zero? variable zero? (0) #f (larceny PRIMITIVES)) (eval variable ex:eval (0) #f (larceny PRIMITIVES)) (load variable load-r6rs-library-or-program (0) #f (larceny PRIMITIVES)) (do macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) (call-with-input-file variable call-with-input-file (0) #f (larceny PRIMITIVES)) (call-with-output-file variable call-with-output-file (0) #f (larceny PRIMITIVES)) (close-input-port variable close-input-port (0) #f (larceny PRIMITIVES)) (close-output-port variable close-output-port (0) #f (larceny PRIMITIVES)) (current-input-port variable current-input-port (0) #f (larceny PRIMITIVES)) (current-output-port variable current-output-port (0) #f (larceny PRIMITIVES)) (display variable display (0) #f (larceny PRIMITIVES)) (eof-object? variable eof-object? (0) #f (larceny PRIMITIVES)) (newline variable newline (0) #f (larceny PRIMITIVES)) (open-input-file variable open-input-file (0) #f (larceny PRIMITIVES)) (open-output-file variable open-output-file (0) #f (larceny PRIMITIVES)) (peek-char variable peek-char (0) #f (larceny PRIMITIVES)) (read variable read (0) #f (larceny PRIMITIVES)) (read-char variable read-char (0) #f (larceny PRIMITIVES)) (with-input-from-file variable with-input-from-file (0) #f (larceny PRIMITIVES)) (with-output-to-file variable with-output-to-file (0) #f (larceny PRIMITIVES)) (write variable write (0) #f (larceny PRIMITIVES)) (write-char variable write-char (0) #f (larceny PRIMITIVES)) (char-upcase variable char-upcase (0) #f (larceny PRIMITIVES)) (char-downcase variable char-downcase (0) #f (larceny PRIMITIVES)) (char-ci=? variable char-ci=? (0) #f (larceny PRIMITIVES)) (char-ci<? variable char-ci<? (0) #f (larceny PRIMITIVES)) (char-ci>? variable char-ci>? (0) #f (larceny PRIMITIVES)) (char-ci<=? variable char-ci<=? (0) #f (larceny PRIMITIVES)) (char-ci>=? variable char-ci>=? (0) #f (larceny PRIMITIVES)) (char-alphabetic? variable char-alphabetic? (0) #f (larceny PRIMITIVES)) (char-numeric? variable char-numeric? (0) #f (larceny PRIMITIVES)) (char-whitespace? variable char-whitespace? (0) #f (larceny PRIMITIVES)) (char-upper-case? variable char-upper-case? (0) #f (larceny PRIMITIVES)) (char-lower-case? variable char-lower-case? (0) #f (larceny PRIMITIVES)) (string-ci=? variable string-ci=? (0) #f (larceny PRIMITIVES)) (string-ci<? variable string-ci<? (0) #f (larceny PRIMITIVES)) (string-ci>? variable string-ci>? (0) #f (larceny PRIMITIVES)) (string-ci<=? variable string-ci<=? (0) #f (larceny PRIMITIVES)) (string-ci>=? variable string-ci>=? (0) #f (larceny PRIMITIVES)) (set-car! variable set-car! (0) #f (larceny PRIMITIVES)) (set-cdr! variable set-cdr! (0) #f (larceny PRIMITIVES)) (assoc variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) (assv variable assv (0) #f (larceny PRIMITIVES)) (assq variable assq (0) #f (larceny PRIMITIVES)) (member variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) (memv variable memv (0) #f (larceny PRIMITIVES)) (memq variable memq (0) #f (larceny PRIMITIVES)) (string-set! variable string-set! (0) #f (larceny PRIMITIVES)) (string-fill! variable string-fill! (0) #f (larceny PRIMITIVES)) (null-environment variable |\x0;null-environment~1pxGHH~4440| (0) #f (rnrs r5rs)) (scheme-report-environment variable |\x0;scheme-report-environment~1pxGHH~4439| (0) #f (rnrs r5rs)) (delay macro |\x0;delay~1pxGHH~3736| (0) #f (larceny r7rs promises)) (force variable |\x0;force~1pxGHH~3751| (0) #f (larceny r7rs promises)) (exact->inexact variable exact->inexact (0) #f (larceny PRIMITIVES)) (inexact->exact variable inexact->exact (0) #f (larceny PRIMITIVES)) (quotient variable quotient (0) #f (larceny PRIMITIVES)) (remainder variable remainder (0) #f (larceny PRIMITIVES)) (modulo variable modulo (0) #f (larceny PRIMITIVES))) (((rnrs r5rs) 0) ((rnrs mutable-strings) 0) ((rnrs lists) 0) ((rnrs mutable-pairs) 0) ((rnrs unicode) 0) ((rnrs io simple) 0) ((rnrs control) 0) ((rnrs load) 0) ((rnrs eval) 0) ((rnrs base) 0) ((core primitives) 0)) (|\x0;build~1pxGHH~4459| |\x0;build~1pxGHH~4465| |\x0;build~1pxGHH~1541| |\x0;build~1pxGHH~2319| |\x0;build~1pxGHH~9093| |\x0;build~1pxGHH~1534| |\x0;build~1pxGHH~4373| |\x0;build~1pxGHH~3638| |\x0;build~1pxGHH~4431| |\x0;build~1pxGHH~1533| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~24314| #ex:make-library #ex:register-library! #values)
 #f)
))
