#!fasl
(define .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/r6rs-standard-libraries.so"))

((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core primitives) ((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (_ macro _ (0) #f ()) (... macro ... (0) #f ()) (syntax macro syntax (0) #f ()) (syntax-case macro syntax-case (0) #f ()) (make-variable-transformer variable ex:make-variable-transformer (0) #f (larceny PRIMITIVES)) (identifier? variable ex:identifier? (0) #f (larceny PRIMITIVES)) (bound-identifier=? variable ex:bound-identifier=? (0) #f (larceny PRIMITIVES)) (free-identifier=? variable ex:free-identifier=? (0) #f (larceny PRIMITIVES)) (generate-temporaries variable ex:generate-temporaries (0) #f (larceny PRIMITIVES)) (datum->syntax variable ex:datum->syntax (0) #f (larceny PRIMITIVES)) (syntax->datum variable ex:syntax->datum (0) #f (larceny PRIMITIVES)) (syntax-violation variable ex:syntax-violation (0) #f (larceny PRIMITIVES)) (environment variable ex:environment (0) #f (larceny PRIMITIVES)) (environment-bindings variable ex:environment-bindings (0) #f (larceny PRIMITIVES)) (eval variable ex:eval (0) #f (larceny PRIMITIVES)) (undefined variable ex:undefined (0) #f (larceny PRIMITIVES))) (((core primitive-macros) 0)) (system) |\x0;build~1pxGHH~2| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 1
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~50| 0 1 2 3) (|\x0;env~1pxGHH~34| 4 1 2 3) (|\x0;env~1pxGHH~16| 5 1 2 3)) (5 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (4 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (3 (((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (0) #f (core with-syntax)) ((undefined) variable ex:undefined (0 1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0 1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0 1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0 1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0 1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((list) variable list (0) #f (larceny PRIMITIVES)))) (2 (((x) variable |\x0;x~1pxGHH~5| (1) #f (core with-syntax)))) (1 ()) (0 (((e1) . #f) ((e2) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~5|))) (2439 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (3410 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? begin (|\x0;env~1pxGHH~50|) (core with-syntax) #ex:syntax-rename #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~23| |\x0;rest~1pxGHH~22|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;out~1pxGHH~11| |\x0;in~1pxGHH~12|)) #list? syntax-case (|\x0;env~1pxGHH~16|) (core with-syntax) #ex:syntax-rename list begin #ex:invalid-form)
 (() ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~21|)))
 #ex:map-while #ex:invalid-form syntax-case (|\x0;env~1pxGHH~34|))
 |\x0;with-syntax~1pxGHH~3| #ex:register-macro! #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core with-syntax) ((with-syntax macro |\x0;with-syntax~1pxGHH~3| (0) #f (core with-syntax))) (((core primitives) 0 1)) (|\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~57| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 2
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~128| 0 1 2 3 4 5) (|\x0;env~1pxGHH~116| 6 1 2 3 4 5) (|\x0;env~1pxGHH~99| 7 8 3 4 5) (|\x0;env~1pxGHH~81| 9 10 3 4 5)) (10 (((ellipsis) . #f) ((k) . #f) ((cl) . #f))) (9 (((cl) . #f))) (8 (((k) . #f) ((cl) . #f))) (7 (((cl) . #f))) (6 (((keyword) . #f) ((pattern) . #f) ((template) . #f))) (5 (((syntax-error) macro |\x0;syntax-error~1pxGHH~139| (0) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (0) #f (core syntax-rules)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((map) variable map (1) #f (larceny PRIMITIVES)) ((for-all) variable for-all (1) #f (larceny PRIMITIVES)))) (4 (((x) variable |\x0;x~1pxGHH~60| (1) #f (core syntax-rules)))) (3 (((clause) variable |\x0;clause~1pxGHH~61| (1) #f (core syntax-rules)))) (2 (((y) variable |\x0;y~1pxGHH~105| (1) #f (core syntax-rules)))) (1 ()) (0 (((keyword) . #f) ((pattern) . #f) ((msg) . #f) ((irritant1) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~60|))) (5643 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|460\|461| |.results\|460\|464|))) (6717 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|323\|324| |.results\|323\|327|))) (7791 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #f #( ((0 . #(|\x0;clause~1pxGHH~61| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;y~1pxGHH~105|))) (9728 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #ex:identifier? syntax-error (|\x0;env~1pxGHH~128|) (core syntax-rules) #ex:syntax-rename #ex:free-identifier=? #list? dummy syntax-violation quote syntax irritants: (|\x0;env~1pxGHH~116|) syntax-rules "Invalid expression" #ex:syntax-violation)
 #list? #ex:identifier? #for-all lambda (|\x0;env~1pxGHH~99|) (core syntax-rules) #ex:syntax-rename x syntax-case #ex:invalid-form #reverse (|\x0;env~1pxGHH~81|))
 |\x0;syntax-rules~1pxGHH~58| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;exp~1pxGHH~141|)) syntax-error "R7RS syntax-error used outside template position" #ex:syntax-violation)
 |\x0;syntax-error~1pxGHH~139| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core syntax-rules) ((syntax-rules macro |\x0;syntax-rules~1pxGHH~58| (0) #f (core syntax-rules)) (r7rs:syntax-error macro |\x0;syntax-error~1pxGHH~139| (0) #f (core syntax-rules))) (((core with-syntax) 1) ((core primitives) 1 0)) (|\x0;build~1pxGHH~57| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~143| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 3
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~227| 0 1 2 3) (|\x0;env~1pxGHH~203| 4 5 6 3) (|\x0;env~1pxGHH~179| 7 8 9 3) (|\x0;env~1pxGHH~158| 10 8 9 3)) (10 (((f) . #f) ((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (9 (((x) variable |\x0;x~1pxGHH~146| (1) #f (core let)))) (8 ()) (7 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (6 (((x) variable |\x0;x~1pxGHH~194| (1) #f (core let)))) (5 ()) (4 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (3 (((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((for-all) variable for-all (1) #f (larceny PRIMITIVES)))) (2 (((x) variable |\x0;x~1pxGHH~218| (1) #f (core let)))) (1 ()) (0 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~146|))) (1026 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~184|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~186| |\x0;rest~1pxGHH~185|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~173| |\x0;v~1pxGHH~174|)) #list? #ex:identifier? #for-all lambda (|\x0;env~1pxGHH~179|) (core let) #ex:syntax-rename)
 (() ()) #map #list #apply)
 #ex:map-while #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~166| |\x0;rest~1pxGHH~165|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~152| |\x0;v~1pxGHH~153|)) #list? #ex:identifier? #for-all letrec (|\x0;env~1pxGHH~158|) (core let) #ex:syntax-rename lambda #ex:invalid-form)
 (() ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~164|)))
 #ex:invalid-form)
 |\x0;let~1pxGHH~144| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~194|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~208|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~210| |\x0;rest~1pxGHH~209|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;i~1pxGHH~198| |\x0;v~1pxGHH~199|))) (3537 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|472\|474| |.y1\|472\|473| |.results\|472\|477|)))) #list? letrec* (|\x0;env~1pxGHH~203|) (core let) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((i v) ...) #ex:syntax-violation #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;i~1pxGHH~198| |\x0;v~1pxGHH~199|)))
 #larceny:map #reverse #append)
 (() ()) #map #list #apply #ex:invalid-form)
 #ex:map-while #ex:invalid-form)
 |\x0;letrec~1pxGHH~192| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~218|)) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~232|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~234| |\x0;rest~1pxGHH~233|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;i~1pxGHH~222| |\x0;v~1pxGHH~223|))) (4564 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|718\|720| |.y1\|718\|719| |.results\|718\|723|)))) #list? let (|\x0;env~1pxGHH~227|) (core let) #ex:syntax-rename #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((define i v) ... (let () e1 e2 ...)) #ex:syntax-violation #append #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;i~1pxGHH~222| |\x0;v~1pxGHH~223|)) define (|\x0;env~1pxGHH~227|) (core let) #ex:syntax-rename)
 #larceny:map #reverse define)
 (() ()) #map #list #apply #ex:invalid-form)
 #ex:map-while #ex:invalid-form)
 |\x0;letrec*~1pxGHH~216| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core let) ((let macro |\x0;let~1pxGHH~144| (0) #f (core let)) (letrec macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) (letrec* macro |\x0;letrec*~1pxGHH~216| (0) #f (core let))) (((core with-syntax) 1) ((core primitives) 1 0)) (|\x0;build~1pxGHH~57| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~240| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 4
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~563| 0 1 2 3) (|\x0;env~1pxGHH~555| 4 1 2 3) (|\x0;env~1pxGHH~531| 5 1 2 3) (|\x0;env~1pxGHH~513| 6 1 2 3) (|\x0;env~1pxGHH~493| 7 1 2 3) (|\x0;env~1pxGHH~475| 8 1 2 3) (|\x0;env~1pxGHH~456| 9 1 2 3) (|\x0;env~1pxGHH~426| 10 11 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~420| 19 11 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~411| 20 11 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~403| 21 11 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~386| 22 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~377| 25 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~369| 26 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1pxGHH~313| 27 28 29 3) (|\x0;env~1pxGHH~291| 30 31 32 33 34 35 28 29 3) (|\x0;env~1pxGHH~281| 36 37 31 32 33 34 35 28 29 3)) (37 (((x) . #f) ((v) . #f) ((rest) . #f))) (36 (((body) . #f))) (35 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (34 ()) (33 (((f) variable |\x0;f~1pxGHH~258| (1) #f (core derived)))) (32 (((bindings) variable |\x0;bindings~1pxGHH~265| (1) #f (core derived)))) (31 ()) (30 (((x) . #f) ((v) . #f))) (29 (((x) variable |\x0;x~1pxGHH~243| (1) #f (core derived)))) (28 ()) (27 (((e1) . #f) ((e2) . #f))) (26 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (25 (((e0) . #f) ((e1) . #f))) (24 (((c2) . #f) ((c3) . #f))) (23 (((rest) . #f))) (22 (((e0) . #f))) (21 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (20 (((e0) . #f) ((e1) . #f))) (19 (((e0) . #f))) (18 (((x) variable |\x0;x~1pxGHH~322| (1) #f (core derived)))) (17 ()) (16 (((c1) . #f) ((c2) . #f))) (15 ()) (14 (((f) variable |\x0;f~1pxGHH~333| (1) #f (core derived)))) (13 (((c1) variable |\x0;c1~1pxGHH~342| (1) #f (core derived)) ((c2*) variable |\x0;c2*~1pxGHH~343| (1) #f (core derived)))) (12 ()) (11 ()) (10 (((e1) . #f) ((e2) . #f))) (9 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((atoms) . #f) ((result1) . #f) ((result2) . #f) ((clause) . #f) ((clauses) . #f))) (8 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((atoms) . #f) ((result1) . #f) ((result2) . #f))) (7 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((atoms) . #f) ((result) . #f) ((clause) . #f) ((clauses) . #f))) (6 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((atoms) . #f) ((result) . #f))) (5 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((result1) . #f) ((result2) . #f))) (4 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((result) . #f))) (3 (((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (1 0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (1 0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (1 0) #f (core let)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((cdr) variable cdr (1 0) #f (larceny PRIMITIVES)) ((car) variable car (1 0) #f (larceny PRIMITIVES)) ((memv) variable memv (1 0) #f (larceny PRIMITIVES)) ((null?) variable null? (1 0) #f (larceny PRIMITIVES)) ((for-all) variable for-all (1 0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~436|) variable |\x0;x~1pxGHH~438| (0) #f (core derived)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~436|) . #f) ((key) . #f) ((clauses) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~243|))) (2488 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? let (|\x0;env~1pxGHH~313|) (core derived) #ex:syntax-rename #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~304| |\x0;rest~1pxGHH~303|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~248| |\x0;v~1pxGHH~249|))) (3382 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (6086 . #(|\x0;f~1pxGHH~258| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;bindings~1pxGHH~265|))) (8522 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|395\|397| |.y1\|395\|396| |.results\|395\|400|)))) #list? #ex:identifier? #for-all #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((x v) ...) #ex:syntax-violation #ex:invalid-form let (|\x0;env~1pxGHH~281|) (core derived) #ex:syntax-rename (|\x0;env~1pxGHH~291|) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~248| |\x0;v~1pxGHH~249|)))
 #larceny:map #reverse #append)
 (() ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~302|)))
 #ex:map-while #ex:invalid-form)
 |\x0;let*~1pxGHH~241| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~322|))) (1460 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (4659 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (11182 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (14222 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (20513 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (24354 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (29722 . #(|\x0;f~1pxGHH~333| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;c1~1pxGHH~342| |\x0;c2*~1pxGHH~343|)))) #list? #ex:invalid-form if (|\x0;env~1pxGHH~369|) (core derived) #ex:syntax-rename begin cond "Invalid expression" #ex:syntax-violation #ex:identifier? => (|\x0;env~1pxGHH~377|) #ex:free-identifier=? let t (|\x0;env~1pxGHH~403|) (|\x0;env~1pxGHH~411|) (|\x0;env~1pxGHH~420|) (|\x0;env~1pxGHH~386|) else (|\x0;env~1pxGHH~426|))
 |\x0;cond~1pxGHH~320| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~438|))) (4296 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (11693 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (17478 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (25823 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (32702 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (37145 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? let (|\x0;env~1pxGHH~563|) (core derived) #ex:syntax-rename atom-key case if (|\x0;env~1pxGHH~456|) memv quote begin #ex:invalid-form (|\x0;env~1pxGHH~475|) #ex:identifier? => (|\x0;env~1pxGHH~493|) #ex:free-identifier=? (|\x0;env~1pxGHH~513|) else (|\x0;env~1pxGHH~531|) (|\x0;env~1pxGHH~555|))
 |\x0;case~1pxGHH~435| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~570|)) => "Invalid expression" #ex:syntax-violation)
 |\x0;=>~1pxGHH~568| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~574|)) else "Invalid expression" #ex:syntax-violation)
 |\x0;else~1pxGHH~572| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core derived) ((let* macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) (cond macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) (case macro |\x0;case~1pxGHH~435| (0) #f (core derived)) (else macro |\x0;else~1pxGHH~572| (0) #f (core derived)) (=> macro |\x0;=>~1pxGHH~568| (0) #f (core derived))) (((core syntax-rules) 1) ((core with-syntax) 1) ((core let) 1 0) ((core primitives) 1 0)) (|\x0;build~1pxGHH~143| |\x0;build~1pxGHH~57| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~576| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 5
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~617| 0 1 2 3) (|\x0;env~1pxGHH~594| 4 1 2 3)) (4 (((id) . #f) ((exp1) . #f) ((var) . #f) ((val) . #f) ((exp2) . #f))) (3 (((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (0) #f (core identifier-syntax)) ((undefined) variable ex:undefined (1 0 -1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0 -1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0 -1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0 -1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0 -1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0 -1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0 -1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0 -1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0 -1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0 -1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0 -1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0 -1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0 -1) #f ()) ((syntax) macro syntax (1 0 -1) #f ()) ((...) macro ... (1 0 -1) #f ()) ((_) macro _ (1 0 -1) #f ()) ((letrec-syntax) macro letrec-syntax (1 0 -1) #f ()) ((let-syntax) macro let-syntax (1 0 -1) #f ()) ((define-syntax) macro define-syntax (1 0 -1) #f ()) ((define) macro define (1 0 -1) #f ()) ((or) macro or (1 0 -1) #f ()) ((and) macro and (1 0 -1) #f ()) ((set!) macro set! (1 0 -1) #f ()) ((quote) macro quote (1 0 -1) #f ()) ((lambda) macro lambda (1 0 -1) #f ()) ((if) macro if (1 0 -1) #f ()) ((begin) macro begin (1 0 -1) #f ()))) (2 (((x) variable |\x0;x~1pxGHH~579| (1) #f (core identifier-syntax)))) (1 ()) (0 (((e) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~579|))) (10554 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) lambda (|\x0;env~1pxGHH~617|) (core identifier-syntax) #ex:syntax-rename x syntax-case id identifier? syntax _ ... #ex:identifier? set! (|\x0;env~1pxGHH~594|) #ex:free-identifier=? make-variable-transformer #ex:invalid-form)
 |\x0;identifier-syntax~1pxGHH~577| #ex:register-macro! #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core identifier-syntax) ((identifier-syntax macro |\x0;identifier-syntax~1pxGHH~577| (0) #f (core identifier-syntax))) (((core primitives) 1 0 -1)) (|\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~622| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 6
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~840| 0 1 2 3 4 5) (|\x0;env~1pxGHH~812| 6 1 2 3 4 5) (|\x0;env~1pxGHH~796| 7 1 2 3 4 5) (|\x0;env~1pxGHH~770| 8 1 2 3 4 5) (|\x0;env~1pxGHH~751| 9 8 1 2 3 4 5) (|\x0;env~1pxGHH~716| 10 1 2 3 4 5) (|\x0;env~1pxGHH~640| 11 12 3 4 5)) (12 (((template) . #f))) (11 (((template*) . #f) ((replacements) . #f))) (10 (((k) . #f) ((r) . #f))) (9 (((r*) . #f) ((rep) . #f) ((t) . #f))) (8 (((e) . #f) ((r) . #f))) (7 (((e) . #f) ((r) . #f))) (6 (((e) . #f))) (5 (((unsyntax-splicing) macro |\x0;unsyntax-splicing~1pxGHH~845| (0) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (0) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (0) #f (core quasisyntax)) ((undefined) variable ex:undefined (0 1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0 1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0 1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0 1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0 1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0 1) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0 1) #f (core let)) ((=>) macro |\x0;=>~1pxGHH~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0 1) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0 1) #f (core derived)) ((let*) macro |\x0;let*~1pxGHH~241| (0 1) #f (core derived)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (0 1) #f (core with-syntax)) ((vector->list) variable vector->list (0 1) #f (larceny PRIMITIVES)) ((-) variable - (0 1) #f (larceny PRIMITIVES)) ((+) variable + (0 1) #f (larceny PRIMITIVES)) ((>) variable > (0 1) #f (larceny PRIMITIVES)) ((=) variable = (0 1) #f (larceny PRIMITIVES)))) (4 (((e) variable |\x0;e~1pxGHH~625| (1) #f (core quasisyntax)))) (3 (((expand) variable |\x0;expand~1pxGHH~626| (1) #f (core quasisyntax)))) (2 (((x) variable |\x0;x~1pxGHH~650| (1) #f (core quasisyntax)) ((level) variable |\x0;level~1pxGHH~651| (1) #f (core quasisyntax)))) (1 ()) (0 (((e) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;e~1pxGHH~625|))) (3825 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (7746 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (13242 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|821\|822| |.results\|821\|825|))) (14722 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (19382 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|432\|434| |.y1\|432\|433| |.results\|432\|437|))) (22104 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (29169 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (37832 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (42019 . #(|\x0;expand~1pxGHH~626| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~650| |\x0;level~1pxGHH~651|)))) with-syntax (|\x0;env~1pxGHH~640|) (core quasisyntax) #ex:syntax-rename syntax #ex:invalid-form #vector->list #list? #list->vector #append #reverse ... (|\x0;env~1pxGHH~751|) #ex:identifier? unsyntax (|\x0;env~1pxGHH~716|) #ex:free-identifier=? unsyntax-splicing #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;t~1pxGHH~781| |\x0;e~1pxGHH~771|)))
 #larceny:map (|\x0;env~1pxGHH~770|) #ex:generate-temporaries #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;input~1pxGHH~749|)) #list?)
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~757| |\x0;rest~1pxGHH~756|)) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;t~1pxGHH~753|))) (2793 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|733\|735| |.y1\|733\|734| |.results\|733\|738|)))) #append #apply #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" (((t ...) e) ... rep ...) #ex:syntax-violation #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;t~1pxGHH~753| |\x0;e~1pxGHH~735|)))
 #larceny:map #reverse)
 (()) #map #list #apply #ex:invalid-form)
 #ex:map-while (|\x0;env~1pxGHH~796|) #length "Pattern variables denoting lists of unequal length preceding ellipses" ((t e) ... rep ...) #ex:syntax-violation (|\x0;env~1pxGHH~812|) (t) quasisyntax (|\x0;env~1pxGHH~840|))
 |\x0;quasisyntax~1pxGHH~623| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;e~1pxGHH~843|)) unsyntax "Invalid expression" #ex:syntax-violation)
 |\x0;unsyntax~1pxGHH~841| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;e~1pxGHH~847|)) unsyntax "Invalid expression" #ex:syntax-violation)
 |\x0;unsyntax-splicing~1pxGHH~845| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core quasisyntax) ((quasisyntax macro |\x0;quasisyntax~1pxGHH~623| (0) #f (core quasisyntax)) (unsyntax macro |\x0;unsyntax~1pxGHH~841| (0) #f (core quasisyntax)) (unsyntax-splicing macro |\x0;unsyntax-splicing~1pxGHH~845| (0) #f (core quasisyntax))) (((core with-syntax) 0 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1)) (|\x0;build~1pxGHH~57| |\x0;build~1pxGHH~576| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~849| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 7
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~1273| 0 1 2 3 4 5) (|\x0;env~1pxGHH~1263| 6 1 2 3 4 5) (|\x0;env~1pxGHH~1254| 7 8 1 2 3 4 5) (|\x0;env~1pxGHH~1244| 9 8 1 2 3 4 5) (|\x0;env~1pxGHH~1207| 10 11 12 13 3 4 5) (|\x0;env~1pxGHH~1197| 14 11 12 13 3 4 5) (|\x0;env~1pxGHH~987| 15 16 17 3 4 5) (|\x0;env~1pxGHH~982| 18 19 16 17 3 4 5) (|\x0;env~1pxGHH~960| 20 21 22 23 24 25 16 17 3 4 5) (|\x0;env~1pxGHH~929| 26 27 16 17 3 4 5) (|\x0;env~1pxGHH~915| 28 29 16 17 3 4 5) (|\x0;env~1pxGHH~899| 30 31 16 17 3 4 5)) (31 (((x) . #f))) (30 (((temp |\x0;c~1pxGHH~890|) . #f))) (29 (((x) . #f))) (28 (((temp |\x0;c~1pxGHH~906|) . #f))) (27 (((x) . #f))) (26 (((temp |\x0;c~1pxGHH~920|) . #f))) (25 (((x) . #f) ((y) . #f))) (24 ()) (23 (((f) variable |\x0;f~1pxGHH~939| (1) #f (core quasiquote)))) (22 (((x*) variable |\x0;x*~1pxGHH~946| (1) #f (core quasiquote)))) (21 ()) (20 (((temp |\x0;c~1pxGHH~950|) . #f) ((temp |\x0;c~1pxGHH~951|) . #f))) (19 (((x) . #f))) (18 (((temp |\x0;c~1pxGHH~973|) . #f))) (17 (((x) variable |\x0;x~1pxGHH~872| (1) #f (core quasiquote)))) (16 ()) (15 (((x) . #f))) (14 (((p) . #f))) (13 (((p) variable |\x0;p~1pxGHH~1175| (1) #f (core quasiquote)) ((lev) variable |\x0;lev~1pxGHH~1176| (1) #f (core quasiquote)))) (12 ()) (11 (((p) . #f) ((q) . #f))) (10 (((p) . #f))) (9 (((p) . #f))) (8 (((p) . #f) ((q) . #f))) (7 (((p) . #f))) (6 (((p) . #f))) (5 (((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((undefined) variable ex:undefined (0 1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0 1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0 1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0 1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0 1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0 1) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0 1) #f (core let)) ((=>) macro |\x0;=>~1pxGHH~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0 1) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0 1) #f (core derived)) ((let*) macro |\x0;let*~1pxGHH~241| (0 1) #f (core derived)) ((with-syntax) macro |\x0;with-syntax~1pxGHH~3| (1) #f (core with-syntax)) ((unsyntax-splicing) macro |\x0;unsyntax-splicing~1pxGHH~845| (1) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (1) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (1) #f (core quasisyntax)) ((list->vector) variable list->vector (0 1) #f (larceny PRIMITIVES)) ((vector) variable vector (0 1) #f (larceny PRIMITIVES)) ((list) variable list (0 1) #f (larceny PRIMITIVES)) ((map) variable map (0 1) #f (larceny PRIMITIVES)) ((append) variable append (0 1) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0 1) #f (larceny PRIMITIVES)) ((car) variable car (0 1) #f (larceny PRIMITIVES)) ((cons) variable cons (0 1) #f (larceny PRIMITIVES)) ((null?) variable null? (0 1) #f (larceny PRIMITIVES)) ((-) variable - (0 1) #f (larceny PRIMITIVES)) ((+) variable + (0 1) #f (larceny PRIMITIVES)) ((=) variable = (0 1) #f (larceny PRIMITIVES)))) (4 ()) (3 (((emit) variable |\x0;emit~1pxGHH~859| (1) #f (core quasiquote)) ((quasivector) variable |\x0;quasivector~1pxGHH~858| (1) #f (core quasiquote)) ((quasilist*) variable |\x0;quasilist*~1pxGHH~857| (1) #f (core quasiquote)) ((quasiappend) variable |\x0;quasiappend~1pxGHH~856| (1) #f (core quasiquote)) ((quasicons) variable |\x0;quasicons~1pxGHH~855| (1) #f (core quasiquote)) ((vquasi) variable |\x0;vquasi~1pxGHH~854| (1) #f (core quasiquote)) ((quasi) variable |\x0;quasi~1pxGHH~853| (1) #f (core quasiquote)))) (2 (((p) variable |\x0;p~1pxGHH~1215| (1) #f (core quasiquote)) ((lev) variable |\x0;lev~1pxGHH~1216| (1) #f (core quasiquote)))) (1 ()) (0 (((p) . #f)))) #ex:uncompress)
 #f #( ((0 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (1429 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|282\|283| |.results\|282\|286|))) (2211 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|188\|189| |.results\|188\|192|))) (2993 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (9237 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (10821 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (15945 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (19639 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|544\|545| |.results\|544\|548|))) (20421 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|450\|451| |.results\|450\|454|))) (21203 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (27451 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (27952 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (29501 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (30198 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (31336 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (33522 . #(|\x0;f~1pxGHH~1075| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1081|))) (34360 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (38505 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1223\|1224| |.results\|1223\|1227|))) (39287 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (40839 . #(|\x0;f~1pxGHH~1003| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;y~1pxGHH~1021| |\x0;k~1pxGHH~1022|))) (43492 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (43682 . #(|\x0;quasivector~1pxGHH~858| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~993|))) (46112 . #(|\x0;quasiappend~1pxGHH~856| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1084| |\x0;y~1pxGHH~1085|))) (49358 . #(|\x0;quasicons~1pxGHH~855| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1125| |\x0;y~1pxGHH~1126|))) (54012 . #(|\x0;vquasi~1pxGHH~854| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~1175| |\x0;lev~1pxGHH~1176|))) (59136 . #(|\x0;quasi~1pxGHH~853| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;p~1pxGHH~1215| |\x0;lev~1pxGHH~1216|)))) #ex:undefined #f #( ((0 . #(|\x0;emit~1pxGHH~859| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~872|))) (2258 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (3855 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1895\|1896| |.results\|1895\|1899|))) (4935 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (7339 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1806\|1807| |.results\|1806\|1810|))) (8419 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (10945 . #(|\x0;f~1pxGHH~939| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x*~1pxGHH~946|))) (13837 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (16363 . #(loop #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1545\|1546| |.results\|1545\|1549|))) (17443 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (20524 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) "quote" #equal? quote (|\x0;env~1pxGHH~987|) (core quasiquote) #ex:syntax-rename "value" #ex:invalid-form #reverse "list->vector" list->vector (|\x0;env~1pxGHH~899|) "vector" #list? vector (|\x0;env~1pxGHH~915|) cons (|\x0;env~1pxGHH~960|) "append" append (|\x0;env~1pxGHH~929|) "list*" #ex:dotted-length #ex:dotted-butlast #ex:dotted-last "list" list (|\x0;env~1pxGHH~982|))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~861|)) #ex:invalid-form)
 |\x0;quasiquote~1pxGHH~850| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;e~1pxGHH~1281|)) unquote "Invalid expression" #ex:syntax-violation)
 |\x0;unquote~1pxGHH~1279| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;e~1pxGHH~1285|)) unquote-splicing "Invalid expression" #ex:syntax-violation)
 |\x0;unquote-splicing~1pxGHH~1283| #values #reverse "value" #ex:identifier? unquote-splicing (|\x0;env~1pxGHH~1244|) (core quasiquote) #ex:syntax-rename #ex:free-identifier=? #list? "quote" #vector->list unquote (|\x0;env~1pxGHH~1254|) quasiquote (|\x0;env~1pxGHH~1263|) (|\x0;env~1pxGHH~1197|) #ex:invalid-form "list*" #equal? "list" #append "append" #ex:dotted-length #ex:dotted-butlast #ex:dotted-last #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;ls~1pxGHH~1043|)) #append)
 "list->vector" #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;ls~1pxGHH~1010|)) #list? "vector" #ex:invalid-form)
 #list->vector (|\x0;env~1pxGHH~1207|) (|\x0;env~1pxGHH~1273|))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core quasiquote) ((quasiquote macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) (unquote macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote))) (((core quasisyntax) 1) ((core with-syntax) 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1)) (|\x0;build~1pxGHH~849| |\x0;build~1pxGHH~57| |\x0;build~1pxGHH~576| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~1287| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 8
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~1455| 0 1 2 3) (|\x0;env~1pxGHH~1442| 4 1 2 3) (|\x0;env~1pxGHH~1421| 5 6 7 3) (|\x0;env~1pxGHH~1405| 8 6 7 3) (|\x0;env~1pxGHH~1384| 9 6 7 3) (|\x0;env~1pxGHH~1360| 10 6 7 3) (|\x0;env~1pxGHH~1334| 11 6 7 3) (|\x0;env~1pxGHH~1308| 12 6 7 3)) (12 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?a) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (11 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?a) . #f) ((?b) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (10 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?e0) . #f) ((?args) . #f) ((?bindings) . #f) ((?tmps) . #f) ((?body) . #f))) (9 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?b0) . #f) ((?e0) . #f) ((?binding) . #f) ((?tmps) . #f) ((?body) . #f))) (8 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?tmps) . #f) ((?body) . #f))) (7 (((x |\x0;c~1pxGHH~1289|) variable |\x0;x~1pxGHH~1291| (0) #f (core let-values)))) (6 ()) (5 (((dummy |\x0;c~1pxGHH~1289|) . #f) ((?binding) . #f) ((?body0) . #f) ((?body1) . #f))) (4 (((dummy |\x0;c~1pxGHH~1429|) . #f) ((?binding0) . #f) ((?binding1) . #f) ((?body0) . #f) ((?body1) . #f))) (3 (((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((undefined) variable ex:undefined (1 0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (1 0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (1 0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (1 0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (1 0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (1 0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (1 0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (1 0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~1429|) variable |\x0;x~1pxGHH~1431| (0) #f (core let-values)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~1429|) . #f) ((?body0) . #f) ((?body1) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1291|))) (3655 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (13438 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (21469 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (28766 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (34362 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? let-values (|\x0;env~1pxGHH~1421|) (core let-values) #ex:syntax-rename begin "bind" "mktmp" #equal? call-with-values (|\x0;env~1pxGHH~1308|) lambda x #append #ex:invalid-form (|\x0;env~1pxGHH~1334|) (|\x0;env~1pxGHH~1360|) (|\x0;env~1pxGHH~1384|) let (|\x0;env~1pxGHH~1405|))
 |\x0;let-values~1pxGHH~1288| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1431|))) (2391 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #list? begin (|\x0;env~1pxGHH~1455|) (core let-values) #ex:syntax-rename let-values (|\x0;env~1pxGHH~1442|) let*-values #ex:invalid-form)
 |\x0;let*-values~1pxGHH~1428| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (core let-values) ((let-values macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) (let*-values macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values))) (((core let) 0) ((core syntax-rules) 1) ((core primitives) 1 0)) (|\x0;build~1pxGHH~240| |\x0;build~1pxGHH~143| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~1462| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 9
'#(#f #( #f #ex:unspecified #|\x0;r7strict?~1pxGHH~1480| #|\x0;for-each~1pxGHH~1464| #|\x0;map~1pxGHH~1463| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~1528| 0 1 2 3) (|\x0;env~1pxGHH~1517| 4 1 2 3) (|\x0;env~1pxGHH~1502| 5 6 7 3) (|\x0;env~1pxGHH~1491| 8 6 7 3) (|\x0;env~1pxGHH~1475| 9 10 11 3)) (11 (((x |\x0;c~1pxGHH~1466|) variable |\x0;x~1pxGHH~1468| (0) #f (rnrs base)))) (10 ()) (9 (((dummy |\x0;c~1pxGHH~1466|) . #f) ((expression) . #f))) (8 (((bindings) . #f) ((body) . #f))) (7 (((x) variable |\x0;x~1pxGHH~1483| (1) #f (rnrs base)))) (6 ()) (5 (((bindings) . #f) ((body) . #f))) (4 (((bindings) . #f) ((body) . #f))) (3 (((letrec-syntax) macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) ((let-syntax) macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) ((r7strict?) variable |\x0;r7strict?~1pxGHH~1480| (0) #f (rnrs base)) ((assert) macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) ((map) variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) ((undefined) variable ex:undefined (0) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0) #f ()) ((syntax) macro syntax (0) #f ()) ((r6rs:letrec-syntax) macro letrec-syntax (0) #f ()) ((r6rs:let-syntax) macro let-syntax (0) #f ()) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) ((let) macro |\x0;let~1pxGHH~144| (0) #f (core let)) ((=>) macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) ((let*) macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) ((r7rs:syntax-error) macro |\x0;syntax-error~1pxGHH~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1) #f (core identifier-syntax)) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((larceny:r7strict) variable larceny:r7strict (0) #f (larceny PRIMITIVES)) ((call/cc) variable call/cc (0) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0) #f (larceny PRIMITIVES)) ((error) variable error (0) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0) #f (larceny PRIMITIVES)) ((div0) variable div0 (0) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0) #f (larceny PRIMITIVES)) ((mod) variable mod (0) #f (larceny PRIMITIVES)) ((div) variable div (0) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0) #f (larceny PRIMITIVES)) ((exact) variable exact (0) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0) #f (larceny PRIMITIVES)) ((vector) variable vector (0) #f (larceny PRIMITIVES)) ((values) variable values (0) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0) #f (larceny PRIMITIVES)) ((tan) variable tan (0) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0) #f (larceny PRIMITIVES)) ((substring) variable substring (0) #f (larceny PRIMITIVES)) ((string?) variable string? (0) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0) #f (larceny PRIMITIVES)) ((string) variable string (0) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0) #f (larceny PRIMITIVES)) ((sin) variable sin (0) #f (larceny PRIMITIVES)) ((round) variable round (0) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0) #f (larceny PRIMITIVES)) ((real?) variable real? (0) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0) #f (larceny PRIMITIVES)) ((number?) variable number? (0) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0) #f (larceny PRIMITIVES)) ((null?) variable null? (0) #f (larceny PRIMITIVES)) ((not) variable not (0) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0) #f (larceny PRIMITIVES)) ((min) variable min (0) #f (larceny PRIMITIVES)) ((max) variable max (0) #f (larceny PRIMITIVES)) ((larceny:map) variable larceny:map (0) #f (larceny PRIMITIVES)) ((make-vector) variable make-vector (0) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0) #f (larceny PRIMITIVES)) ((log) variable log (0) #f (larceny PRIMITIVES)) ((list?) variable list? (0) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0) #f (larceny PRIMITIVES)) ((list) variable list (0) #f (larceny PRIMITIVES)) ((length) variable length (0) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0) #f (larceny PRIMITIVES)) ((larceny:for-each) variable larceny:for-each (0) #f (larceny PRIMITIVES)) ((floor) variable floor (0) #f (larceny PRIMITIVES)) ((expt) variable expt (0) #f (larceny PRIMITIVES)) ((exp) variable exp (0) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0) #f (larceny PRIMITIVES)) ((even?) variable even? (0) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0) #f (larceny PRIMITIVES)) ((cos) variable cos (0) #f (larceny PRIMITIVES)) ((cons) variable cons (0) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0) #f (larceny PRIMITIVES)) ((char?) variable char? (0) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0) #f (larceny PRIMITIVES)) ((caar) variable caar (0) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0) #f (larceny PRIMITIVES)) ((car) variable car (0) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0) #f (larceny PRIMITIVES)) ((atan) variable atan (0) #f (larceny PRIMITIVES)) ((asin) variable asin (0) #f (larceny PRIMITIVES)) ((apply) variable apply (0) #f (larceny PRIMITIVES)) ((append) variable append (0) #f (larceny PRIMITIVES)) ((angle) variable angle (0) #f (larceny PRIMITIVES)) ((acos) variable acos (0) #f (larceny PRIMITIVES)) ((abs) variable abs (0) #f (larceny PRIMITIVES)) ((>=) variable >= (0) #f (larceny PRIMITIVES)) ((>) variable > (0) #f (larceny PRIMITIVES)) ((=) variable = (0) #f (larceny PRIMITIVES)) ((<=) variable <= (0) #f (larceny PRIMITIVES)) ((<) variable < (0) #f (larceny PRIMITIVES)) ((/) variable / (0) #f (larceny PRIMITIVES)) ((-) variable - (0) #f (larceny PRIMITIVES)) ((+) variable + (0) #f (larceny PRIMITIVES)) ((*) variable * (0) #f (larceny PRIMITIVES)))) (2 (((x) variable |\x0;x~1pxGHH~1509| (1) #f (rnrs base)))) (1 ()) (0 (((bindings) . #f) ((body) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1468|)) or (|\x0;env~1pxGHH~1475|) (rnrs base) #ex:syntax-rename assertion-violation quote "assertion failed" #ex:invalid-form)
 |\x0;assert~1pxGHH~1465| #ex:register-macro! #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1483|)) #|\x0;r7strict?~1pxGHH~1480| let (|\x0;env~1pxGHH~1491|) (rnrs base) #ex:syntax-rename r6rs:let-syntax #ex:invalid-form (|\x0;env~1pxGHH~1502|))
 |\x0;let-syntax~1pxGHH~1481| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1509|)) #|\x0;r7strict?~1pxGHH~1480| let (|\x0;env~1pxGHH~1517|) (rnrs base) #ex:syntax-rename r6rs:letrec-syntax #ex:invalid-form (|\x0;env~1pxGHH~1528|))
 |\x0;letrec-syntax~1pxGHH~1507| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;r7strict?~1pxGHH~1480| #|\x0;for-each~1pxGHH~1464| #|\x0;map~1pxGHH~1463| #larceny:map #larceny:for-each #larceny:r7strict #values)
 (rnrs base) ((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (1 0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) (letrec-syntax macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) (_ macro _ (1 0) #f ()) (... macro ... (1 0) #f ()) (let macro |\x0;let~1pxGHH~144| (0) #f (core let)) (let* macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) (letrec macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) (letrec* macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) (let-values macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) (let*-values macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) (case macro |\x0;case~1pxGHH~435| (0) #f (core derived)) (cond macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) (else macro |\x0;else~1pxGHH~572| (0) #f (core derived)) (=> macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) (assert macro |\x0;assert~1pxGHH~1465| (0) #f (rnrs base)) (quasiquote macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) (unquote macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) (syntax-rules macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) (identifier-syntax macro |\x0;identifier-syntax~1pxGHH~577| (1) #f (core identifier-syntax)) (* variable * (0) #f (larceny PRIMITIVES)) (+ variable + (0) #f (larceny PRIMITIVES)) (- variable - (0) #f (larceny PRIMITIVES)) (/ variable / (0) #f (larceny PRIMITIVES)) (< variable < (0) #f (larceny PRIMITIVES)) (<= variable <= (0) #f (larceny PRIMITIVES)) (= variable = (0) #f (larceny PRIMITIVES)) (> variable > (0) #f (larceny PRIMITIVES)) (>= variable >= (0) #f (larceny PRIMITIVES)) (abs variable abs (0) #f (larceny PRIMITIVES)) (acos variable acos (0) #f (larceny PRIMITIVES)) (angle variable angle (0) #f (larceny PRIMITIVES)) (append variable append (0) #f (larceny PRIMITIVES)) (apply variable apply (0) #f (larceny PRIMITIVES)) (asin variable asin (0) #f (larceny PRIMITIVES)) (atan variable atan (0) #f (larceny PRIMITIVES)) (boolean? variable boolean? (0) #f (larceny PRIMITIVES)) (call-with-current-continuation variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) (call-with-values variable call-with-values (0) #f (larceny PRIMITIVES)) (car variable car (0) #f (larceny PRIMITIVES)) (cdr variable cdr (0) #f (larceny PRIMITIVES)) (caar variable caar (0) #f (larceny PRIMITIVES)) (cadr variable cadr (0) #f (larceny PRIMITIVES)) (cdar variable cdar (0) #f (larceny PRIMITIVES)) (cddr variable cddr (0) #f (larceny PRIMITIVES)) (caaar variable caaar (0) #f (larceny PRIMITIVES)) (caadr variable caadr (0) #f (larceny PRIMITIVES)) (cadar variable cadar (0) #f (larceny PRIMITIVES)) (caddr variable caddr (0) #f (larceny PRIMITIVES)) (cdaar variable cdaar (0) #f (larceny PRIMITIVES)) (cdadr variable cdadr (0) #f (larceny PRIMITIVES)) (cddar variable cddar (0) #f (larceny PRIMITIVES)) (cdddr variable cdddr (0) #f (larceny PRIMITIVES)) (caaaar variable caaaar (0) #f (larceny PRIMITIVES)) (caaadr variable caaadr (0) #f (larceny PRIMITIVES)) (caadar variable caadar (0) #f (larceny PRIMITIVES)) (caaddr variable caaddr (0) #f (larceny PRIMITIVES)) (cadaar variable cadaar (0) #f (larceny PRIMITIVES)) (cadadr variable cadadr (0) #f (larceny PRIMITIVES)) (caddar variable caddar (0) #f (larceny PRIMITIVES)) (cadddr variable cadddr (0) #f (larceny PRIMITIVES)) (cdaaar variable cdaaar (0) #f (larceny PRIMITIVES)) (cdaadr variable cdaadr (0) #f (larceny PRIMITIVES)) (cdadar variable cdadar (0) #f (larceny PRIMITIVES)) (cdaddr variable cdaddr (0) #f (larceny PRIMITIVES)) (cddaar variable cddaar (0) #f (larceny PRIMITIVES)) (cddadr variable cddadr (0) #f (larceny PRIMITIVES)) (cdddar variable cdddar (0) #f (larceny PRIMITIVES)) (cddddr variable cddddr (0) #f (larceny PRIMITIVES)) (ceiling variable ceiling (0) #f (larceny PRIMITIVES)) (char? variable char? (0) #f (larceny PRIMITIVES)) (char->integer variable char->integer (0) #f (larceny PRIMITIVES)) (char=? variable char=? (0) #f (larceny PRIMITIVES)) (char<? variable char<? (0) #f (larceny PRIMITIVES)) (char>? variable char>? (0) #f (larceny PRIMITIVES)) (char<=? variable char<=? (0) #f (larceny PRIMITIVES)) (char>=? variable char>=? (0) #f (larceny PRIMITIVES)) (complex? variable complex? (0) #f (larceny PRIMITIVES)) (cons variable cons (0) #f (larceny PRIMITIVES)) (cos variable cos (0) #f (larceny PRIMITIVES)) (denominator variable denominator (0) #f (larceny PRIMITIVES)) (dynamic-wind variable dynamic-wind (0) #f (larceny PRIMITIVES)) (eq? variable eq? (0) #f (larceny PRIMITIVES)) (equal? variable equal? (0) #f (larceny PRIMITIVES)) (eqv? variable eqv? (0) #f (larceny PRIMITIVES)) (even? variable even? (0) #f (larceny PRIMITIVES)) (exact? variable exact? (0) #f (larceny PRIMITIVES)) (exp variable exp (0) #f (larceny PRIMITIVES)) (expt variable expt (0) #f (larceny PRIMITIVES)) (floor variable floor (0) #f (larceny PRIMITIVES)) (for-each variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) (gcd variable gcd (0) #f (larceny PRIMITIVES)) (imag-part variable imag-part (0) #f (larceny PRIMITIVES)) (inexact? variable inexact? (0) #f (larceny PRIMITIVES)) (integer->char variable integer->char (0) #f (larceny PRIMITIVES)) (integer? variable integer? (0) #f (larceny PRIMITIVES)) (lcm variable lcm (0) #f (larceny PRIMITIVES)) (length variable length (0) #f (larceny PRIMITIVES)) (list variable list (0) #f (larceny PRIMITIVES)) (list->string variable list->string (0) #f (larceny PRIMITIVES)) (list->vector variable list->vector (0) #f (larceny PRIMITIVES)) (list-ref variable list-ref (0) #f (larceny PRIMITIVES)) (list-tail variable list-tail (0) #f (larceny PRIMITIVES)) (list? variable list? (0) #f (larceny PRIMITIVES)) (log variable log (0) #f (larceny PRIMITIVES)) (magnitude variable magnitude (0) #f (larceny PRIMITIVES)) (make-polar variable make-polar (0) #f (larceny PRIMITIVES)) (make-rectangular variable make-rectangular (0) #f (larceny PRIMITIVES)) (make-string variable make-string (0) #f (larceny PRIMITIVES)) (make-vector variable make-vector (0) #f (larceny PRIMITIVES)) (map variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) (max variable max (0) #f (larceny PRIMITIVES)) (min variable min (0) #f (larceny PRIMITIVES)) (negative? variable negative? (0) #f (larceny PRIMITIVES)) (not variable not (0) #f (larceny PRIMITIVES)) (null? variable null? (0) #f (larceny PRIMITIVES)) (number->string variable number->string (0) #f (larceny PRIMITIVES)) (number? variable number? (0) #f (larceny PRIMITIVES)) (numerator variable numerator (0) #f (larceny PRIMITIVES)) (odd? variable odd? (0) #f (larceny PRIMITIVES)) (pair? variable pair? (0) #f (larceny PRIMITIVES)) (positive? variable positive? (0) #f (larceny PRIMITIVES)) (procedure? variable procedure? (0) #f (larceny PRIMITIVES)) (rational? variable rational? (0) #f (larceny PRIMITIVES)) (rationalize variable rationalize (0) #f (larceny PRIMITIVES)) (real-part variable real-part (0) #f (larceny PRIMITIVES)) (real? variable real? (0) #f (larceny PRIMITIVES)) (reverse variable reverse (0) #f (larceny PRIMITIVES)) (round variable round (0) #f (larceny PRIMITIVES)) (sin variable sin (0) #f (larceny PRIMITIVES)) (sqrt variable sqrt (0) #f (larceny PRIMITIVES)) (string variable string (0) #f (larceny PRIMITIVES)) (string->list variable string->list (0) #f (larceny PRIMITIVES)) (string->number variable string->number (0) #f (larceny PRIMITIVES)) (string->symbol variable string->symbol (0) #f (larceny PRIMITIVES)) (string-append variable string-append (0) #f (larceny PRIMITIVES)) (string-copy variable string-copy (0) #f (larceny PRIMITIVES)) (string-length variable string-length (0) #f (larceny PRIMITIVES)) (string-ref variable string-ref (0) #f (larceny PRIMITIVES)) (string<=? variable string<=? (0) #f (larceny PRIMITIVES)) (string<? variable string<? (0) #f (larceny PRIMITIVES)) (string=? variable string=? (0) #f (larceny PRIMITIVES)) (string>=? variable string>=? (0) #f (larceny PRIMITIVES)) (string>? variable string>? (0) #f (larceny PRIMITIVES)) (string? variable string? (0) #f (larceny PRIMITIVES)) (substring variable substring (0) #f (larceny PRIMITIVES)) (symbol->string variable symbol->string (0) #f (larceny PRIMITIVES)) (symbol? variable symbol? (0) #f (larceny PRIMITIVES)) (tan variable tan (0) #f (larceny PRIMITIVES)) (truncate variable truncate (0) #f (larceny PRIMITIVES)) (values variable values (0) #f (larceny PRIMITIVES)) (vector variable vector (0) #f (larceny PRIMITIVES)) (vector->list variable vector->list (0) #f (larceny PRIMITIVES)) (vector-fill! variable vector-fill! (0) #f (larceny PRIMITIVES)) (vector-length variable vector-length (0) #f (larceny PRIMITIVES)) (vector-ref variable vector-ref (0) #f (larceny PRIMITIVES)) (vector-set! variable vector-set! (0) #f (larceny PRIMITIVES)) (vector? variable vector? (0) #f (larceny PRIMITIVES)) (zero? variable zero? (0) #f (larceny PRIMITIVES)) (real-valued? variable real-valued? (0) #f (larceny PRIMITIVES)) (rational-valued? variable rational-valued? (0) #f (larceny PRIMITIVES)) (integer-valued? variable integer-valued? (0) #f (larceny PRIMITIVES)) (exact variable exact (0) #f (larceny PRIMITIVES)) (inexact variable inexact (0) #f (larceny PRIMITIVES)) (finite? variable finite? (0) #f (larceny PRIMITIVES)) (infinite? variable infinite? (0) #f (larceny PRIMITIVES)) (nan? variable nan? (0) #f (larceny PRIMITIVES)) (div variable div (0) #f (larceny PRIMITIVES)) (mod variable mod (0) #f (larceny PRIMITIVES)) (div-and-mod variable div-and-mod (0) #f (larceny PRIMITIVES)) (div0 variable div0 (0) #f (larceny PRIMITIVES)) (mod0 variable mod0 (0) #f (larceny PRIMITIVES)) (div0-and-mod0 variable div0-and-mod0 (0) #f (larceny PRIMITIVES)) (exact-integer-sqrt variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) (boolean=? variable boolean=? (0) #f (larceny PRIMITIVES)) (symbol=? variable symbol=? (0) #f (larceny PRIMITIVES)) (string-for-each variable string-for-each (0) #f (larceny PRIMITIVES)) (vector-map variable vector-map (0) #f (larceny PRIMITIVES)) (vector-for-each variable vector-for-each (0) #f (larceny PRIMITIVES)) (error variable error (0) #f (larceny PRIMITIVES)) (assertion-violation variable assertion-violation (0) #f (larceny PRIMITIVES)) (call/cc variable call/cc (0) #f (larceny PRIMITIVES))) (((core primitives) 1) ((core identifier-syntax) 1) ((core syntax-rules) 1) ((core let-values) 0) ((core quasiquote) 0) ((core derived) 0) ((core let) 0) ((core primitives) 0) ((core primitives) 0)) (|\x0;build~1pxGHH~2| |\x0;build~1pxGHH~622| |\x0;build~1pxGHH~143| |\x0;build~1pxGHH~1462| |\x0;build~1pxGHH~1287| |\x0;build~1pxGHH~576| |\x0;build~1pxGHH~240| |\x0;build~1pxGHH~2| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~1533| #ex:make-library #ex:register-library! #values)
 #f)
))
((.petit-patch-procedure .petit-bootstrap-id-c288e0e7546cde66f58d10bba24a4ad7 10
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #values #apply)
 (rnrs io simple) ((&i/o variable &i/o (0) #f (larceny PRIMITIVES)) (make-i/o-error variable make-i/o-error (0) #f (larceny PRIMITIVES)) (i/o-error? variable i/o-error? (0) #f (larceny PRIMITIVES)) (&i/o-read variable &i/o-read (0) #f (larceny PRIMITIVES)) (make-i/o-read-error variable make-i/o-read-error (0) #f (larceny PRIMITIVES)) (i/o-read-error? variable i/o-read-error? (0) #f (larceny PRIMITIVES)) (&i/o-write variable &i/o-write (0) #f (larceny PRIMITIVES)) (make-i/o-write-error variable make-i/o-write-error (0) #f (larceny PRIMITIVES)) (i/o-write-error? variable i/o-write-error? (0) #f (larceny PRIMITIVES)) (&i/o-invalid-position variable &i/o-invalid-position (0) #f (larceny PRIMITIVES)) (make-i/o-invalid-position-error variable make-i/o-invalid-position-error (0) #f (larceny PRIMITIVES)) (i/o-invalid-position-error? variable i/o-invalid-position-error? (0) #f (larceny PRIMITIVES)) (i/o-error-position variable i/o-error-position (0) #f (larceny PRIMITIVES)) (&i/o-filename variable &i/o-filename (0) #f (larceny PRIMITIVES)) (make-i/o-filename-error variable make-i/o-filename-error (0) #f (larceny PRIMITIVES)) (i/o-filename-error? variable i/o-filename-error? (0) #f (larceny PRIMITIVES)) (i/o-error-filename variable i/o-error-filename (0) #f (larceny PRIMITIVES)) (&i/o-file-protection variable &i/o-file-protection (0) #f (larceny PRIMITIVES)) (make-i/o-file-protection-error variable make-i/o-file-protection-error (0) #f (larceny PRIMITIVES)) (i/o-file-protection-error? variable i/o-file-protection-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-is-read-only variable &i/o-file-is-read-only (0) #f (larceny PRIMITIVES)) (make-i/o-file-is-read-only-error variable make-i/o-file-is-read-only-error (0) #f (larceny PRIMITIVES)) (i/o-file-is-read-only-error? variable i/o-file-is-read-only-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-already-exists variable &i/o-file-already-exists (0) #f (larceny PRIMITIVES)) (make-i/o-file-already-exists-error variable make-i/o-file-already-exists-error (0) #f (larceny PRIMITIVES)) (i/o-file-already-exists-error? variable i/o-file-already-exists-error? (0) #f (larceny PRIMITIVES)) (&i/o-file-does-not-exist variable &i/o-file-does-not-exist (0) #f (larceny PRIMITIVES)) (make-i/o-file-does-not-exist-error variable make-i/o-file-does-not-exist-error (0) #f (larceny PRIMITIVES)) (i/o-file-does-not-exist-error? variable i/o-file-does-not-exist-error? (0) #f (larceny PRIMITIVES)) (&i/o-port variable &i/o-port (0) #f (larceny PRIMITIVES)) (make-i/o-port-error variable make-i/o-port-error (0) #f (larceny PRIMITIVES)) (i/o-port-error? variable i/o-port-error? (0) #f (larceny PRIMITIVES)) (i/o-error-port variable i/o-error-port (0) #f (larceny PRIMITIVES)) (eof-object variable eof-object (0) #f (larceny PRIMITIVES)) (eof-object? variable eof-object? (0) #f (larceny PRIMITIVES)) (call-with-input-file variable call-with-input-file (0) #f (larceny PRIMITIVES)) (call-with-output-file variable call-with-output-file (0) #f (larceny PRIMITIVES)) (input-port? variable input-port? (0) #f (larceny PRIMITIVES)) (output-port? variable output-port? (0) #f (larceny PRIMITIVES)) (current-input-port variable current-input-port (0) #f (larceny PRIMITIVES)) (current-output-port variable current-output-port (0) #f (larceny PRIMITIVES)) (current-error-port variable current-error-port (0) #f (larceny PRIMITIVES)) (with-input-from-file variable with-input-from-file (0) #f (larceny PRIMITIVES)) (with-output-to-file variable with-output-to-file (0) #f (larceny PRIMITIVES)) (open-input-file variable open-input-file (0) #f (larceny PRIMITIVES)) (open-output-file variable open-output-file (0) #f (larceny PRIMITIVES)) (close-input-port variable close-input-port (0) #f (larceny PRIMITIVES)) (close-output-port variable close-output-port (0) #f (larceny PRIMITIVES)) (read-char variable read-char (0) #f (larceny PRIMITIVES)) (peek-char variable peek-char (0) #f (larceny PRIMITIVES)) (read variable read (0) #f (larceny PRIMITIVES)) (write-char variable write-char (0) #f (larceny PRIMITIVES)) (newline variable newline (0) #f (larceny PRIMITIVES)) (display variable display (0) #f (larceny PRIMITIVES)) (write variable write (0) #f (larceny PRIMITIVES))) |\x0;build~1pxGHH~1534| #ex:make-library #ex:register-library! #values)
 #f)
))
