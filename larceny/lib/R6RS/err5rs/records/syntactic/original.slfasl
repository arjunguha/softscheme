#!fasl
(define .petit-bootstrap-id-34f848a5e7412541fd24edb0967b949f (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R6RS/err5rs/records/syntactic/original.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-34f848a5e7412541fd24edb0967b949f 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) (((|\x0;env~1pxGHH~2282| 0 1 2 3) (|\x0;env~1pxGHH~2243| 4 1 2 3) (|\x0;env~1pxGHH~2200| 5 1 2 3) (|\x0;env~1pxGHH~2159| 6 1 2 3) (|\x0;env~1pxGHH~2101| 7 8 9 10 11 12 3) (|\x0;env~1pxGHH~1835| 13 14 15 3) (|\x0;env~1pxGHH~1819| 16 14 15 3)) (16 (((dummy |\x0;c~1pxGHH~1806|) . #f) ((type-name) . #f) ((constructor-spec) . #f) ((predicate-spec) . #f) ((field-specs) . #f))) (15 (((x |\x0;c~1pxGHH~1806|) variable |\x0;x~1pxGHH~1808| (0) #f (err5rs records syntactic original)))) (14 ()) (13 (((dummy |\x0;c~1pxGHH~1806|) . #f) ((type-name) . #f) ((parent) . #f) ((constructor-spec) . #f) ((predicate-spec) . #f) ((field-specs) . #f))) (12 (((x) variable |\x0;x~1pxGHH~1850| (1) #f (err5rs records syntactic original)))) (11 (((complain) variable |\x0;complain~1pxGHH~1857| (1) #f (err5rs records syntactic original)) ((syntax-list->vector) variable |\x0;syntax-list->vector~1pxGHH~1856| (1) #f (err5rs records syntactic original)) ((syntax-list) variable |\x0;syntax-list~1pxGHH~1855| (1) #f (err5rs records syntactic original)) ((syntax-cdr) variable |\x0;syntax-cdr~1pxGHH~1854| (1) #f (err5rs records syntactic original)) ((syntax-car) variable |\x0;syntax-car~1pxGHH~1853| (1) #f (err5rs records syntactic original)) ((clauses-assq) variable |\x0;clauses-assq~1pxGHH~1852| (1) #f (err5rs records syntactic original)) ((construct-record-type-definition) variable |\x0;construct-record-type-definition~1pxGHH~1851| (1) #f (err5rs records syntactic original)))) (10 (((tname) variable |\x0;tname~1pxGHH~2077| (1) #f (err5rs records syntactic original)) ((fields) variable |\x0;fields~1pxGHH~2078| (1) #f (err5rs records syntactic original)) ((parent) variable |\x0;parent~1pxGHH~2079| (1) #f (err5rs records syntactic original)) ((constructor-name) variable |\x0;constructor-name~1pxGHH~2080| (1) #f (err5rs records syntactic original)) ((constructor-args) variable |\x0;constructor-args~1pxGHH~2081| (1) #f (err5rs records syntactic original)) ((predicate-name) variable |\x0;predicate-name~1pxGHH~2082| (1) #f (err5rs records syntactic original)) ((accessor-fields) variable |\x0;accessor-fields~1pxGHH~2083| (1) #f (err5rs records syntactic original)) ((mutator-fields) variable |\x0;mutator-fields~1pxGHH~2084| (1) #f (err5rs records syntactic original)))) (9 ()) (8 ()) (7 (((frob) variable |\x0;frob~1pxGHH~2087| (1) #f (err5rs records syntactic original)))) (6 (((dummy |\x0;c~1pxGHH~2139|) . #f) ((type-name) . #f) ((fields) . #f) ((parent) . #f) ((constructor) . #f) ((predicate) . #f) ((accessor) . #f) ((field) . #f) ((mutator) . #f) ((mutable-field) . #f))) (5 (((dummy |\x0;c~1pxGHH~2139|) . #f) ((type-name) . #f) ((fields) . #f) ((parent) . #f) ((constructor) . #f) ((args) . #f) ((predicate) . #f) ((accessor) . #f) ((field) . #f) ((mutator) . #f) ((mutable-field) . #f))) (4 (((dummy |\x0;c~1pxGHH~2139|) . #f) ((type-name) . #f) ((fields) . #f) ((parent) . #f) ((constructor) . #f) ((accessor) . #f) ((field) . #f) ((mutator) . #f) ((mutable-field) . #f))) (3 (((define-record-type-helper) macro |\x0;define-record-type-helper~1pxGHH~2138| (0) #f (err5rs records syntactic original)) ((define-record-type-helper0) macro |\x0;define-record-type-helper0~1pxGHH~1848| (0) #f (err5rs records syntactic original)) ((define-record-type) macro |\x0;define-record-type~1pxGHH~1805| (0) #f (err5rs records syntactic original)) ((undefined) variable ex:undefined (0 1) #f (larceny PRIMITIVES)) ((eval) variable ex:eval (0 1) #f (larceny PRIMITIVES)) ((environment-bindings) variable ex:environment-bindings (0 1) #f (larceny PRIMITIVES)) ((environment) variable ex:environment (0 1) #f (larceny PRIMITIVES)) ((syntax-violation) variable ex:syntax-violation (0 1) #f (larceny PRIMITIVES)) ((syntax->datum) variable ex:syntax->datum (0 1) #f (larceny PRIMITIVES)) ((datum->syntax) variable ex:datum->syntax (0 1) #f (larceny PRIMITIVES)) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f (larceny PRIMITIVES)) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f (larceny PRIMITIVES)) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f (larceny PRIMITIVES)) ((identifier?) variable ex:identifier? (0 1) #f (larceny PRIMITIVES)) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f (larceny PRIMITIVES)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((call/cc) variable call/cc (0 1) #f (larceny PRIMITIVES)) ((assertion-violation) variable assertion-violation (0 1) #f (larceny PRIMITIVES)) ((error) variable error (0 1) #f (larceny PRIMITIVES)) ((vector-for-each) variable vector-for-each (0 1) #f (larceny PRIMITIVES)) ((vector-map) variable vector-map (0 1) #f (larceny PRIMITIVES)) ((string-for-each) variable string-for-each (0 1) #f (larceny PRIMITIVES)) ((symbol=?) variable symbol=? (0 1) #f (larceny PRIMITIVES)) ((boolean=?) variable boolean=? (0 1) #f (larceny PRIMITIVES)) ((exact-integer-sqrt) variable exact-integer-sqrt (0 1) #f (larceny PRIMITIVES)) ((div0-and-mod0) variable div0-and-mod0 (0 1) #f (larceny PRIMITIVES)) ((mod0) variable mod0 (0 1) #f (larceny PRIMITIVES)) ((div0) variable div0 (0 1) #f (larceny PRIMITIVES)) ((div-and-mod) variable div-and-mod (0 1) #f (larceny PRIMITIVES)) ((mod) variable mod (0 1) #f (larceny PRIMITIVES)) ((div) variable div (0 1) #f (larceny PRIMITIVES)) ((nan?) variable nan? (0 1) #f (larceny PRIMITIVES)) ((infinite?) variable infinite? (0 1) #f (larceny PRIMITIVES)) ((finite?) variable finite? (0 1) #f (larceny PRIMITIVES)) ((inexact) variable inexact (0 1) #f (larceny PRIMITIVES)) ((exact) variable exact (0 1) #f (larceny PRIMITIVES)) ((integer-valued?) variable integer-valued? (0 1) #f (larceny PRIMITIVES)) ((rational-valued?) variable rational-valued? (0 1) #f (larceny PRIMITIVES)) ((real-valued?) variable real-valued? (0 1) #f (larceny PRIMITIVES)) ((zero?) variable zero? (0 1) #f (larceny PRIMITIVES)) ((vector?) variable vector? (0 1) #f (larceny PRIMITIVES)) ((vector-set!) variable vector-set! (0 1) #f (larceny PRIMITIVES)) ((vector-ref) variable vector-ref (0 1) #f (larceny PRIMITIVES)) ((vector-length) variable vector-length (0 1) #f (larceny PRIMITIVES)) ((vector-fill!) variable vector-fill! (0 1) #f (larceny PRIMITIVES)) ((vector->list) variable vector->list (0 1) #f (larceny PRIMITIVES)) ((vector) variable vector (0 1) #f (larceny PRIMITIVES)) ((values) variable values (0 1) #f (larceny PRIMITIVES)) ((truncate) variable truncate (0 1) #f (larceny PRIMITIVES)) ((tan) variable tan (0 1) #f (larceny PRIMITIVES)) ((symbol?) variable symbol? (0 1) #f (larceny PRIMITIVES)) ((symbol->string) variable symbol->string (0 1) #f (larceny PRIMITIVES)) ((substring) variable substring (0 1) #f (larceny PRIMITIVES)) ((string?) variable string? (0 1) #f (larceny PRIMITIVES)) ((string>?) variable string>? (0 1) #f (larceny PRIMITIVES)) ((string>=?) variable string>=? (0 1) #f (larceny PRIMITIVES)) ((string=?) variable string=? (0 1) #f (larceny PRIMITIVES)) ((string<?) variable string<? (0 1) #f (larceny PRIMITIVES)) ((string<=?) variable string<=? (0 1) #f (larceny PRIMITIVES)) ((string-ref) variable string-ref (0 1) #f (larceny PRIMITIVES)) ((string-length) variable string-length (0 1) #f (larceny PRIMITIVES)) ((string-copy) variable string-copy (0 1) #f (larceny PRIMITIVES)) ((string-append) variable string-append (0 1) #f (larceny PRIMITIVES)) ((string->symbol) variable string->symbol (0 1) #f (larceny PRIMITIVES)) ((string->number) variable string->number (0 1) #f (larceny PRIMITIVES)) ((string->list) variable string->list (0 1) #f (larceny PRIMITIVES)) ((string) variable string (0 1) #f (larceny PRIMITIVES)) ((sqrt) variable sqrt (0 1) #f (larceny PRIMITIVES)) ((sin) variable sin (0 1) #f (larceny PRIMITIVES)) ((round) variable round (0 1) #f (larceny PRIMITIVES)) ((reverse) variable reverse (0 1) #f (larceny PRIMITIVES)) ((real?) variable real? (0 1) #f (larceny PRIMITIVES)) ((real-part) variable real-part (0 1) #f (larceny PRIMITIVES)) ((rationalize) variable rationalize (0 1) #f (larceny PRIMITIVES)) ((rational?) variable rational? (0 1) #f (larceny PRIMITIVES)) ((procedure?) variable procedure? (0 1) #f (larceny PRIMITIVES)) ((positive?) variable positive? (0 1) #f (larceny PRIMITIVES)) ((pair?) variable pair? (0 1) #f (larceny PRIMITIVES)) ((odd?) variable odd? (0 1) #f (larceny PRIMITIVES)) ((numerator) variable numerator (0 1) #f (larceny PRIMITIVES)) ((number?) variable number? (0 1) #f (larceny PRIMITIVES)) ((number->string) variable number->string (0 1) #f (larceny PRIMITIVES)) ((null?) variable null? (0 1) #f (larceny PRIMITIVES)) ((not) variable not (0 1) #f (larceny PRIMITIVES)) ((negative?) variable negative? (0 1) #f (larceny PRIMITIVES)) ((min) variable min (0 1) #f (larceny PRIMITIVES)) ((max) variable max (0 1) #f (larceny PRIMITIVES)) ((map) variable |\x0;map~1pxGHH~1463| (0 1) #f (rnrs base)) ((make-vector) variable make-vector (0 1) #f (larceny PRIMITIVES)) ((make-string) variable make-string (0 1) #f (larceny PRIMITIVES)) ((make-rectangular) variable make-rectangular (0 1) #f (larceny PRIMITIVES)) ((make-polar) variable make-polar (0 1) #f (larceny PRIMITIVES)) ((magnitude) variable magnitude (0 1) #f (larceny PRIMITIVES)) ((log) variable log (0 1) #f (larceny PRIMITIVES)) ((list?) variable list? (0 1) #f (larceny PRIMITIVES)) ((list-tail) variable list-tail (0 1) #f (larceny PRIMITIVES)) ((list-ref) variable list-ref (0 1) #f (larceny PRIMITIVES)) ((list->vector) variable list->vector (0 1) #f (larceny PRIMITIVES)) ((list->string) variable list->string (0 1) #f (larceny PRIMITIVES)) ((list) variable list (0 1) #f (larceny PRIMITIVES)) ((length) variable length (0 1) #f (larceny PRIMITIVES)) ((lcm) variable lcm (0 1) #f (larceny PRIMITIVES)) ((integer?) variable integer? (0 1) #f (larceny PRIMITIVES)) ((integer->char) variable integer->char (0 1) #f (larceny PRIMITIVES)) ((inexact?) variable inexact? (0 1) #f (larceny PRIMITIVES)) ((imag-part) variable imag-part (0 1) #f (larceny PRIMITIVES)) ((gcd) variable gcd (0 1) #f (larceny PRIMITIVES)) ((for-each) variable |\x0;for-each~1pxGHH~1464| (0 1) #f (rnrs base)) ((floor) variable floor (0 1) #f (larceny PRIMITIVES)) ((expt) variable expt (0 1) #f (larceny PRIMITIVES)) ((exp) variable exp (0 1) #f (larceny PRIMITIVES)) ((exact?) variable exact? (0 1) #f (larceny PRIMITIVES)) ((even?) variable even? (0 1) #f (larceny PRIMITIVES)) ((eqv?) variable eqv? (0 1) #f (larceny PRIMITIVES)) ((equal?) variable equal? (0 1) #f (larceny PRIMITIVES)) ((eq?) variable eq? (0 1) #f (larceny PRIMITIVES)) ((dynamic-wind) variable dynamic-wind (0 1) #f (larceny PRIMITIVES)) ((denominator) variable denominator (0 1) #f (larceny PRIMITIVES)) ((cos) variable cos (0 1) #f (larceny PRIMITIVES)) ((cons) variable cons (0 1) #f (larceny PRIMITIVES)) ((complex?) variable complex? (0 1) #f (larceny PRIMITIVES)) ((char>=?) variable char>=? (0 1) #f (larceny PRIMITIVES)) ((char<=?) variable char<=? (0 1) #f (larceny PRIMITIVES)) ((char>?) variable char>? (0 1) #f (larceny PRIMITIVES)) ((char<?) variable char<? (0 1) #f (larceny PRIMITIVES)) ((char=?) variable char=? (0 1) #f (larceny PRIMITIVES)) ((char->integer) variable char->integer (0 1) #f (larceny PRIMITIVES)) ((char?) variable char? (0 1) #f (larceny PRIMITIVES)) ((ceiling) variable ceiling (0 1) #f (larceny PRIMITIVES)) ((cddddr) variable cddddr (0 1) #f (larceny PRIMITIVES)) ((cdddar) variable cdddar (0 1) #f (larceny PRIMITIVES)) ((cddadr) variable cddadr (0 1) #f (larceny PRIMITIVES)) ((cddaar) variable cddaar (0 1) #f (larceny PRIMITIVES)) ((cdaddr) variable cdaddr (0 1) #f (larceny PRIMITIVES)) ((cdadar) variable cdadar (0 1) #f (larceny PRIMITIVES)) ((cdaadr) variable cdaadr (0 1) #f (larceny PRIMITIVES)) ((cdaaar) variable cdaaar (0 1) #f (larceny PRIMITIVES)) ((cadddr) variable cadddr (0 1) #f (larceny PRIMITIVES)) ((caddar) variable caddar (0 1) #f (larceny PRIMITIVES)) ((cadadr) variable cadadr (0 1) #f (larceny PRIMITIVES)) ((cadaar) variable cadaar (0 1) #f (larceny PRIMITIVES)) ((caaddr) variable caaddr (0 1) #f (larceny PRIMITIVES)) ((caadar) variable caadar (0 1) #f (larceny PRIMITIVES)) ((caaadr) variable caaadr (0 1) #f (larceny PRIMITIVES)) ((caaaar) variable caaaar (0 1) #f (larceny PRIMITIVES)) ((cdddr) variable cdddr (0 1) #f (larceny PRIMITIVES)) ((cddar) variable cddar (0 1) #f (larceny PRIMITIVES)) ((cdadr) variable cdadr (0 1) #f (larceny PRIMITIVES)) ((cdaar) variable cdaar (0 1) #f (larceny PRIMITIVES)) ((caddr) variable caddr (0 1) #f (larceny PRIMITIVES)) ((cadar) variable cadar (0 1) #f (larceny PRIMITIVES)) ((caadr) variable caadr (0 1) #f (larceny PRIMITIVES)) ((caaar) variable caaar (0 1) #f (larceny PRIMITIVES)) ((cddr) variable cddr (0 1) #f (larceny PRIMITIVES)) ((cdar) variable cdar (0 1) #f (larceny PRIMITIVES)) ((cadr) variable cadr (0 1) #f (larceny PRIMITIVES)) ((caar) variable caar (0 1) #f (larceny PRIMITIVES)) ((cdr) variable cdr (0 1) #f (larceny PRIMITIVES)) ((car) variable car (0 1) #f (larceny PRIMITIVES)) ((call-with-values) variable call-with-values (0 1) #f (larceny PRIMITIVES)) ((call-with-current-continuation) variable call-with-current-continuation (0 1) #f (larceny PRIMITIVES)) ((boolean?) variable boolean? (0 1) #f (larceny PRIMITIVES)) ((atan) variable atan (0 1) #f (larceny PRIMITIVES)) ((asin) variable asin (0 1) #f (larceny PRIMITIVES)) ((apply) variable apply (0 1) #f (larceny PRIMITIVES)) ((append) variable append (0 1) #f (larceny PRIMITIVES)) ((angle) variable angle (0 1) #f (larceny PRIMITIVES)) ((acos) variable acos (0 1) #f (larceny PRIMITIVES)) ((abs) variable abs (0 1) #f (larceny PRIMITIVES)) ((>=) variable >= (0 1) #f (larceny PRIMITIVES)) ((>) variable > (0 1) #f (larceny PRIMITIVES)) ((=) variable = (0 1) #f (larceny PRIMITIVES)) ((<=) variable <= (0 1) #f (larceny PRIMITIVES)) ((<) variable < (0 1) #f (larceny PRIMITIVES)) ((/) variable / (0 1) #f (larceny PRIMITIVES)) ((-) variable - (0 1) #f (larceny PRIMITIVES)) ((+) variable + (0 1) #f (larceny PRIMITIVES)) ((*) variable * (0 1) #f (larceny PRIMITIVES)) ((identifier-syntax) macro |\x0;identifier-syntax~1pxGHH~577| (1 2) #f (core identifier-syntax)) ((syntax-rules) macro |\x0;syntax-rules~1pxGHH~58| (1 2) #f (core syntax-rules)) ((unquote-splicing) macro |\x0;unquote-splicing~1pxGHH~1283| (0 1) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1pxGHH~1279| (0 1) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1pxGHH~850| (0 1) #f (core quasiquote)) ((assert) macro |\x0;assert~1pxGHH~1465| (0 1) #f (rnrs base)) ((=>) macro |\x0;=>~1pxGHH~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1pxGHH~572| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1pxGHH~320| (0 1) #f (core derived)) ((case) macro |\x0;case~1pxGHH~435| (0 1) #f (core derived)) ((let*-values) macro |\x0;let*-values~1pxGHH~1428| (0 1) #f (core let-values)) ((let-values) macro |\x0;let-values~1pxGHH~1288| (0 1) #f (core let-values)) ((letrec*) macro |\x0;letrec*~1pxGHH~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1pxGHH~192| (0 1) #f (core let)) ((let*) macro |\x0;let*~1pxGHH~241| (0 1) #f (core derived)) ((let) macro |\x0;let~1pxGHH~144| (0 1) #f (core let)) ((...) macro ... (2 0 1) #f ()) ((_) macro _ (2 0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (2 0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((cons*) variable cons* (0 1) #f (larceny PRIMITIVES)) ((assq) variable assq (0 1) #f (larceny PRIMITIVES)) ((assv) variable assv (0 1) #f (larceny PRIMITIVES)) ((assoc) variable |\x0;assoc~1pxGHH~1540| (0 1) #f (rnrs lists)) ((assp) variable assp (0 1) #f (larceny PRIMITIVES)) ((memq) variable memq (0 1) #f (larceny PRIMITIVES)) ((memv) variable memv (0 1) #f (larceny PRIMITIVES)) ((member) variable |\x0;member~1pxGHH~1539| (0 1) #f (rnrs lists)) ((memp) variable memp (0 1) #f (larceny PRIMITIVES)) ((remv) variable remv (0 1) #f (larceny PRIMITIVES)) ((remq) variable remq (0 1) #f (larceny PRIMITIVES)) ((remove) variable |\x0;remove~1pxGHH~1538| (0 1) #f (rnrs lists)) ((remp) variable remp (0 1) #f (larceny PRIMITIVES)) ((fold-right) variable |\x0;fold-right~1pxGHH~1537| (0 1) #f (rnrs lists)) ((fold-left) variable fold-left (0 1) #f (larceny PRIMITIVES)) ((partition) variable partition (0 1) #f (larceny PRIMITIVES)) ((filter) variable filter (0 1) #f (larceny PRIMITIVES)) ((exists) variable exists (0 1) #f (larceny PRIMITIVES)) ((for-all) variable for-all (0 1) #f (larceny PRIMITIVES)) ((find) variable find (0 1) #f (larceny PRIMITIVES)) ((unsyntax) macro |\x0;unsyntax~1pxGHH~841| (0 1) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1pxGHH~623| (0 1) #f (core quasisyntax)) ((rtd-mutator) variable rtd-mutator (0) #f (larceny PRIMITIVES)) ((rtd-accessor) variable rtd-accessor (0) #f (larceny PRIMITIVES)) ((rtd-predicate) variable rtd-predicate (0) #f (larceny PRIMITIVES)) ((rtd-constructor) variable rtd-constructor (0) #f (larceny PRIMITIVES)) ((rtd?) variable rtd? (0) #f (larceny PRIMITIVES)) ((make-rtd) variable make-rtd (0) #f (larceny PRIMITIVES)))) (2 (((x |\x0;c~1pxGHH~2139|) variable |\x0;x~1pxGHH~2141| (0) #f (err5rs records syntactic original)))) (1 ()) (0 (((dummy |\x0;c~1pxGHH~2139|) . #f) ((type-name) . #f) ((fields) . #f) ((parent) . #f) ((predicate) . #f) ((accessor) . #f) ((field) . #f) ((mutator) . #f) ((mutable-field) . #f)))) #ex:uncompress)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1808|))) (3188 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) define-record-type-helper0 (|\x0;env~1pxGHH~1835|) (err5rs records syntactic original) #ex:syntax-rename (|\x0;env~1pxGHH~1819|) #ex:invalid-form)
 |\x0;define-record-type~1pxGHH~1805| #ex:register-macro! #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1850|))) (12025 . #(|\x0;frob~1pxGHH~2087| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2131|))) (13510 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (15119 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (16651 . #(|\x0;syntax-list->vector~1pxGHH~1856| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2006|))) (17729 . #(|\x0;syntax-cdr~1pxGHH~1854| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2026|))) (18628 . #(|\x0;syntax-car~1pxGHH~1853| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2036|))) (19577 . #(|\x0;clauses-assq~1pxGHH~1852| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;sym~1pxGHH~2046| |\x0;clauses~1pxGHH~2047|))) (22581 . #(|\x0;construct-record-type-definition~1pxGHH~1851| #f 8 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;tname~1pxGHH~2077| |\x0;fields~1pxGHH~2078| |\x0;parent~1pxGHH~2079| |\x0;constructor-name~1pxGHH~2080| |\x0;constructor-args~1pxGHH~2081| |\x0;predicate-name~1pxGHH~2082| |\x0;accessor-fields~1pxGHH~2083| |\x0;mutator-fields~1pxGHH~2084|)))) #ex:syntax->datum define-record-type "illegal syntax" #ex:syntax-violation #symbol->string "make-" #string-append #string->symbol #symbol? #for-all "?" #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;fspec~1pxGHH~1931|)) #ex:identifier? #ex:syntax->datum #symbol->string "-" #string-append #string->symbol immutable #list? #for-all "-set!" mutable define-record-type "illegal syntax" #ex:syntax-violation)
 #|\x0;map~1pxGHH~1463| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1922|)) #length mutable immutable)
 #list->vector #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1915|)))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1920|)) #length)
 #filter #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1908|)))
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~1913|)) #length)
 #ex:invalid-form #ex:identifier? #ex:datum->syntax #list? define-record-type-helper (|\x0;env~1pxGHH~2101|) (err5rs records syntactic original) #ex:syntax-rename)
 |\x0;define-record-type-helper0~1pxGHH~1848| #f #( ((0 . #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;x~1pxGHH~2141|))) (3533 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (6465 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (10165 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))) #equal? #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2298|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2300| |\x0;rest~1pxGHH~2299|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~2277| |\x0;field~1pxGHH~2278|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2293| |\x0;rest~1pxGHH~2292|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~2279| |\x0;mutable-field~1pxGHH~2280|))) (5406 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1689\|1691| |.y1\|1689\|1690| |.results\|1689\|1694|))) (8129 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|1602\|1604| |.y1\|1602\|1603| |.results\|1602\|1607|)))) define-record-type-helper (|\x0;env~1pxGHH~2282|) (err5rs records syntactic original) #ex:syntax-rename ignored #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((accessor field) ...) #ex:syntax-violation ((mutator mutable-field) ...) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~2279| |\x0;mutable-field~1pxGHH~2280|)))
 #larceny:map #reverse #append #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~2277| |\x0;field~1pxGHH~2278|)))
)
 (() ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2291|)))
 #ex:map-while)
 (() ()) #map #list #apply)
 #ex:map-while #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2177| |\x0;rest~1pxGHH~2176|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~2154| |\x0;field~1pxGHH~2155|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2170| |\x0;rest~1pxGHH~2169|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~2156| |\x0;mutable-field~1pxGHH~2157|))) (10733 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|3418\|3420| |.y1\|3418\|3419| |.results\|3418\|3423|))) (15672 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|3314\|3316| |.y1\|3314\|3315| |.results\|3314\|3319|)))) begin (|\x0;env~1pxGHH~2159|) (err5rs records syntactic original) #ex:syntax-rename define make-rtd quote rtd-constructor rtd-predicate #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((define accessor (rtd-accessor type-name 'field)) ... (define mutator (rtd-mutator type-name 'mutable-field)) ...) #ex:syntax-violation ((define mutator (rtd-mutator type-name 'mutable-field)) ...) #append #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~2156| |\x0;mutable-field~1pxGHH~2157|)) define (|\x0;env~1pxGHH~2159|) (err5rs records syntactic original) #ex:syntax-rename rtd-mutator quote)
 #larceny:map #reverse rtd-mutator #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~2154| |\x0;field~1pxGHH~2155|)) define (|\x0;env~1pxGHH~2159|) (err5rs records syntactic original) #ex:syntax-rename rtd-accessor quote)
 rtd-accessor)
 (() ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2168|)))
 #ex:map-while #ex:invalid-form)
 (() ()) #map #list #apply #ex:invalid-form)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2175|)))
 #ex:invalid-form #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2218| |\x0;rest~1pxGHH~2217|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~2195| |\x0;field~1pxGHH~2196|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2211| |\x0;rest~1pxGHH~2210|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~2197| |\x0;mutable-field~1pxGHH~2198|))) (11444 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2802\|2804| |.y1\|2802\|2803| |.results\|2802\|2807|))) (16383 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2698\|2700| |.y1\|2698\|2699| |.results\|2698\|2703|)))) begin (|\x0;env~1pxGHH~2200|) (err5rs records syntactic original) #ex:syntax-rename define make-rtd quote rtd-constructor rtd-predicate #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((define accessor (rtd-accessor type-name 'field)) ... (define mutator (rtd-mutator type-name 'mutable-field)) ...) #ex:syntax-violation ((define mutator (rtd-mutator type-name 'mutable-field)) ...) #append #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~2197| |\x0;mutable-field~1pxGHH~2198|)) define (|\x0;env~1pxGHH~2200|) (err5rs records syntactic original) #ex:syntax-rename rtd-mutator quote)
 #larceny:map #reverse rtd-mutator #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~2195| |\x0;field~1pxGHH~2196|)) define (|\x0;env~1pxGHH~2200|) (err5rs records syntactic original) #ex:syntax-rename rtd-accessor quote)
 rtd-accessor)
 (() ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2209|)))
 #ex:map-while)
 (() ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2216|)))
 #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2261| |\x0;rest~1pxGHH~2260|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~2238| |\x0;field~1pxGHH~2239|)) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;cols~1pxGHH~2254| |\x0;rest~1pxGHH~2253|)) #f #( ((0 . #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~2240| |\x0;mutable-field~1pxGHH~2241|))) (5406 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2212\|2214| |.y1\|2212\|2213| |.results\|2212\|2217|))) (8129 . #(loop #f 3 src/Build/compile-standard-libraries.sch #(20 1 0) (|.y1\|2125\|2127| |.y1\|2125\|2126| |.results\|2125\|2130|)))) define-record-type-helper (|\x0;env~1pxGHH~2243|) (err5rs records syntactic original) #ex:syntax-rename ignored #length syntax "Pattern variables denoting lists of unequal length preceding ellipses" ((accessor field) ...) #ex:syntax-violation ((mutator mutable-field) ...) #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;mutator~1pxGHH~2240| |\x0;mutable-field~1pxGHH~2241|)))
 #larceny:map #reverse #append #f #( #(#f #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;accessor~1pxGHH~2238| |\x0;field~1pxGHH~2239|)))
)
 (() ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2252|)))
 #ex:map-while)
 (() ()) #map #list #apply)
 #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;temp~1pxGHH~2259|)))
)
 |\x0;define-record-type-helper~1pxGHH~2138| #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 (err5rs records syntactic original) ((define-record-type macro |\x0;define-record-type~1pxGHH~1805| (0) #f (err5rs records syntactic original))) (((err5rs records procedural) 0) ((rnrs syntax-case) 0 1) ((rnrs lists) 0 1) ((rnrs base) 0 1) ((core primitives) 0 1)) (|\x0;build~1pxGHH~1713| |\x0;build~1pxGHH~1800| |\x0;build~1pxGHH~1541| |\x0;build~1pxGHH~1533| |\x0;build~1pxGHH~2|) |\x0;build~1pxGHH~2311| #ex:make-library #ex:register-library! #values)
 #f)
))
