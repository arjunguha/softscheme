#!fasl
(define .petit-bootstrap-id-442cd839ed6b1d861b5db0536a1b1ff5 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R7RS/scheme/base.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-442cd839ed6b1d861b5db0536a1b1ff5 0
'#(#f #( #f #ex:unspecified #|\x0;features~1pxGHH~4480| #|\x0;bytevector-copy!~1pxGHH~4479| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #ex:undefined #|\x0;features~1pxGHH~4480| #|\x0;bytevector-copy!~1pxGHH~4479| #larceny:use-r7rs-semantics! #r7rs:bytevector-copy! #larceny:features #values)
 (scheme base) ((* variable * (0) #f (larceny PRIMITIVES)) (+ variable + (0) #f (larceny PRIMITIVES)) (- variable - (0) #f (larceny PRIMITIVES)) (... macro ... (1 0) #f ()) (/ variable / (0) #f (larceny PRIMITIVES)) (< variable < (0) #f (larceny PRIMITIVES)) (<= variable <= (0) #f (larceny PRIMITIVES)) (= variable = (0) #f (larceny PRIMITIVES)) (=> macro |\x0;=>~1pxGHH~568| (0) #f (core derived)) (> variable > (0) #f (larceny PRIMITIVES)) (>= variable >= (0) #f (larceny PRIMITIVES)) (_ macro _ (1 0) #f ()) (abs variable abs (0) #f (larceny PRIMITIVES)) (and macro and (0) #f ()) (append variable append (0) #f (larceny PRIMITIVES)) (apply variable apply (0) #f (larceny PRIMITIVES)) (assoc variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) (assq variable assq (0) #f (larceny PRIMITIVES)) (assv variable assv (0) #f (larceny PRIMITIVES)) (begin macro begin (0) #f ()) (binary-port? variable binary-port? (0) #f (larceny PRIMITIVES)) (boolean=? variable boolean=? (0) #f (larceny PRIMITIVES)) (boolean? variable boolean? (0) #f (larceny PRIMITIVES)) (bytevector variable bytevector (0) #f (larceny PRIMITIVES)) (bytevector-append variable bytevector-append (0) #f (larceny PRIMITIVES)) (bytevector-copy variable bytevector-copy (0) #f (larceny PRIMITIVES)) (bytevector-copy! variable |\x0;bytevector-copy!~1pxGHH~4479| (0) #f (scheme base)) (bytevector-length variable bytevector-length (0) #f (larceny PRIMITIVES)) (bytevector-u8-ref variable bytevector-u8-ref (0) #f (larceny PRIMITIVES)) (bytevector-u8-set! variable bytevector-u8-set! (0) #f (larceny PRIMITIVES)) (bytevector? variable bytevector? (0) #f (larceny PRIMITIVES)) (caar variable caar (0) #f (larceny PRIMITIVES)) (cadr variable cadr (0) #f (larceny PRIMITIVES)) (call-with-current-continuation variable call-with-current-continuation (0) #f (larceny PRIMITIVES)) (call-with-port variable call-with-port (0) #f (larceny PRIMITIVES)) (call-with-values variable call-with-values (0) #f (larceny PRIMITIVES)) (call/cc variable call/cc (0) #f (larceny PRIMITIVES)) (car variable car (0) #f (larceny PRIMITIVES)) (case macro |\x0;case~1pxGHH~435| (0) #f (core derived)) (cdar variable cdar (0) #f (larceny PRIMITIVES)) (cddr variable cddr (0) #f (larceny PRIMITIVES)) (cdr variable cdr (0) #f (larceny PRIMITIVES)) (ceiling variable ceiling (0) #f (larceny PRIMITIVES)) (char->integer variable char->integer (0) #f (larceny PRIMITIVES)) (char-ready? variable char-ready? (0) #f (larceny PRIMITIVES)) (char<=? variable char<=? (0) #f (larceny PRIMITIVES)) (char<? variable char<? (0) #f (larceny PRIMITIVES)) (char=? variable char=? (0) #f (larceny PRIMITIVES)) (char>=? variable char>=? (0) #f (larceny PRIMITIVES)) (char>? variable char>? (0) #f (larceny PRIMITIVES)) (char? variable char? (0) #f (larceny PRIMITIVES)) (close-input-port variable close-input-port (0) #f (larceny PRIMITIVES)) (close-output-port variable close-output-port (0) #f (larceny PRIMITIVES)) (close-port variable close-port (0) #f (larceny PRIMITIVES)) (complex? variable complex? (0) #f (larceny PRIMITIVES)) (cond macro |\x0;cond~1pxGHH~320| (0) #f (core derived)) (cond-expand macro cond-expand (0) #f ()) (cons variable cons (0) #f (larceny PRIMITIVES)) (current-error-port variable current-error-port (0) #f (larceny PRIMITIVES)) (current-input-port variable current-input-port (0) #f (larceny PRIMITIVES)) (current-output-port variable current-output-port (0) #f (larceny PRIMITIVES)) (define macro define (0) #f ()) (define-record-type macro |\x0;define-record-type~1pxGHH~3336| (0) #f (larceny r7rs macros)) (define-syntax macro define-syntax (0) #f ()) (define-values macro |\x0;define-values~1pxGHH~3519| (0) #f (larceny r7rs macros)) (denominator variable denominator (0) #f (larceny PRIMITIVES)) (do macro |\x0;do~1pxGHH~3884| (0) #f (rnrs control)) (dynamic-wind variable dynamic-wind (0) #f (larceny PRIMITIVES)) (else macro |\x0;else~1pxGHH~572| (0) #f (core derived)) (eof-object variable eof-object (0) #f (larceny PRIMITIVES)) (eof-object? variable eof-object? (0) #f (larceny PRIMITIVES)) (eq? variable eq? (0) #f (larceny PRIMITIVES)) (equal? variable equal? (0) #f (larceny PRIMITIVES)) (eqv? variable eqv? (0) #f (larceny PRIMITIVES)) (error variable error (0) #f (larceny PRIMITIVES)) (error-object-irritants variable error-object-irritants (0) #f (larceny PRIMITIVES)) (error-object-message variable error-object-message (0) #f (larceny PRIMITIVES)) (error-object? variable error-object? (0) #f (larceny PRIMITIVES)) (even? variable even? (0) #f (larceny PRIMITIVES)) (exact variable exact (0) #f (larceny PRIMITIVES)) (exact-integer-sqrt variable exact-integer-sqrt (0) #f (larceny PRIMITIVES)) (exact-integer? variable exact-integer? (0) #f (larceny PRIMITIVES)) (exact? variable exact? (0) #f (larceny PRIMITIVES)) (expt variable expt (0) #f (larceny PRIMITIVES)) (features variable |\x0;features~1pxGHH~4480| (0) #f (scheme base)) (file-error? variable file-error? (0) #f (larceny PRIMITIVES)) (floor variable floor (0) #f (larceny PRIMITIVES)) (floor-quotient variable floor-quotient (0) #f (larceny PRIMITIVES)) (floor-remainder variable floor-remainder (0) #f (larceny PRIMITIVES)) (floor/ variable floor/ (0) #f (larceny PRIMITIVES)) (flush-output-port variable flush-output-port (0) #f (larceny PRIMITIVES)) (for-each variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) (gcd variable gcd (0) #f (larceny PRIMITIVES)) (get-output-bytevector variable get-output-bytevector (0) #f (larceny PRIMITIVES)) (get-output-string variable get-output-string (0) #f (larceny PRIMITIVES)) (guard macro |\x0;guard~1pxGHH~1548| (0) #f (rnrs exceptions)) (if macro if (0) #f ()) (include macro include (0) #f ()) (include-ci macro include-ci (0) #f ()) (inexact variable inexact (0) #f (larceny PRIMITIVES)) (inexact? variable inexact? (0) #f (larceny PRIMITIVES)) (input-port-open? variable input-port-open? (0) #f (larceny PRIMITIVES)) (input-port? variable input-port? (0) #f (larceny PRIMITIVES)) (integer->char variable integer->char (0) #f (larceny PRIMITIVES)) (integer? variable integer? (0) #f (larceny PRIMITIVES)) (lambda macro lambda (0) #f ()) (lcm variable lcm (0) #f (larceny PRIMITIVES)) (length variable length (0) #f (larceny PRIMITIVES)) (let macro |\x0;let~1pxGHH~144| (0) #f (core let)) (let* macro |\x0;let*~1pxGHH~241| (0) #f (core derived)) (let*-values macro |\x0;let*-values~1pxGHH~1428| (0) #f (core let-values)) (let-syntax macro |\x0;let-syntax~1pxGHH~1481| (0) #f (rnrs base)) (let-values macro |\x0;let-values~1pxGHH~1288| (0) #f (core let-values)) (letrec macro |\x0;letrec~1pxGHH~192| (0) #f (core let)) (letrec* macro |\x0;letrec*~1pxGHH~216| (0) #f (core let)) (letrec-syntax macro |\x0;letrec-syntax~1pxGHH~1507| (0) #f (rnrs base)) (list variable list (0) #f (larceny PRIMITIVES)) (list->string variable list->string (0) #f (larceny PRIMITIVES)) (list->vector variable list->vector (0) #f (larceny PRIMITIVES)) (list-copy variable list-copy (0) #f (larceny PRIMITIVES)) (list-ref variable list-ref (0) #f (larceny PRIMITIVES)) (list-set! variable list-set! (0) #f (larceny PRIMITIVES)) (list-tail variable list-tail (0) #f (larceny PRIMITIVES)) (list? variable list? (0) #f (larceny PRIMITIVES)) (make-bytevector variable make-bytevector (0) #f (larceny PRIMITIVES)) (make-list variable make-list (0) #f (larceny PRIMITIVES)) (make-parameter variable make-parameter (0) #f (larceny PRIMITIVES)) (make-string variable make-string (0) #f (larceny PRIMITIVES)) (make-vector variable make-vector (0) #f (larceny PRIMITIVES)) (map variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) (max variable max (0) #f (larceny PRIMITIVES)) (member variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) (memq variable memq (0) #f (larceny PRIMITIVES)) (memv variable memv (0) #f (larceny PRIMITIVES)) (min variable min (0) #f (larceny PRIMITIVES)) (modulo variable modulo (0) #f (larceny PRIMITIVES)) (negative? variable negative? (0) #f (larceny PRIMITIVES)) (newline variable newline (0) #f (larceny PRIMITIVES)) (not variable not (0) #f (larceny PRIMITIVES)) (null? variable null? (0) #f (larceny PRIMITIVES)) (number->string variable number->string (0) #f (larceny PRIMITIVES)) (number? variable number? (0) #f (larceny PRIMITIVES)) (numerator variable numerator (0) #f (larceny PRIMITIVES)) (odd? variable odd? (0) #f (larceny PRIMITIVES)) (open-input-bytevector variable open-input-bytevector (0) #f (larceny PRIMITIVES)) (open-input-string variable open-input-string (0) #f (larceny PRIMITIVES)) (open-output-bytevector variable open-output-bytevector (0) #f (larceny PRIMITIVES)) (open-output-string variable open-output-string (0) #f (larceny PRIMITIVES)) (or macro or (0) #f ()) (output-port-open? variable output-port-open? (0) #f (larceny PRIMITIVES)) (output-port? variable output-port? (0) #f (larceny PRIMITIVES)) (pair? variable pair? (0) #f (larceny PRIMITIVES)) (parameterize macro |\x0;parameterize~1pxGHH~3600| (0) #f (larceny r7rs macros)) (peek-char variable peek-char (0) #f (larceny PRIMITIVES)) (peek-u8 variable peek-u8 (0) #f (larceny PRIMITIVES)) (port? variable port? (0) #f (larceny PRIMITIVES)) (positive? variable positive? (0) #f (larceny PRIMITIVES)) (procedure? variable procedure? (0) #f (larceny PRIMITIVES)) (quasiquote macro |\x0;quasiquote~1pxGHH~850| (0) #f (core quasiquote)) (quote macro quote (0) #f ()) (quotient variable quotient (0) #f (larceny PRIMITIVES)) (raise variable raise (0) #f (larceny PRIMITIVES)) (raise-continuable variable raise-continuable (0) #f (larceny PRIMITIVES)) (rational? variable rational? (0) #f (larceny PRIMITIVES)) (rationalize variable rationalize (0) #f (larceny PRIMITIVES)) (read-bytevector variable read-bytevector (0) #f (larceny PRIMITIVES)) (read-bytevector! variable read-bytevector! (0) #f (larceny PRIMITIVES)) (read-char variable read-char (0) #f (larceny PRIMITIVES)) (read-error? variable read-error? (0) #f (larceny PRIMITIVES)) (read-line variable read-line (0) #f (larceny PRIMITIVES)) (read-string variable read-string (0) #f (larceny PRIMITIVES)) (read-u8 variable read-u8 (0) #f (larceny PRIMITIVES)) (real? variable real? (0) #f (larceny PRIMITIVES)) (remainder variable remainder (0) #f (larceny PRIMITIVES)) (reverse variable reverse (0) #f (larceny PRIMITIVES)) (round variable round (0) #f (larceny PRIMITIVES)) (set! macro set! (1 0) #f ()) (set-car! variable set-car! (0) #f (larceny PRIMITIVES)) (set-cdr! variable set-cdr! (0) #f (larceny PRIMITIVES)) (square variable square (0) #f (larceny PRIMITIVES)) (string variable string (0) #f (larceny PRIMITIVES)) (string->list variable string->list (0) #f (larceny PRIMITIVES)) (string->number variable string->number (0) #f (larceny PRIMITIVES)) (string->symbol variable string->symbol (0) #f (larceny PRIMITIVES)) (string->utf8 variable string->utf8 (0) #f (larceny PRIMITIVES)) (string->vector variable string->vector (0) #f (larceny PRIMITIVES)) (string-append variable string-append (0) #f (larceny PRIMITIVES)) (string-copy variable string-copy (0) #f (larceny PRIMITIVES)) (string-copy! variable string-copy! (0) #f (larceny PRIMITIVES)) (string-fill! variable string-fill! (0) #f (larceny PRIMITIVES)) (string-for-each variable string-for-each (0) #f (larceny PRIMITIVES)) (string-length variable string-length (0) #f (larceny PRIMITIVES)) (string-map variable string-map (0) #f (larceny PRIMITIVES)) (string-ref variable string-ref (0) #f (larceny PRIMITIVES)) (string-set! variable string-set! (0) #f (larceny PRIMITIVES)) (string<=? variable string<=? (0) #f (larceny PRIMITIVES)) (string<? variable string<? (0) #f (larceny PRIMITIVES)) (string=? variable string=? (0) #f (larceny PRIMITIVES)) (string>=? variable string>=? (0) #f (larceny PRIMITIVES)) (string>? variable string>? (0) #f (larceny PRIMITIVES)) (string? variable string? (0) #f (larceny PRIMITIVES)) (substring variable substring (0) #f (larceny PRIMITIVES)) (symbol->string variable symbol->string (0) #f (larceny PRIMITIVES)) (symbol=? variable symbol=? (0) #f (larceny PRIMITIVES)) (symbol? variable symbol? (0) #f (larceny PRIMITIVES)) (syntax-error macro |\x0;syntax-error~1pxGHH~139| (1 0) #f (core syntax-rules)) (syntax-rules macro |\x0;syntax-rules~1pxGHH~58| (1) #f (core syntax-rules)) (textual-port? variable textual-port? (0) #f (larceny PRIMITIVES)) (truncate variable truncate (0) #f (larceny PRIMITIVES)) (truncate-quotient variable truncate-quotient (0) #f (larceny PRIMITIVES)) (truncate-remainder variable truncate-remainder (0) #f (larceny PRIMITIVES)) (truncate/ variable truncate/ (0) #f (larceny PRIMITIVES)) (u8-ready? variable u8-ready? (0) #f (larceny PRIMITIVES)) (unless macro |\x0;unless~1pxGHH~3865| (0) #f (rnrs control)) (unquote macro |\x0;unquote~1pxGHH~1279| (0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1pxGHH~1283| (0) #f (core quasiquote)) (utf8->string variable utf8->string (0) #f (larceny PRIMITIVES)) (values variable values (0) #f (larceny PRIMITIVES)) (vector variable vector (0) #f (larceny PRIMITIVES)) (vector->list variable vector->list (0) #f (larceny PRIMITIVES)) (vector->string variable vector->string (0) #f (larceny PRIMITIVES)) (vector-append variable vector-append (0) #f (larceny PRIMITIVES)) (vector-copy variable vector-copy (0) #f (larceny PRIMITIVES)) (vector-copy! variable vector-copy! (0) #f (larceny PRIMITIVES)) (vector-fill! variable vector-fill! (0) #f (larceny PRIMITIVES)) (vector-for-each variable vector-for-each (0) #f (larceny PRIMITIVES)) (vector-length variable vector-length (0) #f (larceny PRIMITIVES)) (vector-map variable vector-map (0) #f (larceny PRIMITIVES)) (vector-ref variable vector-ref (0) #f (larceny PRIMITIVES)) (vector-set! variable vector-set! (0) #f (larceny PRIMITIVES)) (vector? variable vector? (0) #f (larceny PRIMITIVES)) (when macro |\x0;when~1pxGHH~3846| (0) #f (rnrs control)) (with-exception-handler variable with-exception-handler (0) #f (larceny PRIMITIVES)) (write-bytevector variable write-bytevector (0) #f (larceny PRIMITIVES)) (write-char variable write-char (0) #f (larceny PRIMITIVES)) (write-string variable write-string (0) #f (larceny PRIMITIVES)) (write-u8 variable write-u8 (0) #f (larceny PRIMITIVES)) (zero? variable zero? (0) #f (larceny PRIMITIVES))) (((larceny r7rs primitives lowlevel) 0) ((larceny r7rs primitives) 0) ((larceny r7rs macros) 0) ((srfi :6 basic-string-ports) 0) ((rnrs mutable-strings) 0) ((rnrs mutable-pairs) 0) ((rnrs r5rs) 0) ((rnrs io simple) 0) ((rnrs io ports) 0) ((rnrs exceptions) 0) ((rnrs control) 0) ((rnrs lists) 0) ((rnrs bytevectors) 0) ((rnrs base) 0)) (|\x0;build~1pxGHH~3686| |\x0;build~1pxGHH~3692| |\x0;build~1pxGHH~3626| |\x0;build~1pxGHH~4471| |\x0;build~1pxGHH~4465| |\x0;build~1pxGHH~2319| |\x0;build~1pxGHH~4459| |\x0;build~1pxGHH~1534| |\x0;build~1pxGHH~4424| |\x0;build~1pxGHH~1706| |\x0;build~1pxGHH~4373| |\x0;build~1pxGHH~1541| |\x0;build~1pxGHH~3840| |\x0;build~1pxGHH~1533|) |\x0;build~1pxGHH~4481| #ex:make-library #ex:register-library! #values)
 #f)
))
