#!fasl
(define .petit-bootstrap-id-d0e839ed04774323edbe1cbe546055df (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R7RS/scheme/list.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-d0e839ed04774323edbe1cbe546055df 0
'#(#f #( #f #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #values #apply)
 (scheme list) ((cons variable cons (0) #f (larceny PRIMITIVES)) (list variable list (0) #f (larceny PRIMITIVES)) (xcons variable |\x0;xcons~1pxGHH~5005| (0) #f (srfi :1 lists)) (cons* variable cons* (0) #f (larceny PRIMITIVES)) (make-list variable make-list (0) #f (larceny PRIMITIVES)) (list-tabulate variable |\x0;list-tabulate~1pxGHH~5006| (0) #f (srfi :1 lists)) (list-copy variable list-copy (0) #f (larceny PRIMITIVES)) (circular-list variable |\x0;circular-list~1pxGHH~5008| (0) #f (srfi :1 lists)) (iota variable |\x0;iota~1pxGHH~5007| (0) #f (srfi :1 lists)) (pair? variable pair? (0) #f (larceny PRIMITIVES)) (null? variable null? (0) #f (larceny PRIMITIVES)) (proper-list? variable |\x0;proper-list?~1pxGHH~5009| (0) #f (srfi :1 lists)) (circular-list? variable |\x0;circular-list?~1pxGHH~5011| (0) #f (srfi :1 lists)) (dotted-list? variable |\x0;dotted-list?~1pxGHH~5010| (0) #f (srfi :1 lists)) (not-pair? variable |\x0;not-pair?~1pxGHH~5012| (0) #f (srfi :1 lists)) (null-list? variable |\x0;null-list?~1pxGHH~5013| (0) #f (srfi :1 lists)) (list= variable |\x0;list=~1pxGHH~5014| (0) #f (srfi :1 lists)) (car variable car (0) #f (larceny PRIMITIVES)) (cdr variable cdr (0) #f (larceny PRIMITIVES)) (caar variable caar (0) #f (larceny PRIMITIVES)) (cadr variable cadr (0) #f (larceny PRIMITIVES)) (cdar variable cdar (0) #f (larceny PRIMITIVES)) (cddr variable cddr (0) #f (larceny PRIMITIVES)) (caaar variable caaar (0) #f (larceny PRIMITIVES)) (caadr variable caadr (0) #f (larceny PRIMITIVES)) (cadar variable cadar (0) #f (larceny PRIMITIVES)) (caddr variable caddr (0) #f (larceny PRIMITIVES)) (cdaar variable cdaar (0) #f (larceny PRIMITIVES)) (cdadr variable cdadr (0) #f (larceny PRIMITIVES)) (cddar variable cddar (0) #f (larceny PRIMITIVES)) (cdddr variable cdddr (0) #f (larceny PRIMITIVES)) (caaaar variable caaaar (0) #f (larceny PRIMITIVES)) (caaadr variable caaadr (0) #f (larceny PRIMITIVES)) (caadar variable caadar (0) #f (larceny PRIMITIVES)) (caaddr variable caaddr (0) #f (larceny PRIMITIVES)) (cadaar variable cadaar (0) #f (larceny PRIMITIVES)) (cadadr variable cadadr (0) #f (larceny PRIMITIVES)) (caddar variable caddar (0) #f (larceny PRIMITIVES)) (cadddr variable cadddr (0) #f (larceny PRIMITIVES)) (cdaaar variable cdaaar (0) #f (larceny PRIMITIVES)) (cdaadr variable cdaadr (0) #f (larceny PRIMITIVES)) (cdadar variable cdadar (0) #f (larceny PRIMITIVES)) (cdaddr variable cdaddr (0) #f (larceny PRIMITIVES)) (cddaar variable cddaar (0) #f (larceny PRIMITIVES)) (cddadr variable cddadr (0) #f (larceny PRIMITIVES)) (cdddar variable cdddar (0) #f (larceny PRIMITIVES)) (cddddr variable cddddr (0) #f (larceny PRIMITIVES)) (list-ref variable list-ref (0) #f (larceny PRIMITIVES)) (first variable |\x0;first~1pxGHH~5017| (0) #f (srfi :1 lists)) (second variable |\x0;second~1pxGHH~5018| (0) #f (srfi :1 lists)) (third variable |\x0;third~1pxGHH~5019| (0) #f (srfi :1 lists)) (fourth variable |\x0;fourth~1pxGHH~5020| (0) #f (srfi :1 lists)) (fifth variable |\x0;fifth~1pxGHH~5021| (0) #f (srfi :1 lists)) (sixth variable |\x0;sixth~1pxGHH~5022| (0) #f (srfi :1 lists)) (seventh variable |\x0;seventh~1pxGHH~5023| (0) #f (srfi :1 lists)) (eighth variable |\x0;eighth~1pxGHH~5024| (0) #f (srfi :1 lists)) (ninth variable |\x0;ninth~1pxGHH~5025| (0) #f (srfi :1 lists)) (tenth variable |\x0;tenth~1pxGHH~5026| (0) #f (srfi :1 lists)) (car+cdr variable |\x0;car+cdr~1pxGHH~5027| (0) #f (srfi :1 lists)) (take variable |\x0;take~1pxGHH~5028| (0) #f (srfi :1 lists)) (drop variable |\x0;drop~1pxGHH~5029| (0) #f (srfi :1 lists)) (take-right variable |\x0;take-right~1pxGHH~5031| (0) #f (srfi :1 lists)) (drop-right variable |\x0;drop-right~1pxGHH~5032| (0) #f (srfi :1 lists)) (take! variable |\x0;take!~1pxGHH~5030| (0) #f (srfi :1 lists)) (drop-right! variable |\x0;drop-right!~1pxGHH~5033| (0) #f (srfi :1 lists)) (split-at variable |\x0;split-at~1pxGHH~5034| (0) #f (srfi :1 lists)) (split-at! variable |\x0;split-at!~1pxGHH~5035| (0) #f (srfi :1 lists)) (last variable |\x0;last~1pxGHH~5036| (0) #f (srfi :1 lists)) (last-pair variable |\x0;last-pair~1pxGHH~5037| (0) #f (srfi :1 lists)) (length variable length (0) #f (larceny PRIMITIVES)) (length+ variable |\x0;length+~1pxGHH~5015| (0) #f (srfi :1 lists)) (append variable append (0) #f (larceny PRIMITIVES)) (concatenate variable |\x0;concatenate~1pxGHH~5046| (0) #f (srfi :1 lists)) (reverse variable reverse (0) #f (larceny PRIMITIVES)) (append! variable |\x0;append!~1pxGHH~5043| (0) #f (srfi :1 lists)) (concatenate! variable |\x0;concatenate!~1pxGHH~5047| (0) #f (srfi :1 lists)) (reverse! variable |\x0;reverse!~1pxGHH~5091| (0) #f (srfi :1 lists)) (append-reverse variable |\x0;append-reverse~1pxGHH~5044| (0) #f (srfi :1 lists)) (append-reverse! variable |\x0;append-reverse!~1pxGHH~5045| (0) #f (srfi :1 lists)) (zip variable |\x0;zip~1pxGHH~5016| (0) #f (srfi :1 lists)) (unzip1 variable |\x0;unzip1~1pxGHH~5038| (0) #f (srfi :1 lists)) (unzip2 variable |\x0;unzip2~1pxGHH~5039| (0) #f (srfi :1 lists)) (unzip3 variable |\x0;unzip3~1pxGHH~5040| (0) #f (srfi :1 lists)) (unzip4 variable |\x0;unzip4~1pxGHH~5041| (0) #f (srfi :1 lists)) (unzip5 variable |\x0;unzip5~1pxGHH~5042| (0) #f (srfi :1 lists)) (count variable |\x0;count~1pxGHH~5053| (0) #f (srfi :1 lists)) (map variable |\x0;map~1pxGHH~1463| (0) #f (rnrs base)) (for-each variable |\x0;for-each~1pxGHH~1464| (0) #f (rnrs base)) (fold variable |\x0;fold~1pxGHH~5056| (0) #f (srfi :1 lists)) (unfold variable |\x0;unfold~1pxGHH~5055| (0) #f (srfi :1 lists)) (pair-fold variable |\x0;pair-fold~1pxGHH~5058| (0) #f (srfi :1 lists)) (reduce variable |\x0;reduce~1pxGHH~5059| (0) #f (srfi :1 lists)) (fold-right variable |\x0;fold-right~1pxGHH~1537| (0) #f (rnrs lists)) (unfold-right variable |\x0;unfold-right~1pxGHH~5054| (0) #f (srfi :1 lists)) (pair-fold-right variable |\x0;pair-fold-right~1pxGHH~5057| (0) #f (srfi :1 lists)) (reduce-right variable |\x0;reduce-right~1pxGHH~5060| (0) #f (srfi :1 lists)) (append-map variable |\x0;append-map~1pxGHH~5061| (0) #f (srfi :1 lists)) (append-map! variable |\x0;append-map!~1pxGHH~5062| (0) #f (srfi :1 lists)) (map! variable |\x0;map!~1pxGHH~5065| (0) #f (srfi :1 lists)) (pair-for-each variable |\x0;pair-for-each~1pxGHH~5064| (0) #f (srfi :1 lists)) (filter-map variable |\x0;filter-map~1pxGHH~5066| (0) #f (srfi :1 lists)) (map-in-order variable |\x0;map-in-order~1pxGHH~5067| (0) #f (srfi :1 lists)) (filter variable filter (0) #f (larceny PRIMITIVES)) (partition variable partition (0) #f (larceny PRIMITIVES)) (remove variable |\x0;remove~1pxGHH~5070| (0) #f (srfi :1 lists)) (filter! variable |\x0;filter!~1pxGHH~5068| (0) #f (srfi :1 lists)) (partition! variable |\x0;partition!~1pxGHH~5069| (0) #f (srfi :1 lists)) (remove! variable |\x0;remove!~1pxGHH~5071| (0) #f (srfi :1 lists)) (member variable |\x0;member~1pxGHH~1539| (0) #f (rnrs lists)) (memq variable memq (0) #f (larceny PRIMITIVES)) (memv variable memv (0) #f (larceny PRIMITIVES)) (find variable find (0) #f (larceny PRIMITIVES)) (find-tail variable |\x0;find-tail~1pxGHH~5080| (0) #f (srfi :1 lists)) (any variable |\x0;any~1pxGHH~5088| (0) #f (srfi :1 lists)) (every variable |\x0;every~1pxGHH~5089| (0) #f (srfi :1 lists)) (list-index variable |\x0;list-index~1pxGHH~5090| (0) #f (srfi :1 lists)) (take-while variable |\x0;take-while~1pxGHH~5081| (0) #f (srfi :1 lists)) (drop-while variable |\x0;drop-while~1pxGHH~5082| (0) #f (srfi :1 lists)) (take-while! variable |\x0;take-while!~1pxGHH~5083| (0) #f (srfi :1 lists)) (span variable |\x0;span~1pxGHH~5084| (0) #f (srfi :1 lists)) (break variable |\x0;break~1pxGHH~5086| (0) #f (srfi :1 lists)) (span! variable |\x0;span!~1pxGHH~5085| (0) #f (srfi :1 lists)) (break! variable |\x0;break!~1pxGHH~5087| (0) #f (srfi :1 lists)) (delete variable |\x0;delete~1pxGHH~5072| (0) #f (srfi :1 lists)) (delete-duplicates variable |\x0;delete-duplicates~1pxGHH~5074| (0) #f (srfi :1 lists)) (delete! variable |\x0;delete!~1pxGHH~5073| (0) #f (srfi :1 lists)) (delete-duplicates! variable |\x0;delete-duplicates!~1pxGHH~5075| (0) #f (srfi :1 lists)) (assoc variable |\x0;assoc~1pxGHH~1540| (0) #f (rnrs lists)) (assq variable assq (0) #f (larceny PRIMITIVES)) (assv variable assv (0) #f (larceny PRIMITIVES)) (alist-cons variable |\x0;alist-cons~1pxGHH~5076| (0) #f (srfi :1 lists)) (alist-copy variable |\x0;alist-copy~1pxGHH~5077| (0) #f (srfi :1 lists)) (alist-delete variable |\x0;alist-delete~1pxGHH~5078| (0) #f (srfi :1 lists)) (alist-delete! variable |\x0;alist-delete!~1pxGHH~5079| (0) #f (srfi :1 lists)) (lset<= variable |\x0;lset<=~1pxGHH~5093| (0) #f (srfi :1 lists)) (lset= variable |\x0;lset=~1pxGHH~5094| (0) #f (srfi :1 lists)) (lset-adjoin variable |\x0;lset-adjoin~1pxGHH~5095| (0) #f (srfi :1 lists)) (lset-union variable |\x0;lset-union~1pxGHH~5096| (0) #f (srfi :1 lists)) (lset-union! variable |\x0;lset-union!~1pxGHH~5097| (0) #f (srfi :1 lists)) (lset-intersection variable |\x0;lset-intersection~1pxGHH~5098| (0) #f (srfi :1 lists)) (lset-intersection! variable |\x0;lset-intersection!~1pxGHH~5099| (0) #f (srfi :1 lists)) (lset-difference variable |\x0;lset-difference~1pxGHH~5100| (0) #f (srfi :1 lists)) (lset-difference! variable |\x0;lset-difference!~1pxGHH~5101| (0) #f (srfi :1 lists)) (lset-xor variable |\x0;lset-xor~1pxGHH~5102| (0) #f (srfi :1 lists)) (lset-xor! variable |\x0;lset-xor!~1pxGHH~5103| (0) #f (srfi :1 lists)) (lset-diff+intersection variable |\x0;lset-diff+intersection~1pxGHH~5104| (0) #f (srfi :1 lists)) (lset-diff+intersection! variable |\x0;lset-diff+intersection!~1pxGHH~5105| (0) #f (srfi :1 lists)) (set-car! variable set-car! (0) #f (larceny PRIMITIVES)) (set-cdr! variable set-cdr! (0) #f (larceny PRIMITIVES))) (((srfi 1 lists) 0)) (|\x0;build~1pxGHH~7189|) |\x0;build~1pxGHH~7197| #ex:make-library #ex:register-library! #values)
 #f)
))
