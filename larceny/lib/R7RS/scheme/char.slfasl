#!fasl
(define .petit-bootstrap-id-c22dbd1b7d85c7a648dfcc09b6e65aa3 (.petit-shared-object "/home/henchman/larcenytest/larceny-petit-Nightly-2017-08-06/larceny_src/lib/R7RS/scheme/char.slfasl.so"))

((.petit-patch-procedure .petit-bootstrap-id-c22dbd1b7d85c7a648dfcc09b6e65aa3 0
'#(#f #( #f #ex:unspecified #|\x0;*unicode-zero-characters*~1pxGHH~8990| #|\x0;digit-value~1pxGHH~8989| #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()))
 #f #( #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ()) #values)
 #f #( ((0 . #(#f #f 0 src/Build/compile-standard-libraries.sch #(20 1 0) ())) (1581 . #(|\x0;loop~1pxGHH~9001| #f 2 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;sv~1pxGHH~9008| |\x0;zeros~1pxGHH~9009|))) (2407 . #(|\x0;digit-value~1pxGHH~8989| #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;c~1pxGHH~8993|)))) #ex:undefined #|\x0;*unicode-zero-characters*~1pxGHH~8990| #|\x0;digit-value~1pxGHH~8989| #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (t0f0010)) #|\x0;digit-value~1pxGHH~8989| #values)
 #char->integer (#\0 #\x660 #\x6f0 #\x7c0 #\x966 #\x9e6 #\xa66 #\xae6 #\xb66 #\xbe6 #\xc66 #\xce6 #\xd66 #\xde6 #\xe50 #\xed0 #\xf20 #\x1040 #\x1090 #\x17e0 #\x1810 #\x1946 #\x19d0 #\x1a80 #\x1a90 #\x1b50 #\x1bb0 #\x1c40 #\x1c50 #\xa620 #\xa8d0 #\xa900 #\xa9d0 #\xa9f0 #\xaa50 #\xabf0 #\xff10 #\x104a0 #\x11066 #\x110f0 #\x11136 #\x111d0 #\x112f0 #\x114d0 #\x11650 #\x116c0 #\x118e0 #\x16a60 #\x16b50 #\x1d7ce #\x1d7d8 #\x1d7e2 #\x1d7ec #\x1d7f6) #|\x0;map~1pxGHH~1463| #reverse #values #f #( #(#f #f 1 src/Build/compile-standard-libraries.sch #(20 1 0) (|\x0;c~1pxGHH~8993|)))
 #apply #char-numeric?)
 (scheme char) ((char-alphabetic? variable char-alphabetic? (0) #f (larceny PRIMITIVES)) (char-ci<=? variable char-ci<=? (0) #f (larceny PRIMITIVES)) (char-ci<? variable char-ci<? (0) #f (larceny PRIMITIVES)) (char-ci=? variable char-ci=? (0) #f (larceny PRIMITIVES)) (char-ci>=? variable char-ci>=? (0) #f (larceny PRIMITIVES)) (char-ci>? variable char-ci>? (0) #f (larceny PRIMITIVES)) (char-downcase variable char-downcase (0) #f (larceny PRIMITIVES)) (char-foldcase variable char-foldcase (0) #f (larceny PRIMITIVES)) (char-lower-case? variable char-lower-case? (0) #f (larceny PRIMITIVES)) (char-numeric? variable char-numeric? (0) #f (larceny PRIMITIVES)) (char-upcase variable char-upcase (0) #f (larceny PRIMITIVES)) (char-upper-case? variable char-upper-case? (0) #f (larceny PRIMITIVES)) (char-whitespace? variable char-whitespace? (0) #f (larceny PRIMITIVES)) (digit-value variable |\x0;digit-value~1pxGHH~8989| (0) #f (scheme char)) (string-ci<=? variable string-ci<=? (0) #f (larceny PRIMITIVES)) (string-ci<? variable string-ci<? (0) #f (larceny PRIMITIVES)) (string-ci=? variable string-ci=? (0) #f (larceny PRIMITIVES)) (string-ci>=? variable string-ci>=? (0) #f (larceny PRIMITIVES)) (string-ci>? variable string-ci>? (0) #f (larceny PRIMITIVES)) (string-downcase variable string-downcase (0) #f (larceny PRIMITIVES)) (string-foldcase variable string-foldcase (0) #f (larceny PRIMITIVES)) (string-upcase variable string-upcase (0) #f (larceny PRIMITIVES))) (((rnrs base) 0)) (|\x0;build~1pxGHH~1533|) |\x0;build~1pxGHH~9016| #ex:make-library #ex:register-library! #values)
 #f)
))
